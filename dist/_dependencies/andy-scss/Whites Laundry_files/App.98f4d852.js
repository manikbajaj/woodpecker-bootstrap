// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function(modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === "function" && parcelRequire;
  var nodeRequire = typeof require === "function" && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof parcelRequire === "function" && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === "string") {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = "MODULE_NOT_FOUND";
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {}
    ];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === "function" && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})(
  {
    "../node_modules/object-assign/index.js": [
      function(require, module, exports) {
        /*
object-assign
(c) Sindre Sorhus
@license MIT
*/
        "use strict";
        /* eslint-disable no-unused-vars */

        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
          if (val === null || val === undefined) {
            throw new TypeError(
              "Object.assign cannot be called with null or undefined"
            );
          }

          return Object(val);
        }

        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            } // Detect buggy property enumeration order in older V8 versions.
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118

            var test1 = new String("abc"); // eslint-disable-line no-new-wrappers

            test1[5] = "de";

            if (Object.getOwnPropertyNames(test1)[0] === "5") {
              return false;
            } // https://bugs.chromium.org/p/v8/issues/detail?id=3056

            var test2 = {};

            for (var i = 0; i < 10; i++) {
              test2["_" + String.fromCharCode(i)] = i;
            }

            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
              return test2[n];
            });

            if (order2.join("") !== "0123456789") {
              return false;
            } // https://bugs.chromium.org/p/v8/issues/detail?id=3056

            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function(letter) {
              test3[letter] = letter;
            });

            if (
              Object.keys(Object.assign({}, test3)).join("") !==
              "abcdefghijklmnopqrst"
            ) {
              return false;
            }

            return true;
          } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
          }
        }

        module.exports = shouldUseNative()
          ? Object.assign
          : function(target, source) {
              var from;
              var to = toObject(target);
              var symbols;

              for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);

                for (var key in from) {
                  if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                  }
                }

                if (getOwnPropertySymbols) {
                  symbols = getOwnPropertySymbols(from);

                  for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                      to[symbols[i]] = from[symbols[i]];
                    }
                  }
                }
              }

              return to;
            };
      },
      {}
    ],
    "../node_modules/prop-types/lib/ReactPropTypesSecret.js": [
      function(require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        "use strict";

        var ReactPropTypesSecret =
          "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";

        module.exports = ReactPropTypesSecret;
      },
      {}
    ],
    "../node_modules/prop-types/checkPropTypes.js": [
      function(require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        "use strict";

        var printWarning = function() {};

        if ("development" !== "production") {
          var ReactPropTypesSecret = require("./lib/ReactPropTypesSecret");

          var loggedTypeFailures = {};

          printWarning = function(text) {
            var message = "Warning: " + text;

            if (typeof console !== "undefined") {
              console.error(message);
            }

            try {
              // --- Welcome to debugging React ---
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              throw new Error(message);
            } catch (x) {}
          };
        }
        /**
         * Assert that the values match with the type specs.
         * Error messages are memorized and will only be shown once.
         *
         * @param {object} typeSpecs Map of name to a ReactPropType
         * @param {object} values Runtime values that need to be type-checked
         * @param {string} location e.g. "prop", "context", "child context"
         * @param {string} componentName Name of the component for error messages.
         * @param {?Function} getStack Returns the component stack.
         * @private
         */

        function checkPropTypes(
          typeSpecs,
          values,
          location,
          componentName,
          getStack
        ) {
          if ("development" !== "production") {
            for (var typeSpecName in typeSpecs) {
              if (typeSpecs.hasOwnProperty(typeSpecName)) {
                var error; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.

                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error(
                      (componentName || "React class") +
                        ": " +
                        location +
                        " type `" +
                        typeSpecName +
                        "` is invalid; " +
                        "it must be a function, usually from the `prop-types` package, but received `" +
                        typeof typeSpecs[typeSpecName] +
                        "`."
                    );
                    err.name = "Invariant Violation";
                    throw err;
                  }

                  error = typeSpecs[typeSpecName](
                    values,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    ReactPropTypesSecret
                  );
                } catch (ex) {
                  error = ex;
                }

                if (error && !(error instanceof Error)) {
                  printWarning(
                    (componentName || "React class") +
                      ": type specification of " +
                      location +
                      " `" +
                      typeSpecName +
                      "` is invalid; the type checker " +
                      "function must return `null` or an `Error` but returned a " +
                      typeof error +
                      ". " +
                      "You may have forgotten to pass an argument to the type checker " +
                      "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " +
                      "shape all require an argument)."
                  );
                }

                if (
                  error instanceof Error &&
                  !(error.message in loggedTypeFailures)
                ) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error.message] = true;
                  var stack = getStack ? getStack() : "";
                  printWarning(
                    "Failed " +
                      location +
                      " type: " +
                      error.message +
                      (stack != null ? stack : "")
                  );
                }
              }
            }
          }
        }

        module.exports = checkPropTypes;
      },
      {
        "./lib/ReactPropTypesSecret":
          "../node_modules/prop-types/lib/ReactPropTypesSecret.js"
      }
    ],
    "../node_modules/react/cjs/react.development.js": [
      function(require, module, exports) {
        /** @license React v16.6.1
         * react.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        "use strict";

        if ("development" !== "production") {
          (function() {
            "use strict";

            var _assign = require("object-assign");

            var checkPropTypes = require("prop-types/checkPropTypes"); // TODO: this is special because it gets imported during build.

            var ReactVersion = "16.6.3"; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.

            var hasSymbol = typeof Symbol === "function" && Symbol.for;
            var REACT_ELEMENT_TYPE = hasSymbol
              ? Symbol.for("react.element")
              : 0xeac7;
            var REACT_PORTAL_TYPE = hasSymbol
              ? Symbol.for("react.portal")
              : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol
              ? Symbol.for("react.fragment")
              : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol
              ? Symbol.for("react.strict_mode")
              : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol
              ? Symbol.for("react.profiler")
              : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol
              ? Symbol.for("react.provider")
              : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol
              ? Symbol.for("react.context")
              : 0xeace;
            var REACT_CONCURRENT_MODE_TYPE = hasSymbol
              ? Symbol.for("react.concurrent_mode")
              : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol
              ? Symbol.for("react.forward_ref")
              : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol
              ? Symbol.for("react.suspense")
              : 0xead1;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
            var MAYBE_ITERATOR_SYMBOL =
              typeof Symbol === "function" && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = "@@iterator";

            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== "object") {
                return null;
              }

              var maybeIterator =
                (MAYBE_ITERATOR_SYMBOL &&
                  maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                maybeIterable[FAUX_ITERATOR_SYMBOL];

              if (typeof maybeIterator === "function") {
                return maybeIterator;
              }

              return null;
            }

            var enableHooks = false; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
            // In some cases, StrictMode should also double-render lifecycles.
            // This can be confusing for tests though,
            // And it can be bad for performance in production.
            // This feature flag can be used to control the behavior:
            // To preserve the "Pause on caught exceptions" behavior of the debugger, we
            // replay the begin phase of a failed component inside invokeGuardedCallback.
            // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
            // Gather advanced timing metrics for Profiler subtrees.
            // Trace which interactions trigger each commit.
            // Only used in www builds.
            // Only used in www builds.
            // React Fire: prevent the value and checked attributes from syncing
            // with their related DOM properties
            // These APIs will no longer be "unstable" in the upcoming 16.7 release,
            // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

            var enableStableConcurrentModeAPIs = false;
            /**
             * Use invariant() to assert state which your program assumes to be true.
             *
             * Provide sprintf-style format (only %s is supported) and arguments
             * to provide information about what broke and what you were
             * expecting.
             *
             * The invariant message will be stripped in production, but the invariant
             * will remain to ensure logic does not differ in production.
             */

            var validateFormat = function() {};

            {
              validateFormat = function(format) {
                if (format === undefined) {
                  throw new Error(
                    "invariant requires an error message argument"
                  );
                }
              };
            }

            function invariant(condition, format, a, b, c, d, e, f) {
              validateFormat(format);

              if (!condition) {
                var error = void 0;

                if (format === undefined) {
                  error = new Error(
                    "Minified exception occurred; use the non-minified dev environment " +
                      "for the full error message and additional helpful warnings."
                  );
                } else {
                  var args = [a, b, c, d, e, f];
                  var argIndex = 0;
                  error = new Error(
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    })
                  );
                  error.name = "Invariant Violation";
                }

                error.framesToPop = 1; // we don't care about invariant's own frame

                throw error;
              }
            } // Relying on the `invariant()` implementation lets us
            // preserve the format and params in the www builds.

            /**
             * Forked from fbjs/warning:
             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
             *
             * Only change is we use console.warn instead of console.error,
             * and do nothing when 'console' is not supported.
             * This really simplifies the code.
             * ---
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var lowPriorityWarning = function() {};

            {
              var printWarning = function(format) {
                for (
                  var _len = arguments.length,
                    args = Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }

                var argIndex = 0;
                var message =
                  "Warning: " +
                  format.replace(/%s/g, function() {
                    return args[argIndex++];
                  });

                if (typeof console !== "undefined") {
                  console.warn(message);
                }

                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };

              lowPriorityWarning = function(condition, format) {
                if (format === undefined) {
                  throw new Error(
                    "`lowPriorityWarning(condition, format, ...args)` requires a warning " +
                      "message argument"
                  );
                }

                if (!condition) {
                  for (
                    var _len2 = arguments.length,
                      args = Array(_len2 > 2 ? _len2 - 2 : 0),
                      _key2 = 2;
                    _key2 < _len2;
                    _key2++
                  ) {
                    args[_key2 - 2] = arguments[_key2];
                  }

                  printWarning.apply(undefined, [format].concat(args));
                }
              };
            }
            var lowPriorityWarning$1 = lowPriorityWarning;
            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warningWithoutStack = function() {};

            {
              warningWithoutStack = function(condition, format) {
                for (
                  var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                if (format === undefined) {
                  throw new Error(
                    "`warningWithoutStack(condition, format, ...args)` requires a warning " +
                      "message argument"
                  );
                }

                if (args.length > 8) {
                  // Check before the condition to catch violations early.
                  throw new Error(
                    "warningWithoutStack() currently supports at most 8 arguments."
                  );
                }

                if (condition) {
                  return;
                }

                if (typeof console !== "undefined") {
                  var argsWithFormat = args.map(function(item) {
                    return "" + item;
                  });
                  argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
                  // breaks IE9: https://github.com/facebook/react/issues/13610

                  Function.prototype.apply.call(
                    console.error,
                    console,
                    argsWithFormat
                  );
                }

                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  var argIndex = 0;
                  var message =
                    "Warning: " +
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    });
                  throw new Error(message);
                } catch (x) {}
              };
            }
            var warningWithoutStack$1 = warningWithoutStack;
            var didWarnStateUpdateForUnmountedComponent = {};

            function warnNoop(publicInstance, callerName) {
              {
                var _constructor = publicInstance.constructor;
                var componentName =
                  (_constructor &&
                    (_constructor.displayName || _constructor.name)) ||
                  "ReactClass";
                var warningKey = componentName + "." + callerName;

                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                  return;
                }

                warningWithoutStack$1(
                  false,
                  "Can't call %s on a component that is not yet mounted. " +
                    "This is a no-op, but it might indicate a bug in your application. " +
                    "Instead, assign to `this.state` directly or define a `state = {};` " +
                    "class property with the desired state in the %s component.",
                  callerName,
                  componentName
                );
                didWarnStateUpdateForUnmountedComponent[warningKey] = true;
              }
            }
            /**
             * This is the abstract API for an update queue.
             */

            var ReactNoopUpdateQueue = {
              /**
               * Checks whether or not this composite component is mounted.
               * @param {ReactClass} publicInstance The instance we want to test.
               * @return {boolean} True if mounted, false otherwise.
               * @protected
               * @final
               */
              isMounted: function(publicInstance) {
                return false;
              },

              /**
               * Forces an update. This should only be invoked when it is known with
               * certainty that we are **not** in a DOM transaction.
               *
               * You may want to call this when you know that some deeper aspect of the
               * component's state has changed but `setState` was not called.
               *
               * This will not invoke `shouldComponentUpdate`, but it will invoke
               * `componentWillUpdate` and `componentDidUpdate`.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {?function} callback Called after component is updated.
               * @param {?string} callerName name of the calling function in the public API.
               * @internal
               */
              enqueueForceUpdate: function(
                publicInstance,
                callback,
                callerName
              ) {
                warnNoop(publicInstance, "forceUpdate");
              },

              /**
               * Replaces all of the state. Always use this or `setState` to mutate state.
               * You should treat `this.state` as immutable.
               *
               * There is no guarantee that `this.state` will be immediately updated, so
               * accessing `this.state` after calling this method may return the old value.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {object} completeState Next state.
               * @param {?function} callback Called after component is updated.
               * @param {?string} callerName name of the calling function in the public API.
               * @internal
               */
              enqueueReplaceState: function(
                publicInstance,
                completeState,
                callback,
                callerName
              ) {
                warnNoop(publicInstance, "replaceState");
              },

              /**
               * Sets a subset of the state. This only exists because _pendingState is
               * internal. This provides a merging strategy that is not available to deep
               * properties which is confusing. TODO: Expose pendingState or don't use it
               * during the merge.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {object} partialState Next partial state to be merged with state.
               * @param {?function} callback Called after component is updated.
               * @param {?string} Name of the calling function in the public API.
               * @internal
               */
              enqueueSetState: function(
                publicInstance,
                partialState,
                callback,
                callerName
              ) {
                warnNoop(publicInstance, "setState");
              }
            };
            var emptyObject = {};
            {
              Object.freeze(emptyObject);
            }
            /**
             * Base class helpers for the updating state of a component.
             */

            function Component(props, context, updater) {
              this.props = props;
              this.context = context; // If a component has string refs, we will assign a different object later.

              this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
              // renderer.

              this.updater = updater || ReactNoopUpdateQueue;
            }

            Component.prototype.isReactComponent = {};
            /**
             * Sets a subset of the state. Always use this to mutate
             * state. You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * There is no guarantee that calls to `setState` will run synchronously,
             * as they may eventually be batched together.  You can provide an optional
             * callback that will be executed when the call to setState is actually
             * completed.
             *
             * When a function is provided to setState, it will be called at some point in
             * the future (not synchronously). It will be called with the up to date
             * component arguments (state, props, context). These values can be different
             * from this.* because your function may be called after receiveProps but before
             * shouldComponentUpdate, and this new state, props, and context will not yet be
             * assigned to this.
             *
             * @param {object|function} partialState Next partial state or function to
             *        produce next partial state to be merged with current state.
             * @param {?function} callback Called after state is updated.
             * @final
             * @protected
             */

            Component.prototype.setState = function(partialState, callback) {
              !(
                typeof partialState === "object" ||
                typeof partialState === "function" ||
                partialState == null
              )
                ? invariant(
                    false,
                    "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
                  )
                : void 0;
              this.updater.enqueueSetState(
                this,
                partialState,
                callback,
                "setState"
              );
            };
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {?function} callback Called after update is complete.
             * @final
             * @protected
             */

            Component.prototype.forceUpdate = function(callback) {
              this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
            };
            /**
             * Deprecated APIs. These APIs used to exist on classic React classes but since
             * we would like to deprecate them, we're not going to move them over to this
             * modern base class. Instead, we define a getter that warns if it's accessed.
             */

            {
              var deprecatedAPIs = {
                isMounted: [
                  "isMounted",
                  "Instead, make sure to clean up subscriptions and pending requests in " +
                    "componentWillUnmount to prevent memory leaks."
                ],
                replaceState: [
                  "replaceState",
                  "Refactor your code to use setState instead (see " +
                    "https://github.com/facebook/react/issues/3236)."
                ]
              };

              var defineDeprecationWarning = function(methodName, info) {
                Object.defineProperty(Component.prototype, methodName, {
                  get: function() {
                    lowPriorityWarning$1(
                      false,
                      "%s(...) is deprecated in plain JavaScript React classes. %s",
                      info[0],
                      info[1]
                    );
                    return undefined;
                  }
                });
              };

              for (var fnName in deprecatedAPIs) {
                if (deprecatedAPIs.hasOwnProperty(fnName)) {
                  defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                }
              }
            }

            function ComponentDummy() {}

            ComponentDummy.prototype = Component.prototype;
            /**
             * Convenience component with default shallow equality check for sCU.
             */

            function PureComponent(props, context, updater) {
              this.props = props;
              this.context = context; // If a component has string refs, we will assign a different object later.

              this.refs = emptyObject;
              this.updater = updater || ReactNoopUpdateQueue;
            }

            var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
            pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

            _assign(pureComponentPrototype, Component.prototype);

            pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

            function createRef() {
              var refObject = {
                current: null
              };
              {
                Object.seal(refObject);
              }
              return refObject;
            }
            /**
             * Keeps track of the current owner.
             *
             * The current owner is the component who should own any components that are
             * currently being constructed.
             */

            var ReactCurrentOwner = {
              /**
               * @internal
               * @type {ReactComponent}
               */
              current: null,
              currentDispatcher: null
            };
            var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

            var describeComponentFrame = function(name, source, ownerName) {
              var sourceInfo = "";

              if (source) {
                var path = source.fileName;
                var fileName = path.replace(BEFORE_SLASH_RE, "");
                {
                  // In DEV, include code for a common special case:
                  // prefer "folder/index.js" instead of just "index.js".
                  if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);

                    if (match) {
                      var pathBeforeSlash = match[1];

                      if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(
                          BEFORE_SLASH_RE,
                          ""
                        );
                        fileName = folderName + "/" + fileName;
                      }
                    }
                  }
                }
                sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
              } else if (ownerName) {
                sourceInfo = " (created by " + ownerName + ")";
              }

              return "\n    in " + (name || "Unknown") + sourceInfo;
            };

            var Resolved = 1;

            function refineResolvedLazyComponent(lazyComponent) {
              return lazyComponent._status === Resolved
                ? lazyComponent._result
                : null;
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || "";
              return (
                outerType.displayName ||
                (functionName !== ""
                  ? wrapperName + "(" + functionName + ")"
                  : wrapperName)
              );
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }

              {
                if (typeof type.tag === "number") {
                  warningWithoutStack$1(
                    false,
                    "Received an unexpected object in getComponentName(). " +
                      "This is likely a bug in React. Please file an issue."
                  );
                }
              }

              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }

              if (typeof type === "string") {
                return type;
              }

              switch (type) {
                case REACT_CONCURRENT_MODE_TYPE:
                  return "ConcurrentMode";

                case REACT_FRAGMENT_TYPE:
                  return "Fragment";

                case REACT_PORTAL_TYPE:
                  return "Portal";

                case REACT_PROFILER_TYPE:
                  return "Profiler";

                case REACT_STRICT_MODE_TYPE:
                  return "StrictMode";

                case REACT_SUSPENSE_TYPE:
                  return "Suspense";
              }

              if (typeof type === "object") {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    return "Context.Consumer";

                  case REACT_PROVIDER_TYPE:
                    return "Context.Provider";

                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, "ForwardRef");

                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);

                  case REACT_LAZY_TYPE: {
                    var thenable = type;
                    var resolvedThenable = refineResolvedLazyComponent(
                      thenable
                    );

                    if (resolvedThenable) {
                      return getComponentName(resolvedThenable);
                    }
                  }
                }
              }

              return null;
            }

            var ReactDebugCurrentFrame = {};
            var currentlyValidatingElement = null;

            function setCurrentlyValidatingElement(element) {
              {
                currentlyValidatingElement = element;
              }
            }

            {
              // Stack implementation injected by the current renderer.
              ReactDebugCurrentFrame.getCurrentStack = null;

              ReactDebugCurrentFrame.getStackAddendum = function() {
                var stack = ""; // Add an extra top frame while an element is being validated

                if (currentlyValidatingElement) {
                  var name = getComponentName(currentlyValidatingElement.type);
                  var owner = currentlyValidatingElement._owner;
                  stack += describeComponentFrame(
                    name,
                    currentlyValidatingElement._source,
                    owner && getComponentName(owner.type)
                  );
                } // Delegate to the injected renderer-specific implementation

                var impl = ReactDebugCurrentFrame.getCurrentStack;

                if (impl) {
                  stack += impl() || "";
                }

                return stack;
              };
            }
            var ReactSharedInternals = {
              ReactCurrentOwner: ReactCurrentOwner,
              // Used by renderers to avoid bundling object-assign twice in UMD bundles:
              assign: _assign
            };
            {
              _assign(ReactSharedInternals, {
                // These should not be included in production.
                ReactDebugCurrentFrame: ReactDebugCurrentFrame,
                // Shim for React DOM 16.0.0 which still destructured (but not used) this.
                // TODO: remove in React 17.0.
                ReactComponentTreeHook: {}
              });
            }
            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warning = warningWithoutStack$1;
            {
              warning = function(condition, format) {
                if (condition) {
                  return;
                }

                var ReactDebugCurrentFrame =
                  ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

                for (
                  var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                warningWithoutStack$1.apply(
                  undefined,
                  [false, format + "%s"].concat(args, [stack])
                );
              };
            }
            var warning$1 = warning;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var RESERVED_PROPS = {
              key: true,
              ref: true,
              __self: true,
              __source: true
            };
            var specialPropKeyWarningShown = void 0;
            var specialPropRefWarningShown = void 0;

            function hasValidRef(config) {
              {
                if (hasOwnProperty.call(config, "ref")) {
                  var getter = Object.getOwnPropertyDescriptor(config, "ref")
                    .get;

                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }
              return config.ref !== undefined;
            }

            function hasValidKey(config) {
              {
                if (hasOwnProperty.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(config, "key")
                    .get;

                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }
              return config.key !== undefined;
            }

            function defineKeyPropWarningGetter(props, displayName) {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  warningWithoutStack$1(
                    false,
                    "%s: `key` is not a prop. Trying to access it will result " +
                      "in `undefined` being returned. If you need to access the same " +
                      "value within the child component, you should pass it as a different " +
                      "prop. (https://fb.me/react-special-props)",
                    displayName
                  );
                }
              };

              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }

            function defineRefPropWarningGetter(props, displayName) {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  warningWithoutStack$1(
                    false,
                    "%s: `ref` is not a prop. Trying to access it will result " +
                      "in `undefined` being returned. If you need to access the same " +
                      "value within the child component, you should pass it as a different " +
                      "prop. (https://fb.me/react-special-props)",
                    displayName
                  );
                }
              };

              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
            /**
             * Factory method to create a new React element. This no longer adheres to
             * the class pattern, so do not use new to call it. Also, no instanceof check
             * will work. Instead test $$typeof field against Symbol.for('react.element') to check
             * if something is a React Element.
             *
             * @param {*} type
             * @param {*} key
             * @param {string|object} ref
             * @param {*} self A *temporary* helper to detect places where `this` is
             * different from the `owner` when React.createElement is called, so that we
             * can warn. We want to get rid of owner and replace string `ref`s with arrow
             * functions, and as long as `this` and owner are the same, there will be no
             * change in behavior.
             * @param {*} source An annotation object (added by a transpiler or otherwise)
             * indicating filename, line number, and/or other information.
             * @param {*} owner
             * @param {*} props
             * @internal
             */

            var ReactElement = function(
              type,
              key,
              ref,
              self,
              source,
              owner,
              props
            ) {
              var element = {
                // This tag allows us to uniquely identify this as a React Element
                $$typeof: REACT_ELEMENT_TYPE,
                // Built-in properties that belong on the element
                type: type,
                key: key,
                ref: ref,
                props: props,
                // Record the component responsible for creating this element.
                _owner: owner
              };
              {
                // The validation flag is currently mutative. We put it on
                // an external backing store so that we can freeze the whole object.
                // This can be replaced with a WeakMap once they are implemented in
                // commonly used development environments.
                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
                // the validation flag non-enumerable (where possible, which should
                // include every environment we run tests in), so the test framework
                // ignores it.

                Object.defineProperty(element._store, "validated", {
                  configurable: false,
                  enumerable: false,
                  writable: true,
                  value: false
                }); // self and source are DEV only properties.

                Object.defineProperty(element, "_self", {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: self
                }); // Two elements created in two different places should be considered
                // equal for testing purposes and therefore we hide it from enumeration.

                Object.defineProperty(element, "_source", {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: source
                });

                if (Object.freeze) {
                  Object.freeze(element.props);
                  Object.freeze(element);
                }
              }
              return element;
            };
            /**
             * Create and return a new ReactElement of the given type.
             * See https://reactjs.org/docs/react-api.html#createelement
             */

            function createElement(type, config, children) {
              var propName = void 0; // Reserved names are extracted

              var props = {};
              var key = null;
              var ref = null;
              var self = null;
              var source = null;

              if (config != null) {
                if (hasValidRef(config)) {
                  ref = config.ref;
                }

                if (hasValidKey(config)) {
                  key = "" + config.key;
                }

                self = config.__self === undefined ? null : config.__self;
                source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

                for (propName in config) {
                  if (
                    hasOwnProperty.call(config, propName) &&
                    !RESERVED_PROPS.hasOwnProperty(propName)
                  ) {
                    props[propName] = config[propName];
                  }
                }
              } // Children can be more than one argument, and those are transferred onto
              // the newly allocated props object.

              var childrenLength = arguments.length - 2;

              if (childrenLength === 1) {
                props.children = children;
              } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);

                for (var i = 0; i < childrenLength; i++) {
                  childArray[i] = arguments[i + 2];
                }

                {
                  if (Object.freeze) {
                    Object.freeze(childArray);
                  }
                }
                props.children = childArray;
              } // Resolve default props

              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;

                for (propName in defaultProps) {
                  if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }

              {
                if (key || ref) {
                  var displayName =
                    typeof type === "function"
                      ? type.displayName || type.name || "Unknown"
                      : type;

                  if (key) {
                    defineKeyPropWarningGetter(props, displayName);
                  }

                  if (ref) {
                    defineRefPropWarningGetter(props, displayName);
                  }
                }
              }
              return ReactElement(
                type,
                key,
                ref,
                self,
                source,
                ReactCurrentOwner.current,
                props
              );
            }
            /**
             * Return a function that produces ReactElements of a given type.
             * See https://reactjs.org/docs/react-api.html#createfactory
             */

            function cloneAndReplaceKey(oldElement, newKey) {
              var newElement = ReactElement(
                oldElement.type,
                newKey,
                oldElement.ref,
                oldElement._self,
                oldElement._source,
                oldElement._owner,
                oldElement.props
              );
              return newElement;
            }
            /**
             * Clone and return a new ReactElement using element as the starting point.
             * See https://reactjs.org/docs/react-api.html#cloneelement
             */

            function cloneElement(element, config, children) {
              !!(element === null || element === undefined)
                ? invariant(
                    false,
                    "React.cloneElement(...): The argument must be a React element, but you passed %s.",
                    element
                  )
                : void 0;
              var propName = void 0; // Original props are copied

              var props = _assign({}, element.props); // Reserved names are extracted

              var key = element.key;
              var ref = element.ref; // Self is preserved since the owner is preserved.

              var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
              // transpiler, and the original source is probably a better indicator of the
              // true owner.

              var source = element._source; // Owner will be preserved, unless ref is overridden

              var owner = element._owner;

              if (config != null) {
                if (hasValidRef(config)) {
                  // Silently steal the ref from the parent.
                  ref = config.ref;
                  owner = ReactCurrentOwner.current;
                }

                if (hasValidKey(config)) {
                  key = "" + config.key;
                } // Remaining properties override existing props

                var defaultProps = void 0;

                if (element.type && element.type.defaultProps) {
                  defaultProps = element.type.defaultProps;
                }

                for (propName in config) {
                  if (
                    hasOwnProperty.call(config, propName) &&
                    !RESERVED_PROPS.hasOwnProperty(propName)
                  ) {
                    if (
                      config[propName] === undefined &&
                      defaultProps !== undefined
                    ) {
                      // Resolve default props
                      props[propName] = defaultProps[propName];
                    } else {
                      props[propName] = config[propName];
                    }
                  }
                }
              } // Children can be more than one argument, and those are transferred onto
              // the newly allocated props object.

              var childrenLength = arguments.length - 2;

              if (childrenLength === 1) {
                props.children = children;
              } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);

                for (var i = 0; i < childrenLength; i++) {
                  childArray[i] = arguments[i + 2];
                }

                props.children = childArray;
              }

              return ReactElement(
                element.type,
                key,
                ref,
                self,
                source,
                owner,
                props
              );
            }
            /**
             * Verifies the object is a ReactElement.
             * See https://reactjs.org/docs/react-api.html#isvalidelement
             * @param {?object} object
             * @return {boolean} True if `object` is a ReactElement.
             * @final
             */

            function isValidElement(object) {
              return (
                typeof object === "object" &&
                object !== null &&
                object.$$typeof === REACT_ELEMENT_TYPE
              );
            }

            var SEPARATOR = ".";
            var SUBSEPARATOR = ":";
            /**
             * Escape and wrap key so it is safe to use as a reactid
             *
             * @param {string} key to be escaped.
             * @return {string} the escaped key.
             */

            function escape(key) {
              var escapeRegex = /[=:]/g;
              var escaperLookup = {
                "=": "=0",
                ":": "=2"
              };
              var escapedString = ("" + key).replace(escapeRegex, function(
                match
              ) {
                return escaperLookup[match];
              });
              return "$" + escapedString;
            }
            /**
             * TODO: Test that a single child and an array with one item have the same key
             * pattern.
             */

            var didWarnAboutMaps = false;
            var userProvidedKeyEscapeRegex = /\/+/g;

            function escapeUserProvidedKey(text) {
              return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
            }

            var POOL_SIZE = 10;
            var traverseContextPool = [];

            function getPooledTraverseContext(
              mapResult,
              keyPrefix,
              mapFunction,
              mapContext
            ) {
              if (traverseContextPool.length) {
                var traverseContext = traverseContextPool.pop();
                traverseContext.result = mapResult;
                traverseContext.keyPrefix = keyPrefix;
                traverseContext.func = mapFunction;
                traverseContext.context = mapContext;
                traverseContext.count = 0;
                return traverseContext;
              } else {
                return {
                  result: mapResult,
                  keyPrefix: keyPrefix,
                  func: mapFunction,
                  context: mapContext,
                  count: 0
                };
              }
            }

            function releaseTraverseContext(traverseContext) {
              traverseContext.result = null;
              traverseContext.keyPrefix = null;
              traverseContext.func = null;
              traverseContext.context = null;
              traverseContext.count = 0;

              if (traverseContextPool.length < POOL_SIZE) {
                traverseContextPool.push(traverseContext);
              }
            }
            /**
             * @param {?*} children Children tree container.
             * @param {!string} nameSoFar Name of the key path so far.
             * @param {!function} callback Callback to invoke with each child found.
             * @param {?*} traverseContext Used to pass information throughout the traversal
             * process.
             * @return {!number} The number of children in this subtree.
             */

            function traverseAllChildrenImpl(
              children,
              nameSoFar,
              callback,
              traverseContext
            ) {
              var type = typeof children;

              if (type === "undefined" || type === "boolean") {
                // All of the above are perceived as null.
                children = null;
              }

              var invokeCallback = false;

              if (children === null) {
                invokeCallback = true;
              } else {
                switch (type) {
                  case "string":
                  case "number":
                    invokeCallback = true;
                    break;

                  case "object":
                    switch (children.$$typeof) {
                      case REACT_ELEMENT_TYPE:
                      case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                    }
                }
              }

              if (invokeCallback) {
                callback(
                  traverseContext,
                  children, // If it's the only child, treat the name as if it was wrapped in an array
                  // so that it's consistent if the number of children grows.
                  nameSoFar === ""
                    ? SEPARATOR + getComponentKey(children, 0)
                    : nameSoFar
                );
                return 1;
              }

              var child = void 0;
              var nextName = void 0;
              var subtreeCount = 0; // Count of children found in the current subtree.

              var nextNamePrefix =
                nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;

              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  child = children[i];
                  nextName = nextNamePrefix + getComponentKey(child, i);
                  subtreeCount += traverseAllChildrenImpl(
                    child,
                    nextName,
                    callback,
                    traverseContext
                  );
                }
              } else {
                var iteratorFn = getIteratorFn(children);

                if (typeof iteratorFn === "function") {
                  {
                    // Warn about using Maps as children
                    if (iteratorFn === children.entries) {
                      !didWarnAboutMaps
                        ? warning$1(
                            false,
                            "Using Maps as children is unsupported and will likely yield " +
                              "unexpected results. Convert it to a sequence/iterable of keyed " +
                              "ReactElements instead."
                          )
                        : void 0;
                      didWarnAboutMaps = true;
                    }
                  }
                  var iterator = iteratorFn.call(children);
                  var step = void 0;
                  var ii = 0;

                  while (!(step = iterator.next()).done) {
                    child = step.value;
                    nextName = nextNamePrefix + getComponentKey(child, ii++);
                    subtreeCount += traverseAllChildrenImpl(
                      child,
                      nextName,
                      callback,
                      traverseContext
                    );
                  }
                } else if (type === "object") {
                  var addendum = "";
                  {
                    addendum =
                      " If you meant to render a collection of children, use an array " +
                      "instead." +
                      ReactDebugCurrentFrame.getStackAddendum();
                  }
                  var childrenString = "" + children;
                  invariant(
                    false,
                    "Objects are not valid as a React child (found: %s).%s",
                    childrenString === "[object Object]"
                      ? "object with keys {" +
                          Object.keys(children).join(", ") +
                          "}"
                      : childrenString,
                    addendum
                  );
                }
              }

              return subtreeCount;
            }
            /**
             * Traverses children that are typically specified as `props.children`, but
             * might also be specified through attributes:
             *
             * - `traverseAllChildren(this.props.children, ...)`
             * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
             *
             * The `traverseContext` is an optional argument that is passed through the
             * entire traversal. It can be used to store accumulations or anything else that
             * the callback might find relevant.
             *
             * @param {?*} children Children tree object.
             * @param {!function} callback To invoke upon traversing each child.
             * @param {?*} traverseContext Context for traversal.
             * @return {!number} The number of children in this subtree.
             */

            function traverseAllChildren(children, callback, traverseContext) {
              if (children == null) {
                return 0;
              }

              return traverseAllChildrenImpl(
                children,
                "",
                callback,
                traverseContext
              );
            }
            /**
             * Generate a key string that identifies a component within a set.
             *
             * @param {*} component A component that could contain a manual key.
             * @param {number} index Index that is used if a manual key is not provided.
             * @return {string}
             */

            function getComponentKey(component, index) {
              // Do some typechecking here since we call this blindly. We want to ensure
              // that we don't block potential future ES APIs.
              if (
                typeof component === "object" &&
                component !== null &&
                component.key != null
              ) {
                // Explicit key
                return escape(component.key);
              } // Implicit key determined by the index in the set

              return index.toString(36);
            }

            function forEachSingleChild(bookKeeping, child, name) {
              var func = bookKeeping.func,
                context = bookKeeping.context;
              func.call(context, child, bookKeeping.count++);
            }
            /**
             * Iterates through children that are typically specified as `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
             *
             * The provided forEachFunc(child, index) will be called for each
             * leaf child.
             *
             * @param {?*} children Children tree container.
             * @param {function(*, int)} forEachFunc
             * @param {*} forEachContext Context for forEachContext.
             */

            function forEachChildren(children, forEachFunc, forEachContext) {
              if (children == null) {
                return children;
              }

              var traverseContext = getPooledTraverseContext(
                null,
                null,
                forEachFunc,
                forEachContext
              );
              traverseAllChildren(
                children,
                forEachSingleChild,
                traverseContext
              );
              releaseTraverseContext(traverseContext);
            }

            function mapSingleChildIntoContext(bookKeeping, child, childKey) {
              var result = bookKeeping.result,
                keyPrefix = bookKeeping.keyPrefix,
                func = bookKeeping.func,
                context = bookKeeping.context;
              var mappedChild = func.call(context, child, bookKeeping.count++);

              if (Array.isArray(mappedChild)) {
                mapIntoWithKeyPrefixInternal(
                  mappedChild,
                  result,
                  childKey,
                  function(c) {
                    return c;
                  }
                );
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(
                    mappedChild, // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    keyPrefix +
                      (mappedChild.key &&
                      (!child || child.key !== mappedChild.key)
                        ? escapeUserProvidedKey(mappedChild.key) + "/"
                        : "") +
                      childKey
                  );
                }

                result.push(mappedChild);
              }
            }

            function mapIntoWithKeyPrefixInternal(
              children,
              array,
              prefix,
              func,
              context
            ) {
              var escapedPrefix = "";

              if (prefix != null) {
                escapedPrefix = escapeUserProvidedKey(prefix) + "/";
              }

              var traverseContext = getPooledTraverseContext(
                array,
                escapedPrefix,
                func,
                context
              );
              traverseAllChildren(
                children,
                mapSingleChildIntoContext,
                traverseContext
              );
              releaseTraverseContext(traverseContext);
            }
            /**
             * Maps children that are typically specified as `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenmap
             *
             * The provided mapFunction(child, key, index) will be called for each
             * leaf child.
             *
             * @param {?*} children Children tree container.
             * @param {function(*, int)} func The map function.
             * @param {*} context Context for mapFunction.
             * @return {object} Object containing the ordered map of results.
             */

            function mapChildren(children, func, context) {
              if (children == null) {
                return children;
              }

              var result = [];
              mapIntoWithKeyPrefixInternal(
                children,
                result,
                null,
                func,
                context
              );
              return result;
            }
            /**
             * Count the number of children that are typically specified as
             * `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrencount
             *
             * @param {?*} children Children tree container.
             * @return {number} The number of children.
             */

            function countChildren(children) {
              return traverseAllChildren(
                children,
                function() {
                  return null;
                },
                null
              );
            }
            /**
             * Flatten a children object (typically specified as `props.children`) and
             * return an array with appropriately re-keyed children.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
             */

            function toArray(children) {
              var result = [];
              mapIntoWithKeyPrefixInternal(children, result, null, function(
                child
              ) {
                return child;
              });
              return result;
            }
            /**
             * Returns the first child in a collection of children and verifies that there
             * is only one child in the collection.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenonly
             *
             * The current implementation of this function assumes that a single child gets
             * passed without a wrapper, but the purpose of this helper function is to
             * abstract away the particular structure of children.
             *
             * @param {?object} children Child collection structure.
             * @return {ReactElement} The first and only `ReactElement` contained in the
             * structure.
             */

            function onlyChild(children) {
              !isValidElement(children)
                ? invariant(
                    false,
                    "React.Children.only expected to receive a single React element child."
                  )
                : void 0;
              return children;
            }

            function createContext(defaultValue, calculateChangedBits) {
              if (calculateChangedBits === undefined) {
                calculateChangedBits = null;
              } else {
                {
                  !(
                    calculateChangedBits === null ||
                    typeof calculateChangedBits === "function"
                  )
                    ? warningWithoutStack$1(
                        false,
                        "createContext: Expected the optional second argument to be a " +
                          "function. Instead received: %s",
                        calculateChangedBits
                      )
                    : void 0;
                }
              }

              var context = {
                $$typeof: REACT_CONTEXT_TYPE,
                _calculateChangedBits: calculateChangedBits,
                // As a workaround to support multiple concurrent renderers, we categorize
                // some renderers as primary and others as secondary. We only expect
                // there to be two concurrent renderers at most: React Native (primary) and
                // Fabric (secondary); React DOM (primary) and React ART (secondary).
                // Secondary renderers store their context values on separate fields.
                _currentValue: defaultValue,
                _currentValue2: defaultValue,
                // Used to track how many concurrent renderers this context currently
                // supports within in a single renderer. Such as parallel server rendering.
                _threadCount: 0,
                // These are circular
                Provider: null,
                Consumer: null
              };
              context.Provider = {
                $$typeof: REACT_PROVIDER_TYPE,
                _context: context
              };
              var hasWarnedAboutUsingNestedContextConsumers = false;
              var hasWarnedAboutUsingConsumerProvider = false;
              {
                // A separate object, but proxies back to the original context object for
                // backwards compatibility. It has a different $$typeof, so we can properly
                // warn for the incorrect usage of Context as a Consumer.
                var Consumer = {
                  $$typeof: REACT_CONTEXT_TYPE,
                  _context: context,
                  _calculateChangedBits: context._calculateChangedBits
                }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

                Object.defineProperties(Consumer, {
                  Provider: {
                    get: function() {
                      if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        warning$1(
                          false,
                          "Rendering <Context.Consumer.Provider> is not supported and will be removed in " +
                            "a future major release. Did you mean to render <Context.Provider> instead?"
                        );
                      }

                      return context.Provider;
                    },
                    set: function(_Provider) {
                      context.Provider = _Provider;
                    }
                  },
                  _currentValue: {
                    get: function() {
                      return context._currentValue;
                    },
                    set: function(_currentValue) {
                      context._currentValue = _currentValue;
                    }
                  },
                  _currentValue2: {
                    get: function() {
                      return context._currentValue2;
                    },
                    set: function(_currentValue2) {
                      context._currentValue2 = _currentValue2;
                    }
                  },
                  _threadCount: {
                    get: function() {
                      return context._threadCount;
                    },
                    set: function(_threadCount) {
                      context._threadCount = _threadCount;
                    }
                  },
                  Consumer: {
                    get: function() {
                      if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        warning$1(
                          false,
                          "Rendering <Context.Consumer.Consumer> is not supported and will be removed in " +
                            "a future major release. Did you mean to render <Context.Consumer> instead?"
                        );
                      }

                      return context.Consumer;
                    }
                  }
                }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

                context.Consumer = Consumer;
              }
              {
                context._currentRenderer = null;
                context._currentRenderer2 = null;
              }
              return context;
            }

            function lazy(ctor) {
              return {
                $$typeof: REACT_LAZY_TYPE,
                _ctor: ctor,
                // React uses these fields to store the result.
                _status: -1,
                _result: null
              };
            }

            function forwardRef(render) {
              {
                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                  warningWithoutStack$1(
                    false,
                    "forwardRef requires a render function but received a `memo` " +
                      "component. Instead of forwardRef(memo(...)), use " +
                      "memo(forwardRef(...))."
                  );
                } else if (typeof render !== "function") {
                  warningWithoutStack$1(
                    false,
                    "forwardRef requires a render function but was given %s.",
                    render === null ? "null" : typeof render
                  );
                } else {
                  !// Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
                  (render.length === 0 || render.length === 2)
                    ? warningWithoutStack$1(
                        false,
                        "forwardRef render functions accept exactly two parameters: props and ref. %s",
                        render.length === 1
                          ? "Did you forget to use the ref parameter?"
                          : "Any additional parameter will be undefined."
                      )
                    : void 0;
                }

                if (render != null) {
                  !(render.defaultProps == null && render.propTypes == null)
                    ? warningWithoutStack$1(
                        false,
                        "forwardRef render functions do not support propTypes or defaultProps. " +
                          "Did you accidentally pass a React component?"
                      )
                    : void 0;
                }
              }
              return {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: render
              };
            }

            function isValidElementType(type) {
              return (
                typeof type === "string" ||
                typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                type === REACT_FRAGMENT_TYPE ||
                type === REACT_CONCURRENT_MODE_TYPE ||
                type === REACT_PROFILER_TYPE ||
                type === REACT_STRICT_MODE_TYPE ||
                type === REACT_SUSPENSE_TYPE ||
                (typeof type === "object" &&
                  type !== null &&
                  (type.$$typeof === REACT_LAZY_TYPE ||
                    type.$$typeof === REACT_MEMO_TYPE ||
                    type.$$typeof === REACT_PROVIDER_TYPE ||
                    type.$$typeof === REACT_CONTEXT_TYPE ||
                    type.$$typeof === REACT_FORWARD_REF_TYPE))
              );
            }

            function memo(type, compare) {
              {
                if (!isValidElementType(type)) {
                  warningWithoutStack$1(
                    false,
                    "memo: The first argument must be a component. Instead " +
                      "received: %s",
                    type === null ? "null" : typeof type
                  );
                }
              }
              return {
                $$typeof: REACT_MEMO_TYPE,
                type: type,
                compare: compare === undefined ? null : compare
              };
            }

            function resolveDispatcher() {
              var dispatcher = ReactCurrentOwner.currentDispatcher;
              !(dispatcher !== null)
                ? invariant(
                    false,
                    "Hooks can only be called inside the body of a function component."
                  )
                : void 0;
              return dispatcher;
            }

            function useContext(Context, observedBits) {
              var dispatcher = resolveDispatcher();
              {
                // TODO: add a more generic warning for invalid values.
                if (Context._context !== undefined) {
                  var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
                  // and nobody should be using this in existing code.

                  if (realContext.Consumer === Context) {
                    warning$1(
                      false,
                      "Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be " +
                        "removed in a future major release. Did you mean to call useContext(Context) instead?"
                    );
                  } else if (realContext.Provider === Context) {
                    warning$1(
                      false,
                      "Calling useContext(Context.Provider) is not supported. " +
                        "Did you mean to call useContext(Context) instead?"
                    );
                  }
                }
              }
              return dispatcher.useContext(Context, observedBits);
            }

            function useState(initialState) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useState(initialState);
            }

            function useReducer(reducer, initialState, initialAction) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useReducer(
                reducer,
                initialState,
                initialAction
              );
            }

            function useRef(initialValue) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useRef(initialValue);
            }

            function useEffect(create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useEffect(create, inputs);
            }

            function useMutationEffect(create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useMutationEffect(create, inputs);
            }

            function useLayoutEffect(create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useLayoutEffect(create, inputs);
            }

            function useCallback(callback, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useCallback(callback, inputs);
            }

            function useMemo(create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useMemo(create, inputs);
            }

            function useImperativeMethods(ref, create, inputs) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useImperativeMethods(ref, create, inputs);
            }
            /**
             * ReactElementValidator provides a wrapper around a element factory
             * which validates the props passed to the element. This is intended to be
             * used only in DEV and could be replaced by a static type checker for languages
             * that support it.
             */

            var propTypesMisspellWarningShown = void 0;
            {
              propTypesMisspellWarningShown = false;
            }

            function getDeclarationErrorAddendum() {
              if (ReactCurrentOwner.current) {
                var name = getComponentName(ReactCurrentOwner.current.type);

                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }

              return "";
            }

            function getSourceInfoErrorAddendum(elementProps) {
              if (
                elementProps !== null &&
                elementProps !== undefined &&
                elementProps.__source !== undefined
              ) {
                var source = elementProps.__source;
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return (
                  "\n\nCheck your code at " + fileName + ":" + lineNumber + "."
                );
              }

              return "";
            }
            /**
             * Warn if there's no key explicitly set on dynamic arrays of children or
             * object keys are not valid. This allows us to keep track of children between
             * updates.
             */

            var ownerHasKeyUseWarning = {};

            function getCurrentComponentErrorInfo(parentType) {
              var info = getDeclarationErrorAddendum();

              if (!info) {
                var parentName =
                  typeof parentType === "string"
                    ? parentType
                    : parentType.displayName || parentType.name;

                if (parentName) {
                  info =
                    "\n\nCheck the top-level render call using <" +
                    parentName +
                    ">.";
                }
              }

              return info;
            }
            /**
             * Warn if the element doesn't have an explicit key assigned to it.
             * This element is in an array. The array could grow and shrink or be
             * reordered. All children that haven't already been validated are required to
             * have a "key" property assigned to it. Error statuses are cached so a warning
             * will only be shown once.
             *
             * @internal
             * @param {ReactElement} element Element that requires a key.
             * @param {*} parentType element's parent's type.
             */

            function validateExplicitKey(element, parentType) {
              if (
                !element._store ||
                element._store.validated ||
                element.key != null
              ) {
                return;
              }

              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(
                parentType
              );

              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }

              ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
              // property, it may be the creator of the child that's responsible for
              // assigning it a key.

              var childOwner = "";

              if (
                element &&
                element._owner &&
                element._owner !== ReactCurrentOwner.current
              ) {
                // Give the component that originally created this child.
                childOwner =
                  " It was passed a child from " +
                  getComponentName(element._owner.type) +
                  ".";
              }

              setCurrentlyValidatingElement(element);
              {
                warning$1(
                  false,
                  'Each child in an array or iterator should have a unique "key" prop.' +
                    "%s%s See https://fb.me/react-warning-keys for more information.",
                  currentComponentErrorInfo,
                  childOwner
                );
              }
              setCurrentlyValidatingElement(null);
            }
            /**
             * Ensure that every element either is passed in a static location, in an
             * array with an explicit keys property defined, or in an object literal
             * with valid key property.
             *
             * @internal
             * @param {ReactNode} node Statically passed child of any type.
             * @param {*} parentType node's parent's type.
             */

            function validateChildKeys(node, parentType) {
              if (typeof node !== "object") {
                return;
              }

              if (Array.isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];

                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                // This element was passed in a valid location.
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);

                if (typeof iteratorFn === "function") {
                  // Entry iterators used to provide implicit keys,
                  // but now we print a separate warning for them later.
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step = void 0;

                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
            /**
             * Given an element, validate that its props follow the propTypes definition,
             * provided by the type.
             *
             * @param {ReactElement} element
             */

            function validatePropTypes(element) {
              var type = element.type;
              var name = void 0,
                propTypes = void 0;

              if (typeof type === "function") {
                // Class or function component
                name = type.displayName || type.name;
                propTypes = type.propTypes;
              } else if (
                typeof type === "object" &&
                type !== null &&
                type.$$typeof === REACT_FORWARD_REF_TYPE
              ) {
                // ForwardRef
                var functionName =
                  type.render.displayName || type.render.name || "";
                name =
                  type.displayName ||
                  (functionName !== ""
                    ? "ForwardRef(" + functionName + ")"
                    : "ForwardRef");
                propTypes = type.propTypes;
              } else {
                return;
              }

              if (propTypes) {
                setCurrentlyValidatingElement(element);
                checkPropTypes(
                  propTypes,
                  element.props,
                  "prop",
                  name,
                  ReactDebugCurrentFrame.getStackAddendum
                );
                setCurrentlyValidatingElement(null);
              } else if (
                type.PropTypes !== undefined &&
                !propTypesMisspellWarningShown
              ) {
                propTypesMisspellWarningShown = true;
                warningWithoutStack$1(
                  false,
                  "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
                  name || "Unknown"
                );
              }

              if (typeof type.getDefaultProps === "function") {
                !type.getDefaultProps.isReactClassApproved
                  ? warningWithoutStack$1(
                      false,
                      "getDefaultProps is only used on classic React.createClass " +
                        "definitions. Use a static property named `defaultProps` instead."
                    )
                  : void 0;
              }
            }
            /**
             * Given a fragment, validate that it can only be provided with fragment props
             * @param {ReactElement} fragment
             */

            function validateFragmentProps(fragment) {
              setCurrentlyValidatingElement(fragment);
              var keys = Object.keys(fragment.props);

              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];

                if (key !== "children" && key !== "key") {
                  warning$1(
                    false,
                    "Invalid prop `%s` supplied to `React.Fragment`. " +
                      "React.Fragment can only have `key` and `children` props.",
                    key
                  );
                  break;
                }
              }

              if (fragment.ref !== null) {
                warning$1(
                  false,
                  "Invalid attribute `ref` supplied to `React.Fragment`."
                );
              }

              setCurrentlyValidatingElement(null);
            }

            function createElementWithValidation(type, props, children) {
              var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
              // succeed and there will likely be errors in render.

              if (!validType) {
                var info = "";

                if (
                  type === undefined ||
                  (typeof type === "object" &&
                    type !== null &&
                    Object.keys(type).length === 0)
                ) {
                  info +=
                    " You likely forgot to export your component from the file " +
                    "it's defined in, or you might have mixed up default and named imports.";
                }

                var sourceInfo = getSourceInfoErrorAddendum(props);

                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }

                var typeString = void 0;

                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (
                  type !== undefined &&
                  type.$$typeof === REACT_ELEMENT_TYPE
                ) {
                  typeString =
                    "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info =
                    " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }

                warning$1(
                  false,
                  "React.createElement: type is invalid -- expected a string (for " +
                    "built-in components) or a class/function (for composite " +
                    "components) but got: %s.%s",
                  typeString,
                  info
                );
              }

              var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
              // TODO: Drop this when these are no longer allowed as the type argument.

              if (element == null) {
                return element;
              } // Skip key warning if the type isn't valid since our key validation logic
              // doesn't expect a non-string/function type and can throw confusing errors.
              // We don't want exception behavior to differ between dev and prod.
              // (Rendering will throw with a helpful message and as soon as the type is
              // fixed, the key warnings will appear.)

              if (validType) {
                for (var i = 2; i < arguments.length; i++) {
                  validateChildKeys(arguments[i], type);
                }
              }

              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }

              return element;
            }

            function createFactoryWithValidation(type) {
              var validatedFactory = createElementWithValidation.bind(
                null,
                type
              );
              validatedFactory.type = type; // Legacy hook: remove it

              {
                Object.defineProperty(validatedFactory, "type", {
                  enumerable: false,
                  get: function() {
                    lowPriorityWarning$1(
                      false,
                      "Factory.type is deprecated. Access the class directly " +
                        "before passing it to createFactory."
                    );
                    Object.defineProperty(this, "type", {
                      value: type
                    });
                    return type;
                  }
                });
              }
              return validatedFactory;
            }

            function cloneElementWithValidation(element, props, children) {
              var newElement = cloneElement.apply(this, arguments);

              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], newElement.type);
              }

              validatePropTypes(newElement);
              return newElement;
            }

            var React = {
              Children: {
                map: mapChildren,
                forEach: forEachChildren,
                count: countChildren,
                toArray: toArray,
                only: onlyChild
              },
              createRef: createRef,
              Component: Component,
              PureComponent: PureComponent,
              createContext: createContext,
              forwardRef: forwardRef,
              lazy: lazy,
              memo: memo,
              Fragment: REACT_FRAGMENT_TYPE,
              StrictMode: REACT_STRICT_MODE_TYPE,
              Suspense: REACT_SUSPENSE_TYPE,
              createElement: createElementWithValidation,
              cloneElement: cloneElementWithValidation,
              createFactory: createFactoryWithValidation,
              isValidElement: isValidElement,
              version: ReactVersion,
              __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
            };

            if (enableStableConcurrentModeAPIs) {
              React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
              React.Profiler = REACT_PROFILER_TYPE;
            } else {
              React.unstable_ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
              React.unstable_Profiler = REACT_PROFILER_TYPE;
            }

            if (enableHooks) {
              React.useCallback = useCallback;
              React.useContext = useContext;
              React.useEffect = useEffect;
              React.useImperativeMethods = useImperativeMethods;
              React.useLayoutEffect = useLayoutEffect;
              React.useMemo = useMemo;
              React.useMutationEffect = useMutationEffect;
              React.useReducer = useReducer;
              React.useRef = useRef;
              React.useState = useState;
            }

            var React$2 = Object.freeze({
              default: React
            });
            var React$3 = (React$2 && React) || React$2; // TODO: decide on the top-level export form.
            // This is hacky but makes it work with both Rollup and Jest.

            var react = React$3.default || React$3;
            module.exports = react;
          })();
        }
      },
      {
        "object-assign": "../node_modules/object-assign/index.js",
        "prop-types/checkPropTypes":
          "../node_modules/prop-types/checkPropTypes.js"
      }
    ],
    "../node_modules/react/index.js": [
      function(require, module, exports) {
        "use strict";

        if ("development" === "production") {
          module.exports = require("./cjs/react.production.min.js");
        } else {
          module.exports = require("./cjs/react.development.js");
        }
      },
      {
        "./cjs/react.development.js":
          "../node_modules/react/cjs/react.development.js"
      }
    ],
    "../node_modules/react-favicon/dist/react-favicon.js": [
      function(require, module, exports) {
        "use strict";

        var _createClass = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return call &&
            (typeof call === "object" || typeof call === "function")
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                typeof superClass
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var React = require("react");
        var linkEl;

        function drawIcon(src, num, cb) {
          var img = document.createElement("img");
          img.onload = function() {
            var canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;

            var context = canvas.getContext("2d");
            context.clearRect(0, 0, img.width, img.height);
            context.drawImage(img, 0, 0);

            var top = img.height - 9,
              left = img.width - 7 - 1,
              bottom = 16,
              right = 16,
              radius = 2;

            context.fillStyle = "#F03D25";
            context.strokeStyle = "#F03D25";
            context.lineWidth = 1;

            context.beginPath();
            context.moveTo(left + radius, top);
            context.quadraticCurveTo(left, top, left, top + radius);
            context.lineTo(left, bottom - radius);
            context.quadraticCurveTo(left, bottom, left + radius, bottom);
            context.lineTo(right - radius, bottom);
            context.quadraticCurveTo(right, bottom, right, bottom - radius);
            context.lineTo(right, top + radius);
            context.quadraticCurveTo(right, top, right - radius, top);
            context.closePath();
            context.fill();

            context.font = "bold 10px arial";
            context.fillStyle = "#FFF";
            context.textAlign = "right";
            context.textBaseline = "top";
            context.fillText(num, 15, 6);

            cb(null, context.canvas.toDataURL());
          };
          img.src = src;
        }

        var Favicon = (function(_React$Component) {
          _inherits(Favicon, _React$Component);

          function Favicon() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, Favicon);

            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            return (
              (_ret = ((_temp = ((_this = _possibleConstructorReturn(
                this,
                (_ref =
                  Favicon.__proto__ ||
                  Object.getPrototypeOf(Favicon)).call.apply(
                  _ref,
                  [this].concat(args)
                )
              )),
              _this)),
              (_this.state = {
                animationIndex: 0,
                animationLoop: null,
                animationRunning: false
              }),
              _temp)),
              _possibleConstructorReturn(_this, _ret)
            );
          }

          _createClass(
            Favicon,
            [
              {
                key: "componentWillMount",
                value: function componentWillMount() {
                  Favicon.mountedInstances.push(this);
                  Favicon.update();
                }
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  var activeInstance = Favicon.getActiveInstance();
                  clearInterval(activeInstance.state.animationLoop);
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                  if (
                    prevProps.url === this.props.url &&
                    prevProps.animated === this.props.animated &&
                    prevProps.alertCount === this.props.alertCount &&
                    prevProps.keepIconLink === this.props.keepIconLink
                  )
                    return;

                  Favicon.update();
                }
              },
              {
                key: "render",
                value: function render() {
                  return null;
                }
              }
            ],
            [
              {
                key: "getActiveInstance",
                value: function getActiveInstance() {
                  return Favicon.mountedInstances[
                    Favicon.mountedInstances.length - 1
                  ];
                }
              },
              {
                key: "draw",
                value: function draw() {
                  if (typeof document === "undefined") return;

                  var activeInstance = Favicon.getActiveInstance();
                  if (typeof linkEl === "undefined") {
                    var head = document.getElementsByTagName("head")[0];
                    linkEl = document.createElement("link");
                    linkEl.type = "image/x-icon";
                    linkEl.rel = "icon";

                    // remove existing favicons
                    var links = head.getElementsByTagName("link");
                    for (var i = links.length; --i >= 0; ) {
                      if (
                        /\bicon\b/i.test(links[i].getAttribute("rel")) &&
                        !activeInstance.props.keepIconLink(links[i])
                      ) {
                        head.removeChild(links[i]);
                      }
                    }

                    head.appendChild(linkEl);
                  }

                  var currentUrl;

                  if (activeInstance.props.url instanceof Array) {
                    currentUrl =
                      activeInstance.props.url[
                        activeInstance.state.animationIndex
                      ];
                  } else {
                    currentUrl = activeInstance.props.url;
                  }

                  if (activeInstance.props.alertCount) {
                    drawIcon(
                      currentUrl,
                      activeInstance.props.alertCount,
                      function(err, url) {
                        linkEl.href = url;
                      }
                    );
                  } else {
                    linkEl.href = currentUrl;
                  }
                }
              },
              {
                key: "update",
                value: function update() {
                  if (typeof document === "undefined") return;

                  var activeInstance = Favicon.getActiveInstance();
                  var isAnimated =
                    activeInstance.props.url instanceof Array &&
                    activeInstance.props.animated;

                  // clear any running animations
                  var intervalId = null;
                  clearInterval(activeInstance.state.animationLoop);

                  if (isAnimated) {
                    var animateFavicon = function animateFavicon() {
                      var nextAnimationIndex =
                        (activeInstance.state.animationIndex + 1) %
                        activeInstance.props.url.length;
                      Favicon.draw();
                      activeInstance.setState({
                        animationIndex: nextAnimationIndex
                      });
                    };
                    intervalId = setInterval(
                      animateFavicon,
                      activeInstance.props.animationDelay
                    );
                    animateFavicon();
                  } else {
                    Favicon.draw();
                  }

                  activeInstance.setState({ animationLoop: intervalId });
                }
              }
            ]
          );

          return Favicon;
        })(React.Component);

        Favicon.displayName = "Favicon";
        Favicon.defaultProps = {
          alertCount: null,
          animated: true,
          animationDelay: 500,
          keepIconLink: function keepIconLink() {
            return false;
          }
        };
        Favicon.mountedInstances = [];

        module.exports = Favicon;
      },
      { react: "../node_modules/react/index.js" }
    ],
    "../node_modules/scheduler/cjs/scheduler.development.js": [
      function(require, module, exports) {
        var global = arguments[3];
        /** @license React v0.11.3
         * scheduler.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        ("use strict");

        if ("development" !== "production") {
          (function() {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            /* eslint-disable no-var */
            // TODO: Use symbols?

            var ImmediatePriority = 1;
            var UserBlockingPriority = 2;
            var NormalPriority = 3;
            var LowPriority = 4;
            var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
            // Math.pow(2, 30) - 1
            // 0b111111111111111111111111111111

            var maxSigned31BitInt = 1073741823; // Times out immediately

            var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

            var USER_BLOCKING_PRIORITY = 250;
            var NORMAL_PRIORITY_TIMEOUT = 5000;
            var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

            var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.

            var firstCallbackNode = null;
            var currentDidTimeout = false;
            var currentPriorityLevel = NormalPriority;
            var currentEventStartTime = -1;
            var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.

            var isExecutingCallback = false;
            var isHostCallbackScheduled = false;
            var hasNativePerformanceNow =
              typeof performance === "object" &&
              typeof performance.now === "function";

            function ensureHostCallbackIsScheduled() {
              if (isExecutingCallback) {
                // Don't schedule work yet; wait until the next time we yield.
                return;
              } // Schedule the host callback using the earliest expiration in the list.

              var expirationTime = firstCallbackNode.expirationTime;

              if (!isHostCallbackScheduled) {
                isHostCallbackScheduled = true;
              } else {
                // Cancel the existing host callback.
                cancelHostCallback();
              }

              requestHostCallback(flushWork, expirationTime);
            }

            function flushFirstCallback() {
              var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the
              // list is in a consistent state even if the callback throws.

              var next = firstCallbackNode.next;

              if (firstCallbackNode === next) {
                // This is the last callback in the list.
                firstCallbackNode = null;
                next = null;
              } else {
                var lastCallbackNode = firstCallbackNode.previous;
                firstCallbackNode = lastCallbackNode.next = next;
                next.previous = lastCallbackNode;
              }

              flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.

              var callback = flushedNode.callback;
              var expirationTime = flushedNode.expirationTime;
              var priorityLevel = flushedNode.priorityLevel;
              var previousPriorityLevel = currentPriorityLevel;
              var previousExpirationTime = currentExpirationTime;
              currentPriorityLevel = priorityLevel;
              currentExpirationTime = expirationTime;
              var continuationCallback;

              try {
                continuationCallback = callback();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
                currentExpirationTime = previousExpirationTime;
              } // A callback may return a continuation. The continuation should be scheduled
              // with the same priority and expiration as the just-finished callback.

              if (typeof continuationCallback === "function") {
                var continuationNode = {
                  callback: continuationCallback,
                  priorityLevel: priorityLevel,
                  expirationTime: expirationTime,
                  next: null,
                  previous: null
                }; // Insert the new callback into the list, sorted by its expiration. This is
                // almost the same as the code in `scheduleCallback`, except the callback
                // is inserted into the list *before* callbacks of equal expiration instead
                // of after.

                if (firstCallbackNode === null) {
                  // This is the first callback in the list.
                  firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
                } else {
                  var nextAfterContinuation = null;
                  var node = firstCallbackNode;

                  do {
                    if (node.expirationTime >= expirationTime) {
                      // This callback expires at or after the continuation. We will insert
                      // the continuation *before* this callback.
                      nextAfterContinuation = node;
                      break;
                    }

                    node = node.next;
                  } while (node !== firstCallbackNode);

                  if (nextAfterContinuation === null) {
                    // No equal or lower priority callback was found, which means the new
                    // callback is the lowest priority callback in the list.
                    nextAfterContinuation = firstCallbackNode;
                  } else if (nextAfterContinuation === firstCallbackNode) {
                    // The new callback is the highest priority callback in the list.
                    firstCallbackNode = continuationNode;
                    ensureHostCallbackIsScheduled();
                  }

                  var previous = nextAfterContinuation.previous;
                  previous.next = nextAfterContinuation.previous = continuationNode;
                  continuationNode.next = nextAfterContinuation;
                  continuationNode.previous = previous;
                }
              }
            }

            function flushImmediateWork() {
              if (
                // Confirm we've exited the outer most event handler
                currentEventStartTime === -1 &&
                firstCallbackNode !== null &&
                firstCallbackNode.priorityLevel === ImmediatePriority
              ) {
                isExecutingCallback = true;

                try {
                  do {
                    flushFirstCallback();
                  } while ( // Keep flushing until there are no more immediate callbacks
                    firstCallbackNode !== null &&
                    firstCallbackNode.priorityLevel === ImmediatePriority
                  );
                } finally {
                  isExecutingCallback = false;

                  if (firstCallbackNode !== null) {
                    // There's still work remaining. Request another callback.
                    ensureHostCallbackIsScheduled();
                  } else {
                    isHostCallbackScheduled = false;
                  }
                }
              }
            }

            function flushWork(didTimeout) {
              isExecutingCallback = true;
              var previousDidTimeout = currentDidTimeout;
              currentDidTimeout = didTimeout;

              try {
                if (didTimeout) {
                  // Flush all the expired callbacks without yielding.
                  while (firstCallbackNode !== null) {
                    // Read the current time. Flush all the callbacks that expire at or
                    // earlier than that time. Then read the current time again and repeat.
                    // This optimizes for as few performance.now calls as possible.
                    var currentTime = exports.unstable_now();

                    if (firstCallbackNode.expirationTime <= currentTime) {
                      do {
                        flushFirstCallback();
                      } while (
                        firstCallbackNode !== null &&
                        firstCallbackNode.expirationTime <= currentTime
                      );

                      continue;
                    }

                    break;
                  }
                } else {
                  // Keep flushing callbacks until we run out of time in the frame.
                  if (firstCallbackNode !== null) {
                    do {
                      flushFirstCallback();
                    } while (
                      firstCallbackNode !== null &&
                      !shouldYieldToHost()
                    );
                  }
                }
              } finally {
                isExecutingCallback = false;
                currentDidTimeout = previousDidTimeout;

                if (firstCallbackNode !== null) {
                  // There's still work remaining. Request another callback.
                  ensureHostCallbackIsScheduled();
                } else {
                  isHostCallbackScheduled = false;
                } // Before exiting, flush all the immediate work that was scheduled.

                flushImmediateWork();
              }
            }

            function unstable_runWithPriority(priorityLevel, eventHandler) {
              switch (priorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                case LowPriority:
                case IdlePriority:
                  break;

                default:
                  priorityLevel = NormalPriority;
              }

              var previousPriorityLevel = currentPriorityLevel;
              var previousEventStartTime = currentEventStartTime;
              currentPriorityLevel = priorityLevel;
              currentEventStartTime = exports.unstable_now();

              try {
                return eventHandler();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
                currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

                flushImmediateWork();
              }
            }

            function unstable_wrapCallback(callback) {
              var parentPriorityLevel = currentPriorityLevel;
              return function() {
                // This is a fork of runWithPriority, inlined for performance.
                var previousPriorityLevel = currentPriorityLevel;
                var previousEventStartTime = currentEventStartTime;
                currentPriorityLevel = parentPriorityLevel;
                currentEventStartTime = exports.unstable_now();

                try {
                  return callback.apply(this, arguments);
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                  currentEventStartTime = previousEventStartTime;
                  flushImmediateWork();
                }
              };
            }

            function unstable_scheduleCallback(callback, deprecated_options) {
              var startTime =
                currentEventStartTime !== -1
                  ? currentEventStartTime
                  : exports.unstable_now();
              var expirationTime;

              if (
                typeof deprecated_options === "object" &&
                deprecated_options !== null &&
                typeof deprecated_options.timeout === "number"
              ) {
                // FIXME: Remove this branch once we lift expiration times out of React.
                expirationTime = startTime + deprecated_options.timeout;
              } else {
                switch (currentPriorityLevel) {
                  case ImmediatePriority:
                    expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
                    break;

                  case UserBlockingPriority:
                    expirationTime = startTime + USER_BLOCKING_PRIORITY;
                    break;

                  case IdlePriority:
                    expirationTime = startTime + IDLE_PRIORITY;
                    break;

                  case LowPriority:
                    expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
                    break;

                  case NormalPriority:
                  default:
                    expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
                }
              }

              var newNode = {
                callback: callback,
                priorityLevel: currentPriorityLevel,
                expirationTime: expirationTime,
                next: null,
                previous: null
              }; // Insert the new callback into the list, ordered first by expiration, then
              // by insertion. So the new callback is inserted any other callback with
              // equal expiration.

              if (firstCallbackNode === null) {
                // This is the first callback in the list.
                firstCallbackNode = newNode.next = newNode.previous = newNode;
                ensureHostCallbackIsScheduled();
              } else {
                var next = null;
                var node = firstCallbackNode;

                do {
                  if (node.expirationTime > expirationTime) {
                    // The new callback expires before this one.
                    next = node;
                    break;
                  }

                  node = node.next;
                } while (node !== firstCallbackNode);

                if (next === null) {
                  // No callback with a later expiration was found, which means the new
                  // callback has the latest expiration in the list.
                  next = firstCallbackNode;
                } else if (next === firstCallbackNode) {
                  // The new callback has the earliest expiration in the entire list.
                  firstCallbackNode = newNode;
                  ensureHostCallbackIsScheduled();
                }

                var previous = next.previous;
                previous.next = next.previous = newNode;
                newNode.next = next;
                newNode.previous = previous;
              }

              return newNode;
            }

            function unstable_cancelCallback(callbackNode) {
              var next = callbackNode.next;

              if (next === null) {
                // Already cancelled.
                return;
              }

              if (next === callbackNode) {
                // This is the only scheduled callback. Clear the list.
                firstCallbackNode = null;
              } else {
                // Remove the callback from its position in the list.
                if (callbackNode === firstCallbackNode) {
                  firstCallbackNode = next;
                }

                var previous = callbackNode.previous;
                previous.next = next;
                next.previous = previous;
              }

              callbackNode.next = callbackNode.previous = null;
            }

            function unstable_getCurrentPriorityLevel() {
              return currentPriorityLevel;
            }

            function unstable_shouldYield() {
              return (
                !currentDidTimeout &&
                ((firstCallbackNode !== null &&
                  firstCallbackNode.expirationTime < currentExpirationTime) ||
                  shouldYieldToHost())
              );
            } // The remaining code is essentially a polyfill for requestIdleCallback. It
            // works by scheduling a requestAnimationFrame, storing the time for the start
            // of the frame, then scheduling a postMessage which gets scheduled after paint.
            // Within the postMessage handler do as much work as possible until time + frame
            // rate. By separating the idle call into a separate event tick we ensure that
            // layout, paint and other browser work is counted against the available time.
            // The frame rate is dynamically adjusted.
            // We capture a local reference to any global, in case it gets polyfilled after
            // this module is initially evaluated. We want to be using a
            // consistent implementation.

            var localDate = Date; // This initialization code may run even on server environments if a component
            // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
            // have setTimeout or clearTimeout. However, we always expect them to be defined
            // on the client. https://github.com/facebook/react/pull/13088

            var localSetTimeout =
              typeof setTimeout === "function" ? setTimeout : undefined;
            var localClearTimeout =
              typeof clearTimeout === "function" ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error
            // later if they are missing on the client.

            var localRequestAnimationFrame =
              typeof requestAnimationFrame === "function"
                ? requestAnimationFrame
                : undefined;
            var localCancelAnimationFrame =
              typeof cancelAnimationFrame === "function"
                ? cancelAnimationFrame
                : undefined; // requestAnimationFrame does not run when the tab is in the background. If
            // we're backgrounded we prefer for that work to happen so that the page
            // continues to load in the background. So we also schedule a 'setTimeout' as
            // a fallback.
            // TODO: Need a better heuristic for backgrounded work.

            var ANIMATION_FRAME_TIMEOUT = 100;
            var rAFID;
            var rAFTimeoutID;

            var requestAnimationFrameWithTimeout = function(callback) {
              // schedule rAF and also a setTimeout
              rAFID = localRequestAnimationFrame(function(timestamp) {
                // cancel the setTimeout
                localClearTimeout(rAFTimeoutID);
                callback(timestamp);
              });
              rAFTimeoutID = localSetTimeout(function() {
                // cancel the requestAnimationFrame
                localCancelAnimationFrame(rAFID);
                callback(exports.unstable_now());
              }, ANIMATION_FRAME_TIMEOUT);
            };

            if (hasNativePerformanceNow) {
              var Performance = performance;

              exports.unstable_now = function() {
                return Performance.now();
              };
            } else {
              exports.unstable_now = function() {
                return localDate.now();
              };
            }

            var requestHostCallback;
            var cancelHostCallback;
            var shouldYieldToHost;
            var globalValue = null;

            if (typeof window !== "undefined") {
              globalValue = window;
            } else if (typeof global !== "undefined") {
              globalValue = global;
            }

            if (globalValue && globalValue._schedMock) {
              // Dynamic injection, only for testing purposes.
              var globalImpl = globalValue._schedMock;
              requestHostCallback = globalImpl[0];
              cancelHostCallback = globalImpl[1];
              shouldYieldToHost = globalImpl[2];
              exports.unstable_now = globalImpl[3];
            } else if (
              // If Scheduler runs in a non-DOM environment, it falls back to a naive
              // implementation using setTimeout.
              typeof window === "undefined" || // Check if MessageChannel is supported, too.
              typeof MessageChannel !== "function"
            ) {
              // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
              // fallback to a naive implementation.
              var _callback = null;

              var _flushCallback = function(didTimeout) {
                if (_callback !== null) {
                  try {
                    _callback(didTimeout);
                  } finally {
                    _callback = null;
                  }
                }
              };

              requestHostCallback = function(cb, ms) {
                if (_callback !== null) {
                  // Protect against re-entrancy.
                  setTimeout(requestHostCallback, 0, cb);
                } else {
                  _callback = cb;
                  setTimeout(_flushCallback, 0, false);
                }
              };

              cancelHostCallback = function() {
                _callback = null;
              };

              shouldYieldToHost = function() {
                return false;
              };
            } else {
              if (typeof console !== "undefined") {
                // TODO: Remove fb.me link
                if (typeof localRequestAnimationFrame !== "function") {
                  console.error(
                    "This browser doesn't support requestAnimationFrame. " +
                      "Make sure that you load a " +
                      "polyfill in older browsers. https://fb.me/react-polyfills"
                  );
                }

                if (typeof localCancelAnimationFrame !== "function") {
                  console.error(
                    "This browser doesn't support cancelAnimationFrame. " +
                      "Make sure that you load a " +
                      "polyfill in older browsers. https://fb.me/react-polyfills"
                  );
                }
              }

              var scheduledHostCallback = null;
              var isMessageEventScheduled = false;
              var timeoutTime = -1;
              var isAnimationFrameScheduled = false;
              var isFlushingHostCallback = false;
              var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking
              // will adjust this value to a faster fps if we get more frequent animation
              // frames.

              var previousFrameTime = 33;
              var activeFrameTime = 33;

              shouldYieldToHost = function() {
                return frameDeadline <= exports.unstable_now();
              }; // We use the postMessage trick to defer idle work until after the repaint.

              var channel = new MessageChannel();
              var port = channel.port2;

              channel.port1.onmessage = function(event) {
                isMessageEventScheduled = false;
                var prevScheduledCallback = scheduledHostCallback;
                var prevTimeoutTime = timeoutTime;
                scheduledHostCallback = null;
                timeoutTime = -1;
                var currentTime = exports.unstable_now();
                var didTimeout = false;

                if (frameDeadline - currentTime <= 0) {
                  // There's no time left in this idle period. Check if the callback has
                  // a timeout and whether it's been exceeded.
                  if (
                    prevTimeoutTime !== -1 &&
                    prevTimeoutTime <= currentTime
                  ) {
                    // Exceeded the timeout. Invoke the callback even though there's no
                    // time left.
                    didTimeout = true;
                  } else {
                    // No timeout.
                    if (!isAnimationFrameScheduled) {
                      // Schedule another animation callback so we retry later.
                      isAnimationFrameScheduled = true;
                      requestAnimationFrameWithTimeout(animationTick);
                    } // Exit without invoking the callback.

                    scheduledHostCallback = prevScheduledCallback;
                    timeoutTime = prevTimeoutTime;
                    return;
                  }
                }

                if (prevScheduledCallback !== null) {
                  isFlushingHostCallback = true;

                  try {
                    prevScheduledCallback(didTimeout);
                  } finally {
                    isFlushingHostCallback = false;
                  }
                }
              };

              var animationTick = function(rafTime) {
                if (scheduledHostCallback !== null) {
                  // Eagerly schedule the next animation callback at the beginning of the
                  // frame. If the scheduler queue is not empty at the end of the frame, it
                  // will continue flushing inside that callback. If the queue *is* empty,
                  // then it will exit immediately. Posting the callback at the start of the
                  // frame ensures it's fired within the earliest possible frame. If we
                  // waited until the end of the frame to post the callback, we risk the
                  // browser skipping a frame and not firing the callback until the frame
                  // after that.
                  requestAnimationFrameWithTimeout(animationTick);
                } else {
                  // No pending work. Exit.
                  isAnimationFrameScheduled = false;
                  return;
                }

                var nextFrameTime = rafTime - frameDeadline + activeFrameTime;

                if (
                  nextFrameTime < activeFrameTime &&
                  previousFrameTime < activeFrameTime
                ) {
                  if (nextFrameTime < 8) {
                    // Defensive coding. We don't support higher frame rates than 120hz.
                    // If the calculated frame time gets lower than 8, it is probably a bug.
                    nextFrameTime = 8;
                  } // If one frame goes long, then the next one can be short to catch up.
                  // If two frames are short in a row, then that's an indication that we
                  // actually have a higher frame rate than what we're currently optimizing.
                  // We adjust our heuristic dynamically accordingly. For example, if we're
                  // running on 120hz display or 90hz VR display.
                  // Take the max of the two in case one of them was an anomaly due to
                  // missed frame deadlines.

                  activeFrameTime =
                    nextFrameTime < previousFrameTime
                      ? previousFrameTime
                      : nextFrameTime;
                } else {
                  previousFrameTime = nextFrameTime;
                }

                frameDeadline = rafTime + activeFrameTime;

                if (!isMessageEventScheduled) {
                  isMessageEventScheduled = true;
                  port.postMessage(undefined);
                }
              };

              requestHostCallback = function(callback, absoluteTimeout) {
                scheduledHostCallback = callback;
                timeoutTime = absoluteTimeout;

                if (isFlushingHostCallback || absoluteTimeout < 0) {
                  // Don't wait for the next frame. Continue working ASAP, in a new event.
                  port.postMessage(undefined);
                } else if (!isAnimationFrameScheduled) {
                  // If rAF didn't already schedule one, we need to schedule a frame.
                  // TODO: If this rAF doesn't materialize because the browser throttles, we
                  // might want to still have setTimeout trigger rIC as a backup to ensure
                  // that we keep performing work.
                  isAnimationFrameScheduled = true;
                  requestAnimationFrameWithTimeout(animationTick);
                }
              };

              cancelHostCallback = function() {
                scheduledHostCallback = null;
                isMessageEventScheduled = false;
                timeoutTime = -1;
              };
            }

            exports.unstable_ImmediatePriority = ImmediatePriority;
            exports.unstable_UserBlockingPriority = UserBlockingPriority;
            exports.unstable_NormalPriority = NormalPriority;
            exports.unstable_IdlePriority = IdlePriority;
            exports.unstable_LowPriority = LowPriority;
            exports.unstable_runWithPriority = unstable_runWithPriority;
            exports.unstable_scheduleCallback = unstable_scheduleCallback;
            exports.unstable_cancelCallback = unstable_cancelCallback;
            exports.unstable_wrapCallback = unstable_wrapCallback;
            exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
            exports.unstable_shouldYield = unstable_shouldYield;
          })();
        }
      },
      {}
    ],
    "../node_modules/scheduler/index.js": [
      function(require, module, exports) {
        "use strict";

        if ("development" === "production") {
          module.exports = require("./cjs/scheduler.production.min.js");
        } else {
          module.exports = require("./cjs/scheduler.development.js");
        }
      },
      {
        "./cjs/scheduler.development.js":
          "../node_modules/scheduler/cjs/scheduler.development.js"
      }
    ],
    "../node_modules/scheduler/cjs/scheduler-tracing.development.js": [
      function(require, module, exports) {
        /** @license React v0.11.3
         * scheduler-tracing.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        "use strict";

        if ("development" !== "production") {
          (function() {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true
            }); // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
            // In some cases, StrictMode should also double-render lifecycles.
            // This can be confusing for tests though,
            // And it can be bad for performance in production.
            // This feature flag can be used to control the behavior:
            // To preserve the "Pause on caught exceptions" behavior of the debugger, we
            // replay the begin phase of a failed component inside invokeGuardedCallback.
            // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
            // Gather advanced timing metrics for Profiler subtrees.
            // Trace which interactions trigger each commit.

            var enableSchedulerTracing = true; // Only used in www builds.
            // Only used in www builds.
            // React Fire: prevent the value and checked attributes from syncing
            // with their related DOM properties
            // These APIs will no longer be "unstable" in the upcoming 16.7 release,
            // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

            var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

            var interactionIDCounter = 0;
            var threadIDCounter = 0; // Set of currently traced interactions.
            // Interactions "stack"–
            // Meaning that newly traced interactions are appended to the previously active set.
            // When an interaction goes out of scope, the previous set (if any) is restored.

            exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

            exports.__subscriberRef = null;

            if (enableSchedulerTracing) {
              exports.__interactionsRef = {
                current: new Set()
              };
              exports.__subscriberRef = {
                current: null
              };
            }

            function unstable_clear(callback) {
              if (!enableSchedulerTracing) {
                return callback();
              }

              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = new Set();

              try {
                return callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
              }
            }

            function unstable_getCurrent() {
              if (!enableSchedulerTracing) {
                return null;
              } else {
                return exports.__interactionsRef.current;
              }
            }

            function unstable_getThreadID() {
              return ++threadIDCounter;
            }

            function unstable_trace(name, timestamp, callback) {
              var threadID =
                arguments.length > 3 && arguments[3] !== undefined
                  ? arguments[3]
                  : DEFAULT_THREAD_ID;

              if (!enableSchedulerTracing) {
                return callback();
              }

              var interaction = {
                __count: 1,
                id: interactionIDCounter++,
                name: name,
                timestamp: timestamp
              };
              var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
              // To do that, clone the current interactions.
              // The previous set will be restored upon completion.

              var interactions = new Set(prevInteractions);
              interactions.add(interaction);
              exports.__interactionsRef.current = interactions;
              var subscriber = exports.__subscriberRef.current;
              var returnValue = void 0;

              try {
                if (subscriber !== null) {
                  subscriber.onInteractionTraced(interaction);
                }
              } finally {
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(interactions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback();
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;

                    try {
                      if (subscriber !== null) {
                        subscriber.onWorkStopped(interactions, threadID);
                      }
                    } finally {
                      interaction.__count--; // If no async work was scheduled for this interaction,
                      // Notify subscribers that it's completed.

                      if (subscriber !== null && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(
                          interaction
                        );
                      }
                    }
                  }
                }
              }

              return returnValue;
            }

            function unstable_wrap(callback) {
              var threadID =
                arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : DEFAULT_THREAD_ID;

              if (!enableSchedulerTracing) {
                return callback;
              }

              var wrappedInteractions = exports.__interactionsRef.current;
              var subscriber = exports.__subscriberRef.current;

              if (subscriber !== null) {
                subscriber.onWorkScheduled(wrappedInteractions, threadID);
              } // Update the pending async work count for the current interactions.
              // Update after calling subscribers in case of error.

              wrappedInteractions.forEach(function(interaction) {
                interaction.__count++;
              });
              var hasRun = false;

              function wrapped() {
                var prevInteractions = exports.__interactionsRef.current;
                exports.__interactionsRef.current = wrappedInteractions;
                subscriber = exports.__subscriberRef.current;

                try {
                  var returnValue = void 0;

                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStarted(wrappedInteractions, threadID);
                    }
                  } finally {
                    try {
                      returnValue = callback.apply(undefined, arguments);
                    } finally {
                      exports.__interactionsRef.current = prevInteractions;

                      if (subscriber !== null) {
                        subscriber.onWorkStopped(wrappedInteractions, threadID);
                      }
                    }
                  }

                  return returnValue;
                } finally {
                  if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.

                    wrappedInteractions.forEach(function(interaction) {
                      interaction.__count--;

                      if (subscriber !== null && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(
                          interaction
                        );
                      }
                    });
                  }
                }
              }

              wrapped.cancel = function cancel() {
                subscriber = exports.__subscriberRef.current;

                try {
                  if (subscriber !== null) {
                    subscriber.onWorkCanceled(wrappedInteractions, threadID);
                  }
                } finally {
                  // Update pending async counts for all wrapped interactions.
                  // If this was the last scheduled async work for any of them,
                  // Mark them as completed.
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;

                    if (subscriber && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(
                        interaction
                      );
                    }
                  });
                }
              };

              return wrapped;
            }

            var subscribers = null;

            if (enableSchedulerTracing) {
              subscribers = new Set();
            }

            function unstable_subscribe(subscriber) {
              if (enableSchedulerTracing) {
                subscribers.add(subscriber);

                if (subscribers.size === 1) {
                  exports.__subscriberRef.current = {
                    onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                    onInteractionTraced: onInteractionTraced,
                    onWorkCanceled: onWorkCanceled,
                    onWorkScheduled: onWorkScheduled,
                    onWorkStarted: onWorkStarted,
                    onWorkStopped: onWorkStopped
                  };
                }
              }
            }

            function unstable_unsubscribe(subscriber) {
              if (enableSchedulerTracing) {
                subscribers.delete(subscriber);

                if (subscribers.size === 0) {
                  exports.__subscriberRef.current = null;
                }
              }
            }

            function onInteractionTraced(interaction) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onInteractionTraced(interaction);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onInteractionScheduledWorkCompleted(interaction) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkScheduled(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkScheduled(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkStarted(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkStopped(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkStopped(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkCanceled(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function(subscriber) {
                try {
                  subscriber.onWorkCanceled(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            exports.unstable_clear = unstable_clear;
            exports.unstable_getCurrent = unstable_getCurrent;
            exports.unstable_getThreadID = unstable_getThreadID;
            exports.unstable_trace = unstable_trace;
            exports.unstable_wrap = unstable_wrap;
            exports.unstable_subscribe = unstable_subscribe;
            exports.unstable_unsubscribe = unstable_unsubscribe;
          })();
        }
      },
      {}
    ],
    "../node_modules/scheduler/tracing.js": [
      function(require, module, exports) {
        "use strict";

        if ("development" === "production") {
          module.exports = require("./cjs/scheduler-tracing.production.min.js");
        } else {
          module.exports = require("./cjs/scheduler-tracing.development.js");
        }
      },
      {
        "./cjs/scheduler-tracing.development.js":
          "../node_modules/scheduler/cjs/scheduler-tracing.development.js"
      }
    ],
    "../node_modules/react-dom/cjs/react-dom.development.js": [
      function(require, module, exports) {
        /** @license React v16.6.1
         * react-dom.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        "use strict";

        if ("development" !== "production") {
          (function() {
            "use strict";

            var React = require("react");

            var _assign = require("object-assign");

            var checkPropTypes = require("prop-types/checkPropTypes");

            var scheduler = require("scheduler");

            var tracing = require("scheduler/tracing");
            /**
             * Use invariant() to assert state which your program assumes to be true.
             *
             * Provide sprintf-style format (only %s is supported) and arguments
             * to provide information about what broke and what you were
             * expecting.
             *
             * The invariant message will be stripped in production, but the invariant
             * will remain to ensure logic does not differ in production.
             */

            var validateFormat = function() {};

            {
              validateFormat = function(format) {
                if (format === undefined) {
                  throw new Error(
                    "invariant requires an error message argument"
                  );
                }
              };
            }

            function invariant(condition, format, a, b, c, d, e, f) {
              validateFormat(format);

              if (!condition) {
                var error = void 0;

                if (format === undefined) {
                  error = new Error(
                    "Minified exception occurred; use the non-minified dev environment " +
                      "for the full error message and additional helpful warnings."
                  );
                } else {
                  var args = [a, b, c, d, e, f];
                  var argIndex = 0;
                  error = new Error(
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    })
                  );
                  error.name = "Invariant Violation";
                }

                error.framesToPop = 1; // we don't care about invariant's own frame

                throw error;
              }
            } // Relying on the `invariant()` implementation lets us
            // preserve the format and params in the www builds.

            !React
              ? invariant(
                  false,
                  "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM."
                )
              : void 0;

            var invokeGuardedCallbackImpl = function(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f
            ) {
              var funcArgs = Array.prototype.slice.call(arguments, 3);

              try {
                func.apply(context, funcArgs);
              } catch (error) {
                this.onError(error);
              }
            };

            {
              // In DEV mode, we swap out invokeGuardedCallback for a special version
              // that plays more nicely with the browser's DevTools. The idea is to preserve
              // "Pause on exceptions" behavior. Because React wraps all user-provided
              // functions in invokeGuardedCallback, and the production version of
              // invokeGuardedCallback uses a try-catch, all user exceptions are treated
              // like caught exceptions, and the DevTools won't pause unless the developer
              // takes the extra step of enabling pause on caught exceptions. This is
              // untintuitive, though, because even though React has caught the error, from
              // the developer's perspective, the error is uncaught.
              //
              // To preserve the expected "Pause on exceptions" behavior, we don't use a
              // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
              // DOM node, and call the user-provided callback from inside an event handler
              // for that fake event. If the callback throws, the error is "captured" using
              // a global event handler. But because the error happens in a different
              // event loop context, it does not interrupt the normal program flow.
              // Effectively, this gives us try-catch behavior without actually using
              // try-catch. Neat!
              // Check that the browser supports the APIs we need to implement our special
              // DEV version of invokeGuardedCallback
              if (
                typeof window !== "undefined" &&
                typeof window.dispatchEvent === "function" &&
                typeof document !== "undefined" &&
                typeof document.createEvent === "function"
              ) {
                var fakeNode = document.createElement("react");

                var invokeGuardedCallbackDev = function(
                  name,
                  func,
                  context,
                  a,
                  b,
                  c,
                  d,
                  e,
                  f
                ) {
                  // If document doesn't exist we know for sure we will crash in this method
                  // when we call document.createEvent(). However this can cause confusing
                  // errors: https://github.com/facebookincubator/create-react-app/issues/3482
                  // So we preemptively throw with a better message instead.
                  !(typeof document !== "undefined")
                    ? invariant(
                        false,
                        "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous."
                      )
                    : void 0;
                  var evt = document.createEvent("Event"); // Keeps track of whether the user-provided callback threw an error. We
                  // set this to true at the beginning, then set it to false right after
                  // calling the function. If the function errors, `didError` will never be
                  // set to false. This strategy works even if the browser is flaky and
                  // fails to call our global error handler, because it doesn't rely on
                  // the error event at all.

                  var didError = true; // Keeps track of the value of window.event so that we can reset it
                  // during the callback to let user code access window.event in the
                  // browsers that support it.

                  var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
                  // dispatching: https://github.com/facebook/react/issues/13688

                  var windowEventDescriptor = Object.getOwnPropertyDescriptor(
                    window,
                    "event"
                  ); // Create an event handler for our fake event. We will synchronously
                  // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                  // call the user-provided callback.

                  var funcArgs = Array.prototype.slice.call(arguments, 3);

                  function callCallback() {
                    // We immediately remove the callback from event listeners so that
                    // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                    // nested call would trigger the fake event handlers of any call higher
                    // in the stack.
                    fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                    // window.event assignment in both IE <= 10 as they throw an error
                    // "Member not found" in strict mode, and in Firefox which does not
                    // support window.event.

                    if (
                      typeof window.event !== "undefined" &&
                      window.hasOwnProperty("event")
                    ) {
                      window.event = windowEvent;
                    }

                    func.apply(context, funcArgs);
                    didError = false;
                  } // Create a global error event handler. We use this to capture the value
                  // that was thrown. It's possible that this error handler will fire more
                  // than once; for example, if non-React code also calls `dispatchEvent`
                  // and a handler for that event throws. We should be resilient to most of
                  // those cases. Even if our error event handler fires more than once, the
                  // last error event is always used. If the callback actually does error,
                  // we know that the last error event is the correct one, because it's not
                  // possible for anything else to have happened in between our callback
                  // erroring and the code that follows the `dispatchEvent` call below. If
                  // the callback doesn't error, but the error event was fired, we know to
                  // ignore it because `didError` will be false, as described above.

                  var error = void 0; // Use this to track whether the error event is ever called.

                  var didSetError = false;
                  var isCrossOriginError = false;

                  function handleWindowError(event) {
                    error = event.error;
                    didSetError = true;

                    if (
                      error === null &&
                      event.colno === 0 &&
                      event.lineno === 0
                    ) {
                      isCrossOriginError = true;
                    }

                    if (event.defaultPrevented) {
                      // Some other error handler has prevented default.
                      // Browsers silence the error report if this happens.
                      // We'll remember this to later decide whether to log it or not.
                      if (error != null && typeof error === "object") {
                        try {
                          error._suppressLogging = true;
                        } catch (inner) {
                          // Ignore.
                        }
                      }
                    }
                  } // Create a fake event type.

                  var evtType =
                    "react-" + (name ? name : "invokeguardedcallback"); // Attach our event handlers

                  window.addEventListener("error", handleWindowError);
                  fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
                  // errors, it will trigger our global error handler.

                  evt.initEvent(evtType, false, false);
                  fakeNode.dispatchEvent(evt);

                  if (windowEventDescriptor) {
                    Object.defineProperty(
                      window,
                      "event",
                      windowEventDescriptor
                    );
                  }

                  if (didError) {
                    if (!didSetError) {
                      // The callback errored, but the error event never fired.
                      error = new Error(
                        "An error was thrown inside one of your components, but React " +
                          "doesn't know what it was. This is likely due to browser " +
                          'flakiness. React does its best to preserve the "Pause on ' +
                          'exceptions" behavior of the DevTools, which requires some ' +
                          "DEV-mode only tricks. It's possible that these don't work in " +
                          "your browser. Try triggering the error in production mode, " +
                          "or switching to a modern browser. If you suspect that this is " +
                          "actually an issue with React, please file an issue."
                      );
                    } else if (isCrossOriginError) {
                      error = new Error(
                        "A cross-origin error was thrown. React doesn't have access to " +
                          "the actual error object in development. " +
                          "See https://fb.me/react-crossorigin-error for more information."
                      );
                    }

                    this.onError(error);
                  } // Remove our event listeners

                  window.removeEventListener("error", handleWindowError);
                };

                invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
              }
            }
            var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl; // Used by Fiber to simulate a try-catch.

            var hasError = false;
            var caughtError = null; // Used by event system to capture/rethrow the first error.

            var hasRethrowError = false;
            var rethrowError = null;
            var reporter = {
              onError: function(error) {
                hasError = true;
                caughtError = error;
              }
            };
            /**
             * Call a function while guarding against errors that happens within it.
             * Returns an error if it throws, otherwise null.
             *
             * In production, this is implemented using a try-catch. The reason we don't
             * use a try-catch directly is so that we can swap out a different
             * implementation in DEV mode.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */

            function invokeGuardedCallback(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f
            ) {
              hasError = false;
              caughtError = null;
              invokeGuardedCallbackImpl$1.apply(reporter, arguments);
            }
            /**
             * Same as invokeGuardedCallback, but instead of returning an error, it stores
             * it in a global so it can be rethrown by `rethrowCaughtError` later.
             * TODO: See if caughtError and rethrowError can be unified.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */

            function invokeGuardedCallbackAndCatchFirstError(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f
            ) {
              invokeGuardedCallback.apply(this, arguments);

              if (hasError) {
                var error = clearCaughtError();

                if (!hasRethrowError) {
                  hasRethrowError = true;
                  rethrowError = error;
                }
              }
            }
            /**
             * During execution of guarded functions we will capture the first error which
             * we will rethrow to be handled by the top level error handler.
             */

            function rethrowCaughtError() {
              if (hasRethrowError) {
                var error = rethrowError;
                hasRethrowError = false;
                rethrowError = null;
                throw error;
              }
            }

            function hasCaughtError() {
              return hasError;
            }

            function clearCaughtError() {
              if (hasError) {
                var error = caughtError;
                hasError = false;
                caughtError = null;
                return error;
              } else {
                invariant(
                  false,
                  "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."
                );
              }
            }
            /**
             * Injectable ordering of event plugins.
             */

            var eventPluginOrder = null;
            /**
             * Injectable mapping from names to event plugin modules.
             */

            var namesToPlugins = {};
            /**
             * Recomputes the plugin list using the injected plugins and plugin ordering.
             *
             * @private
             */

            function recomputePluginOrdering() {
              if (!eventPluginOrder) {
                // Wait until an `eventPluginOrder` is injected.
                return;
              }

              for (var pluginName in namesToPlugins) {
                var pluginModule = namesToPlugins[pluginName];
                var pluginIndex = eventPluginOrder.indexOf(pluginName);
                !(pluginIndex > -1)
                  ? invariant(
                      false,
                      "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",
                      pluginName
                    )
                  : void 0;

                if (plugins[pluginIndex]) {
                  continue;
                }

                !pluginModule.extractEvents
                  ? invariant(
                      false,
                      "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",
                      pluginName
                    )
                  : void 0;
                plugins[pluginIndex] = pluginModule;
                var publishedEvents = pluginModule.eventTypes;

                for (var eventName in publishedEvents) {
                  !publishEventForPlugin(
                    publishedEvents[eventName],
                    pluginModule,
                    eventName
                  )
                    ? invariant(
                        false,
                        "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",
                        eventName,
                        pluginName
                      )
                    : void 0;
                }
              }
            }
            /**
             * Publishes an event so that it can be dispatched by the supplied plugin.
             *
             * @param {object} dispatchConfig Dispatch configuration for the event.
             * @param {object} PluginModule Plugin publishing the event.
             * @return {boolean} True if the event was successfully published.
             * @private
             */

            function publishEventForPlugin(
              dispatchConfig,
              pluginModule,
              eventName
            ) {
              !!eventNameDispatchConfigs.hasOwnProperty(eventName)
                ? invariant(
                    false,
                    "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",
                    eventName
                  )
                : void 0;
              eventNameDispatchConfigs[eventName] = dispatchConfig;
              var phasedRegistrationNames =
                dispatchConfig.phasedRegistrationNames;

              if (phasedRegistrationNames) {
                for (var phaseName in phasedRegistrationNames) {
                  if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                    var phasedRegistrationName =
                      phasedRegistrationNames[phaseName];
                    publishRegistrationName(
                      phasedRegistrationName,
                      pluginModule,
                      eventName
                    );
                  }
                }

                return true;
              } else if (dispatchConfig.registrationName) {
                publishRegistrationName(
                  dispatchConfig.registrationName,
                  pluginModule,
                  eventName
                );
                return true;
              }

              return false;
            }
            /**
             * Publishes a registration name that is used to identify dispatched events.
             *
             * @param {string} registrationName Registration name to add.
             * @param {object} PluginModule Plugin publishing the event.
             * @private
             */

            function publishRegistrationName(
              registrationName,
              pluginModule,
              eventName
            ) {
              !!registrationNameModules[registrationName]
                ? invariant(
                    false,
                    "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",
                    registrationName
                  )
                : void 0;
              registrationNameModules[registrationName] = pluginModule;
              registrationNameDependencies[registrationName] =
                pluginModule.eventTypes[eventName].dependencies;
              {
                var lowerCasedName = registrationName.toLowerCase();
                possibleRegistrationNames[lowerCasedName] = registrationName;

                if (registrationName === "onDoubleClick") {
                  possibleRegistrationNames.ondblclick = registrationName;
                }
              }
            }
            /**
             * Registers plugins so that they can extract and dispatch events.
             *
             * @see {EventPluginHub}
             */

            /**
             * Ordered list of injected plugins.
             */

            var plugins = [];
            /**
             * Mapping from event name to dispatch config
             */

            var eventNameDispatchConfigs = {};
            /**
             * Mapping from registration name to plugin module
             */

            var registrationNameModules = {};
            /**
             * Mapping from registration name to event name
             */

            var registrationNameDependencies = {};
            /**
             * Mapping from lowercase registration names to the properly cased version,
             * used to warn in the case of missing event handlers. Available
             * only in true.
             * @type {Object}
             */

            var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

            /**
             * Injects an ordering of plugins (by plugin name). This allows the ordering
             * to be decoupled from injection of the actual plugins so that ordering is
             * always deterministic regardless of packaging, on-the-fly injection, etc.
             *
             * @param {array} InjectedEventPluginOrder
             * @internal
             * @see {EventPluginHub.injection.injectEventPluginOrder}
             */

            function injectEventPluginOrder(injectedEventPluginOrder) {
              !!eventPluginOrder
                ? invariant(
                    false,
                    "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."
                  )
                : void 0; // Clone the ordering so it cannot be dynamically mutated.

              eventPluginOrder = Array.prototype.slice.call(
                injectedEventPluginOrder
              );
              recomputePluginOrdering();
            }
            /**
             * Injects plugins to be used by `EventPluginHub`. The plugin names must be
             * in the ordering injected by `injectEventPluginOrder`.
             *
             * Plugins can be injected as part of page initialization or on-the-fly.
             *
             * @param {object} injectedNamesToPlugins Map from names to plugin modules.
             * @internal
             * @see {EventPluginHub.injection.injectEventPluginsByName}
             */

            function injectEventPluginsByName(injectedNamesToPlugins) {
              var isOrderingDirty = false;

              for (var pluginName in injectedNamesToPlugins) {
                if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                  continue;
                }

                var pluginModule = injectedNamesToPlugins[pluginName];

                if (
                  !namesToPlugins.hasOwnProperty(pluginName) ||
                  namesToPlugins[pluginName] !== pluginModule
                ) {
                  !!namesToPlugins[pluginName]
                    ? invariant(
                        false,
                        "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",
                        pluginName
                      )
                    : void 0;
                  namesToPlugins[pluginName] = pluginModule;
                  isOrderingDirty = true;
                }
              }

              if (isOrderingDirty) {
                recomputePluginOrdering();
              }
            }
            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warningWithoutStack = function() {};

            {
              warningWithoutStack = function(condition, format) {
                for (
                  var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                if (format === undefined) {
                  throw new Error(
                    "`warningWithoutStack(condition, format, ...args)` requires a warning " +
                      "message argument"
                  );
                }

                if (args.length > 8) {
                  // Check before the condition to catch violations early.
                  throw new Error(
                    "warningWithoutStack() currently supports at most 8 arguments."
                  );
                }

                if (condition) {
                  return;
                }

                if (typeof console !== "undefined") {
                  var argsWithFormat = args.map(function(item) {
                    return "" + item;
                  });
                  argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
                  // breaks IE9: https://github.com/facebook/react/issues/13610

                  Function.prototype.apply.call(
                    console.error,
                    console,
                    argsWithFormat
                  );
                }

                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  var argIndex = 0;
                  var message =
                    "Warning: " +
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    });
                  throw new Error(message);
                } catch (x) {}
              };
            }
            var warningWithoutStack$1 = warningWithoutStack;
            var getFiberCurrentPropsFromNode = null;
            var getInstanceFromNode = null;
            var getNodeFromInstance = null;

            function setComponentTree(
              getFiberCurrentPropsFromNodeImpl,
              getInstanceFromNodeImpl,
              getNodeFromInstanceImpl
            ) {
              getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
              getInstanceFromNode = getInstanceFromNodeImpl;
              getNodeFromInstance = getNodeFromInstanceImpl;
              {
                !(getNodeFromInstance && getInstanceFromNode)
                  ? warningWithoutStack$1(
                      false,
                      "EventPluginUtils.setComponentTree(...): Injected " +
                        "module is missing getNodeFromInstance or getInstanceFromNode."
                    )
                  : void 0;
              }
            }

            var validateEventDispatches = void 0;
            {
              validateEventDispatches = function(event) {
                var dispatchListeners = event._dispatchListeners;
                var dispatchInstances = event._dispatchInstances;
                var listenersIsArr = Array.isArray(dispatchListeners);
                var listenersLen = listenersIsArr
                  ? dispatchListeners.length
                  : dispatchListeners
                  ? 1
                  : 0;
                var instancesIsArr = Array.isArray(dispatchInstances);
                var instancesLen = instancesIsArr
                  ? dispatchInstances.length
                  : dispatchInstances
                  ? 1
                  : 0;
                !(
                  instancesIsArr === listenersIsArr &&
                  instancesLen === listenersLen
                )
                  ? warningWithoutStack$1(
                      false,
                      "EventPluginUtils: Invalid `event`."
                    )
                  : void 0;
              };
            }
            /**
             * Dispatch the event to the listener.
             * @param {SyntheticEvent} event SyntheticEvent to handle
             * @param {function} listener Application-level callback
             * @param {*} inst Internal component instance
             */

            function executeDispatch(event, listener, inst) {
              var type = event.type || "unknown-event";
              event.currentTarget = getNodeFromInstance(inst);
              invokeGuardedCallbackAndCatchFirstError(
                type,
                listener,
                undefined,
                event
              );
              event.currentTarget = null;
            }
            /**
             * Standard/simple iteration through an event's collected dispatches.
             */

            function executeDispatchesInOrder(event) {
              var dispatchListeners = event._dispatchListeners;
              var dispatchInstances = event._dispatchInstances;
              {
                validateEventDispatches(event);
              }

              if (Array.isArray(dispatchListeners)) {
                for (var i = 0; i < dispatchListeners.length; i++) {
                  if (event.isPropagationStopped()) {
                    break;
                  } // Listeners and Instances are two parallel arrays that are always in sync.

                  executeDispatch(
                    event,
                    dispatchListeners[i],
                    dispatchInstances[i]
                  );
                }
              } else if (dispatchListeners) {
                executeDispatch(event, dispatchListeners, dispatchInstances);
              }

              event._dispatchListeners = null;
              event._dispatchInstances = null;
            }
            /**
             * @see executeDispatchesInOrderStopAtTrueImpl
             */

            /**
             * Execution of a "direct" dispatch - there must be at most one dispatch
             * accumulated on the event or it is considered an error. It doesn't really make
             * sense for an event with multiple dispatches (bubbled) to keep track of the
             * return values at each dispatch execution, but it does tend to make sense when
             * dealing with "direct" dispatches.
             *
             * @return {*} The return value of executing the single dispatch.
             */

            /**
             * @param {SyntheticEvent} event
             * @return {boolean} True iff number of dispatches accumulated is greater than 0.
             */

            /**
             * Accumulates items that must not be null or undefined into the first one. This
             * is used to conserve memory by avoiding array allocations, and thus sacrifices
             * API cleanness. Since `current` can be null before being passed in and not
             * null after this function, make sure to assign it back to `current`:
             *
             * `a = accumulateInto(a, b);`
             *
             * This API should be sparingly used. Try `accumulate` for something cleaner.
             *
             * @return {*|array<*>} An accumulation of items.
             */

            function accumulateInto(current, next) {
              !(next != null)
                ? invariant(
                    false,
                    "accumulateInto(...): Accumulated items must not be null or undefined."
                  )
                : void 0;

              if (current == null) {
                return next;
              } // Both are not empty. Warning: Never call x.concat(y) when you are not
              // certain that x is an Array (x could be a string with concat method).

              if (Array.isArray(current)) {
                if (Array.isArray(next)) {
                  current.push.apply(current, next);
                  return current;
                }

                current.push(next);
                return current;
              }

              if (Array.isArray(next)) {
                // A bit too dangerous to mutate `next`.
                return [current].concat(next);
              }

              return [current, next];
            }
            /**
             * @param {array} arr an "accumulation" of items which is either an Array or
             * a single item. Useful when paired with the `accumulate` module. This is a
             * simple utility that allows us to reason about a collection of items, but
             * handling the case when there is exactly one item (and we do not need to
             * allocate an array).
             * @param {function} cb Callback invoked with each element or a collection.
             * @param {?} [scope] Scope used as `this` in a callback.
             */

            function forEachAccumulated(arr, cb, scope) {
              if (Array.isArray(arr)) {
                arr.forEach(cb, scope);
              } else if (arr) {
                cb.call(scope, arr);
              }
            }
            /**
             * Internal queue of events that have accumulated their dispatches and are
             * waiting to have their dispatches executed.
             */

            var eventQueue = null;
            /**
             * Dispatches an event and releases it back into the pool, unless persistent.
             *
             * @param {?object} event Synthetic event to be dispatched.
             * @private
             */

            var executeDispatchesAndRelease = function(event) {
              if (event) {
                executeDispatchesInOrder(event);

                if (!event.isPersistent()) {
                  event.constructor.release(event);
                }
              }
            };

            var executeDispatchesAndReleaseTopLevel = function(e) {
              return executeDispatchesAndRelease(e);
            };

            function isInteractive(tag) {
              return (
                tag === "button" ||
                tag === "input" ||
                tag === "select" ||
                tag === "textarea"
              );
            }

            function shouldPreventMouseEvent(name, type, props) {
              switch (name) {
                case "onClick":
                case "onClickCapture":
                case "onDoubleClick":
                case "onDoubleClickCapture":
                case "onMouseDown":
                case "onMouseDownCapture":
                case "onMouseMove":
                case "onMouseMoveCapture":
                case "onMouseUp":
                case "onMouseUpCapture":
                  return !!(props.disabled && isInteractive(type));

                default:
                  return false;
              }
            }
            /**
             * This is a unified interface for event plugins to be installed and configured.
             *
             * Event plugins can implement the following properties:
             *
             *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
             *     Required. When a top-level event is fired, this method is expected to
             *     extract synthetic events that will in turn be queued and dispatched.
             *
             *   `eventTypes` {object}
             *     Optional, plugins that fire events must publish a mapping of registration
             *     names that are used to register listeners. Values of this mapping must
             *     be objects that contain `registrationName` or `phasedRegistrationNames`.
             *
             *   `executeDispatch` {function(object, function, string)}
             *     Optional, allows plugins to override how an event gets dispatched. By
             *     default, the listener is simply invoked.
             *
             * Each plugin that is injected into `EventsPluginHub` is immediately operable.
             *
             * @public
             */

            /**
             * Methods for injecting dependencies.
             */

            var injection = {
              /**
               * @param {array} InjectedEventPluginOrder
               * @public
               */
              injectEventPluginOrder: injectEventPluginOrder,

              /**
               * @param {object} injectedNamesToPlugins Map from names to plugin modules.
               */
              injectEventPluginsByName: injectEventPluginsByName
            };
            /**
             * @param {object} inst The instance, which is the source of events.
             * @param {string} registrationName Name of listener (e.g. `onClick`).
             * @return {?function} The stored callback.
             */

            function getListener(inst, registrationName) {
              var listener = void 0; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
              // live here; needs to be moved to a better place soon

              var stateNode = inst.stateNode;

              if (!stateNode) {
                // Work in progress (ex: onload events in incremental mode).
                return null;
              }

              var props = getFiberCurrentPropsFromNode(stateNode);

              if (!props) {
                // Work in progress.
                return null;
              }

              listener = props[registrationName];

              if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                return null;
              }

              !(!listener || typeof listener === "function")
                ? invariant(
                    false,
                    "Expected `%s` listener to be a function, instead got a value of `%s` type.",
                    registrationName,
                    typeof listener
                  )
                : void 0;
              return listener;
            }
            /**
             * Allows registered plugins an opportunity to extract events from top-level
             * native browser events.
             *
             * @return {*} An accumulation of synthetic events.
             * @internal
             */

            function extractEvents(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              var events = null;

              for (var i = 0; i < plugins.length; i++) {
                // Not every plugin in the ordering may be loaded at runtime.
                var possiblePlugin = plugins[i];

                if (possiblePlugin) {
                  var extractedEvents = possiblePlugin.extractEvents(
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  );

                  if (extractedEvents) {
                    events = accumulateInto(events, extractedEvents);
                  }
                }
              }

              return events;
            }

            function runEventsInBatch(events) {
              if (events !== null) {
                eventQueue = accumulateInto(eventQueue, events);
              } // Set `eventQueue` to null before processing it so that we can tell if more
              // events get enqueued while processing.

              var processingEventQueue = eventQueue;
              eventQueue = null;

              if (!processingEventQueue) {
                return;
              }

              forEachAccumulated(
                processingEventQueue,
                executeDispatchesAndReleaseTopLevel
              );
              !!eventQueue
                ? invariant(
                    false,
                    "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."
                  )
                : void 0; // This would be a good time to rethrow if any of the event handlers threw.

              rethrowCaughtError();
            }

            function runExtractedEventsInBatch(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              var events = extractEvents(
                topLevelType,
                targetInst,
                nativeEvent,
                nativeEventTarget
              );
              runEventsInBatch(events);
            }

            var FunctionComponent = 0;
            var ClassComponent = 1;
            var IndeterminateComponent = 2; // Before we know whether it is function or class

            var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

            var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

            var HostComponent = 5;
            var HostText = 6;
            var Fragment = 7;
            var Mode = 8;
            var ContextConsumer = 9;
            var ContextProvider = 10;
            var ForwardRef = 11;
            var Profiler = 12;
            var SuspenseComponent = 13;
            var MemoComponent = 14;
            var SimpleMemoComponent = 15;
            var LazyComponent = 16;
            var IncompleteClassComponent = 17;
            var randomKey = Math.random()
              .toString(36)
              .slice(2);
            var internalInstanceKey = "__reactInternalInstance$" + randomKey;
            var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;

            function precacheFiberNode(hostInst, node) {
              node[internalInstanceKey] = hostInst;
            }
            /**
             * Given a DOM node, return the closest ReactDOMComponent or
             * ReactDOMTextComponent instance ancestor.
             */

            function getClosestInstanceFromNode(node) {
              if (node[internalInstanceKey]) {
                return node[internalInstanceKey];
              }

              while (!node[internalInstanceKey]) {
                if (node.parentNode) {
                  node = node.parentNode;
                } else {
                  // Top of the tree. This node must not be part of a React tree (or is
                  // unmounted, potentially).
                  return null;
                }
              }

              var inst = node[internalInstanceKey];

              if (inst.tag === HostComponent || inst.tag === HostText) {
                // In Fiber, this will always be the deepest root.
                return inst;
              }

              return null;
            }
            /**
             * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
             * instance, or null if the node was not rendered by this React.
             */

            function getInstanceFromNode$1(node) {
              var inst = node[internalInstanceKey];

              if (inst) {
                if (inst.tag === HostComponent || inst.tag === HostText) {
                  return inst;
                } else {
                  return null;
                }
              }

              return null;
            }
            /**
             * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
             * DOM node.
             */

            function getNodeFromInstance$1(inst) {
              if (inst.tag === HostComponent || inst.tag === HostText) {
                // In Fiber this, is just the state node right now. We assume it will be
                // a host component or host text.
                return inst.stateNode;
              } // Without this first invariant, passing a non-DOM-component triggers the next
              // invariant for a missing parent, which is super confusing.

              invariant(false, "getNodeFromInstance: Invalid argument.");
            }

            function getFiberCurrentPropsFromNode$1(node) {
              return node[internalEventHandlersKey] || null;
            }

            function updateFiberProps(node, props) {
              node[internalEventHandlersKey] = props;
            }

            function getParent(inst) {
              do {
                inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
                // That is depending on if we want nested subtrees (layers) to bubble
                // events to their parent. We could also go through parentNode on the
                // host node but that wouldn't work for React Native and doesn't let us
                // do the portal feature.
              } while (inst && inst.tag !== HostComponent);

              if (inst) {
                return inst;
              }

              return null;
            }
            /**
             * Return the lowest common ancestor of A and B, or null if they are in
             * different trees.
             */

            function getLowestCommonAncestor(instA, instB) {
              var depthA = 0;

              for (var tempA = instA; tempA; tempA = getParent(tempA)) {
                depthA++;
              }

              var depthB = 0;

              for (var tempB = instB; tempB; tempB = getParent(tempB)) {
                depthB++;
              } // If A is deeper, crawl up.

              while (depthA - depthB > 0) {
                instA = getParent(instA);
                depthA--;
              } // If B is deeper, crawl up.

              while (depthB - depthA > 0) {
                instB = getParent(instB);
                depthB--;
              } // Walk in lockstep until we find a match.

              var depth = depthA;

              while (depth--) {
                if (instA === instB || instA === instB.alternate) {
                  return instA;
                }

                instA = getParent(instA);
                instB = getParent(instB);
              }

              return null;
            }
            /**
             * Return if A is an ancestor of B.
             */

            /**
             * Return the parent instance of the passed-in instance.
             */

            /**
             * Simulates the traversal of a two-phase, capture/bubble event dispatch.
             */

            function traverseTwoPhase(inst, fn, arg) {
              var path = [];

              while (inst) {
                path.push(inst);
                inst = getParent(inst);
              }

              var i = void 0;

              for (i = path.length; i-- > 0; ) {
                fn(path[i], "captured", arg);
              }

              for (i = 0; i < path.length; i++) {
                fn(path[i], "bubbled", arg);
              }
            }
            /**
             * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
             * should would receive a `mouseEnter` or `mouseLeave` event.
             *
             * Does not invoke the callback on the nearest common ancestor because nothing
             * "entered" or "left" that element.
             */

            function traverseEnterLeave(from, to, fn, argFrom, argTo) {
              var common =
                from && to ? getLowestCommonAncestor(from, to) : null;
              var pathFrom = [];

              while (true) {
                if (!from) {
                  break;
                }

                if (from === common) {
                  break;
                }

                var alternate = from.alternate;

                if (alternate !== null && alternate === common) {
                  break;
                }

                pathFrom.push(from);
                from = getParent(from);
              }

              var pathTo = [];

              while (true) {
                if (!to) {
                  break;
                }

                if (to === common) {
                  break;
                }

                var _alternate = to.alternate;

                if (_alternate !== null && _alternate === common) {
                  break;
                }

                pathTo.push(to);
                to = getParent(to);
              }

              for (var i = 0; i < pathFrom.length; i++) {
                fn(pathFrom[i], "bubbled", argFrom);
              }

              for (var _i = pathTo.length; _i-- > 0; ) {
                fn(pathTo[_i], "captured", argTo);
              }
            }
            /**
             * Some event types have a notion of different registration names for different
             * "phases" of propagation. This finds listeners by a given phase.
             */

            function listenerAtPhase(inst, event, propagationPhase) {
              var registrationName =
                event.dispatchConfig.phasedRegistrationNames[propagationPhase];
              return getListener(inst, registrationName);
            }
            /**
             * A small set of propagation patterns, each of which will accept a small amount
             * of information, and generate a set of "dispatch ready event objects" - which
             * are sets of events that have already been annotated with a set of dispatched
             * listener functions/ids. The API is designed this way to discourage these
             * propagation strategies from actually executing the dispatches, since we
             * always want to collect the entire set of dispatches before executing even a
             * single one.
             */

            /**
             * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
             * here, allows us to not have to bind or create functions for each event.
             * Mutating the event's members allows us to not have to create a wrapping
             * "dispatch" object that pairs the event with the listener.
             */

            function accumulateDirectionalDispatches(inst, phase, event) {
              {
                !inst
                  ? warningWithoutStack$1(
                      false,
                      "Dispatching inst must not be null"
                    )
                  : void 0;
              }
              var listener = listenerAtPhase(inst, event, phase);

              if (listener) {
                event._dispatchListeners = accumulateInto(
                  event._dispatchListeners,
                  listener
                );
                event._dispatchInstances = accumulateInto(
                  event._dispatchInstances,
                  inst
                );
              }
            }
            /**
             * Collect dispatches (must be entirely collected before dispatching - see unit
             * tests). Lazily allocate the array to conserve memory.  We must loop through
             * each event and perform the traversal for each one. We cannot perform a
             * single traversal for the entire collection of events because each event may
             * have a different target.
             */

            function accumulateTwoPhaseDispatchesSingle(event) {
              if (event && event.dispatchConfig.phasedRegistrationNames) {
                traverseTwoPhase(
                  event._targetInst,
                  accumulateDirectionalDispatches,
                  event
                );
              }
            }
            /**
             * Accumulates without regard to direction, does not look for phased
             * registration names. Same as `accumulateDirectDispatchesSingle` but without
             * requiring that the `dispatchMarker` be the same as the dispatched ID.
             */

            function accumulateDispatches(inst, ignoredDirection, event) {
              if (inst && event && event.dispatchConfig.registrationName) {
                var registrationName = event.dispatchConfig.registrationName;
                var listener = getListener(inst, registrationName);

                if (listener) {
                  event._dispatchListeners = accumulateInto(
                    event._dispatchListeners,
                    listener
                  );
                  event._dispatchInstances = accumulateInto(
                    event._dispatchInstances,
                    inst
                  );
                }
              }
            }
            /**
             * Accumulates dispatches on an `SyntheticEvent`, but only for the
             * `dispatchMarker`.
             * @param {SyntheticEvent} event
             */

            function accumulateDirectDispatchesSingle(event) {
              if (event && event.dispatchConfig.registrationName) {
                accumulateDispatches(event._targetInst, null, event);
              }
            }

            function accumulateTwoPhaseDispatches(events) {
              forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
            }

            function accumulateEnterLeaveDispatches(leave, enter, from, to) {
              traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
            }

            function accumulateDirectDispatches(events) {
              forEachAccumulated(events, accumulateDirectDispatchesSingle);
            }

            var canUseDOM = !!(
              typeof window !== "undefined" &&
              window.document &&
              window.document.createElement
            ); // Do not uses the below two methods directly!
            // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
            // (It is the only module that is allowed to access these methods.)

            function unsafeCastStringToDOMTopLevelType(topLevelType) {
              return topLevelType;
            }

            function unsafeCastDOMTopLevelTypeToString(topLevelType) {
              return topLevelType;
            }
            /**
             * Generate a mapping of standard vendor prefixes using the defined style property and event name.
             *
             * @param {string} styleProp
             * @param {string} eventName
             * @returns {object}
             */

            function makePrefixMap(styleProp, eventName) {
              var prefixes = {};
              prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
              prefixes["Webkit" + styleProp] = "webkit" + eventName;
              prefixes["Moz" + styleProp] = "moz" + eventName;
              return prefixes;
            }
            /**
             * A list of event names to a configurable list of vendor prefixes.
             */

            var vendorPrefixes = {
              animationend: makePrefixMap("Animation", "AnimationEnd"),
              animationiteration: makePrefixMap(
                "Animation",
                "AnimationIteration"
              ),
              animationstart: makePrefixMap("Animation", "AnimationStart"),
              transitionend: makePrefixMap("Transition", "TransitionEnd")
            };
            /**
             * Event names that have already been detected and prefixed (if applicable).
             */

            var prefixedEventNames = {};
            /**
             * Element to check for prefixes on.
             */

            var style = {};
            /**
             * Bootstrap if a DOM exists.
             */

            if (canUseDOM) {
              style = document.createElement("div").style; // On some platforms, in particular some releases of Android 4.x,
              // the un-prefixed "animation" and "transition" properties are defined on the
              // style object but the events that fire will still be prefixed, so we need
              // to check if the un-prefixed events are usable, and if not remove them from the map.

              if (!("AnimationEvent" in window)) {
                delete vendorPrefixes.animationend.animation;
                delete vendorPrefixes.animationiteration.animation;
                delete vendorPrefixes.animationstart.animation;
              } // Same as above

              if (!("TransitionEvent" in window)) {
                delete vendorPrefixes.transitionend.transition;
              }
            }
            /**
             * Attempts to determine the correct vendor prefixed event name.
             *
             * @param {string} eventName
             * @returns {string}
             */

            function getVendorPrefixedEventName(eventName) {
              if (prefixedEventNames[eventName]) {
                return prefixedEventNames[eventName];
              } else if (!vendorPrefixes[eventName]) {
                return eventName;
              }

              var prefixMap = vendorPrefixes[eventName];

              for (var styleProp in prefixMap) {
                if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                  return (prefixedEventNames[eventName] = prefixMap[styleProp]);
                }
              }

              return eventName;
            }
            /**
             * To identify top level events in ReactDOM, we use constants defined by this
             * module. This is the only module that uses the unsafe* methods to express
             * that the constants actually correspond to the browser event names. This lets
             * us save some bundle size by avoiding a top level type -> event name map.
             * The rest of ReactDOM code should import top level types from this file.
             */

            var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
            var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName("animationend")
            );
            var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName("animationiteration")
            );
            var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName("animationstart")
            );
            var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
            var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
            var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType(
              "canplaythrough"
            );
            var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
            var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
            var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
            var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
            var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType(
              "compositionend"
            );
            var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType(
              "compositionstart"
            );
            var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType(
              "compositionupdate"
            );
            var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType(
              "contextmenu"
            );
            var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
            var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
            var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType(
              "dblclick"
            );
            var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
            var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
            var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
            var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
            var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
            var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
            var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
            var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
            var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
            var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType(
              "durationchange"
            );
            var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
            var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
            var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
            var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
            var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
            var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType(
              "gotpointercapture"
            );
            var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
            var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
            var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
            var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
            var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
            var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
            var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
            var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType(
              "loadeddata"
            );
            var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType(
              "loadedmetadata"
            );
            var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType(
              "lostpointercapture"
            );
            var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
            var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
            var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
            var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
            var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
            var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
            var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
            var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
            var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
            var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType(
              "pointercancel"
            );
            var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType(
              "pointerdown"
            );
            var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType(
              "pointermove"
            );
            var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType(
              "pointerout"
            );
            var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType(
              "pointerover"
            );
            var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
            var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
            var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType(
              "ratechange"
            );
            var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
            var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
            var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
            var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
            var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType(
              "selectionchange"
            );
            var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
            var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
            var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
            var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
            var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType(
              "timeupdate"
            );
            var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
            var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType(
              "touchcancel"
            );
            var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
            var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
            var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType(
              "touchstart"
            );
            var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(
              getVendorPrefixedEventName("transitionend")
            );
            var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType(
              "volumechange"
            );
            var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
            var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel"); // List of events that need to be individually attached to media elements.
            // Note that events in this list will *not* be listened to at the top level
            // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

            var mediaEventTypes = [
              TOP_ABORT,
              TOP_CAN_PLAY,
              TOP_CAN_PLAY_THROUGH,
              TOP_DURATION_CHANGE,
              TOP_EMPTIED,
              TOP_ENCRYPTED,
              TOP_ENDED,
              TOP_ERROR,
              TOP_LOADED_DATA,
              TOP_LOADED_METADATA,
              TOP_LOAD_START,
              TOP_PAUSE,
              TOP_PLAY,
              TOP_PLAYING,
              TOP_PROGRESS,
              TOP_RATE_CHANGE,
              TOP_SEEKED,
              TOP_SEEKING,
              TOP_STALLED,
              TOP_SUSPEND,
              TOP_TIME_UPDATE,
              TOP_VOLUME_CHANGE,
              TOP_WAITING
            ];

            function getRawEventName(topLevelType) {
              return unsafeCastDOMTopLevelTypeToString(topLevelType);
            }
            /**
             * These variables store information about text content of a target node,
             * allowing comparison of content before and after a given event.
             *
             * Identify the node where selection currently begins, then observe
             * both its text content and its current position in the DOM. Since the
             * browser may natively replace the target node during composition, we can
             * use its position to find its replacement.
             *
             *
             */

            var root = null;
            var startText = null;
            var fallbackText = null;

            function initialize(nativeEventTarget) {
              root = nativeEventTarget;
              startText = getText();
              return true;
            }

            function reset() {
              root = null;
              startText = null;
              fallbackText = null;
            }

            function getData() {
              if (fallbackText) {
                return fallbackText;
              }

              var start = void 0;
              var startValue = startText;
              var startLength = startValue.length;
              var end = void 0;
              var endValue = getText();
              var endLength = endValue.length;

              for (start = 0; start < startLength; start++) {
                if (startValue[start] !== endValue[start]) {
                  break;
                }
              }

              var minEnd = startLength - start;

              for (end = 1; end <= minEnd; end++) {
                if (
                  startValue[startLength - end] !== endValue[endLength - end]
                ) {
                  break;
                }
              }

              var sliceTail = end > 1 ? 1 - end : undefined;
              fallbackText = endValue.slice(start, sliceTail);
              return fallbackText;
            }

            function getText() {
              if ("value" in root) {
                return root.value;
              }

              return root.textContent;
            }
            /* eslint valid-typeof: 0 */

            var EVENT_POOL_SIZE = 10;
            /**
             * @interface Event
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var EventInterface = {
              type: null,
              target: null,
              // currentTarget is set when dispatching; no use in copying it here
              currentTarget: function() {
                return null;
              },
              eventPhase: null,
              bubbles: null,
              cancelable: null,
              timeStamp: function(event) {
                return event.timeStamp || Date.now();
              },
              defaultPrevented: null,
              isTrusted: null
            };

            function functionThatReturnsTrue() {
              return true;
            }

            function functionThatReturnsFalse() {
              return false;
            }
            /**
             * Synthetic events are dispatched by event plugins, typically in response to a
             * top-level event delegation handler.
             *
             * These systems should generally use pooling to reduce the frequency of garbage
             * collection. The system should check `isPersistent` to determine whether the
             * event should be released into the pool after being dispatched. Users that
             * need a persisted event should invoke `persist`.
             *
             * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
             * normalizing browser quirks. Subclasses do not necessarily have to implement a
             * DOM interface; custom application-specific events can also subclass this.
             *
             * @param {object} dispatchConfig Configuration used to dispatch this event.
             * @param {*} targetInst Marker identifying the event target.
             * @param {object} nativeEvent Native browser event.
             * @param {DOMEventTarget} nativeEventTarget Target node.
             */

            function SyntheticEvent(
              dispatchConfig,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              {
                // these have a getter/setter for warnings
                delete this.nativeEvent;
                delete this.preventDefault;
                delete this.stopPropagation;
                delete this.isDefaultPrevented;
                delete this.isPropagationStopped;
              }
              this.dispatchConfig = dispatchConfig;
              this._targetInst = targetInst;
              this.nativeEvent = nativeEvent;
              var Interface = this.constructor.Interface;

              for (var propName in Interface) {
                if (!Interface.hasOwnProperty(propName)) {
                  continue;
                }

                {
                  delete this[propName]; // this has a getter/setter for warnings
                }
                var normalize = Interface[propName];

                if (normalize) {
                  this[propName] = normalize(nativeEvent);
                } else {
                  if (propName === "target") {
                    this.target = nativeEventTarget;
                  } else {
                    this[propName] = nativeEvent[propName];
                  }
                }
              }

              var defaultPrevented =
                nativeEvent.defaultPrevented != null
                  ? nativeEvent.defaultPrevented
                  : nativeEvent.returnValue === false;

              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }

              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }

            _assign(SyntheticEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;

                if (!event) {
                  return;
                }

                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }

                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;

                if (!event) {
                  return;
                }

                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  // The ChangeEventPlugin registers a "propertychange" event for
                  // IE. This event does not support bubbling or cancelling, and
                  // any references to cancelBubble throw "Member not found".  A
                  // typeof check of "unknown" circumvents this issue (and is also
                  // IE specific).
                  event.cancelBubble = true;
                }

                this.isPropagationStopped = functionThatReturnsTrue;
              },

              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
                this.isPersistent = functionThatReturnsTrue;
              },

              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsFalse,

              /**
               * `PooledClass` looks for `destructor` on each instance it releases.
               */
              destructor: function() {
                var Interface = this.constructor.Interface;

                for (var propName in Interface) {
                  {
                    Object.defineProperty(
                      this,
                      propName,
                      getPooledWarningPropertyDefinition(
                        propName,
                        Interface[propName]
                      )
                    );
                  }
                }

                this.dispatchConfig = null;
                this._targetInst = null;
                this.nativeEvent = null;
                this.isDefaultPrevented = functionThatReturnsFalse;
                this.isPropagationStopped = functionThatReturnsFalse;
                this._dispatchListeners = null;
                this._dispatchInstances = null;
                {
                  Object.defineProperty(
                    this,
                    "nativeEvent",
                    getPooledWarningPropertyDefinition("nativeEvent", null)
                  );
                  Object.defineProperty(
                    this,
                    "isDefaultPrevented",
                    getPooledWarningPropertyDefinition(
                      "isDefaultPrevented",
                      functionThatReturnsFalse
                    )
                  );
                  Object.defineProperty(
                    this,
                    "isPropagationStopped",
                    getPooledWarningPropertyDefinition(
                      "isPropagationStopped",
                      functionThatReturnsFalse
                    )
                  );
                  Object.defineProperty(
                    this,
                    "preventDefault",
                    getPooledWarningPropertyDefinition(
                      "preventDefault",
                      function() {}
                    )
                  );
                  Object.defineProperty(
                    this,
                    "stopPropagation",
                    getPooledWarningPropertyDefinition(
                      "stopPropagation",
                      function() {}
                    )
                  );
                }
              }
            });

            SyntheticEvent.Interface = EventInterface;
            /**
             * Helper to reduce boilerplate when creating subclasses.
             */

            SyntheticEvent.extend = function(Interface) {
              var Super = this;

              var E = function() {};

              E.prototype = Super.prototype;
              var prototype = new E();

              function Class() {
                return Super.apply(this, arguments);
              }

              _assign(prototype, Class.prototype);

              Class.prototype = prototype;
              Class.prototype.constructor = Class;
              Class.Interface = _assign({}, Super.Interface, Interface);
              Class.extend = Super.extend;
              addEventPoolingTo(Class);
              return Class;
            };

            addEventPoolingTo(SyntheticEvent);
            /**
             * Helper to nullify syntheticEvent instance properties when destructing
             *
             * @param {String} propName
             * @param {?object} getVal
             * @return {object} defineProperty object
             */

            function getPooledWarningPropertyDefinition(propName, getVal) {
              var isFunction = typeof getVal === "function";
              return {
                configurable: true,
                set: set,
                get: get
              };

              function set(val) {
                var action = isFunction
                  ? "setting the method"
                  : "setting the property";
                warn(action, "This is effectively a no-op");
                return val;
              }

              function get() {
                var action = isFunction
                  ? "accessing the method"
                  : "accessing the property";
                var result = isFunction
                  ? "This is a no-op function"
                  : "This is set to null";
                warn(action, result);
                return getVal;
              }

              function warn(action, result) {
                var warningCondition = false;
                !warningCondition
                  ? warningWithoutStack$1(
                      false,
                      "This synthetic event is reused for performance reasons. If you're seeing this, " +
                        "you're %s `%s` on a released/nullified synthetic event. %s. " +
                        "If you must keep the original synthetic event around, use event.persist(). " +
                        "See https://fb.me/react-event-pooling for more information.",
                      action,
                      propName,
                      result
                    )
                  : void 0;
              }
            }

            function getPooledEvent(
              dispatchConfig,
              targetInst,
              nativeEvent,
              nativeInst
            ) {
              var EventConstructor = this;

              if (EventConstructor.eventPool.length) {
                var instance = EventConstructor.eventPool.pop();
                EventConstructor.call(
                  instance,
                  dispatchConfig,
                  targetInst,
                  nativeEvent,
                  nativeInst
                );
                return instance;
              }

              return new EventConstructor(
                dispatchConfig,
                targetInst,
                nativeEvent,
                nativeInst
              );
            }

            function releasePooledEvent(event) {
              var EventConstructor = this;
              !(event instanceof EventConstructor)
                ? invariant(
                    false,
                    "Trying to release an event instance into a pool of a different type."
                  )
                : void 0;
              event.destructor();

              if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
                EventConstructor.eventPool.push(event);
              }
            }

            function addEventPoolingTo(EventConstructor) {
              EventConstructor.eventPool = [];
              EventConstructor.getPooled = getPooledEvent;
              EventConstructor.release = releasePooledEvent;
            }
            /**
             * @interface Event
             * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
             */

            var SyntheticCompositionEvent = SyntheticEvent.extend({
              data: null
            });
            /**
             * @interface Event
             * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
             *      /#events-inputevents
             */

            var SyntheticInputEvent = SyntheticEvent.extend({
              data: null
            });
            var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

            var START_KEYCODE = 229;
            var canUseCompositionEvent =
              canUseDOM && "CompositionEvent" in window;
            var documentMode = null;

            if (canUseDOM && "documentMode" in document) {
              documentMode = document.documentMode;
            } // Webkit offers a very useful `textInput` event that can be used to
            // directly represent `beforeInput`. The IE `textinput` event is not as
            // useful, so we don't use it.

            var canUseTextInputEvent =
              canUseDOM && "TextEvent" in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
            // by the native compositionend event may be incorrect. Japanese ideographic
            // spaces, for instance (\u3000) are not recorded correctly.

            var useFallbackCompositionData =
              canUseDOM &&
              (!canUseCompositionEvent ||
                (documentMode && documentMode > 8 && documentMode <= 11));
            var SPACEBAR_CODE = 32;
            var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

            var eventTypes = {
              beforeInput: {
                phasedRegistrationNames: {
                  bubbled: "onBeforeInput",
                  captured: "onBeforeInputCapture"
                },
                dependencies: [
                  TOP_COMPOSITION_END,
                  TOP_KEY_PRESS,
                  TOP_TEXT_INPUT,
                  TOP_PASTE
                ]
              },
              compositionEnd: {
                phasedRegistrationNames: {
                  bubbled: "onCompositionEnd",
                  captured: "onCompositionEndCapture"
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_COMPOSITION_END,
                  TOP_KEY_DOWN,
                  TOP_KEY_PRESS,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN
                ]
              },
              compositionStart: {
                phasedRegistrationNames: {
                  bubbled: "onCompositionStart",
                  captured: "onCompositionStartCapture"
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_COMPOSITION_START,
                  TOP_KEY_DOWN,
                  TOP_KEY_PRESS,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN
                ]
              },
              compositionUpdate: {
                phasedRegistrationNames: {
                  bubbled: "onCompositionUpdate",
                  captured: "onCompositionUpdateCapture"
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_COMPOSITION_UPDATE,
                  TOP_KEY_DOWN,
                  TOP_KEY_PRESS,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN
                ]
              }
            }; // Track whether we've ever handled a keypress on the space key.

            var hasSpaceKeypress = false;
            /**
             * Return whether a native keypress event is assumed to be a command.
             * This is required because Firefox fires `keypress` events for key commands
             * (cut, copy, select-all, etc.) even though no character is inserted.
             */

            function isKeypressCommand(nativeEvent) {
              return (
                (nativeEvent.ctrlKey ||
                  nativeEvent.altKey ||
                  nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
                !(nativeEvent.ctrlKey && nativeEvent.altKey)
              );
            }
            /**
             * Translate native top level events into event types.
             *
             * @param {string} topLevelType
             * @return {object}
             */

            function getCompositionEventType(topLevelType) {
              switch (topLevelType) {
                case TOP_COMPOSITION_START:
                  return eventTypes.compositionStart;

                case TOP_COMPOSITION_END:
                  return eventTypes.compositionEnd;

                case TOP_COMPOSITION_UPDATE:
                  return eventTypes.compositionUpdate;
              }
            }
            /**
             * Does our fallback best-guess model think this event signifies that
             * composition has begun?
             *
             * @param {string} topLevelType
             * @param {object} nativeEvent
             * @return {boolean}
             */

            function isFallbackCompositionStart(topLevelType, nativeEvent) {
              return (
                topLevelType === TOP_KEY_DOWN &&
                nativeEvent.keyCode === START_KEYCODE
              );
            }
            /**
             * Does our fallback mode think that this event is the end of composition?
             *
             * @param {string} topLevelType
             * @param {object} nativeEvent
             * @return {boolean}
             */

            function isFallbackCompositionEnd(topLevelType, nativeEvent) {
              switch (topLevelType) {
                case TOP_KEY_UP:
                  // Command keys insert or clear IME input.
                  return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

                case TOP_KEY_DOWN:
                  // Expect IME keyCode on each keydown. If we get any other
                  // code we must have exited earlier.
                  return nativeEvent.keyCode !== START_KEYCODE;

                case TOP_KEY_PRESS:
                case TOP_MOUSE_DOWN:
                case TOP_BLUR:
                  // Events are not possible without cancelling IME.
                  return true;

                default:
                  return false;
              }
            }
            /**
             * Google Input Tools provides composition data via a CustomEvent,
             * with the `data` property populated in the `detail` object. If this
             * is available on the event object, use it. If not, this is a plain
             * composition event and we have nothing special to extract.
             *
             * @param {object} nativeEvent
             * @return {?string}
             */

            function getDataFromCustomEvent(nativeEvent) {
              var detail = nativeEvent.detail;

              if (typeof detail === "object" && "data" in detail) {
                return detail.data;
              }

              return null;
            }
            /**
             * Check if a composition event was triggered by Korean IME.
             * Our fallback mode does not work well with IE's Korean IME,
             * so just use native composition events when Korean IME is used.
             * Although CompositionEvent.locale property is deprecated,
             * it is available in IE, where our fallback mode is enabled.
             *
             * @param {object} nativeEvent
             * @return {boolean}
             */

            function isUsingKoreanIME(nativeEvent) {
              return nativeEvent.locale === "ko";
            } // Track the current IME composition status, if any.

            var isComposing = false;
            /**
             * @return {?object} A SyntheticCompositionEvent.
             */

            function extractCompositionEvent(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              var eventType = void 0;
              var fallbackData = void 0;

              if (canUseCompositionEvent) {
                eventType = getCompositionEventType(topLevelType);
              } else if (!isComposing) {
                if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                  eventType = eventTypes.compositionStart;
                }
              } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                eventType = eventTypes.compositionEnd;
              }

              if (!eventType) {
                return null;
              }

              if (
                useFallbackCompositionData &&
                !isUsingKoreanIME(nativeEvent)
              ) {
                // The current composition is stored statically and must not be
                // overwritten while composition continues.
                if (!isComposing && eventType === eventTypes.compositionStart) {
                  isComposing = initialize(nativeEventTarget);
                } else if (eventType === eventTypes.compositionEnd) {
                  if (isComposing) {
                    fallbackData = getData();
                  }
                }
              }

              var event = SyntheticCompositionEvent.getPooled(
                eventType,
                targetInst,
                nativeEvent,
                nativeEventTarget
              );

              if (fallbackData) {
                // Inject data generated from fallback path into the synthetic event.
                // This matches the property of native CompositionEventInterface.
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);

                if (customData !== null) {
                  event.data = customData;
                }
              }

              accumulateTwoPhaseDispatches(event);
              return event;
            }
            /**
             * @param {TopLevelType} topLevelType Number from `TopLevelType`.
             * @param {object} nativeEvent Native browser event.
             * @return {?string} The string corresponding to this `beforeInput` event.
             */

            function getNativeBeforeInputChars(topLevelType, nativeEvent) {
              switch (topLevelType) {
                case TOP_COMPOSITION_END:
                  return getDataFromCustomEvent(nativeEvent);

                case TOP_KEY_PRESS:
                  /**
                   * If native `textInput` events are available, our goal is to make
                   * use of them. However, there is a special case: the spacebar key.
                   * In Webkit, preventing default on a spacebar `textInput` event
                   * cancels character insertion, but it *also* causes the browser
                   * to fall back to its default spacebar behavior of scrolling the
                   * page.
                   *
                   * Tracking at:
                   * https://code.google.com/p/chromium/issues/detail?id=355103
                   *
                   * To avoid this issue, use the keypress event as if no `textInput`
                   * event is available.
                   */
                  var which = nativeEvent.which;

                  if (which !== SPACEBAR_CODE) {
                    return null;
                  }

                  hasSpaceKeypress = true;
                  return SPACEBAR_CHAR;

                case TOP_TEXT_INPUT:
                  // Record the characters to be added to the DOM.
                  var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                  // it at the keypress level and bail immediately. Android Chrome
                  // doesn't give us keycodes, so we need to ignore it.

                  if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                    return null;
                  }

                  return chars;

                default:
                  // For other native event types, do nothing.
                  return null;
              }
            }
            /**
             * For browsers that do not provide the `textInput` event, extract the
             * appropriate string to use for SyntheticInputEvent.
             *
             * @param {number} topLevelType Number from `TopLevelEventTypes`.
             * @param {object} nativeEvent Native browser event.
             * @return {?string} The fallback string for this `beforeInput` event.
             */

            function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
              // If we are currently composing (IME) and using a fallback to do so,
              // try to extract the composed characters from the fallback object.
              // If composition event is available, we extract a string only at
              // compositionevent, otherwise extract it at fallback events.
              if (isComposing) {
                if (
                  topLevelType === TOP_COMPOSITION_END ||
                  (!canUseCompositionEvent &&
                    isFallbackCompositionEnd(topLevelType, nativeEvent))
                ) {
                  var chars = getData();
                  reset();
                  isComposing = false;
                  return chars;
                }

                return null;
              }

              switch (topLevelType) {
                case TOP_PASTE:
                  // If a paste event occurs after a keypress, throw out the input
                  // chars. Paste events should not lead to BeforeInput events.
                  return null;

                case TOP_KEY_PRESS:
                  /**
                   * As of v27, Firefox may fire keypress events even when no character
                   * will be inserted. A few possibilities:
                   *
                   * - `which` is `0`. Arrow keys, Esc key, etc.
                   *
                   * - `which` is the pressed key code, but no char is available.
                   *   Ex: 'AltGr + d` in Polish. There is no modified character for
                   *   this key combination and no character is inserted into the
                   *   document, but FF fires the keypress for char code `100` anyway.
                   *   No `input` event will occur.
                   *
                   * - `which` is the pressed key code, but a command combination is
                   *   being used. Ex: `Cmd+C`. No character is inserted, and no
                   *   `input` event will occur.
                   */
                  if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) {
                      return nativeEvent.char;
                    } else if (nativeEvent.which) {
                      return String.fromCharCode(nativeEvent.which);
                    }
                  }

                  return null;

                case TOP_COMPOSITION_END:
                  return useFallbackCompositionData &&
                    !isUsingKoreanIME(nativeEvent)
                    ? null
                    : nativeEvent.data;

                default:
                  return null;
              }
            }
            /**
             * Extract a SyntheticInputEvent for `beforeInput`, based on either native
             * `textInput` or fallback behavior.
             *
             * @return {?object} A SyntheticInputEvent.
             */

            function extractBeforeInputEvent(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              var chars = void 0;

              if (canUseTextInputEvent) {
                chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
              } else {
                chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
              } // If no characters are being inserted, no BeforeInput event should
              // be fired.

              if (!chars) {
                return null;
              }

              var event = SyntheticInputEvent.getPooled(
                eventTypes.beforeInput,
                targetInst,
                nativeEvent,
                nativeEventTarget
              );
              event.data = chars;
              accumulateTwoPhaseDispatches(event);
              return event;
            }
            /**
             * Create an `onBeforeInput` event to match
             * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
             *
             * This event plugin is based on the native `textInput` event
             * available in Chrome, Safari, Opera, and IE. This event fires after
             * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
             *
             * `beforeInput` is spec'd but not implemented in any browsers, and
             * the `input` event does not provide any useful information about what has
             * actually been added, contrary to the spec. Thus, `textInput` is the best
             * available event to identify the characters that have actually been inserted
             * into the target node.
             *
             * This plugin is also responsible for emitting `composition` events, thus
             * allowing us to share composition fallback code for both `beforeInput` and
             * `composition` event types.
             */

            var BeforeInputEventPlugin = {
              eventTypes: eventTypes,
              extractEvents: function(
                topLevelType,
                targetInst,
                nativeEvent,
                nativeEventTarget
              ) {
                var composition = extractCompositionEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                );
                var beforeInput = extractBeforeInputEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                );

                if (composition === null) {
                  return beforeInput;
                }

                if (beforeInput === null) {
                  return composition;
                }

                return [composition, beforeInput];
              }
            }; // Use to restore controlled state after a change event has fired.

            var restoreImpl = null;
            var restoreTarget = null;
            var restoreQueue = null;

            function restoreStateOfTarget(target) {
              // We perform this translation at the end of the event loop so that we
              // always receive the correct fiber here
              var internalInstance = getInstanceFromNode(target);

              if (!internalInstance) {
                // Unmounted
                return;
              }

              !(typeof restoreImpl === "function")
                ? invariant(
                    false,
                    "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              var props = getFiberCurrentPropsFromNode(
                internalInstance.stateNode
              );
              restoreImpl(
                internalInstance.stateNode,
                internalInstance.type,
                props
              );
            }

            function setRestoreImplementation(impl) {
              restoreImpl = impl;
            }

            function enqueueStateRestore(target) {
              if (restoreTarget) {
                if (restoreQueue) {
                  restoreQueue.push(target);
                } else {
                  restoreQueue = [target];
                }
              } else {
                restoreTarget = target;
              }
            }

            function needsStateRestore() {
              return restoreTarget !== null || restoreQueue !== null;
            }

            function restoreStateIfNeeded() {
              if (!restoreTarget) {
                return;
              }

              var target = restoreTarget;
              var queuedTargets = restoreQueue;
              restoreTarget = null;
              restoreQueue = null;
              restoreStateOfTarget(target);

              if (queuedTargets) {
                for (var i = 0; i < queuedTargets.length; i++) {
                  restoreStateOfTarget(queuedTargets[i]);
                }
              }
            } // Used as a way to call batchedUpdates when we don't have a reference to
            // the renderer. Such as when we're dispatching events or if third party
            // libraries need to call batchedUpdates. Eventually, this API will go away when
            // everything is batched by default. We'll then have a similar API to opt-out of
            // scheduled work and instead do synchronous work.
            // Defaults

            var _batchedUpdatesImpl = function(fn, bookkeeping) {
              return fn(bookkeeping);
            };

            var _interactiveUpdatesImpl = function(fn, a, b) {
              return fn(a, b);
            };

            var _flushInteractiveUpdatesImpl = function() {};

            var isBatching = false;

            function batchedUpdates(fn, bookkeeping) {
              if (isBatching) {
                // If we are currently inside another batch, we need to wait until it
                // fully completes before restoring state.
                return fn(bookkeeping);
              }

              isBatching = true;

              try {
                return _batchedUpdatesImpl(fn, bookkeeping);
              } finally {
                // Here we wait until all updates have propagated, which is important
                // when using controlled components within layers:
                // https://github.com/facebook/react/issues/1698
                // Then we restore state of any controlled component.
                isBatching = false;
                var controlledComponentsHavePendingUpdates = needsStateRestore();

                if (controlledComponentsHavePendingUpdates) {
                  // If a controlled event was fired, we may need to restore the state of
                  // the DOM node back to the controlled value. This is necessary when React
                  // bails out of the update without touching the DOM.
                  _flushInteractiveUpdatesImpl();

                  restoreStateIfNeeded();
                }
              }
            }

            function interactiveUpdates(fn, a, b) {
              return _interactiveUpdatesImpl(fn, a, b);
            }

            function setBatchingImplementation(
              batchedUpdatesImpl,
              interactiveUpdatesImpl,
              flushInteractiveUpdatesImpl
            ) {
              _batchedUpdatesImpl = batchedUpdatesImpl;
              _interactiveUpdatesImpl = interactiveUpdatesImpl;
              _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
            }
            /**
             * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
             */

            var supportedInputTypes = {
              color: true,
              date: true,
              datetime: true,
              "datetime-local": true,
              email: true,
              month: true,
              number: true,
              password: true,
              range: true,
              search: true,
              tel: true,
              text: true,
              time: true,
              url: true,
              week: true
            };

            function isTextInputElement(elem) {
              var nodeName =
                elem && elem.nodeName && elem.nodeName.toLowerCase();

              if (nodeName === "input") {
                return !!supportedInputTypes[elem.type];
              }

              if (nodeName === "textarea") {
                return true;
              }

              return false;
            }
            /**
             * HTML nodeType values that represent the type of the node
             */

            var ELEMENT_NODE = 1;
            var TEXT_NODE = 3;
            var COMMENT_NODE = 8;
            var DOCUMENT_NODE = 9;
            var DOCUMENT_FRAGMENT_NODE = 11;
            /**
             * Gets the target node from a native browser event by accounting for
             * inconsistencies in browser DOM APIs.
             *
             * @param {object} nativeEvent Native browser event.
             * @return {DOMEventTarget} Target node.
             */

            function getEventTarget(nativeEvent) {
              // Fallback to nativeEvent.srcElement for IE9
              // https://github.com/facebook/react/issues/12506
              var target =
                nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

              if (target.correspondingUseElement) {
                target = target.correspondingUseElement;
              } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
              // @see http://www.quirksmode.org/js/events_properties.html

              return target.nodeType === TEXT_NODE ? target.parentNode : target;
            }
            /**
             * Checks if an event is supported in the current execution environment.
             *
             * NOTE: This will not work correctly for non-generic events such as `change`,
             * `reset`, `load`, `error`, and `select`.
             *
             * Borrows from Modernizr.
             *
             * @param {string} eventNameSuffix Event name, e.g. "click".
             * @return {boolean} True if the event is supported.
             * @internal
             * @license Modernizr 3.0.0pre (Custom Build) | MIT
             */

            function isEventSupported(eventNameSuffix) {
              if (!canUseDOM) {
                return false;
              }

              var eventName = "on" + eventNameSuffix;
              var isSupported = eventName in document;

              if (!isSupported) {
                var element = document.createElement("div");
                element.setAttribute(eventName, "return;");
                isSupported = typeof element[eventName] === "function";
              }

              return isSupported;
            }

            function isCheckable(elem) {
              var type = elem.type;
              var nodeName = elem.nodeName;
              return (
                nodeName &&
                nodeName.toLowerCase() === "input" &&
                (type === "checkbox" || type === "radio")
              );
            }

            function getTracker(node) {
              return node._valueTracker;
            }

            function detachTracker(node) {
              node._valueTracker = null;
            }

            function getValueFromNode(node) {
              var value = "";

              if (!node) {
                return value;
              }

              if (isCheckable(node)) {
                value = node.checked ? "true" : "false";
              } else {
                value = node.value;
              }

              return value;
            }

            function trackValueOnNode(node) {
              var valueField = isCheckable(node) ? "checked" : "value";
              var descriptor = Object.getOwnPropertyDescriptor(
                node.constructor.prototype,
                valueField
              );
              var currentValue = "" + node[valueField]; // if someone has already defined a value or Safari, then bail
              // and don't track value will cause over reporting of changes,
              // but it's better then a hard failure
              // (needed for certain tests that spyOn input values and Safari)

              if (
                node.hasOwnProperty(valueField) ||
                typeof descriptor === "undefined" ||
                typeof descriptor.get !== "function" ||
                typeof descriptor.set !== "function"
              ) {
                return;
              }

              var get = descriptor.get,
                set = descriptor.set;
              Object.defineProperty(node, valueField, {
                configurable: true,
                get: function() {
                  return get.call(this);
                },
                set: function(value) {
                  currentValue = "" + value;
                  set.call(this, value);
                }
              }); // We could've passed this the first time
              // but it triggers a bug in IE11 and Edge 14/15.
              // Calling defineProperty() again should be equivalent.
              // https://github.com/facebook/react/issues/11768

              Object.defineProperty(node, valueField, {
                enumerable: descriptor.enumerable
              });
              var tracker = {
                getValue: function() {
                  return currentValue;
                },
                setValue: function(value) {
                  currentValue = "" + value;
                },
                stopTracking: function() {
                  detachTracker(node);
                  delete node[valueField];
                }
              };
              return tracker;
            }

            function track(node) {
              if (getTracker(node)) {
                return;
              } // TODO: Once it's just Fiber we can move this to node._wrapperState

              node._valueTracker = trackValueOnNode(node);
            }

            function updateValueIfChanged(node) {
              if (!node) {
                return false;
              }

              var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
              // that trying again will succeed

              if (!tracker) {
                return true;
              }

              var lastValue = tracker.getValue();
              var nextValue = getValueFromNode(node);

              if (nextValue !== lastValue) {
                tracker.setValue(nextValue);
                return true;
              }

              return false;
            }

            var ReactSharedInternals =
              React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

            var describeComponentFrame = function(name, source, ownerName) {
              var sourceInfo = "";

              if (source) {
                var path = source.fileName;
                var fileName = path.replace(BEFORE_SLASH_RE, "");
                {
                  // In DEV, include code for a common special case:
                  // prefer "folder/index.js" instead of just "index.js".
                  if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);

                    if (match) {
                      var pathBeforeSlash = match[1];

                      if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(
                          BEFORE_SLASH_RE,
                          ""
                        );
                        fileName = folderName + "/" + fileName;
                      }
                    }
                  }
                }
                sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
              } else if (ownerName) {
                sourceInfo = " (created by " + ownerName + ")";
              }

              return "\n    in " + (name || "Unknown") + sourceInfo;
            }; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.

            var hasSymbol = typeof Symbol === "function" && Symbol.for;
            var REACT_ELEMENT_TYPE = hasSymbol
              ? Symbol.for("react.element")
              : 0xeac7;
            var REACT_PORTAL_TYPE = hasSymbol
              ? Symbol.for("react.portal")
              : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol
              ? Symbol.for("react.fragment")
              : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol
              ? Symbol.for("react.strict_mode")
              : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol
              ? Symbol.for("react.profiler")
              : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol
              ? Symbol.for("react.provider")
              : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol
              ? Symbol.for("react.context")
              : 0xeace;
            var REACT_CONCURRENT_MODE_TYPE = hasSymbol
              ? Symbol.for("react.concurrent_mode")
              : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol
              ? Symbol.for("react.forward_ref")
              : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol
              ? Symbol.for("react.suspense")
              : 0xead1;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
            var MAYBE_ITERATOR_SYMBOL =
              typeof Symbol === "function" && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = "@@iterator";

            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== "object") {
                return null;
              }

              var maybeIterator =
                (MAYBE_ITERATOR_SYMBOL &&
                  maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                maybeIterable[FAUX_ITERATOR_SYMBOL];

              if (typeof maybeIterator === "function") {
                return maybeIterator;
              }

              return null;
            }

            var Pending = 0;
            var Resolved = 1;
            var Rejected = 2;

            function refineResolvedLazyComponent(lazyComponent) {
              return lazyComponent._status === Resolved
                ? lazyComponent._result
                : null;
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || "";
              return (
                outerType.displayName ||
                (functionName !== ""
                  ? wrapperName + "(" + functionName + ")"
                  : wrapperName)
              );
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }

              {
                if (typeof type.tag === "number") {
                  warningWithoutStack$1(
                    false,
                    "Received an unexpected object in getComponentName(). " +
                      "This is likely a bug in React. Please file an issue."
                  );
                }
              }

              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }

              if (typeof type === "string") {
                return type;
              }

              switch (type) {
                case REACT_CONCURRENT_MODE_TYPE:
                  return "ConcurrentMode";

                case REACT_FRAGMENT_TYPE:
                  return "Fragment";

                case REACT_PORTAL_TYPE:
                  return "Portal";

                case REACT_PROFILER_TYPE:
                  return "Profiler";

                case REACT_STRICT_MODE_TYPE:
                  return "StrictMode";

                case REACT_SUSPENSE_TYPE:
                  return "Suspense";
              }

              if (typeof type === "object") {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    return "Context.Consumer";

                  case REACT_PROVIDER_TYPE:
                    return "Context.Provider";

                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, "ForwardRef");

                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);

                  case REACT_LAZY_TYPE: {
                    var thenable = type;
                    var resolvedThenable = refineResolvedLazyComponent(
                      thenable
                    );

                    if (resolvedThenable) {
                      return getComponentName(resolvedThenable);
                    }
                  }
                }
              }

              return null;
            }

            var ReactDebugCurrentFrame =
              ReactSharedInternals.ReactDebugCurrentFrame;

            function describeFiber(fiber) {
              switch (fiber.tag) {
                case IndeterminateComponent:
                case LazyComponent:
                case FunctionComponent:
                case ClassComponent:
                case HostComponent:
                case Mode:
                case SuspenseComponent:
                  var owner = fiber._debugOwner;
                  var source = fiber._debugSource;
                  var name = getComponentName(fiber.type);
                  var ownerName = null;

                  if (owner) {
                    ownerName = getComponentName(owner.type);
                  }

                  return describeComponentFrame(name, source, ownerName);

                default:
                  return "";
              }
            }

            function getStackByFiberInDevAndProd(workInProgress) {
              var info = "";
              var node = workInProgress;

              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);

              return info;
            }

            var current = null;
            var phase = null;

            function getCurrentFiberOwnerNameInDevOrNull() {
              {
                if (current === null) {
                  return null;
                }

                var owner = current._debugOwner;

                if (owner !== null && typeof owner !== "undefined") {
                  return getComponentName(owner.type);
                }
              }
              return null;
            }

            function getCurrentFiberStackInDev() {
              {
                if (current === null) {
                  return "";
                } // Safe because if current fiber exists, we are reconciling,
                // and it is guaranteed to be the work-in-progress version.

                return getStackByFiberInDevAndProd(current);
              }
              return "";
            }

            function resetCurrentFiber() {
              {
                ReactDebugCurrentFrame.getCurrentStack = null;
                current = null;
                phase = null;
              }
            }

            function setCurrentFiber(fiber) {
              {
                ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
                current = fiber;
                phase = null;
              }
            }

            function setCurrentPhase(lifeCyclePhase) {
              {
                phase = lifeCyclePhase;
              }
            }
            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warning = warningWithoutStack$1;
            {
              warning = function(condition, format) {
                if (condition) {
                  return;
                }

                var ReactDebugCurrentFrame =
                  ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

                for (
                  var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                warningWithoutStack$1.apply(
                  undefined,
                  [false, format + "%s"].concat(args, [stack])
                );
              };
            }
            var warning$1 = warning; // A reserved attribute.
            // It is handled by React separately and shouldn't be written to the DOM.

            var RESERVED = 0; // A simple string attribute.
            // Attributes that aren't in the whitelist are presumed to have this type.

            var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
            // "enumerated" attributes with "true" and "false" as possible values.
            // When true, it should be set to a "true" string.
            // When false, it should be set to a "false" string.

            var BOOLEANISH_STRING = 2; // A real boolean attribute.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.

            var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.
            // For any other value, should be present with that value.

            var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
            // When falsy, it should be removed.

            var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
            // When falsy, it should be removed.

            var POSITIVE_NUMERIC = 6;
            /* eslint-disable max-len */

            var ATTRIBUTE_NAME_START_CHAR =
              ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
            /* eslint-enable max-len */

            var ATTRIBUTE_NAME_CHAR =
              ATTRIBUTE_NAME_START_CHAR +
              "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
            var ROOT_ATTRIBUTE_NAME = "data-reactroot";
            var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
              "^[" +
                ATTRIBUTE_NAME_START_CHAR +
                "][" +
                ATTRIBUTE_NAME_CHAR +
                "]*$"
            );
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var illegalAttributeNameCache = {};
            var validatedAttributeNameCache = {};

            function isAttributeNameSafe(attributeName) {
              if (
                hasOwnProperty.call(validatedAttributeNameCache, attributeName)
              ) {
                return true;
              }

              if (
                hasOwnProperty.call(illegalAttributeNameCache, attributeName)
              ) {
                return false;
              }

              if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                validatedAttributeNameCache[attributeName] = true;
                return true;
              }

              illegalAttributeNameCache[attributeName] = true;
              {
                warning$1(false, "Invalid attribute name: `%s`", attributeName);
              }
              return false;
            }

            function shouldIgnoreAttribute(
              name,
              propertyInfo,
              isCustomComponentTag
            ) {
              if (propertyInfo !== null) {
                return propertyInfo.type === RESERVED;
              }

              if (isCustomComponentTag) {
                return false;
              }

              if (
                name.length > 2 &&
                (name[0] === "o" || name[0] === "O") &&
                (name[1] === "n" || name[1] === "N")
              ) {
                return true;
              }

              return false;
            }

            function shouldRemoveAttributeWithWarning(
              name,
              value,
              propertyInfo,
              isCustomComponentTag
            ) {
              if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                return false;
              }

              switch (typeof value) {
                case "function": // $FlowIssue symbol is perfectly valid here

                case "symbol":
                  // eslint-disable-line
                  return true;

                case "boolean": {
                  if (isCustomComponentTag) {
                    return false;
                  }

                  if (propertyInfo !== null) {
                    return !propertyInfo.acceptsBooleans;
                  } else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== "data-" && prefix !== "aria-";
                  }
                }

                default:
                  return false;
              }
            }

            function shouldRemoveAttribute(
              name,
              value,
              propertyInfo,
              isCustomComponentTag
            ) {
              if (value === null || typeof value === "undefined") {
                return true;
              }

              if (
                shouldRemoveAttributeWithWarning(
                  name,
                  value,
                  propertyInfo,
                  isCustomComponentTag
                )
              ) {
                return true;
              }

              if (isCustomComponentTag) {
                return false;
              }

              if (propertyInfo !== null) {
                switch (propertyInfo.type) {
                  case BOOLEAN:
                    return !value;

                  case OVERLOADED_BOOLEAN:
                    return value === false;

                  case NUMERIC:
                    return isNaN(value);

                  case POSITIVE_NUMERIC:
                    return isNaN(value) || value < 1;
                }
              }

              return false;
            }

            function getPropertyInfo(name) {
              return properties.hasOwnProperty(name) ? properties[name] : null;
            }

            function PropertyInfoRecord(
              name,
              type,
              mustUseProperty,
              attributeName,
              attributeNamespace
            ) {
              this.acceptsBooleans =
                type === BOOLEANISH_STRING ||
                type === BOOLEAN ||
                type === OVERLOADED_BOOLEAN;
              this.attributeName = attributeName;
              this.attributeNamespace = attributeNamespace;
              this.mustUseProperty = mustUseProperty;
              this.propertyName = name;
              this.type = type;
            } // When adding attributes to this list, be sure to also add them to
            // the `possibleStandardNames` module to ensure casing and incorrect
            // name warnings.

            var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

            [
              "children",
              "dangerouslySetInnerHTML", // TODO: This prevents the assignment of defaultValue to regular
              // elements (not just inputs). Now that ReactDOMInput assigns to the
              // defaultValue property -- do we need this?
              "defaultValue",
              "defaultChecked",
              "innerHTML",
              "suppressContentEditableWarning",
              "suppressHydrationWarning",
              "style"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  RESERVED,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // A few React string attributes have a different name.
            // This is a mapping from React prop names to the attribute names.

            [
              ["acceptCharset", "accept-charset"],
              ["className", "class"],
              ["htmlFor", "for"],
              ["httpEquiv", "http-equiv"]
            ].forEach(
              function(_ref) {
                var name = _ref[0],
                  attributeName = _ref[1];
                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are "enumerated" HTML attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).

            ["contentEditable", "draggable", "spellCheck", "value"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEANISH_STRING,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are "enumerated" SVG attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).
            // Since these are SVG attributes, their attribute names are case-sensitive.

            [
              "autoReverse",
              "externalResourcesRequired",
              "focusable",
              "preserveAlpha"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEANISH_STRING,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML boolean attributes.

            [
              "allowFullScreen",
              "async", // Note: there is a special case that prevents it from being written to the DOM
              // on the client side because the browsers are inconsistent. Instead we call focus().
              "autoFocus",
              "autoPlay",
              "controls",
              "default",
              "defer",
              "disabled",
              "formNoValidate",
              "hidden",
              "loop",
              "noModule",
              "noValidate",
              "open",
              "playsInline",
              "readOnly",
              "required",
              "reversed",
              "scoped",
              "seamless", // Microdata
              "itemScope"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEAN,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are the few React props that we set as DOM properties
            // rather than attributes. These are all booleans.

            [
              "checked", // Note: `option.selected` is not updated if `select.multiple` is
              // disabled with `removeAttribute`. We have special logic for handling this.
              "multiple",
              "muted",
              "selected"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEAN,
                  true, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML attributes that are "overloaded booleans": they behave like
            // booleans, but can also accept a string value.

            ["capture", "download"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  OVERLOADED_BOOLEAN,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML attributes that must be positive numbers.

            ["cols", "rows", "size", "span"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  POSITIVE_NUMERIC,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML attributes that must be numbers.

            ["rowSpan", "start"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  NUMERIC,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null
                );
              } // attributeNamespace
            );
            var CAMELIZE = /[\-\:]([a-z])/g;

            var capitalize = function(token) {
              return token[1].toUpperCase();
            }; // This is a list of all SVG attributes that need special casing, namespacing,
            // or boolean value assignment. Regular attributes that just accept strings
            // and have the same names are omitted, just like in the HTML whitelist.
            // Some of these attributes can be hard to find. This list was created by
            // scrapping the MDN documentation.

            [
              "accent-height",
              "alignment-baseline",
              "arabic-form",
              "baseline-shift",
              "cap-height",
              "clip-path",
              "clip-rule",
              "color-interpolation",
              "color-interpolation-filters",
              "color-profile",
              "color-rendering",
              "dominant-baseline",
              "enable-background",
              "fill-opacity",
              "fill-rule",
              "flood-color",
              "flood-opacity",
              "font-family",
              "font-size",
              "font-size-adjust",
              "font-stretch",
              "font-style",
              "font-variant",
              "font-weight",
              "glyph-name",
              "glyph-orientation-horizontal",
              "glyph-orientation-vertical",
              "horiz-adv-x",
              "horiz-origin-x",
              "image-rendering",
              "letter-spacing",
              "lighting-color",
              "marker-end",
              "marker-mid",
              "marker-start",
              "overline-position",
              "overline-thickness",
              "paint-order",
              "panose-1",
              "pointer-events",
              "rendering-intent",
              "shape-rendering",
              "stop-color",
              "stop-opacity",
              "strikethrough-position",
              "strikethrough-thickness",
              "stroke-dasharray",
              "stroke-dashoffset",
              "stroke-linecap",
              "stroke-linejoin",
              "stroke-miterlimit",
              "stroke-opacity",
              "stroke-width",
              "text-anchor",
              "text-decoration",
              "text-rendering",
              "underline-position",
              "underline-thickness",
              "unicode-bidi",
              "unicode-range",
              "units-per-em",
              "v-alphabetic",
              "v-hanging",
              "v-ideographic",
              "v-mathematical",
              "vector-effect",
              "vert-adv-y",
              "vert-origin-x",
              "vert-origin-y",
              "word-spacing",
              "writing-mode",
              "xmlns:xlink",
              "x-height"
            ].forEach(
              function(attributeName) {
                var name = attributeName.replace(CAMELIZE, capitalize);
                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName,
                  null
                );
              } // attributeNamespace
            ); // String SVG attributes with the xlink namespace.

            [
              "xlink:actuate",
              "xlink:arcrole",
              "xlink:href",
              "xlink:role",
              "xlink:show",
              "xlink:title",
              "xlink:type"
            ].forEach(function(attributeName) {
              var name = attributeName.replace(CAMELIZE, capitalize);
              properties[name] = new PropertyInfoRecord(
                name,
                STRING,
                false, // mustUseProperty
                attributeName,
                "http://www.w3.org/1999/xlink"
              );
            }); // String SVG attributes with the xml namespace.

            ["xml:base", "xml:lang", "xml:space"].forEach(function(
              attributeName
            ) {
              var name = attributeName.replace(CAMELIZE, capitalize);
              properties[name] = new PropertyInfoRecord(
                name,
                STRING,
                false, // mustUseProperty
                attributeName,
                "http://www.w3.org/XML/1998/namespace"
              );
            }); // Special case: this attribute exists both in HTML and SVG.
            // Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
            // its React `tabIndex` name, like we do for attributes that exist only in HTML.

            properties.tabIndex = new PropertyInfoRecord(
              "tabIndex",
              STRING,
              false, // mustUseProperty
              "tabindex", // attributeName
              null
            );
            /**
             * Get the value for a property on a node. Only used in DEV for SSR validation.
             * The "expected" argument is used as a hint of what the expected value is.
             * Some properties have multiple equivalent values.
             */

            function getValueForProperty(node, name, expected, propertyInfo) {
              {
                if (propertyInfo.mustUseProperty) {
                  var propertyName = propertyInfo.propertyName;
                  return node[propertyName];
                } else {
                  var attributeName = propertyInfo.attributeName;
                  var stringValue = null;

                  if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                    if (node.hasAttribute(attributeName)) {
                      var value = node.getAttribute(attributeName);

                      if (value === "") {
                        return true;
                      }

                      if (
                        shouldRemoveAttribute(
                          name,
                          expected,
                          propertyInfo,
                          false
                        )
                      ) {
                        return value;
                      }

                      if (value === "" + expected) {
                        return expected;
                      }

                      return value;
                    }
                  } else if (node.hasAttribute(attributeName)) {
                    if (
                      shouldRemoveAttribute(name, expected, propertyInfo, false)
                    ) {
                      // We had an attribute but shouldn't have had one, so read it
                      // for the error message.
                      return node.getAttribute(attributeName);
                    }

                    if (propertyInfo.type === BOOLEAN) {
                      // If this was a boolean, it doesn't matter what the value is
                      // the fact that we have it is the same as the expected.
                      return expected;
                    } // Even if this property uses a namespace we use getAttribute
                    // because we assume its namespaced name is the same as our config.
                    // To use getAttributeNS we need the local name which we don't have
                    // in our config atm.

                    stringValue = node.getAttribute(attributeName);
                  }

                  if (
                    shouldRemoveAttribute(name, expected, propertyInfo, false)
                  ) {
                    return stringValue === null ? expected : stringValue;
                  } else if (stringValue === "" + expected) {
                    return expected;
                  } else {
                    return stringValue;
                  }
                }
              }
            }
            /**
             * Get the value for a attribute on a node. Only used in DEV for SSR validation.
             * The third argument is used as a hint of what the expected value is. Some
             * attributes have multiple equivalent values.
             */

            function getValueForAttribute(node, name, expected) {
              {
                if (!isAttributeNameSafe(name)) {
                  return;
                }

                if (!node.hasAttribute(name)) {
                  return expected === undefined ? undefined : null;
                }

                var value = node.getAttribute(name);

                if (value === "" + expected) {
                  return expected;
                }

                return value;
              }
            }
            /**
             * Sets the value for a property on a node.
             *
             * @param {DOMElement} node
             * @param {string} name
             * @param {*} value
             */

            function setValueForProperty(
              node,
              name,
              value,
              isCustomComponentTag
            ) {
              var propertyInfo = getPropertyInfo(name);

              if (
                shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)
              ) {
                return;
              }

              if (
                shouldRemoveAttribute(
                  name,
                  value,
                  propertyInfo,
                  isCustomComponentTag
                )
              ) {
                value = null;
              } // If the prop isn't in the special list, treat it as a simple attribute.

              if (isCustomComponentTag || propertyInfo === null) {
                if (isAttributeNameSafe(name)) {
                  var _attributeName = name;

                  if (value === null) {
                    node.removeAttribute(_attributeName);
                  } else {
                    node.setAttribute(_attributeName, "" + value);
                  }
                }

                return;
              }

              var mustUseProperty = propertyInfo.mustUseProperty;

              if (mustUseProperty) {
                var propertyName = propertyInfo.propertyName;

                if (value === null) {
                  var type = propertyInfo.type;
                  node[propertyName] = type === BOOLEAN ? false : "";
                } else {
                  // Contrary to `setAttribute`, object properties are properly
                  // `toString`ed by IE8/9.
                  node[propertyName] = value;
                }

                return;
              } // The rest are treated as attributes with special cases.

              var attributeName = propertyInfo.attributeName,
                attributeNamespace = propertyInfo.attributeNamespace;

              if (value === null) {
                node.removeAttribute(attributeName);
              } else {
                var _type = propertyInfo.type;
                var attributeValue = void 0;

                if (
                  _type === BOOLEAN ||
                  (_type === OVERLOADED_BOOLEAN && value === true)
                ) {
                  attributeValue = "";
                } else {
                  // `setAttribute` with objects becomes only `[object]` in IE8/9,
                  // ('' + value) makes it output the correct toString()-value.
                  attributeValue = "" + value;
                }

                if (attributeNamespace) {
                  node.setAttributeNS(
                    attributeNamespace,
                    attributeName,
                    attributeValue
                  );
                } else {
                  node.setAttribute(attributeName, attributeValue);
                }
              }
            } // Flow does not allow string concatenation of most non-string types. To work
            // around this limitation, we use an opaque type that can only be obtained by
            // passing the value through getToStringValue first.

            function toString(value) {
              return "" + value;
            }

            function getToStringValue(value) {
              switch (typeof value) {
                case "boolean":
                case "number":
                case "object":
                case "string":
                case "undefined":
                  return value;

                default:
                  // function, symbol are assigned as empty strings
                  return "";
              }
            }

            var ReactDebugCurrentFrame$1 = null;
            var ReactControlledValuePropTypes = {
              checkPropTypes: null
            };
            {
              ReactDebugCurrentFrame$1 =
                ReactSharedInternals.ReactDebugCurrentFrame;
              var hasReadOnlyValue = {
                button: true,
                checkbox: true,
                image: true,
                hidden: true,
                radio: true,
                reset: true,
                submit: true
              };
              var propTypes = {
                value: function(props, propName, componentName) {
                  if (
                    hasReadOnlyValue[props.type] ||
                    props.onChange ||
                    props.readOnly ||
                    props.disabled ||
                    props[propName] == null
                  ) {
                    return null;
                  }

                  return new Error(
                    "You provided a `value` prop to a form field without an " +
                      "`onChange` handler. This will render a read-only field. If " +
                      "the field should be mutable use `defaultValue`. Otherwise, " +
                      "set either `onChange` or `readOnly`."
                  );
                },
                checked: function(props, propName, componentName) {
                  if (
                    props.onChange ||
                    props.readOnly ||
                    props.disabled ||
                    props[propName] == null
                  ) {
                    return null;
                  }

                  return new Error(
                    "You provided a `checked` prop to a form field without an " +
                      "`onChange` handler. This will render a read-only field. If " +
                      "the field should be mutable use `defaultChecked`. Otherwise, " +
                      "set either `onChange` or `readOnly`."
                  );
                }
              };
              /**
               * Provide a linked `value` attribute for controlled forms. You should not use
               * this outside of the ReactDOM controlled form components.
               */

              ReactControlledValuePropTypes.checkPropTypes = function(
                tagName,
                props
              ) {
                checkPropTypes(
                  propTypes,
                  props,
                  "prop",
                  tagName,
                  ReactDebugCurrentFrame$1.getStackAddendum
                );
              };
            }
            var enableUserTimingAPI = true;
            var enableHooks = false; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

            var debugRenderPhaseSideEffects = false; // In some cases, StrictMode should also double-render lifecycles.
            // This can be confusing for tests though,
            // And it can be bad for performance in production.
            // This feature flag can be used to control the behavior:

            var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
            // replay the begin phase of a failed component inside invokeGuardedCallback.

            var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

            var warnAboutDeprecatedLifecycles = false; // Gather advanced timing metrics for Profiler subtrees.

            var enableProfilerTimer = true; // Trace which interactions trigger each commit.

            var enableSchedulerTracing = true; // Only used in www builds.
            // Only used in www builds.
            // React Fire: prevent the value and checked attributes from syncing
            // with their related DOM properties

            var disableInputAttributeSyncing = false; // These APIs will no longer be "unstable" in the upcoming 16.7 release,
            // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

            var enableStableConcurrentModeAPIs = false; // TODO: direct imports like some-package/src/* are bad. Fix me.

            var didWarnValueDefaultValue = false;
            var didWarnCheckedDefaultChecked = false;
            var didWarnControlledToUncontrolled = false;
            var didWarnUncontrolledToControlled = false;

            function isControlled(props) {
              var usesChecked =
                props.type === "checkbox" || props.type === "radio";
              return usesChecked ? props.checked != null : props.value != null;
            }
            /**
             * Implements an <input> host component that allows setting these optional
             * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
             *
             * If `checked` or `value` are not supplied (or null/undefined), user actions
             * that affect the checked state or value will trigger updates to the element.
             *
             * If they are supplied (and not null/undefined), the rendered element will not
             * trigger updates to the element. Instead, the props must change in order for
             * the rendered element to be updated.
             *
             * The rendered element will be initialized as unchecked (or `defaultChecked`)
             * with an empty value (or `defaultValue`).
             *
             * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
             */

            function getHostProps(element, props) {
              var node = element;
              var checked = props.checked;

              var hostProps = _assign({}, props, {
                defaultChecked: undefined,
                defaultValue: undefined,
                value: undefined,
                checked:
                  checked != null ? checked : node._wrapperState.initialChecked
              });

              return hostProps;
            }

            function initWrapperState(element, props) {
              {
                ReactControlledValuePropTypes.checkPropTypes("input", props);

                if (
                  props.checked !== undefined &&
                  props.defaultChecked !== undefined &&
                  !didWarnCheckedDefaultChecked
                ) {
                  warning$1(
                    false,
                    "%s contains an input of type %s with both checked and defaultChecked props. " +
                      "Input elements must be either controlled or uncontrolled " +
                      "(specify either the checked prop, or the defaultChecked prop, but not " +
                      "both). Decide between using a controlled or uncontrolled input " +
                      "element and remove one of these props. More info: " +
                      "https://fb.me/react-controlled-components",
                    getCurrentFiberOwnerNameInDevOrNull() || "A component",
                    props.type
                  );
                  didWarnCheckedDefaultChecked = true;
                }

                if (
                  props.value !== undefined &&
                  props.defaultValue !== undefined &&
                  !didWarnValueDefaultValue
                ) {
                  warning$1(
                    false,
                    "%s contains an input of type %s with both value and defaultValue props. " +
                      "Input elements must be either controlled or uncontrolled " +
                      "(specify either the value prop, or the defaultValue prop, but not " +
                      "both). Decide between using a controlled or uncontrolled input " +
                      "element and remove one of these props. More info: " +
                      "https://fb.me/react-controlled-components",
                    getCurrentFiberOwnerNameInDevOrNull() || "A component",
                    props.type
                  );
                  didWarnValueDefaultValue = true;
                }
              }
              var node = element;
              var defaultValue =
                props.defaultValue == null ? "" : props.defaultValue;
              node._wrapperState = {
                initialChecked:
                  props.checked != null ? props.checked : props.defaultChecked,
                initialValue: getToStringValue(
                  props.value != null ? props.value : defaultValue
                ),
                controlled: isControlled(props)
              };
            }

            function updateChecked(element, props) {
              var node = element;
              var checked = props.checked;

              if (checked != null) {
                setValueForProperty(node, "checked", checked, false);
              }
            }

            function updateWrapper(element, props) {
              var node = element;
              {
                var _controlled = isControlled(props);

                if (
                  !node._wrapperState.controlled &&
                  _controlled &&
                  !didWarnUncontrolledToControlled
                ) {
                  warning$1(
                    false,
                    "A component is changing an uncontrolled input of type %s to be controlled. " +
                      "Input elements should not switch from uncontrolled to controlled (or vice versa). " +
                      "Decide between using a controlled or uncontrolled input " +
                      "element for the lifetime of the component. More info: https://fb.me/react-controlled-components",
                    props.type
                  );
                  didWarnUncontrolledToControlled = true;
                }

                if (
                  node._wrapperState.controlled &&
                  !_controlled &&
                  !didWarnControlledToUncontrolled
                ) {
                  warning$1(
                    false,
                    "A component is changing a controlled input of type %s to be uncontrolled. " +
                      "Input elements should not switch from controlled to uncontrolled (or vice versa). " +
                      "Decide between using a controlled or uncontrolled input " +
                      "element for the lifetime of the component. More info: https://fb.me/react-controlled-components",
                    props.type
                  );
                  didWarnControlledToUncontrolled = true;
                }
              }
              updateChecked(element, props);
              var value = getToStringValue(props.value);
              var type = props.type;

              if (value != null) {
                if (type === "number") {
                  if (
                    (value === 0 && node.value === "") || // We explicitly want to coerce to number here if possible.
                    // eslint-disable-next-line
                    node.value != value
                  ) {
                    node.value = toString(value);
                  }
                } else if (node.value !== toString(value)) {
                  node.value = toString(value);
                }
              } else if (type === "submit" || type === "reset") {
                // Submit/reset inputs need the attribute removed completely to avoid
                // blank-text buttons.
                node.removeAttribute("value");
                return;
              }

              if (disableInputAttributeSyncing) {
                // When not syncing the value attribute, React only assigns a new value
                // whenever the defaultValue React prop has changed. When not present,
                // React does nothing
                if (props.hasOwnProperty("defaultValue")) {
                  setDefaultValue(
                    node,
                    props.type,
                    getToStringValue(props.defaultValue)
                  );
                }
              } else {
                // When syncing the value attribute, the value comes from a cascade of
                // properties:
                //  1. The value React property
                //  2. The defaultValue React property
                //  3. Otherwise there should be no change
                if (props.hasOwnProperty("value")) {
                  setDefaultValue(node, props.type, value);
                } else if (props.hasOwnProperty("defaultValue")) {
                  setDefaultValue(
                    node,
                    props.type,
                    getToStringValue(props.defaultValue)
                  );
                }
              }

              if (disableInputAttributeSyncing) {
                // When not syncing the checked attribute, the attribute is directly
                // controllable from the defaultValue React property. It needs to be
                // updated as new props come in.
                if (props.defaultChecked == null) {
                  node.removeAttribute("checked");
                } else {
                  node.defaultChecked = !!props.defaultChecked;
                }
              } else {
                // When syncing the checked attribute, it only changes when it needs
                // to be removed, such as transitioning from a checkbox into a text input
                if (props.checked == null && props.defaultChecked != null) {
                  node.defaultChecked = !!props.defaultChecked;
                }
              }
            }

            function postMountWrapper(element, props, isHydrating) {
              var node = element; // Do not assign value if it is already set. This prevents user text input
              // from being lost during SSR hydration.

              if (
                props.hasOwnProperty("value") ||
                props.hasOwnProperty("defaultValue")
              ) {
                var type = props.type;
                var isButton = type === "submit" || type === "reset"; // Avoid setting value attribute on submit/reset inputs as it overrides the
                // default value provided by the browser. See: #12872

                if (
                  isButton &&
                  (props.value === undefined || props.value === null)
                ) {
                  return;
                }

                var _initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
                // from being lost during SSR hydration.

                if (!isHydrating) {
                  if (disableInputAttributeSyncing) {
                    var value = getToStringValue(props.value); // When not syncing the value attribute, the value property points
                    // directly to the React prop. Only assign it if it exists.

                    if (value != null) {
                      // Always assign on buttons so that it is possible to assign an
                      // empty string to clear button text.
                      //
                      // Otherwise, do not re-assign the value property if is empty. This
                      // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
                      // prematurely marking required inputs as invalid. Equality is compared
                      // to the current value in case the browser provided value is not an
                      // empty string.
                      if (isButton || value !== node.value) {
                        node.value = toString(value);
                      }
                    }
                  } else {
                    // When syncing the value attribute, the value property should use
                    // the wrapperState._initialValue property. This uses:
                    //
                    //   1. The value React property when present
                    //   2. The defaultValue React property when present
                    //   3. An empty string
                    if (_initialValue !== node.value) {
                      node.value = _initialValue;
                    }
                  }
                }

                if (disableInputAttributeSyncing) {
                  // When not syncing the value attribute, assign the value attribute
                  // directly from the defaultValue React property (when present)
                  var defaultValue = getToStringValue(props.defaultValue);

                  if (defaultValue != null) {
                    node.defaultValue = toString(defaultValue);
                  }
                } else {
                  // Otherwise, the value attribute is synchronized to the property,
                  // so we assign defaultValue to the same thing as the value property
                  // assignment step above.
                  node.defaultValue = _initialValue;
                }
              } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
              // this is needed to work around a chrome bug where setting defaultChecked
              // will sometimes influence the value of checked (even after detachment).
              // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
              // We need to temporarily unset name to avoid disrupting radio button groups.

              var name = node.name;

              if (name !== "") {
                node.name = "";
              }

              if (disableInputAttributeSyncing) {
                // When not syncing the checked attribute, the checked property
                // never gets assigned. It must be manually set. We don't want
                // to do this when hydrating so that existing user input isn't
                // modified
                if (!isHydrating) {
                  updateChecked(element, props);
                } // Only assign the checked attribute if it is defined. This saves
                // a DOM write when controlling the checked attribute isn't needed
                // (text inputs, submit/reset)

                if (props.hasOwnProperty("defaultChecked")) {
                  node.defaultChecked = !node.defaultChecked;
                  node.defaultChecked = !!props.defaultChecked;
                }
              } else {
                // When syncing the checked attribute, both the checked property and
                // attribute are assigned at the same time using defaultChecked. This uses:
                //
                //   1. The checked React property when present
                //   2. The defaultChecked React property when present
                //   3. Otherwise, false
                node.defaultChecked = !node.defaultChecked;
                node.defaultChecked = !!node._wrapperState.initialChecked;
              }

              if (name !== "") {
                node.name = name;
              }
            }

            function restoreControlledState(element, props) {
              var node = element;
              updateWrapper(node, props);
              updateNamedCousins(node, props);
            }

            function updateNamedCousins(rootNode, props) {
              var name = props.name;

              if (props.type === "radio" && name != null) {
                var queryRoot = rootNode;

                while (queryRoot.parentNode) {
                  queryRoot = queryRoot.parentNode;
                } // If `rootNode.form` was non-null, then we could try `form.elements`,
                // but that sometimes behaves strangely in IE8. We could also try using
                // `form.getElementsByName`, but that will only return direct children
                // and won't include inputs that use the HTML5 `form=` attribute. Since
                // the input might not even be in a form. It might not even be in the
                // document. Let's just use the local `querySelectorAll` to ensure we don't
                // miss anything.

                var group = queryRoot.querySelectorAll(
                  "input[name=" + JSON.stringify("" + name) + '][type="radio"]'
                );

                for (var i = 0; i < group.length; i++) {
                  var otherNode = group[i];

                  if (
                    otherNode === rootNode ||
                    otherNode.form !== rootNode.form
                  ) {
                    continue;
                  } // This will throw if radio buttons rendered by different copies of React
                  // and the same name are rendered into the same form (same as #1939).
                  // That's probably okay; we don't support it just as we don't support
                  // mixing React radio buttons with non-React ones.

                  var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                  !otherProps
                    ? invariant(
                        false,
                        "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
                      )
                    : void 0; // We need update the tracked value on the named cousin since the value
                  // was changed but the input saw no event or value set

                  updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                  // was previously checked to update will cause it to be come re-checked
                  // as appropriate.

                  updateWrapper(otherNode, otherProps);
                }
              }
            } // In Chrome, assigning defaultValue to certain input types triggers input validation.
            // For number inputs, the display value loses trailing decimal points. For email inputs,
            // Chrome raises "The specified value <x> is not a valid email address".
            //
            // Here we check to see if the defaultValue has actually changed, avoiding these problems
            // when the user is inputting text
            //
            // https://github.com/facebook/react/issues/7253

            function setDefaultValue(node, type, value) {
              if (
                // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
                type !== "number" ||
                node.ownerDocument.activeElement !== node
              ) {
                if (value == null) {
                  node.defaultValue = toString(node._wrapperState.initialValue);
                } else if (node.defaultValue !== toString(value)) {
                  node.defaultValue = toString(value);
                }
              }
            }

            var eventTypes$1 = {
              change: {
                phasedRegistrationNames: {
                  bubbled: "onChange",
                  captured: "onChangeCapture"
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_CHANGE,
                  TOP_CLICK,
                  TOP_FOCUS,
                  TOP_INPUT,
                  TOP_KEY_DOWN,
                  TOP_KEY_UP,
                  TOP_SELECTION_CHANGE
                ]
              }
            };

            function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
              var event = SyntheticEvent.getPooled(
                eventTypes$1.change,
                inst,
                nativeEvent,
                target
              );
              event.type = "change"; // Flag this event loop as needing state restore.

              enqueueStateRestore(target);
              accumulateTwoPhaseDispatches(event);
              return event;
            }
            /**
             * For IE shims
             */

            var activeElement = null;
            var activeElementInst = null;
            /**
             * SECTION: handle `change` event
             */

            function shouldUseChangeEvent(elem) {
              var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
              return (
                nodeName === "select" ||
                (nodeName === "input" && elem.type === "file")
              );
            }

            function manualDispatchChangeEvent(nativeEvent) {
              var event = createAndAccumulateChangeEvent(
                activeElementInst,
                nativeEvent,
                getEventTarget(nativeEvent)
              ); // If change and propertychange bubbled, we'd just bind to it like all the
              // other events and have it go through ReactBrowserEventEmitter. Since it
              // doesn't, we manually listen for the events and so we have to enqueue and
              // process the abstract event manually.
              //
              // Batching is necessary here in order to ensure that all event handlers run
              // before the next rerender (including event handlers attached to ancestor
              // elements instead of directly on the input). Without this, controlled
              // components don't work properly in conjunction with event bubbling because
              // the component is rerendered and the value reverted before all the event
              // handlers can run. See https://github.com/facebook/react/issues/708.

              batchedUpdates(runEventInBatch, event);
            }

            function runEventInBatch(event) {
              runEventsInBatch(event);
            }

            function getInstIfValueChanged(targetInst) {
              var targetNode = getNodeFromInstance$1(targetInst);

              if (updateValueIfChanged(targetNode)) {
                return targetInst;
              }
            }

            function getTargetInstForChangeEvent(topLevelType, targetInst) {
              if (topLevelType === TOP_CHANGE) {
                return targetInst;
              }
            }
            /**
             * SECTION: handle `input` event
             */

            var isInputEventSupported = false;

            if (canUseDOM) {
              // IE9 claims to support the input event but fails to trigger it when
              // deleting text, so we ignore its input events.
              isInputEventSupported =
                isEventSupported("input") &&
                (!document.documentMode || document.documentMode > 9);
            }
            /**
             * (For IE <=9) Starts tracking propertychange events on the passed-in element
             * and override the value property so that we can distinguish user events from
             * value changes in JS.
             */

            function startWatchingForValueChange(target, targetInst) {
              activeElement = target;
              activeElementInst = targetInst;
              activeElement.attachEvent(
                "onpropertychange",
                handlePropertyChange
              );
            }
            /**
             * (For IE <=9) Removes the event listeners from the currently-tracked element,
             * if any exists.
             */

            function stopWatchingForValueChange() {
              if (!activeElement) {
                return;
              }

              activeElement.detachEvent(
                "onpropertychange",
                handlePropertyChange
              );
              activeElement = null;
              activeElementInst = null;
            }
            /**
             * (For IE <=9) Handles a propertychange event, sending a `change` event if
             * the value of the active element has changed.
             */

            function handlePropertyChange(nativeEvent) {
              if (nativeEvent.propertyName !== "value") {
                return;
              }

              if (getInstIfValueChanged(activeElementInst)) {
                manualDispatchChangeEvent(nativeEvent);
              }
            }

            function handleEventsForInputEventPolyfill(
              topLevelType,
              target,
              targetInst
            ) {
              if (topLevelType === TOP_FOCUS) {
                // In IE9, propertychange fires for most input events but is buggy and
                // doesn't fire when text is deleted, but conveniently, selectionchange
                // appears to fire in all of the remaining cases so we catch those and
                // forward the event if the value has changed
                // In either case, we don't want to call the event handler if the value
                // is changed from JS so we redefine a setter for `.value` that updates
                // our activeElementValue variable, allowing us to ignore those changes
                //
                // stopWatching() should be a noop here but we call it just in case we
                // missed a blur event somehow.
                stopWatchingForValueChange();
                startWatchingForValueChange(target, targetInst);
              } else if (topLevelType === TOP_BLUR) {
                stopWatchingForValueChange();
              }
            } // For IE8 and IE9.

            function getTargetInstForInputEventPolyfill(
              topLevelType,
              targetInst
            ) {
              if (
                topLevelType === TOP_SELECTION_CHANGE ||
                topLevelType === TOP_KEY_UP ||
                topLevelType === TOP_KEY_DOWN
              ) {
                // On the selectionchange event, the target is just document which isn't
                // helpful for us so just check activeElement instead.
                //
                // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
                // propertychange on the first input event after setting `value` from a
                // script and fires only keydown, keypress, keyup. Catching keyup usually
                // gets it and catching keydown lets us fire an event for the first
                // keystroke if user does a key repeat (it'll be a little delayed: right
                // before the second keystroke). Other input methods (e.g., paste) seem to
                // fire selectionchange normally.
                return getInstIfValueChanged(activeElementInst);
              }
            }
            /**
             * SECTION: handle `click` event
             */

            function shouldUseClickEvent(elem) {
              // Use the `click` event to detect changes to checkbox and radio inputs.
              // This approach works across all browsers, whereas `change` does not fire
              // until `blur` in IE8.
              var nodeName = elem.nodeName;
              return (
                nodeName &&
                nodeName.toLowerCase() === "input" &&
                (elem.type === "checkbox" || elem.type === "radio")
              );
            }

            function getTargetInstForClickEvent(topLevelType, targetInst) {
              if (topLevelType === TOP_CLICK) {
                return getInstIfValueChanged(targetInst);
              }
            }

            function getTargetInstForInputOrChangeEvent(
              topLevelType,
              targetInst
            ) {
              if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
                return getInstIfValueChanged(targetInst);
              }
            }

            function handleControlledInputBlur(node) {
              var state = node._wrapperState;

              if (!state || !state.controlled || node.type !== "number") {
                return;
              }

              if (!disableInputAttributeSyncing) {
                // If controlled, assign the value attribute to the current value on blur
                setDefaultValue(node, "number", node.value);
              }
            }
            /**
             * This plugin creates an `onChange` event that normalizes change events
             * across form elements. This event fires at a time when it's possible to
             * change the element's value without seeing a flicker.
             *
             * Supported elements are:
             * - input (see `isTextInputElement`)
             * - textarea
             * - select
             */

            var ChangeEventPlugin = {
              eventTypes: eventTypes$1,
              _isInputEventSupported: isInputEventSupported,
              extractEvents: function(
                topLevelType,
                targetInst,
                nativeEvent,
                nativeEventTarget
              ) {
                var targetNode = targetInst
                  ? getNodeFromInstance$1(targetInst)
                  : window;
                var getTargetInstFunc = void 0,
                  handleEventFunc = void 0;

                if (shouldUseChangeEvent(targetNode)) {
                  getTargetInstFunc = getTargetInstForChangeEvent;
                } else if (isTextInputElement(targetNode)) {
                  if (isInputEventSupported) {
                    getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                  } else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    handleEventFunc = handleEventsForInputEventPolyfill;
                  }
                } else if (shouldUseClickEvent(targetNode)) {
                  getTargetInstFunc = getTargetInstForClickEvent;
                }

                if (getTargetInstFunc) {
                  var inst = getTargetInstFunc(topLevelType, targetInst);

                  if (inst) {
                    var event = createAndAccumulateChangeEvent(
                      inst,
                      nativeEvent,
                      nativeEventTarget
                    );
                    return event;
                  }
                }

                if (handleEventFunc) {
                  handleEventFunc(topLevelType, targetNode, targetInst);
                } // When blurring, set the value attribute for number inputs

                if (topLevelType === TOP_BLUR) {
                  handleControlledInputBlur(targetNode);
                }
              }
            };
            /**
             * Module that is injectable into `EventPluginHub`, that specifies a
             * deterministic ordering of `EventPlugin`s. A convenient way to reason about
             * plugins, without having to package every one of them. This is better than
             * having plugins be ordered in the same order that they are injected because
             * that ordering would be influenced by the packaging order.
             * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
             * preventing default on events is convenient in `SimpleEventPlugin` handlers.
             */

            var DOMEventPluginOrder = [
              "ResponderEventPlugin",
              "SimpleEventPlugin",
              "EnterLeaveEventPlugin",
              "ChangeEventPlugin",
              "SelectEventPlugin",
              "BeforeInputEventPlugin"
            ];
            var SyntheticUIEvent = SyntheticEvent.extend({
              view: null,
              detail: null
            });
            var modifierKeyToProp = {
              Alt: "altKey",
              Control: "ctrlKey",
              Meta: "metaKey",
              Shift: "shiftKey"
            }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
            // getModifierState. If getModifierState is not supported, we map it to a set of
            // modifier keys exposed by the event. In this case, Lock-keys are not supported.

            /**
             * Translation from modifier key to the associated property in the event.
             * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
             */

            function modifierStateGetter(keyArg) {
              var syntheticEvent = this;
              var nativeEvent = syntheticEvent.nativeEvent;

              if (nativeEvent.getModifierState) {
                return nativeEvent.getModifierState(keyArg);
              }

              var keyProp = modifierKeyToProp[keyArg];
              return keyProp ? !!nativeEvent[keyProp] : false;
            }

            function getEventModifierState(nativeEvent) {
              return modifierStateGetter;
            }

            var previousScreenX = 0;
            var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

            var isMovementXSet = false;
            var isMovementYSet = false;
            /**
             * @interface MouseEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var SyntheticMouseEvent = SyntheticUIEvent.extend({
              screenX: null,
              screenY: null,
              clientX: null,
              clientY: null,
              pageX: null,
              pageY: null,
              ctrlKey: null,
              shiftKey: null,
              altKey: null,
              metaKey: null,
              getModifierState: getEventModifierState,
              button: null,
              buttons: null,
              relatedTarget: function(event) {
                return (
                  event.relatedTarget ||
                  (event.fromElement === event.srcElement
                    ? event.toElement
                    : event.fromElement)
                );
              },
              movementX: function(event) {
                if ("movementX" in event) {
                  return event.movementX;
                }

                var screenX = previousScreenX;
                previousScreenX = event.screenX;

                if (!isMovementXSet) {
                  isMovementXSet = true;
                  return 0;
                }

                return event.type === "mousemove" ? event.screenX - screenX : 0;
              },
              movementY: function(event) {
                if ("movementY" in event) {
                  return event.movementY;
                }

                var screenY = previousScreenY;
                previousScreenY = event.screenY;

                if (!isMovementYSet) {
                  isMovementYSet = true;
                  return 0;
                }

                return event.type === "mousemove" ? event.screenY - screenY : 0;
              }
            });
            /**
             * @interface PointerEvent
             * @see http://www.w3.org/TR/pointerevents/
             */

            var SyntheticPointerEvent = SyntheticMouseEvent.extend({
              pointerId: null,
              width: null,
              height: null,
              pressure: null,
              tangentialPressure: null,
              tiltX: null,
              tiltY: null,
              twist: null,
              pointerType: null,
              isPrimary: null
            });
            var eventTypes$2 = {
              mouseEnter: {
                registrationName: "onMouseEnter",
                dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
              },
              mouseLeave: {
                registrationName: "onMouseLeave",
                dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
              },
              pointerEnter: {
                registrationName: "onPointerEnter",
                dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
              },
              pointerLeave: {
                registrationName: "onPointerLeave",
                dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
              }
            };
            var EnterLeaveEventPlugin = {
              eventTypes: eventTypes$2,

              /**
               * For almost every interaction we care about, there will be both a top-level
               * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
               * we do not extract duplicate events. However, moving the mouse into the
               * browser from outside will not fire a `mouseout` event. In this case, we use
               * the `mouseover` top-level event.
               */
              extractEvents: function(
                topLevelType,
                targetInst,
                nativeEvent,
                nativeEventTarget
              ) {
                var isOverEvent =
                  topLevelType === TOP_MOUSE_OVER ||
                  topLevelType === TOP_POINTER_OVER;
                var isOutEvent =
                  topLevelType === TOP_MOUSE_OUT ||
                  topLevelType === TOP_POINTER_OUT;

                if (
                  isOverEvent &&
                  (nativeEvent.relatedTarget || nativeEvent.fromElement)
                ) {
                  return null;
                }

                if (!isOutEvent && !isOverEvent) {
                  // Must not be a mouse or pointer in or out - ignoring.
                  return null;
                }

                var win = void 0;

                if (nativeEventTarget.window === nativeEventTarget) {
                  // `nativeEventTarget` is probably a window object.
                  win = nativeEventTarget;
                } else {
                  // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                  var doc = nativeEventTarget.ownerDocument;

                  if (doc) {
                    win = doc.defaultView || doc.parentWindow;
                  } else {
                    win = window;
                  }
                }

                var from = void 0;
                var to = void 0;

                if (isOutEvent) {
                  from = targetInst;
                  var related =
                    nativeEvent.relatedTarget || nativeEvent.toElement;
                  to = related ? getClosestInstanceFromNode(related) : null;
                } else {
                  // Moving to a node from outside the window.
                  from = null;
                  to = targetInst;
                }

                if (from === to) {
                  // Nothing pertains to our managed components.
                  return null;
                }

                var eventInterface = void 0,
                  leaveEventType = void 0,
                  enterEventType = void 0,
                  eventTypePrefix = void 0;

                if (
                  topLevelType === TOP_MOUSE_OUT ||
                  topLevelType === TOP_MOUSE_OVER
                ) {
                  eventInterface = SyntheticMouseEvent;
                  leaveEventType = eventTypes$2.mouseLeave;
                  enterEventType = eventTypes$2.mouseEnter;
                  eventTypePrefix = "mouse";
                } else if (
                  topLevelType === TOP_POINTER_OUT ||
                  topLevelType === TOP_POINTER_OVER
                ) {
                  eventInterface = SyntheticPointerEvent;
                  leaveEventType = eventTypes$2.pointerLeave;
                  enterEventType = eventTypes$2.pointerEnter;
                  eventTypePrefix = "pointer";
                }

                var fromNode = from == null ? win : getNodeFromInstance$1(from);
                var toNode = to == null ? win : getNodeFromInstance$1(to);
                var leave = eventInterface.getPooled(
                  leaveEventType,
                  from,
                  nativeEvent,
                  nativeEventTarget
                );
                leave.type = eventTypePrefix + "leave";
                leave.target = fromNode;
                leave.relatedTarget = toNode;
                var enter = eventInterface.getPooled(
                  enterEventType,
                  to,
                  nativeEvent,
                  nativeEventTarget
                );
                enter.type = eventTypePrefix + "enter";
                enter.target = toNode;
                enter.relatedTarget = fromNode;
                accumulateEnterLeaveDispatches(leave, enter, from, to);
                return [leave, enter];
              }
            };
            /*eslint-disable no-self-compare */

            var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
            /**
             * inlined Object.is polyfill to avoid requiring consumers ship their own
             * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
             */

            function is(x, y) {
              // SameValue algorithm
              if (x === y) {
                // Steps 1-5, 7-10
                // Steps 6.b-6.e: +0 != -0
                // Added the nonzero y check to make Flow happy, but it is redundant
                return x !== 0 || y !== 0 || 1 / x === 1 / y;
              } else {
                // Step 6.a: NaN == NaN
                return x !== x && y !== y;
              }
            }
            /**
             * Performs equality by iterating through keys on an object and returning false
             * when any key has values which are not strictly equal between the arguments.
             * Returns true when the values of all keys are strictly equal.
             */

            function shallowEqual(objA, objB) {
              if (is(objA, objB)) {
                return true;
              }

              if (
                typeof objA !== "object" ||
                objA === null ||
                typeof objB !== "object" ||
                objB === null
              ) {
                return false;
              }

              var keysA = Object.keys(objA);
              var keysB = Object.keys(objB);

              if (keysA.length !== keysB.length) {
                return false;
              } // Test for A's keys different from B.

              for (var i = 0; i < keysA.length; i++) {
                if (
                  !hasOwnProperty$1.call(objB, keysA[i]) ||
                  !is(objA[keysA[i]], objB[keysA[i]])
                ) {
                  return false;
                }
              }

              return true;
            }
            /**
             * `ReactInstanceMap` maintains a mapping from a public facing stateful
             * instance (key) and the internal representation (value). This allows public
             * methods to accept the user facing instance as an argument and map them back
             * to internal methods.
             *
             * Note that this module is currently shared and assumed to be stateless.
             * If this becomes an actual Map, that will break.
             */

            /**
             * This API should be called `delete` but we'd have to make sure to always
             * transform these to strings for IE support. When this transform is fully
             * supported we can rename it.
             */

            function get(key) {
              return key._reactInternalFiber;
            }

            function has(key) {
              return key._reactInternalFiber !== undefined;
            }

            function set(key, value) {
              key._reactInternalFiber = value;
            } // Don't change these two values. They're used by React Dev Tools.

            var NoEffect =
              /*              */
              0;
            var PerformedWork =
              /*         */
              1; // You can change the rest (and add more).

            var Placement =
              /*             */
              2;
            var Update =
              /*                */
              4;
            var PlacementAndUpdate =
              /*    */
              6;
            var Deletion =
              /*              */
              8;
            var ContentReset =
              /*          */
              16;
            var Callback =
              /*              */
              32;
            var DidCapture =
              /*            */
              64;
            var Ref =
              /*                   */
              128;
            var Snapshot =
              /*              */
              256;
            var Passive =
              /*               */
              512; // Passive & Update & Callback & Ref & Snapshot

            var LifecycleEffectMask =
              /*   */
              932; // Union of all host effects

            var HostEffectMask =
              /*        */
              1023;
            var Incomplete =
              /*            */
              1024;
            var ShouldCapture =
              /*         */
              2048;
            var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
            var MOUNTING = 1;
            var MOUNTED = 2;
            var UNMOUNTED = 3;

            function isFiberMountedImpl(fiber) {
              var node = fiber;

              if (!fiber.alternate) {
                // If there is no alternate, this might be a new tree that isn't inserted
                // yet. If it is, then it will have a pending insertion effect on it.
                if ((node.effectTag & Placement) !== NoEffect) {
                  return MOUNTING;
                }

                while (node.return) {
                  node = node.return;

                  if ((node.effectTag & Placement) !== NoEffect) {
                    return MOUNTING;
                  }
                }
              } else {
                while (node.return) {
                  node = node.return;
                }
              }

              if (node.tag === HostRoot) {
                // TODO: Check if this was a nested HostRoot when used with
                // renderContainerIntoSubtree.
                return MOUNTED;
              } // If we didn't hit the root, that means that we're in an disconnected tree
              // that has been unmounted.

              return UNMOUNTED;
            }

            function isFiberMounted(fiber) {
              return isFiberMountedImpl(fiber) === MOUNTED;
            }

            function isMounted(component) {
              {
                var owner = ReactCurrentOwner$1.current;

                if (owner !== null && owner.tag === ClassComponent) {
                  var ownerFiber = owner;
                  var instance = ownerFiber.stateNode;
                  !instance._warnedAboutRefsInRender
                    ? warningWithoutStack$1(
                        false,
                        "%s is accessing isMounted inside its render() function. " +
                          "render() should be a pure function of props and state. It should " +
                          "never access something that requires stale data from the previous " +
                          "render, such as refs. Move this logic to componentDidMount and " +
                          "componentDidUpdate instead.",
                        getComponentName(ownerFiber.type) || "A component"
                      )
                    : void 0;
                  instance._warnedAboutRefsInRender = true;
                }
              }
              var fiber = get(component);

              if (!fiber) {
                return false;
              }

              return isFiberMountedImpl(fiber) === MOUNTED;
            }

            function assertIsMounted(fiber) {
              !(isFiberMountedImpl(fiber) === MOUNTED)
                ? invariant(
                    false,
                    "Unable to find node on an unmounted component."
                  )
                : void 0;
            }

            function findCurrentFiberUsingSlowPath(fiber) {
              var alternate = fiber.alternate;

              if (!alternate) {
                // If there is no alternate, then we only need to check if it is mounted.
                var state = isFiberMountedImpl(fiber);
                !(state !== UNMOUNTED)
                  ? invariant(
                      false,
                      "Unable to find node on an unmounted component."
                    )
                  : void 0;

                if (state === MOUNTING) {
                  return null;
                }

                return fiber;
              } // If we have two possible branches, we'll walk backwards up to the root
              // to see what path the root points to. On the way we may hit one of the
              // special cases and we'll deal with them.

              var a = fiber;
              var b = alternate;

              while (true) {
                var parentA = a.return;
                var parentB = parentA ? parentA.alternate : null;

                if (!parentA || !parentB) {
                  // We're at the root.
                  break;
                } // If both copies of the parent fiber point to the same child, we can
                // assume that the child is current. This happens when we bailout on low
                // priority: the bailed out fiber's child reuses the current child.

                if (parentA.child === parentB.child) {
                  var child = parentA.child;

                  while (child) {
                    if (child === a) {
                      // We've determined that A is the current branch.
                      assertIsMounted(parentA);
                      return fiber;
                    }

                    if (child === b) {
                      // We've determined that B is the current branch.
                      assertIsMounted(parentA);
                      return alternate;
                    }

                    child = child.sibling;
                  } // We should never have an alternate for any mounting node. So the only
                  // way this could possibly happen is if this was unmounted, if at all.

                  invariant(
                    false,
                    "Unable to find node on an unmounted component."
                  );
                }

                if (a.return !== b.return) {
                  // The return pointer of A and the return pointer of B point to different
                  // fibers. We assume that return pointers never criss-cross, so A must
                  // belong to the child set of A.return, and B must belong to the child
                  // set of B.return.
                  a = parentA;
                  b = parentB;
                } else {
                  // The return pointers point to the same fiber. We'll have to use the
                  // default, slow path: scan the child sets of each parent alternate to see
                  // which child belongs to which set.
                  //
                  // Search parent A's child set
                  var didFindChild = false;
                  var _child = parentA.child;

                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentA;
                      b = parentB;
                      break;
                    }

                    if (_child === b) {
                      didFindChild = true;
                      b = parentA;
                      a = parentB;
                      break;
                    }

                    _child = _child.sibling;
                  }

                  if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;

                    while (_child) {
                      if (_child === a) {
                        didFindChild = true;
                        a = parentB;
                        b = parentA;
                        break;
                      }

                      if (_child === b) {
                        didFindChild = true;
                        b = parentB;
                        a = parentA;
                        break;
                      }

                      _child = _child.sibling;
                    }

                    !didFindChild
                      ? invariant(
                          false,
                          "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
                        )
                      : void 0;
                  }
                }

                !(a.alternate === b)
                  ? invariant(
                      false,
                      "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
                    )
                  : void 0;
              } // If the root is not a host container, we're in a disconnected tree. I.e.
              // unmounted.

              !(a.tag === HostRoot)
                ? invariant(
                    false,
                    "Unable to find node on an unmounted component."
                  )
                : void 0;

              if (a.stateNode.current === a) {
                // We've determined that A is the current branch.
                return fiber;
              } // Otherwise B has to be current branch.

              return alternate;
            }

            function findCurrentHostFiber(parent) {
              var currentParent = findCurrentFiberUsingSlowPath(parent);

              if (!currentParent) {
                return null;
              } // Next we'll drill down this component to find the first HostComponent/Text.

              var node = currentParent;

              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  return node;
                } else if (node.child) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === currentParent) {
                  return null;
                }

                while (!node.sibling) {
                  if (!node.return || node.return === currentParent) {
                    return null;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              } // Flow needs the return null here, but ESLint complains about it.
              // eslint-disable-next-line no-unreachable

              return null;
            }

            function findCurrentHostFiberWithNoPortals(parent) {
              var currentParent = findCurrentFiberUsingSlowPath(parent);

              if (!currentParent) {
                return null;
              } // Next we'll drill down this component to find the first HostComponent/Text.

              var node = currentParent;

              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  return node;
                } else if (node.child && node.tag !== HostPortal) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === currentParent) {
                  return null;
                }

                while (!node.sibling) {
                  if (!node.return || node.return === currentParent) {
                    return null;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              } // Flow needs the return null here, but ESLint complains about it.
              // eslint-disable-next-line no-unreachable

              return null;
            }

            function addEventBubbleListener(element, eventType, listener) {
              element.addEventListener(eventType, listener, false);
            }

            function addEventCaptureListener(element, eventType, listener) {
              element.addEventListener(eventType, listener, true);
            }
            /**
             * @interface Event
             * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
             * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
             */

            var SyntheticAnimationEvent = SyntheticEvent.extend({
              animationName: null,
              elapsedTime: null,
              pseudoElement: null
            });
            /**
             * @interface Event
             * @see http://www.w3.org/TR/clipboard-apis/
             */

            var SyntheticClipboardEvent = SyntheticEvent.extend({
              clipboardData: function(event) {
                return "clipboardData" in event
                  ? event.clipboardData
                  : window.clipboardData;
              }
            });
            /**
             * @interface FocusEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var SyntheticFocusEvent = SyntheticUIEvent.extend({
              relatedTarget: null
            });
            /**
             * `charCode` represents the actual "character code" and is safe to use with
             * `String.fromCharCode`. As such, only keys that correspond to printable
             * characters produce a valid `charCode`, the only exception to this is Enter.
             * The Tab-key is considered non-printable and does not have a `charCode`,
             * presumably because it does not produce a tab-character in browsers.
             *
             * @param {object} nativeEvent Native browser event.
             * @return {number} Normalized `charCode` property.
             */

            function getEventCharCode(nativeEvent) {
              var charCode = void 0;
              var keyCode = nativeEvent.keyCode;

              if ("charCode" in nativeEvent) {
                charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

                if (charCode === 0 && keyCode === 13) {
                  charCode = 13;
                }
              } else {
                // IE8 does not implement `charCode`, but `keyCode` has the correct value.
                charCode = keyCode;
              } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
              // report Enter as charCode 10 when ctrl is pressed.

              if (charCode === 10) {
                charCode = 13;
              } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
              // Must not discard the (non-)printable Enter-key.

              if (charCode >= 32 || charCode === 13) {
                return charCode;
              }

              return 0;
            }
            /**
             * Normalization of deprecated HTML5 `key` values
             * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
             */

            var normalizeKey = {
              Esc: "Escape",
              Spacebar: " ",
              Left: "ArrowLeft",
              Up: "ArrowUp",
              Right: "ArrowRight",
              Down: "ArrowDown",
              Del: "Delete",
              Win: "OS",
              Menu: "ContextMenu",
              Apps: "ContextMenu",
              Scroll: "ScrollLock",
              MozPrintableKey: "Unidentified"
            };
            /**
             * Translation from legacy `keyCode` to HTML5 `key`
             * Only special keys supported, all others depend on keyboard layout or browser
             * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
             */

            var translateToKey = {
              "8": "Backspace",
              "9": "Tab",
              "12": "Clear",
              "13": "Enter",
              "16": "Shift",
              "17": "Control",
              "18": "Alt",
              "19": "Pause",
              "20": "CapsLock",
              "27": "Escape",
              "32": " ",
              "33": "PageUp",
              "34": "PageDown",
              "35": "End",
              "36": "Home",
              "37": "ArrowLeft",
              "38": "ArrowUp",
              "39": "ArrowRight",
              "40": "ArrowDown",
              "45": "Insert",
              "46": "Delete",
              "112": "F1",
              "113": "F2",
              "114": "F3",
              "115": "F4",
              "116": "F5",
              "117": "F6",
              "118": "F7",
              "119": "F8",
              "120": "F9",
              "121": "F10",
              "122": "F11",
              "123": "F12",
              "144": "NumLock",
              "145": "ScrollLock",
              "224": "Meta"
            };
            /**
             * @param {object} nativeEvent Native browser event.
             * @return {string} Normalized `key` property.
             */

            function getEventKey(nativeEvent) {
              if (nativeEvent.key) {
                // Normalize inconsistent values reported by browsers due to
                // implementations of a working draft specification.
                // FireFox implements `key` but returns `MozPrintableKey` for all
                // printable characters (normalized to `Unidentified`), ignore it.
                var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

                if (key !== "Unidentified") {
                  return key;
                }
              } // Browser does not implement `key`, polyfill as much of it as we can.

              if (nativeEvent.type === "keypress") {
                var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
                // thus be captured by `keypress`, no other non-printable key should.

                return charCode === 13
                  ? "Enter"
                  : String.fromCharCode(charCode);
              }

              if (
                nativeEvent.type === "keydown" ||
                nativeEvent.type === "keyup"
              ) {
                // While user keyboard layout determines the actual meaning of each
                // `keyCode` value, almost all function keys have a universal value.
                return translateToKey[nativeEvent.keyCode] || "Unidentified";
              }

              return "";
            }
            /**
             * @interface KeyboardEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
              key: getEventKey,
              location: null,
              ctrlKey: null,
              shiftKey: null,
              altKey: null,
              metaKey: null,
              repeat: null,
              locale: null,
              getModifierState: getEventModifierState,
              // Legacy Interface
              charCode: function(event) {
                // `charCode` is the result of a KeyPress event and represents the value of
                // the actual printable character.
                // KeyPress is deprecated, but its replacement is not yet final and not
                // implemented in any major browser. Only KeyPress has charCode.
                if (event.type === "keypress") {
                  return getEventCharCode(event);
                }

                return 0;
              },
              keyCode: function(event) {
                // `keyCode` is the result of a KeyDown/Up event and represents the value of
                // physical keyboard key.
                // The actual meaning of the value depends on the users' keyboard layout
                // which cannot be detected. Assuming that it is a US keyboard layout
                // provides a surprisingly accurate mapping for US and European users.
                // Due to this, it is left to the user to implement at this time.
                if (event.type === "keydown" || event.type === "keyup") {
                  return event.keyCode;
                }

                return 0;
              },
              which: function(event) {
                // `which` is an alias for either `keyCode` or `charCode` depending on the
                // type of the event.
                if (event.type === "keypress") {
                  return getEventCharCode(event);
                }

                if (event.type === "keydown" || event.type === "keyup") {
                  return event.keyCode;
                }

                return 0;
              }
            });
            /**
             * @interface DragEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var SyntheticDragEvent = SyntheticMouseEvent.extend({
              dataTransfer: null
            });
            /**
             * @interface TouchEvent
             * @see http://www.w3.org/TR/touch-events/
             */

            var SyntheticTouchEvent = SyntheticUIEvent.extend({
              touches: null,
              targetTouches: null,
              changedTouches: null,
              altKey: null,
              metaKey: null,
              ctrlKey: null,
              shiftKey: null,
              getModifierState: getEventModifierState
            });
            /**
             * @interface Event
             * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
             * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
             */

            var SyntheticTransitionEvent = SyntheticEvent.extend({
              propertyName: null,
              elapsedTime: null,
              pseudoElement: null
            });
            /**
             * @interface WheelEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var SyntheticWheelEvent = SyntheticMouseEvent.extend({
              deltaX: function(event) {
                return "deltaX" in event
                  ? event.deltaX // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                  : "wheelDeltaX" in event
                  ? -event.wheelDeltaX
                  : 0;
              },
              deltaY: function(event) {
                return "deltaY" in event
                  ? event.deltaY // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                  : "wheelDeltaY" in event
                  ? -event.wheelDeltaY // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  : "wheelDelta" in event
                  ? -event.wheelDelta
                  : 0;
              },
              deltaZ: null,
              // Browsers without "deltaMode" is reporting in raw wheel delta where one
              // notch on the scroll is always +/- 120, roughly equivalent to pixels.
              // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
              // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
              deltaMode: null
            });
            /**
             * Turns
             * ['abort', ...]
             * into
             * eventTypes = {
             *   'abort': {
             *     phasedRegistrationNames: {
             *       bubbled: 'onAbort',
             *       captured: 'onAbortCapture',
             *     },
             *     dependencies: [TOP_ABORT],
             *   },
             *   ...
             * };
             * topLevelEventsToDispatchConfig = new Map([
             *   [TOP_ABORT, { sameConfig }],
             * ]);
             */

            var interactiveEventTypeNames = [
              [TOP_BLUR, "blur"],
              [TOP_CANCEL, "cancel"],
              [TOP_CLICK, "click"],
              [TOP_CLOSE, "close"],
              [TOP_CONTEXT_MENU, "contextMenu"],
              [TOP_COPY, "copy"],
              [TOP_CUT, "cut"],
              [TOP_AUX_CLICK, "auxClick"],
              [TOP_DOUBLE_CLICK, "doubleClick"],
              [TOP_DRAG_END, "dragEnd"],
              [TOP_DRAG_START, "dragStart"],
              [TOP_DROP, "drop"],
              [TOP_FOCUS, "focus"],
              [TOP_INPUT, "input"],
              [TOP_INVALID, "invalid"],
              [TOP_KEY_DOWN, "keyDown"],
              [TOP_KEY_PRESS, "keyPress"],
              [TOP_KEY_UP, "keyUp"],
              [TOP_MOUSE_DOWN, "mouseDown"],
              [TOP_MOUSE_UP, "mouseUp"],
              [TOP_PASTE, "paste"],
              [TOP_PAUSE, "pause"],
              [TOP_PLAY, "play"],
              [TOP_POINTER_CANCEL, "pointerCancel"],
              [TOP_POINTER_DOWN, "pointerDown"],
              [TOP_POINTER_UP, "pointerUp"],
              [TOP_RATE_CHANGE, "rateChange"],
              [TOP_RESET, "reset"],
              [TOP_SEEKED, "seeked"],
              [TOP_SUBMIT, "submit"],
              [TOP_TOUCH_CANCEL, "touchCancel"],
              [TOP_TOUCH_END, "touchEnd"],
              [TOP_TOUCH_START, "touchStart"],
              [TOP_VOLUME_CHANGE, "volumeChange"]
            ];
            var nonInteractiveEventTypeNames = [
              [TOP_ABORT, "abort"],
              [TOP_ANIMATION_END, "animationEnd"],
              [TOP_ANIMATION_ITERATION, "animationIteration"],
              [TOP_ANIMATION_START, "animationStart"],
              [TOP_CAN_PLAY, "canPlay"],
              [TOP_CAN_PLAY_THROUGH, "canPlayThrough"],
              [TOP_DRAG, "drag"],
              [TOP_DRAG_ENTER, "dragEnter"],
              [TOP_DRAG_EXIT, "dragExit"],
              [TOP_DRAG_LEAVE, "dragLeave"],
              [TOP_DRAG_OVER, "dragOver"],
              [TOP_DURATION_CHANGE, "durationChange"],
              [TOP_EMPTIED, "emptied"],
              [TOP_ENCRYPTED, "encrypted"],
              [TOP_ENDED, "ended"],
              [TOP_ERROR, "error"],
              [TOP_GOT_POINTER_CAPTURE, "gotPointerCapture"],
              [TOP_LOAD, "load"],
              [TOP_LOADED_DATA, "loadedData"],
              [TOP_LOADED_METADATA, "loadedMetadata"],
              [TOP_LOAD_START, "loadStart"],
              [TOP_LOST_POINTER_CAPTURE, "lostPointerCapture"],
              [TOP_MOUSE_MOVE, "mouseMove"],
              [TOP_MOUSE_OUT, "mouseOut"],
              [TOP_MOUSE_OVER, "mouseOver"],
              [TOP_PLAYING, "playing"],
              [TOP_POINTER_MOVE, "pointerMove"],
              [TOP_POINTER_OUT, "pointerOut"],
              [TOP_POINTER_OVER, "pointerOver"],
              [TOP_PROGRESS, "progress"],
              [TOP_SCROLL, "scroll"],
              [TOP_SEEKING, "seeking"],
              [TOP_STALLED, "stalled"],
              [TOP_SUSPEND, "suspend"],
              [TOP_TIME_UPDATE, "timeUpdate"],
              [TOP_TOGGLE, "toggle"],
              [TOP_TOUCH_MOVE, "touchMove"],
              [TOP_TRANSITION_END, "transitionEnd"],
              [TOP_WAITING, "waiting"],
              [TOP_WHEEL, "wheel"]
            ];
            var eventTypes$4 = {};
            var topLevelEventsToDispatchConfig = {};

            function addEventTypeNameToConfig(_ref, isInteractive) {
              var topEvent = _ref[0],
                event = _ref[1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var onEvent = "on" + capitalizedEvent;
              var type = {
                phasedRegistrationNames: {
                  bubbled: onEvent,
                  captured: onEvent + "Capture"
                },
                dependencies: [topEvent],
                isInteractive: isInteractive
              };
              eventTypes$4[event] = type;
              topLevelEventsToDispatchConfig[topEvent] = type;
            }

            interactiveEventTypeNames.forEach(function(eventTuple) {
              addEventTypeNameToConfig(eventTuple, true);
            });
            nonInteractiveEventTypeNames.forEach(function(eventTuple) {
              addEventTypeNameToConfig(eventTuple, false);
            }); // Only used in DEV for exhaustiveness validation.

            var knownHTMLTopLevelTypes = [
              TOP_ABORT,
              TOP_CANCEL,
              TOP_CAN_PLAY,
              TOP_CAN_PLAY_THROUGH,
              TOP_CLOSE,
              TOP_DURATION_CHANGE,
              TOP_EMPTIED,
              TOP_ENCRYPTED,
              TOP_ENDED,
              TOP_ERROR,
              TOP_INPUT,
              TOP_INVALID,
              TOP_LOAD,
              TOP_LOADED_DATA,
              TOP_LOADED_METADATA,
              TOP_LOAD_START,
              TOP_PAUSE,
              TOP_PLAY,
              TOP_PLAYING,
              TOP_PROGRESS,
              TOP_RATE_CHANGE,
              TOP_RESET,
              TOP_SEEKED,
              TOP_SEEKING,
              TOP_STALLED,
              TOP_SUBMIT,
              TOP_SUSPEND,
              TOP_TIME_UPDATE,
              TOP_TOGGLE,
              TOP_VOLUME_CHANGE,
              TOP_WAITING
            ];
            var SimpleEventPlugin = {
              eventTypes: eventTypes$4,
              isInteractiveTopLevelEventType: function(topLevelType) {
                var config = topLevelEventsToDispatchConfig[topLevelType];
                return config !== undefined && config.isInteractive === true;
              },
              extractEvents: function(
                topLevelType,
                targetInst,
                nativeEvent,
                nativeEventTarget
              ) {
                var dispatchConfig =
                  topLevelEventsToDispatchConfig[topLevelType];

                if (!dispatchConfig) {
                  return null;
                }

                var EventConstructor = void 0;

                switch (topLevelType) {
                  case TOP_KEY_PRESS:
                    // Firefox creates a keypress event for function keys too. This removes
                    // the unwanted keypress events. Enter is however both printable and
                    // non-printable. One would expect Tab to be as well (but it isn't).
                    if (getEventCharCode(nativeEvent) === 0) {
                      return null;
                    }

                  /* falls through */

                  case TOP_KEY_DOWN:
                  case TOP_KEY_UP:
                    EventConstructor = SyntheticKeyboardEvent;
                    break;

                  case TOP_BLUR:
                  case TOP_FOCUS:
                    EventConstructor = SyntheticFocusEvent;
                    break;

                  case TOP_CLICK:
                    // Firefox creates a click event on right mouse clicks. This removes the
                    // unwanted click events.
                    if (nativeEvent.button === 2) {
                      return null;
                    }

                  /* falls through */

                  case TOP_AUX_CLICK:
                  case TOP_DOUBLE_CLICK:
                  case TOP_MOUSE_DOWN:
                  case TOP_MOUSE_MOVE:
                  case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

                  /* falls through */

                  case TOP_MOUSE_OUT:
                  case TOP_MOUSE_OVER:
                  case TOP_CONTEXT_MENU:
                    EventConstructor = SyntheticMouseEvent;
                    break;

                  case TOP_DRAG:
                  case TOP_DRAG_END:
                  case TOP_DRAG_ENTER:
                  case TOP_DRAG_EXIT:
                  case TOP_DRAG_LEAVE:
                  case TOP_DRAG_OVER:
                  case TOP_DRAG_START:
                  case TOP_DROP:
                    EventConstructor = SyntheticDragEvent;
                    break;

                  case TOP_TOUCH_CANCEL:
                  case TOP_TOUCH_END:
                  case TOP_TOUCH_MOVE:
                  case TOP_TOUCH_START:
                    EventConstructor = SyntheticTouchEvent;
                    break;

                  case TOP_ANIMATION_END:
                  case TOP_ANIMATION_ITERATION:
                  case TOP_ANIMATION_START:
                    EventConstructor = SyntheticAnimationEvent;
                    break;

                  case TOP_TRANSITION_END:
                    EventConstructor = SyntheticTransitionEvent;
                    break;

                  case TOP_SCROLL:
                    EventConstructor = SyntheticUIEvent;
                    break;

                  case TOP_WHEEL:
                    EventConstructor = SyntheticWheelEvent;
                    break;

                  case TOP_COPY:
                  case TOP_CUT:
                  case TOP_PASTE:
                    EventConstructor = SyntheticClipboardEvent;
                    break;

                  case TOP_GOT_POINTER_CAPTURE:
                  case TOP_LOST_POINTER_CAPTURE:
                  case TOP_POINTER_CANCEL:
                  case TOP_POINTER_DOWN:
                  case TOP_POINTER_MOVE:
                  case TOP_POINTER_OUT:
                  case TOP_POINTER_OVER:
                  case TOP_POINTER_UP:
                    EventConstructor = SyntheticPointerEvent;
                    break;

                  default:
                    {
                      if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                        warningWithoutStack$1(
                          false,
                          "SimpleEventPlugin: Unhandled event type, `%s`. This warning " +
                            "is likely caused by a bug in React. Please file an issue.",
                          topLevelType
                        );
                      }
                    } // HTML Events
                    // @see http://www.w3.org/TR/html5/index.html#events-0

                    EventConstructor = SyntheticEvent;
                    break;
                }

                var event = EventConstructor.getPooled(
                  dispatchConfig,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                );
                accumulateTwoPhaseDispatches(event);
                return event;
              }
            };
            var isInteractiveTopLevelEventType =
              SimpleEventPlugin.isInteractiveTopLevelEventType;
            var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
            var callbackBookkeepingPool = [];
            /**
             * Find the deepest React component completely containing the root of the
             * passed-in instance (for use when entire React trees are nested within each
             * other). If React trees are not nested, returns null.
             */

            function findRootContainerNode(inst) {
              // TODO: It may be a good idea to cache this to prevent unnecessary DOM
              // traversal, but caching is difficult to do correctly without using a
              // mutation observer to listen for all DOM changes.
              while (inst.return) {
                inst = inst.return;
              }

              if (inst.tag !== HostRoot) {
                // This can happen if we're in a detached tree.
                return null;
              }

              return inst.stateNode.containerInfo;
            } // Used to store ancestor hierarchy in top level callback

            function getTopLevelCallbackBookKeeping(
              topLevelType,
              nativeEvent,
              targetInst
            ) {
              if (callbackBookkeepingPool.length) {
                var instance = callbackBookkeepingPool.pop();
                instance.topLevelType = topLevelType;
                instance.nativeEvent = nativeEvent;
                instance.targetInst = targetInst;
                return instance;
              }

              return {
                topLevelType: topLevelType,
                nativeEvent: nativeEvent,
                targetInst: targetInst,
                ancestors: []
              };
            }

            function releaseTopLevelCallbackBookKeeping(instance) {
              instance.topLevelType = null;
              instance.nativeEvent = null;
              instance.targetInst = null;
              instance.ancestors.length = 0;

              if (
                callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE
              ) {
                callbackBookkeepingPool.push(instance);
              }
            }

            function handleTopLevel(bookKeeping) {
              var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
              // It's important that we build the array of ancestors before calling any
              // event handlers, because event handlers can modify the DOM, leading to
              // inconsistencies with ReactMount's node cache. See #1105.

              var ancestor = targetInst;

              do {
                if (!ancestor) {
                  bookKeeping.ancestors.push(ancestor);
                  break;
                }

                var root = findRootContainerNode(ancestor);

                if (!root) {
                  break;
                }

                bookKeeping.ancestors.push(ancestor);
                ancestor = getClosestInstanceFromNode(root);
              } while (ancestor);

              for (var i = 0; i < bookKeeping.ancestors.length; i++) {
                targetInst = bookKeeping.ancestors[i];
                runExtractedEventsInBatch(
                  bookKeeping.topLevelType,
                  targetInst,
                  bookKeeping.nativeEvent,
                  getEventTarget(bookKeeping.nativeEvent)
                );
              }
            } // TODO: can we stop exporting these?

            var _enabled = true;

            function setEnabled(enabled) {
              _enabled = !!enabled;
            }

            function isEnabled() {
              return _enabled;
            }
            /**
             * Traps top-level events by using event bubbling.
             *
             * @param {number} topLevelType Number from `TopLevelEventTypes`.
             * @param {object} element Element on which to attach listener.
             * @return {?object} An object with a remove function which will forcefully
             *                  remove the listener.
             * @internal
             */

            function trapBubbledEvent(topLevelType, element) {
              if (!element) {
                return null;
              }

              var dispatch = isInteractiveTopLevelEventType(topLevelType)
                ? dispatchInteractiveEvent
                : dispatchEvent;
              addEventBubbleListener(
                element,
                getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
                dispatch.bind(null, topLevelType)
              );
            }
            /**
             * Traps a top-level event by using event capturing.
             *
             * @param {number} topLevelType Number from `TopLevelEventTypes`.
             * @param {object} element Element on which to attach listener.
             * @return {?object} An object with a remove function which will forcefully
             *                  remove the listener.
             * @internal
             */

            function trapCapturedEvent(topLevelType, element) {
              if (!element) {
                return null;
              }

              var dispatch = isInteractiveTopLevelEventType(topLevelType)
                ? dispatchInteractiveEvent
                : dispatchEvent;
              addEventCaptureListener(
                element,
                getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
                dispatch.bind(null, topLevelType)
              );
            }

            function dispatchInteractiveEvent(topLevelType, nativeEvent) {
              interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
            }

            function dispatchEvent(topLevelType, nativeEvent) {
              if (!_enabled) {
                return;
              }

              var nativeEventTarget = getEventTarget(nativeEvent);
              var targetInst = getClosestInstanceFromNode(nativeEventTarget);

              if (
                targetInst !== null &&
                typeof targetInst.tag === "number" &&
                !isFiberMounted(targetInst)
              ) {
                // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
              }

              var bookKeeping = getTopLevelCallbackBookKeeping(
                topLevelType,
                nativeEvent,
                targetInst
              );

              try {
                // Event queue being processed in the same cycle allows
                // `preventDefault`.
                batchedUpdates(handleTopLevel, bookKeeping);
              } finally {
                releaseTopLevelCallbackBookKeeping(bookKeeping);
              }
            }
            /**
             * Summary of `ReactBrowserEventEmitter` event handling:
             *
             *  - Top-level delegation is used to trap most native browser events. This
             *    may only occur in the main thread and is the responsibility of
             *    ReactDOMEventListener, which is injected and can therefore support
             *    pluggable event sources. This is the only work that occurs in the main
             *    thread.
             *
             *  - We normalize and de-duplicate events to account for browser quirks. This
             *    may be done in the worker thread.
             *
             *  - Forward these native events (with the associated top-level type used to
             *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
             *    to extract any synthetic events.
             *
             *  - The `EventPluginHub` will then process each event by annotating them with
             *    "dispatches", a sequence of listeners and IDs that care about that event.
             *
             *  - The `EventPluginHub` then dispatches the events.
             *
             * Overview of React and the event system:
             *
             * +------------+    .
             * |    DOM     |    .
             * +------------+    .
             *       |           .
             *       v           .
             * +------------+    .
             * | ReactEvent |    .
             * |  Listener  |    .
             * +------------+    .                         +-----------+
             *       |           .               +--------+|SimpleEvent|
             *       |           .               |         |Plugin     |
             * +-----|------+    .               v         +-----------+
             * |     |      |    .    +--------------+                    +------------+
             * |     +-----------.--->|EventPluginHub|                    |    Event   |
             * |            |    .    |              |     +-----------+  | Propagators|
             * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
             * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
             * |            |    .    |              |     +-----------+  |  utilities |
             * |     +-----------.--->|              |                    +------------+
             * |     |      |    .    +--------------+
             * +-----|------+    .                ^        +-----------+
             *       |           .                |        |Enter/Leave|
             *       +           .                +-------+|Plugin     |
             * +-------------+   .                         +-----------+
             * | application |   .
             * |-------------|   .
             * |             |   .
             * |             |   .
             * +-------------+   .
             *                   .
             *    React Core     .  General Purpose Event Plugin System
             */

            var alreadyListeningTo = {};
            var reactTopListenersCounter = 0;
            /**
             * To ensure no conflicts with other potential React instances on the page
             */

            var topListenersIDKey =
              "_reactListenersID" + ("" + Math.random()).slice(2);

            function getListeningForDocument(mountAt) {
              // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
              // directly.
              if (
                !Object.prototype.hasOwnProperty.call(
                  mountAt,
                  topListenersIDKey
                )
              ) {
                mountAt[topListenersIDKey] = reactTopListenersCounter++;
                alreadyListeningTo[mountAt[topListenersIDKey]] = {};
              }

              return alreadyListeningTo[mountAt[topListenersIDKey]];
            }
            /**
             * We listen for bubbled touch events on the document object.
             *
             * Firefox v8.01 (and possibly others) exhibited strange behavior when
             * mounting `onmousemove` events at some node that was not the document
             * element. The symptoms were that if your mouse is not moving over something
             * contained within that mount point (for example on the background) the
             * top-level listeners for `onmousemove` won't be called. However, if you
             * register the `mousemove` on the document object, then it will of course
             * catch all `mousemove`s. This along with iOS quirks, justifies restricting
             * top-level listeners to the document object only, at least for these
             * movement types of events and possibly all events.
             *
             * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
             *
             * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
             * they bubble to document.
             *
             * @param {string} registrationName Name of listener (e.g. `onClick`).
             * @param {object} mountAt Container where to mount the listener
             */

            function listenTo(registrationName, mountAt) {
              var isListening = getListeningForDocument(mountAt);
              var dependencies = registrationNameDependencies[registrationName];

              for (var i = 0; i < dependencies.length; i++) {
                var dependency = dependencies[i];

                if (
                  !(
                    isListening.hasOwnProperty(dependency) &&
                    isListening[dependency]
                  )
                ) {
                  switch (dependency) {
                    case TOP_SCROLL:
                      trapCapturedEvent(TOP_SCROLL, mountAt);
                      break;

                    case TOP_FOCUS:
                    case TOP_BLUR:
                      trapCapturedEvent(TOP_FOCUS, mountAt);
                      trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
                      // but this ensures we mark both as attached rather than just one.

                      isListening[TOP_BLUR] = true;
                      isListening[TOP_FOCUS] = true;
                      break;

                    case TOP_CANCEL:
                    case TOP_CLOSE:
                      if (isEventSupported(getRawEventName(dependency))) {
                        trapCapturedEvent(dependency, mountAt);
                      }

                      break;

                    case TOP_INVALID:
                    case TOP_SUBMIT:
                    case TOP_RESET:
                      // We listen to them on the target DOM elements.
                      // Some of them bubble so we don't want them to fire twice.
                      break;

                    default:
                      // By default, listen on the top level to all non-media events.
                      // Media events don't bubble so adding the listener wouldn't do anything.
                      var isMediaEvent =
                        mediaEventTypes.indexOf(dependency) !== -1;

                      if (!isMediaEvent) {
                        trapBubbledEvent(dependency, mountAt);
                      }

                      break;
                  }

                  isListening[dependency] = true;
                }
              }
            }

            function isListeningToAllDependencies(registrationName, mountAt) {
              var isListening = getListeningForDocument(mountAt);
              var dependencies = registrationNameDependencies[registrationName];

              for (var i = 0; i < dependencies.length; i++) {
                var dependency = dependencies[i];

                if (
                  !(
                    isListening.hasOwnProperty(dependency) &&
                    isListening[dependency]
                  )
                ) {
                  return false;
                }
              }

              return true;
            }

            function getActiveElement(doc) {
              doc =
                doc || (typeof document !== "undefined" ? document : undefined);

              if (typeof doc === "undefined") {
                return null;
              }

              try {
                return doc.activeElement || doc.body;
              } catch (e) {
                return doc.body;
              }
            }
            /**
             * Given any node return the first leaf node without children.
             *
             * @param {DOMElement|DOMTextNode} node
             * @return {DOMElement|DOMTextNode}
             */

            function getLeafNode(node) {
              while (node && node.firstChild) {
                node = node.firstChild;
              }

              return node;
            }
            /**
             * Get the next sibling within a container. This will walk up the
             * DOM if a node's siblings have been exhausted.
             *
             * @param {DOMElement|DOMTextNode} node
             * @return {?DOMElement|DOMTextNode}
             */

            function getSiblingNode(node) {
              while (node) {
                if (node.nextSibling) {
                  return node.nextSibling;
                }

                node = node.parentNode;
              }
            }
            /**
             * Get object describing the nodes which contain characters at offset.
             *
             * @param {DOMElement|DOMTextNode} root
             * @param {number} offset
             * @return {?object}
             */

            function getNodeForCharacterOffset(root, offset) {
              var node = getLeafNode(root);
              var nodeStart = 0;
              var nodeEnd = 0;

              while (node) {
                if (node.nodeType === TEXT_NODE) {
                  nodeEnd = nodeStart + node.textContent.length;

                  if (nodeStart <= offset && nodeEnd >= offset) {
                    return {
                      node: node,
                      offset: offset - nodeStart
                    };
                  }

                  nodeStart = nodeEnd;
                }

                node = getLeafNode(getSiblingNode(node));
              }
            }
            /**
             * @param {DOMElement} outerNode
             * @return {?object}
             */

            function getOffsets(outerNode) {
              var ownerDocument = outerNode.ownerDocument;
              var win = (ownerDocument && ownerDocument.defaultView) || window;
              var selection = win.getSelection && win.getSelection();

              if (!selection || selection.rangeCount === 0) {
                return null;
              }

              var anchorNode = selection.anchorNode,
                anchorOffset = selection.anchorOffset,
                focusNode = selection.focusNode,
                focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
              // up/down buttons on an <input type="number">. Anonymous divs do not seem to
              // expose properties, triggering a "Permission denied error" if any of its
              // properties are accessed. The only seemingly possible way to avoid erroring
              // is to access a property that typically works for non-anonymous divs and
              // catch any error that may otherwise arise. See
              // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

              try {
                /* eslint-disable no-unused-expressions */
                anchorNode.nodeType;
                focusNode.nodeType;
                /* eslint-enable no-unused-expressions */
              } catch (e) {
                return null;
              }

              return getModernOffsetsFromPoints(
                outerNode,
                anchorNode,
                anchorOffset,
                focusNode,
                focusOffset
              );
            }
            /**
             * Returns {start, end} where `start` is the character/codepoint index of
             * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
             * `end` is the index of (focusNode, focusOffset).
             *
             * Returns null if you pass in garbage input but we should probably just crash.
             *
             * Exported only for testing.
             */

            function getModernOffsetsFromPoints(
              outerNode,
              anchorNode,
              anchorOffset,
              focusNode,
              focusOffset
            ) {
              var length = 0;
              var start = -1;
              var end = -1;
              var indexWithinAnchor = 0;
              var indexWithinFocus = 0;
              var node = outerNode;
              var parentNode = null;

              outer: while (true) {
                var next = null;

                while (true) {
                  if (
                    node === anchorNode &&
                    (anchorOffset === 0 || node.nodeType === TEXT_NODE)
                  ) {
                    start = length + anchorOffset;
                  }

                  if (
                    node === focusNode &&
                    (focusOffset === 0 || node.nodeType === TEXT_NODE)
                  ) {
                    end = length + focusOffset;
                  }

                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }

                  if ((next = node.firstChild) === null) {
                    break;
                  } // Moving from `node` to its first child `next`.

                  parentNode = node;
                  node = next;
                }

                while (true) {
                  if (node === outerNode) {
                    // If `outerNode` has children, this is always the second time visiting
                    // it. If it has no children, this is still the first loop, and the only
                    // valid selection is anchorNode and focusNode both equal to this node
                    // and both offsets 0, in which case we will have handled above.
                    break outer;
                  }

                  if (
                    parentNode === anchorNode &&
                    ++indexWithinAnchor === anchorOffset
                  ) {
                    start = length;
                  }

                  if (
                    parentNode === focusNode &&
                    ++indexWithinFocus === focusOffset
                  ) {
                    end = length;
                  }

                  if ((next = node.nextSibling) !== null) {
                    break;
                  }

                  node = parentNode;
                  parentNode = node.parentNode;
                } // Moving from `node` to its next sibling `next`.

                node = next;
              }

              if (start === -1 || end === -1) {
                // This should never happen. (Would happen if the anchor/focus nodes aren't
                // actually inside the passed-in node.)
                return null;
              }

              return {
                start: start,
                end: end
              };
            }
            /**
             * In modern non-IE browsers, we can support both forward and backward
             * selections.
             *
             * Note: IE10+ supports the Selection object, but it does not support
             * the `extend` method, which means that even in modern IE, it's not possible
             * to programmatically create a backward selection. Thus, for all IE
             * versions, we use the old IE API to create our selections.
             *
             * @param {DOMElement|DOMTextNode} node
             * @param {object} offsets
             */

            function setOffsets(node, offsets) {
              var doc = node.ownerDocument || document;
              var win = (doc && doc.defaultView) || window; // Edge fails with "Object expected" in some scenarios.
              // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
              // fails when pasting 100+ items)

              if (!win.getSelection) {
                return;
              }

              var selection = win.getSelection();
              var length = node.textContent.length;
              var start = Math.min(offsets.start, length);
              var end =
                offsets.end === undefined
                  ? start
                  : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
              // Flip backward selections, so we can set with a single range.

              if (!selection.extend && start > end) {
                var temp = end;
                end = start;
                start = temp;
              }

              var startMarker = getNodeForCharacterOffset(node, start);
              var endMarker = getNodeForCharacterOffset(node, end);

              if (startMarker && endMarker) {
                if (
                  selection.rangeCount === 1 &&
                  selection.anchorNode === startMarker.node &&
                  selection.anchorOffset === startMarker.offset &&
                  selection.focusNode === endMarker.node &&
                  selection.focusOffset === endMarker.offset
                ) {
                  return;
                }

                var range = doc.createRange();
                range.setStart(startMarker.node, startMarker.offset);
                selection.removeAllRanges();

                if (start > end) {
                  selection.addRange(range);
                  selection.extend(endMarker.node, endMarker.offset);
                } else {
                  range.setEnd(endMarker.node, endMarker.offset);
                  selection.addRange(range);
                }
              }
            }

            function isTextNode(node) {
              return node && node.nodeType === TEXT_NODE;
            }

            function containsNode(outerNode, innerNode) {
              if (!outerNode || !innerNode) {
                return false;
              } else if (outerNode === innerNode) {
                return true;
              } else if (isTextNode(outerNode)) {
                return false;
              } else if (isTextNode(innerNode)) {
                return containsNode(outerNode, innerNode.parentNode);
              } else if ("contains" in outerNode) {
                return outerNode.contains(innerNode);
              } else if (outerNode.compareDocumentPosition) {
                return !!(outerNode.compareDocumentPosition(innerNode) & 16);
              } else {
                return false;
              }
            }

            function isInDocument(node) {
              return (
                node &&
                node.ownerDocument &&
                containsNode(node.ownerDocument.documentElement, node)
              );
            }

            function getActiveElementDeep() {
              var win = window;
              var element = getActiveElement();

              while (element instanceof win.HTMLIFrameElement) {
                // Accessing the contentDocument of a HTMLIframeElement can cause the browser
                // to throw, e.g. if it has a cross-origin src attribute
                try {
                  win = element.contentDocument.defaultView;
                } catch (e) {
                  return element;
                }

                element = getActiveElement(win.document);
              }

              return element;
            }
            /**
             * @ReactInputSelection: React input selection module. Based on Selection.js,
             * but modified to be suitable for react and has a couple of bug fixes (doesn't
             * assume buttons have range selections allowed).
             * Input selection module for React.
             */

            /**
             * @hasSelectionCapabilities: we get the element types that support selection
             * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
             * and `selectionEnd` rows.
             */

            function hasSelectionCapabilities(elem) {
              var nodeName =
                elem && elem.nodeName && elem.nodeName.toLowerCase();
              return (
                nodeName &&
                ((nodeName === "input" &&
                  (elem.type === "text" ||
                    elem.type === "search" ||
                    elem.type === "tel" ||
                    elem.type === "url" ||
                    elem.type === "password")) ||
                  nodeName === "textarea" ||
                  elem.contentEditable === "true")
              );
            }

            function getSelectionInformation() {
              var focusedElem = getActiveElementDeep();
              return {
                focusedElem: focusedElem,
                selectionRange: hasSelectionCapabilities(focusedElem)
                  ? getSelection$1(focusedElem)
                  : null
              };
            }
            /**
             * @restoreSelection: If any selection information was potentially lost,
             * restore it. This is useful when performing operations that could remove dom
             * nodes and place them back in, resulting in focus being lost.
             */

            function restoreSelection(priorSelectionInformation) {
              var curFocusedElem = getActiveElementDeep();
              var priorFocusedElem = priorSelectionInformation.focusedElem;
              var priorSelectionRange =
                priorSelectionInformation.selectionRange;

              if (
                curFocusedElem !== priorFocusedElem &&
                isInDocument(priorFocusedElem)
              ) {
                if (
                  priorSelectionRange !== null &&
                  hasSelectionCapabilities(priorFocusedElem)
                ) {
                  setSelection(priorFocusedElem, priorSelectionRange);
                } // Focusing a node can change the scroll position, which is undesirable

                var ancestors = [];
                var ancestor = priorFocusedElem;

                while ((ancestor = ancestor.parentNode)) {
                  if (ancestor.nodeType === ELEMENT_NODE) {
                    ancestors.push({
                      element: ancestor,
                      left: ancestor.scrollLeft,
                      top: ancestor.scrollTop
                    });
                  }
                }

                if (typeof priorFocusedElem.focus === "function") {
                  priorFocusedElem.focus();
                }

                for (var i = 0; i < ancestors.length; i++) {
                  var info = ancestors[i];
                  info.element.scrollLeft = info.left;
                  info.element.scrollTop = info.top;
                }
              }
            }
            /**
             * @getSelection: Gets the selection bounds of a focused textarea, input or
             * contentEditable node.
             * -@input: Look up selection bounds of this input
             * -@return {start: selectionStart, end: selectionEnd}
             */

            function getSelection$1(input) {
              var selection = void 0;

              if ("selectionStart" in input) {
                // Modern browser with input or textarea.
                selection = {
                  start: input.selectionStart,
                  end: input.selectionEnd
                };
              } else {
                // Content editable or old IE textarea.
                selection = getOffsets(input);
              }

              return (
                selection || {
                  start: 0,
                  end: 0
                }
              );
            }
            /**
             * @setSelection: Sets the selection bounds of a textarea or input and focuses
             * the input.
             * -@input     Set selection bounds of this input or textarea
             * -@offsets   Object of same form that is returned from get*
             */

            function setSelection(input, offsets) {
              var start = offsets.start,
                end = offsets.end;

              if (end === undefined) {
                end = start;
              }

              if ("selectionStart" in input) {
                input.selectionStart = start;
                input.selectionEnd = Math.min(end, input.value.length);
              } else {
                setOffsets(input, offsets);
              }
            }

            var skipSelectionChangeEvent =
              canUseDOM &&
              "documentMode" in document &&
              document.documentMode <= 11;
            var eventTypes$3 = {
              select: {
                phasedRegistrationNames: {
                  bubbled: "onSelect",
                  captured: "onSelectCapture"
                },
                dependencies: [
                  TOP_BLUR,
                  TOP_CONTEXT_MENU,
                  TOP_DRAG_END,
                  TOP_FOCUS,
                  TOP_KEY_DOWN,
                  TOP_KEY_UP,
                  TOP_MOUSE_DOWN,
                  TOP_MOUSE_UP,
                  TOP_SELECTION_CHANGE
                ]
              }
            };
            var activeElement$1 = null;
            var activeElementInst$1 = null;
            var lastSelection = null;
            var mouseDown = false;
            /**
             * Get an object which is a unique representation of the current selection.
             *
             * The return value will not be consistent across nodes or browsers, but
             * two identical selections on the same node will return identical objects.
             *
             * @param {DOMElement} node
             * @return {object}
             */

            function getSelection(node) {
              if ("selectionStart" in node && hasSelectionCapabilities(node)) {
                return {
                  start: node.selectionStart,
                  end: node.selectionEnd
                };
              } else {
                var win =
                  (node.ownerDocument && node.ownerDocument.defaultView) ||
                  window;
                var selection = win.getSelection();
                return {
                  anchorNode: selection.anchorNode,
                  anchorOffset: selection.anchorOffset,
                  focusNode: selection.focusNode,
                  focusOffset: selection.focusOffset
                };
              }
            }
            /**
             * Get document associated with the event target.
             *
             * @param {object} nativeEventTarget
             * @return {Document}
             */

            function getEventTargetDocument(eventTarget) {
              return eventTarget.window === eventTarget
                ? eventTarget.document
                : eventTarget.nodeType === DOCUMENT_NODE
                ? eventTarget
                : eventTarget.ownerDocument;
            }
            /**
             * Poll selection to see whether it's changed.
             *
             * @param {object} nativeEvent
             * @param {object} nativeEventTarget
             * @return {?SyntheticEvent}
             */

            function constructSelectEvent(nativeEvent, nativeEventTarget) {
              // Ensure we have the right element, and that the user is not dragging a
              // selection (this matches native `select` event behavior). In HTML5, select
              // fires only on input and textarea thus if there's no focused element we
              // won't dispatch.
              var doc = getEventTargetDocument(nativeEventTarget);

              if (
                mouseDown ||
                activeElement$1 == null ||
                activeElement$1 !== getActiveElement(doc)
              ) {
                return null;
              } // Only fire when selection has actually changed.

              var currentSelection = getSelection(activeElement$1);

              if (
                !lastSelection ||
                !shallowEqual(lastSelection, currentSelection)
              ) {
                lastSelection = currentSelection;
                var syntheticEvent = SyntheticEvent.getPooled(
                  eventTypes$3.select,
                  activeElementInst$1,
                  nativeEvent,
                  nativeEventTarget
                );
                syntheticEvent.type = "select";
                syntheticEvent.target = activeElement$1;
                accumulateTwoPhaseDispatches(syntheticEvent);
                return syntheticEvent;
              }

              return null;
            }
            /**
             * This plugin creates an `onSelect` event that normalizes select events
             * across form elements.
             *
             * Supported elements are:
             * - input (see `isTextInputElement`)
             * - textarea
             * - contentEditable
             *
             * This differs from native browser implementations in the following ways:
             * - Fires on contentEditable fields as well as inputs.
             * - Fires for collapsed selection.
             * - Fires after user input.
             */

            var SelectEventPlugin = {
              eventTypes: eventTypes$3,
              extractEvents: function(
                topLevelType,
                targetInst,
                nativeEvent,
                nativeEventTarget
              ) {
                var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
                // not extract events. See #3639.

                if (!doc || !isListeningToAllDependencies("onSelect", doc)) {
                  return null;
                }

                var targetNode = targetInst
                  ? getNodeFromInstance$1(targetInst)
                  : window;

                switch (topLevelType) {
                  // Track the input node that has focus.
                  case TOP_FOCUS:
                    if (
                      isTextInputElement(targetNode) ||
                      targetNode.contentEditable === "true"
                    ) {
                      activeElement$1 = targetNode;
                      activeElementInst$1 = targetInst;
                      lastSelection = null;
                    }

                    break;

                  case TOP_BLUR:
                    activeElement$1 = null;
                    activeElementInst$1 = null;
                    lastSelection = null;
                    break;
                  // Don't fire the event while the user is dragging. This matches the
                  // semantics of the native select event.

                  case TOP_MOUSE_DOWN:
                    mouseDown = true;
                    break;

                  case TOP_CONTEXT_MENU:
                  case TOP_MOUSE_UP:
                  case TOP_DRAG_END:
                    mouseDown = false;
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
                  // Chrome and IE fire non-standard event when selection is changed (and
                  // sometimes when it hasn't). IE's event fires out of order with respect
                  // to key and input events on deletion, so we discard it.
                  //
                  // Firefox doesn't support selectionchange, so check selection status
                  // after each key entry. The selection changes after keydown and before
                  // keyup, but we check on keydown as well in the case of holding down a
                  // key, when multiple keydown events are fired but only one keyup is.
                  // This is also our approach for IE handling, for the reason above.

                  case TOP_SELECTION_CHANGE:
                    if (skipSelectionChangeEvent) {
                      break;
                    }

                  // falls through

                  case TOP_KEY_DOWN:
                  case TOP_KEY_UP:
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
                }

                return null;
              }
            };
            /**
             * Inject modules for resolving DOM hierarchy and plugin ordering.
             */

            injection.injectEventPluginOrder(DOMEventPluginOrder);
            setComponentTree(
              getFiberCurrentPropsFromNode$1,
              getInstanceFromNode$1,
              getNodeFromInstance$1
            );
            /**
             * Some important event plugins included by default (without having to require
             * them).
             */

            injection.injectEventPluginsByName({
              SimpleEventPlugin: SimpleEventPlugin,
              EnterLeaveEventPlugin: EnterLeaveEventPlugin,
              ChangeEventPlugin: ChangeEventPlugin,
              SelectEventPlugin: SelectEventPlugin,
              BeforeInputEventPlugin: BeforeInputEventPlugin
            });
            var didWarnSelectedSetOnOption = false;
            var didWarnInvalidChild = false;

            function flattenChildren(children) {
              var content = ""; // Flatten children. We'll warn if they are invalid
              // during validateProps() which runs for hydration too.
              // Note that this would throw on non-element objects.
              // Elements are stringified (which is normally irrelevant
              // but matters for <fbt>).

              React.Children.forEach(children, function(child) {
                if (child == null) {
                  return;
                }

                content += child; // Note: we don't warn about invalid children here.
                // Instead, this is done separately below so that
                // it happens during the hydration codepath too.
              });
              return content;
            }
            /**
             * Implements an <option> host component that warns when `selected` is set.
             */

            function validateProps(element, props) {
              {
                // This mirrors the codepath above, but runs for hydration too.
                // Warn about invalid children here so that client and hydration are consistent.
                // TODO: this seems like it could cause a DEV-only throw for hydration
                // if children contains a non-element object. We should try to avoid that.
                if (
                  typeof props.children === "object" &&
                  props.children !== null
                ) {
                  React.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }

                    if (
                      typeof child === "string" ||
                      typeof child === "number"
                    ) {
                      return;
                    }

                    if (typeof child.type !== "string") {
                      return;
                    }

                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      warning$1(
                        false,
                        "Only strings and numbers are supported as <option> children."
                      );
                    }
                  });
                } // TODO: Remove support for `selected` in <option>.

                if (props.selected != null && !didWarnSelectedSetOnOption) {
                  warning$1(
                    false,
                    "Use the `defaultValue` or `value` props on <select> instead of " +
                      "setting `selected` on <option>."
                  );
                  didWarnSelectedSetOnOption = true;
                }
              }
            }

            function postMountWrapper$1(element, props) {
              // value="" should make a value attribute (#6219)
              if (props.value != null) {
                element.setAttribute(
                  "value",
                  toString(getToStringValue(props.value))
                );
              }
            }

            function getHostProps$1(element, props) {
              var hostProps = _assign(
                {
                  children: undefined
                },
                props
              );

              var content = flattenChildren(props.children);

              if (content) {
                hostProps.children = content;
              }

              return hostProps;
            } // TODO: direct imports like some-package/src/* are bad. Fix me.

            var didWarnValueDefaultValue$1 = void 0;
            {
              didWarnValueDefaultValue$1 = false;
            }

            function getDeclarationErrorAddendum() {
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();

              if (ownerName) {
                return "\n\nCheck the render method of `" + ownerName + "`.";
              }

              return "";
            }

            var valuePropNames = ["value", "defaultValue"];
            /**
             * Validation function for `value` and `defaultValue`.
             */

            function checkSelectPropTypes(props) {
              ReactControlledValuePropTypes.checkPropTypes("select", props);

              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];

                if (props[propName] == null) {
                  continue;
                }

                var isArray = Array.isArray(props[propName]);

                if (props.multiple && !isArray) {
                  warning$1(
                    false,
                    "The `%s` prop supplied to <select> must be an array if " +
                      "`multiple` is true.%s",
                    propName,
                    getDeclarationErrorAddendum()
                  );
                } else if (!props.multiple && isArray) {
                  warning$1(
                    false,
                    "The `%s` prop supplied to <select> must be a scalar " +
                      "value if `multiple` is false.%s",
                    propName,
                    getDeclarationErrorAddendum()
                  );
                }
              }
            }

            function updateOptions(
              node,
              multiple,
              propValue,
              setDefaultSelected
            ) {
              var options = node.options;

              if (multiple) {
                var selectedValues = propValue;
                var selectedValue = {};

                for (var i = 0; i < selectedValues.length; i++) {
                  // Prefix to avoid chaos with special keys.
                  selectedValue["$" + selectedValues[i]] = true;
                }

                for (var _i = 0; _i < options.length; _i++) {
                  var selected = selectedValue.hasOwnProperty(
                    "$" + options[_i].value
                  );

                  if (options[_i].selected !== selected) {
                    options[_i].selected = selected;
                  }

                  if (selected && setDefaultSelected) {
                    options[_i].defaultSelected = true;
                  }
                }
              } else {
                // Do not set `select.value` as exact behavior isn't consistent across all
                // browsers for all cases.
                var _selectedValue = toString(getToStringValue(propValue));

                var defaultSelected = null;

                for (var _i2 = 0; _i2 < options.length; _i2++) {
                  if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;

                    if (setDefaultSelected) {
                      options[_i2].defaultSelected = true;
                    }

                    return;
                  }

                  if (defaultSelected === null && !options[_i2].disabled) {
                    defaultSelected = options[_i2];
                  }
                }

                if (defaultSelected !== null) {
                  defaultSelected.selected = true;
                }
              }
            }
            /**
             * Implements a <select> host component that allows optionally setting the
             * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
             * stringable. If `multiple` is true, the prop must be an array of stringables.
             *
             * If `value` is not supplied (or null/undefined), user actions that change the
             * selected option will trigger updates to the rendered options.
             *
             * If it is supplied (and not null/undefined), the rendered options will not
             * update in response to user actions. Instead, the `value` prop must change in
             * order for the rendered options to update.
             *
             * If `defaultValue` is provided, any options with the supplied values will be
             * selected.
             */

            function getHostProps$2(element, props) {
              return _assign({}, props, {
                value: undefined
              });
            }

            function initWrapperState$1(element, props) {
              var node = element;
              {
                checkSelectPropTypes(props);
              }
              node._wrapperState = {
                wasMultiple: !!props.multiple
              };
              {
                if (
                  props.value !== undefined &&
                  props.defaultValue !== undefined &&
                  !didWarnValueDefaultValue$1
                ) {
                  warning$1(
                    false,
                    "Select elements must be either controlled or uncontrolled " +
                      "(specify either the value prop, or the defaultValue prop, but not " +
                      "both). Decide between using a controlled or uncontrolled select " +
                      "element and remove one of these props. More info: " +
                      "https://fb.me/react-controlled-components"
                  );
                  didWarnValueDefaultValue$1 = true;
                }
              }
            }

            function postMountWrapper$2(element, props) {
              var node = element;
              node.multiple = !!props.multiple;
              var value = props.value;

              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              } else if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              }
            }

            function postUpdateWrapper(element, props) {
              var node = element;
              var wasMultiple = node._wrapperState.wasMultiple;
              node._wrapperState.wasMultiple = !!props.multiple;
              var value = props.value;

              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              } else if (wasMultiple !== !!props.multiple) {
                // For simplicity, reapply `defaultValue` if `multiple` is toggled.
                if (props.defaultValue != null) {
                  updateOptions(
                    node,
                    !!props.multiple,
                    props.defaultValue,
                    true
                  );
                } else {
                  // Revert the select back to its default unselected state.
                  updateOptions(
                    node,
                    !!props.multiple,
                    props.multiple ? [] : "",
                    false
                  );
                }
              }
            }

            function restoreControlledState$2(element, props) {
              var node = element;
              var value = props.value;

              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              }
            }

            var didWarnValDefaultVal = false;
            /**
             * Implements a <textarea> host component that allows setting `value`, and
             * `defaultValue`. This differs from the traditional DOM API because value is
             * usually set as PCDATA children.
             *
             * If `value` is not supplied (or null/undefined), user actions that affect the
             * value will trigger updates to the element.
             *
             * If `value` is supplied (and not null/undefined), the rendered element will
             * not trigger updates to the element. Instead, the `value` prop must change in
             * order for the rendered element to be updated.
             *
             * The rendered element will be initialized with an empty value, the prop
             * `defaultValue` if specified, or the children content (deprecated).
             */

            function getHostProps$3(element, props) {
              var node = element;
              !(props.dangerouslySetInnerHTML == null)
                ? invariant(
                    false,
                    "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                  )
                : void 0; // Always set children to the same thing. In IE9, the selection range will
              // get reset if `textContent` is mutated.  We could add a check in setTextContent
              // to only set the value if/when the value differs from the node value (which would
              // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
              // solution. The value can be a boolean or object so that's why it's forced
              // to be a string.

              var hostProps = _assign({}, props, {
                value: undefined,
                defaultValue: undefined,
                children: toString(node._wrapperState.initialValue)
              });

              return hostProps;
            }

            function initWrapperState$2(element, props) {
              var node = element;
              {
                ReactControlledValuePropTypes.checkPropTypes("textarea", props);

                if (
                  props.value !== undefined &&
                  props.defaultValue !== undefined &&
                  !didWarnValDefaultVal
                ) {
                  warning$1(
                    false,
                    "%s contains a textarea with both value and defaultValue props. " +
                      "Textarea elements must be either controlled or uncontrolled " +
                      "(specify either the value prop, or the defaultValue prop, but not " +
                      "both). Decide between using a controlled or uncontrolled textarea " +
                      "and remove one of these props. More info: " +
                      "https://fb.me/react-controlled-components",
                    getCurrentFiberOwnerNameInDevOrNull() || "A component"
                  );
                  didWarnValDefaultVal = true;
                }
              }
              var initialValue = props.value; // Only bother fetching default value if we're going to use it

              if (initialValue == null) {
                var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

                var children = props.children;

                if (children != null) {
                  {
                    warning$1(
                      false,
                      "Use the `defaultValue` or `value` props instead of setting " +
                        "children on <textarea>."
                    );
                  }
                  !(defaultValue == null)
                    ? invariant(
                        false,
                        "If you supply `defaultValue` on a <textarea>, do not pass children."
                      )
                    : void 0;

                  if (Array.isArray(children)) {
                    !(children.length <= 1)
                      ? invariant(
                          false,
                          "<textarea> can only have at most one child."
                        )
                      : void 0;
                    children = children[0];
                  }

                  defaultValue = children;
                }

                if (defaultValue == null) {
                  defaultValue = "";
                }

                initialValue = defaultValue;
              }

              node._wrapperState = {
                initialValue: getToStringValue(initialValue)
              };
            }

            function updateWrapper$1(element, props) {
              var node = element;
              var value = getToStringValue(props.value);
              var defaultValue = getToStringValue(props.defaultValue);

              if (value != null) {
                // Cast `value` to a string to ensure the value is set correctly. While
                // browsers typically do this as necessary, jsdom doesn't.
                var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

                if (newValue !== node.value) {
                  node.value = newValue;
                }

                if (
                  props.defaultValue == null &&
                  node.defaultValue !== newValue
                ) {
                  node.defaultValue = newValue;
                }
              }

              if (defaultValue != null) {
                node.defaultValue = toString(defaultValue);
              }
            }

            function postMountWrapper$3(element, props) {
              var node = element; // This is in postMount because we need access to the DOM node, which is not
              // available until after the component has mounted.

              var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
              // initial value. In IE10/IE11 there is a bug where the placeholder attribute
              // will populate textContent as well.
              // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

              if (textContent === node._wrapperState.initialValue) {
                node.value = textContent;
              }
            }

            function restoreControlledState$3(element, props) {
              // DOM component is still mounted; update
              updateWrapper$1(element, props);
            }

            var HTML_NAMESPACE$1 = "http://www.w3.org/1999/xhtml";
            var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
            var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
            var Namespaces = {
              html: HTML_NAMESPACE$1,
              mathml: MATH_NAMESPACE,
              svg: SVG_NAMESPACE
            }; // Assumes there is no parent namespace.

            function getIntrinsicNamespace(type) {
              switch (type) {
                case "svg":
                  return SVG_NAMESPACE;

                case "math":
                  return MATH_NAMESPACE;

                default:
                  return HTML_NAMESPACE$1;
              }
            }

            function getChildNamespace(parentNamespace, type) {
              if (
                parentNamespace == null ||
                parentNamespace === HTML_NAMESPACE$1
              ) {
                // No (or default) parent namespace: potential entry point.
                return getIntrinsicNamespace(type);
              }

              if (
                parentNamespace === SVG_NAMESPACE &&
                type === "foreignObject"
              ) {
                // We're leaving SVG.
                return HTML_NAMESPACE$1;
              } // By default, pass namespace below.

              return parentNamespace;
            }
            /* globals MSApp */

            /**
             * Create a function which has 'unsafe' privileges (required by windows8 apps)
             */

            var createMicrosoftUnsafeLocalFunction = function(func) {
              if (
                typeof MSApp !== "undefined" &&
                MSApp.execUnsafeLocalFunction
              ) {
                return function(arg0, arg1, arg2, arg3) {
                  MSApp.execUnsafeLocalFunction(function() {
                    return func(arg0, arg1, arg2, arg3);
                  });
                };
              } else {
                return func;
              }
            }; // SVG temp container for IE lacking innerHTML

            var reusableSVGContainer = void 0;
            /**
             * Set the innerHTML property of a node
             *
             * @param {DOMElement} node
             * @param {string} html
             * @internal
             */

            var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(
              node,
              html
            ) {
              // IE does not have innerHTML for SVG nodes, so instead we inject the
              // new markup in a temp node and then move the child nodes across into
              // the target node
              if (
                node.namespaceURI === Namespaces.svg &&
                !("innerHTML" in node)
              ) {
                reusableSVGContainer =
                  reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;

                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }

                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
              } else {
                node.innerHTML = html;
              }
            });
            /**
             * Set the textContent property of a node. For text updates, it's faster
             * to set the `nodeValue` of the Text node directly instead of using
             * `.textContent` which will remove the existing node and create a new one.
             *
             * @param {DOMElement} node
             * @param {string} text
             * @internal
             */

            var setTextContent = function(node, text) {
              if (text) {
                var firstChild = node.firstChild;

                if (
                  firstChild &&
                  firstChild === node.lastChild &&
                  firstChild.nodeType === TEXT_NODE
                ) {
                  firstChild.nodeValue = text;
                  return;
                }
              }

              node.textContent = text;
            };
            /**
             * CSS properties which accept numbers but are not in units of "px".
             */

            var isUnitlessNumber = {
              animationIterationCount: true,
              borderImageOutset: true,
              borderImageSlice: true,
              borderImageWidth: true,
              boxFlex: true,
              boxFlexGroup: true,
              boxOrdinalGroup: true,
              columnCount: true,
              columns: true,
              flex: true,
              flexGrow: true,
              flexPositive: true,
              flexShrink: true,
              flexNegative: true,
              flexOrder: true,
              gridArea: true,
              gridRow: true,
              gridRowEnd: true,
              gridRowSpan: true,
              gridRowStart: true,
              gridColumn: true,
              gridColumnEnd: true,
              gridColumnSpan: true,
              gridColumnStart: true,
              fontWeight: true,
              lineClamp: true,
              lineHeight: true,
              opacity: true,
              order: true,
              orphans: true,
              tabSize: true,
              widows: true,
              zIndex: true,
              zoom: true,
              // SVG-related properties
              fillOpacity: true,
              floodOpacity: true,
              stopOpacity: true,
              strokeDasharray: true,
              strokeDashoffset: true,
              strokeMiterlimit: true,
              strokeOpacity: true,
              strokeWidth: true
            };
            /**
             * @param {string} prefix vendor-specific prefix, eg: Webkit
             * @param {string} key style name, eg: transitionDuration
             * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
             * WebkitTransitionDuration
             */

            function prefixKey(prefix, key) {
              return prefix + key.charAt(0).toUpperCase() + key.substring(1);
            }
            /**
             * Support style names that may come passed in prefixed by adding permutations
             * of vendor prefixes.
             */

            var prefixes = ["Webkit", "ms", "Moz", "O"]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
            // infinite loop, because it iterates over the newly added props too.

            Object.keys(isUnitlessNumber).forEach(function(prop) {
              prefixes.forEach(function(prefix) {
                isUnitlessNumber[prefixKey(prefix, prop)] =
                  isUnitlessNumber[prop];
              });
            });
            /**
             * Convert a value into the proper css writable value. The style name `name`
             * should be logical (no hyphens), as specified
             * in `CSSProperty.isUnitlessNumber`.
             *
             * @param {string} name CSS property name such as `topMargin`.
             * @param {*} value CSS property value such as `10px`.
             * @return {string} Normalized style value with dimensions applied.
             */

            function dangerousStyleValue(name, value, isCustomProperty) {
              // Note that we've removed escapeTextForBrowser() calls here since the
              // whole string will be escaped when the attribute is injected into
              // the markup. If you provide unsafe user data here they can inject
              // arbitrary CSS which may be problematic (I couldn't repro this):
              // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
              // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
              // This is not an XSS hole but instead a potential CSS injection issue
              // which has lead to a greater discussion about how we're going to
              // trust URLs moving forward. See #2115901
              var isEmpty =
                value == null || typeof value === "boolean" || value === "";

              if (isEmpty) {
                return "";
              }

              if (
                !isCustomProperty &&
                typeof value === "number" &&
                value !== 0 &&
                !(
                  isUnitlessNumber.hasOwnProperty(name) &&
                  isUnitlessNumber[name]
                )
              ) {
                return value + "px"; // Presumes implicit 'px' suffix for unitless numbers
              }

              return ("" + value).trim();
            }

            var uppercasePattern = /([A-Z])/g;
            var msPattern = /^ms-/;
            /**
             * Hyphenates a camelcased CSS property name, for example:
             *
             *   > hyphenateStyleName('backgroundColor')
             *   < "background-color"
             *   > hyphenateStyleName('MozTransition')
             *   < "-moz-transition"
             *   > hyphenateStyleName('msTransition')
             *   < "-ms-transition"
             *
             * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
             * is converted to `-ms-`.
             */

            function hyphenateStyleName(name) {
              return name
                .replace(uppercasePattern, "-$1")
                .toLowerCase()
                .replace(msPattern, "-ms-");
            }

            var warnValidStyle = function() {};

            {
              // 'msTransform' is correct, but the other prefixes should be capitalized
              var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
              var msPattern$1 = /^-ms-/;
              var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

              var badStyleValueWithSemicolonPattern = /;\s*$/;
              var warnedStyleNames = {};
              var warnedStyleValues = {};
              var warnedForNaNValue = false;
              var warnedForInfinityValue = false;

              var camelize = function(string) {
                return string.replace(hyphenPattern, function(_, character) {
                  return character.toUpperCase();
                });
              };

              var warnHyphenatedStyleName = function(name) {
                if (
                  warnedStyleNames.hasOwnProperty(name) &&
                  warnedStyleNames[name]
                ) {
                  return;
                }

                warnedStyleNames[name] = true;
                warning$1(
                  false,
                  "Unsupported style property %s. Did you mean %s?",
                  name, // As Andi Smith suggests
                  // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                  // is converted to lowercase `ms`.
                  camelize(name.replace(msPattern$1, "ms-"))
                );
              };

              var warnBadVendoredStyleName = function(name) {
                if (
                  warnedStyleNames.hasOwnProperty(name) &&
                  warnedStyleNames[name]
                ) {
                  return;
                }

                warnedStyleNames[name] = true;
                warning$1(
                  false,
                  "Unsupported vendor-prefixed style property %s. Did you mean %s?",
                  name,
                  name.charAt(0).toUpperCase() + name.slice(1)
                );
              };

              var warnStyleValueWithSemicolon = function(name, value) {
                if (
                  warnedStyleValues.hasOwnProperty(value) &&
                  warnedStyleValues[value]
                ) {
                  return;
                }

                warnedStyleValues[value] = true;
                warning$1(
                  false,
                  "Style property values shouldn't contain a semicolon. " +
                    'Try "%s: %s" instead.',
                  name,
                  value.replace(badStyleValueWithSemicolonPattern, "")
                );
              };

              var warnStyleValueIsNaN = function(name, value) {
                if (warnedForNaNValue) {
                  return;
                }

                warnedForNaNValue = true;
                warning$1(
                  false,
                  "`NaN` is an invalid value for the `%s` css style property.",
                  name
                );
              };

              var warnStyleValueIsInfinity = function(name, value) {
                if (warnedForInfinityValue) {
                  return;
                }

                warnedForInfinityValue = true;
                warning$1(
                  false,
                  "`Infinity` is an invalid value for the `%s` css style property.",
                  name
                );
              };

              warnValidStyle = function(name, value) {
                if (name.indexOf("-") > -1) {
                  warnHyphenatedStyleName(name);
                } else if (badVendoredStyleNamePattern.test(name)) {
                  warnBadVendoredStyleName(name);
                } else if (badStyleValueWithSemicolonPattern.test(value)) {
                  warnStyleValueWithSemicolon(name, value);
                }

                if (typeof value === "number") {
                  if (isNaN(value)) {
                    warnStyleValueIsNaN(name, value);
                  } else if (!isFinite(value)) {
                    warnStyleValueIsInfinity(name, value);
                  }
                }
              };
            }
            var warnValidStyle$1 = warnValidStyle;
            /**
             * Operations for dealing with CSS properties.
             */

            /**
             * This creates a string that is expected to be equivalent to the style
             * attribute generated by server-side rendering. It by-passes warnings and
             * security checks so it's not safe to use this value for anything other than
             * comparison. It is only used in DEV for SSR validation.
             */

            function createDangerousStringForStyles(styles) {
              {
                var serialized = "";
                var delimiter = "";

                for (var styleName in styles) {
                  if (!styles.hasOwnProperty(styleName)) {
                    continue;
                  }

                  var styleValue = styles[styleName];

                  if (styleValue != null) {
                    var isCustomProperty = styleName.indexOf("--") === 0;
                    serialized +=
                      delimiter + hyphenateStyleName(styleName) + ":";
                    serialized += dangerousStyleValue(
                      styleName,
                      styleValue,
                      isCustomProperty
                    );
                    delimiter = ";";
                  }
                }

                return serialized || null;
              }
            }
            /**
             * Sets the value for multiple styles on a node.  If a value is specified as
             * '' (empty string), the corresponding style property will be unset.
             *
             * @param {DOMElement} node
             * @param {object} styles
             */

            function setValueForStyles(node, styles) {
              var style = node.style;

              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }

                var isCustomProperty = styleName.indexOf("--") === 0;
                {
                  if (!isCustomProperty) {
                    warnValidStyle$1(styleName, styles[styleName]);
                  }
                }
                var styleValue = dangerousStyleValue(
                  styleName,
                  styles[styleName],
                  isCustomProperty
                );

                if (styleName === "float") {
                  styleName = "cssFloat";
                }

                if (isCustomProperty) {
                  style.setProperty(styleName, styleValue);
                } else {
                  style[styleName] = styleValue;
                }
              }
            } // For HTML, certain tags should omit their close tag. We keep a whitelist for
            // those special-case tags.

            var omittedCloseTags = {
              area: true,
              base: true,
              br: true,
              col: true,
              embed: true,
              hr: true,
              img: true,
              input: true,
              keygen: true,
              link: true,
              meta: true,
              param: true,
              source: true,
              track: true,
              wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
            }; // For HTML, certain tags cannot have children. This has the same purpose as
            // `omittedCloseTags` except that `menuitem` should still have its closing tag.

            var voidElementTags = _assign(
              {
                menuitem: true
              },
              omittedCloseTags
            ); // TODO: We can remove this if we add invariantWithStack()
            // or add stack by default to invariants where possible.

            var HTML$1 = "__html";
            var ReactDebugCurrentFrame$2 = null;
            {
              ReactDebugCurrentFrame$2 =
                ReactSharedInternals.ReactDebugCurrentFrame;
            }

            function assertValidProps(tag, props) {
              if (!props) {
                return;
              } // Note the use of `==` which checks for null or undefined.

              if (voidElementTags[tag]) {
                !(
                  props.children == null &&
                  props.dangerouslySetInnerHTML == null
                )
                  ? invariant(
                      false,
                      "%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s",
                      tag,
                      ReactDebugCurrentFrame$2.getStackAddendum()
                    )
                  : void 0;
              }

              if (props.dangerouslySetInnerHTML != null) {
                !(props.children == null)
                  ? invariant(
                      false,
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    )
                  : void 0;
                !(
                  typeof props.dangerouslySetInnerHTML === "object" &&
                  HTML$1 in props.dangerouslySetInnerHTML
                )
                  ? invariant(
                      false,
                      "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."
                    )
                  : void 0;
              }

              {
                !(
                  props.suppressContentEditableWarning ||
                  !props.contentEditable ||
                  props.children == null
                )
                  ? warning$1(
                      false,
                      "A component is `contentEditable` and contains `children` managed by " +
                        "React. It is now your responsibility to guarantee that none of " +
                        "those nodes are unexpectedly modified or duplicated. This is " +
                        "probably not intentional."
                    )
                  : void 0;
              }
              !(props.style == null || typeof props.style === "object")
                ? invariant(
                    false,
                    "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",
                    ReactDebugCurrentFrame$2.getStackAddendum()
                  )
                : void 0;
            }

            function isCustomComponent(tagName, props) {
              if (tagName.indexOf("-") === -1) {
                return typeof props.is === "string";
              }

              switch (tagName) {
                // These are reserved SVG and MathML elements.
                // We don't mind this whitelist too much because we expect it to never grow.
                // The alternative is to track the namespace in a few places which is convoluted.
                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                case "annotation-xml":
                case "color-profile":
                case "font-face":
                case "font-face-src":
                case "font-face-uri":
                case "font-face-format":
                case "font-face-name":
                case "missing-glyph":
                  return false;

                default:
                  return true;
              }
            } // When adding attributes to the HTML or SVG whitelist, be sure to
            // also add them to this module to ensure casing and incorrect name
            // warnings.

            var possibleStandardNames = {
              // HTML
              accept: "accept",
              acceptcharset: "acceptCharset",
              "accept-charset": "acceptCharset",
              accesskey: "accessKey",
              action: "action",
              allowfullscreen: "allowFullScreen",
              alt: "alt",
              as: "as",
              async: "async",
              autocapitalize: "autoCapitalize",
              autocomplete: "autoComplete",
              autocorrect: "autoCorrect",
              autofocus: "autoFocus",
              autoplay: "autoPlay",
              autosave: "autoSave",
              capture: "capture",
              cellpadding: "cellPadding",
              cellspacing: "cellSpacing",
              challenge: "challenge",
              charset: "charSet",
              checked: "checked",
              children: "children",
              cite: "cite",
              class: "className",
              classid: "classID",
              classname: "className",
              cols: "cols",
              colspan: "colSpan",
              content: "content",
              contenteditable: "contentEditable",
              contextmenu: "contextMenu",
              controls: "controls",
              controlslist: "controlsList",
              coords: "coords",
              crossorigin: "crossOrigin",
              dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
              data: "data",
              datetime: "dateTime",
              default: "default",
              defaultchecked: "defaultChecked",
              defaultvalue: "defaultValue",
              defer: "defer",
              dir: "dir",
              disabled: "disabled",
              download: "download",
              draggable: "draggable",
              enctype: "encType",
              for: "htmlFor",
              form: "form",
              formmethod: "formMethod",
              formaction: "formAction",
              formenctype: "formEncType",
              formnovalidate: "formNoValidate",
              formtarget: "formTarget",
              frameborder: "frameBorder",
              headers: "headers",
              height: "height",
              hidden: "hidden",
              high: "high",
              href: "href",
              hreflang: "hrefLang",
              htmlfor: "htmlFor",
              httpequiv: "httpEquiv",
              "http-equiv": "httpEquiv",
              icon: "icon",
              id: "id",
              innerhtml: "innerHTML",
              inputmode: "inputMode",
              integrity: "integrity",
              is: "is",
              itemid: "itemID",
              itemprop: "itemProp",
              itemref: "itemRef",
              itemscope: "itemScope",
              itemtype: "itemType",
              keyparams: "keyParams",
              keytype: "keyType",
              kind: "kind",
              label: "label",
              lang: "lang",
              list: "list",
              loop: "loop",
              low: "low",
              manifest: "manifest",
              marginwidth: "marginWidth",
              marginheight: "marginHeight",
              max: "max",
              maxlength: "maxLength",
              media: "media",
              mediagroup: "mediaGroup",
              method: "method",
              min: "min",
              minlength: "minLength",
              multiple: "multiple",
              muted: "muted",
              name: "name",
              nomodule: "noModule",
              nonce: "nonce",
              novalidate: "noValidate",
              open: "open",
              optimum: "optimum",
              pattern: "pattern",
              placeholder: "placeholder",
              playsinline: "playsInline",
              poster: "poster",
              preload: "preload",
              profile: "profile",
              radiogroup: "radioGroup",
              readonly: "readOnly",
              referrerpolicy: "referrerPolicy",
              rel: "rel",
              required: "required",
              reversed: "reversed",
              role: "role",
              rows: "rows",
              rowspan: "rowSpan",
              sandbox: "sandbox",
              scope: "scope",
              scoped: "scoped",
              scrolling: "scrolling",
              seamless: "seamless",
              selected: "selected",
              shape: "shape",
              size: "size",
              sizes: "sizes",
              span: "span",
              spellcheck: "spellCheck",
              src: "src",
              srcdoc: "srcDoc",
              srclang: "srcLang",
              srcset: "srcSet",
              start: "start",
              step: "step",
              style: "style",
              summary: "summary",
              tabindex: "tabIndex",
              target: "target",
              title: "title",
              type: "type",
              usemap: "useMap",
              value: "value",
              width: "width",
              wmode: "wmode",
              wrap: "wrap",
              // SVG
              about: "about",
              accentheight: "accentHeight",
              "accent-height": "accentHeight",
              accumulate: "accumulate",
              additive: "additive",
              alignmentbaseline: "alignmentBaseline",
              "alignment-baseline": "alignmentBaseline",
              allowreorder: "allowReorder",
              alphabetic: "alphabetic",
              amplitude: "amplitude",
              arabicform: "arabicForm",
              "arabic-form": "arabicForm",
              ascent: "ascent",
              attributename: "attributeName",
              attributetype: "attributeType",
              autoreverse: "autoReverse",
              azimuth: "azimuth",
              basefrequency: "baseFrequency",
              baselineshift: "baselineShift",
              "baseline-shift": "baselineShift",
              baseprofile: "baseProfile",
              bbox: "bbox",
              begin: "begin",
              bias: "bias",
              by: "by",
              calcmode: "calcMode",
              capheight: "capHeight",
              "cap-height": "capHeight",
              clip: "clip",
              clippath: "clipPath",
              "clip-path": "clipPath",
              clippathunits: "clipPathUnits",
              cliprule: "clipRule",
              "clip-rule": "clipRule",
              color: "color",
              colorinterpolation: "colorInterpolation",
              "color-interpolation": "colorInterpolation",
              colorinterpolationfilters: "colorInterpolationFilters",
              "color-interpolation-filters": "colorInterpolationFilters",
              colorprofile: "colorProfile",
              "color-profile": "colorProfile",
              colorrendering: "colorRendering",
              "color-rendering": "colorRendering",
              contentscripttype: "contentScriptType",
              contentstyletype: "contentStyleType",
              cursor: "cursor",
              cx: "cx",
              cy: "cy",
              d: "d",
              datatype: "datatype",
              decelerate: "decelerate",
              descent: "descent",
              diffuseconstant: "diffuseConstant",
              direction: "direction",
              display: "display",
              divisor: "divisor",
              dominantbaseline: "dominantBaseline",
              "dominant-baseline": "dominantBaseline",
              dur: "dur",
              dx: "dx",
              dy: "dy",
              edgemode: "edgeMode",
              elevation: "elevation",
              enablebackground: "enableBackground",
              "enable-background": "enableBackground",
              end: "end",
              exponent: "exponent",
              externalresourcesrequired: "externalResourcesRequired",
              fill: "fill",
              fillopacity: "fillOpacity",
              "fill-opacity": "fillOpacity",
              fillrule: "fillRule",
              "fill-rule": "fillRule",
              filter: "filter",
              filterres: "filterRes",
              filterunits: "filterUnits",
              floodopacity: "floodOpacity",
              "flood-opacity": "floodOpacity",
              floodcolor: "floodColor",
              "flood-color": "floodColor",
              focusable: "focusable",
              fontfamily: "fontFamily",
              "font-family": "fontFamily",
              fontsize: "fontSize",
              "font-size": "fontSize",
              fontsizeadjust: "fontSizeAdjust",
              "font-size-adjust": "fontSizeAdjust",
              fontstretch: "fontStretch",
              "font-stretch": "fontStretch",
              fontstyle: "fontStyle",
              "font-style": "fontStyle",
              fontvariant: "fontVariant",
              "font-variant": "fontVariant",
              fontweight: "fontWeight",
              "font-weight": "fontWeight",
              format: "format",
              from: "from",
              fx: "fx",
              fy: "fy",
              g1: "g1",
              g2: "g2",
              glyphname: "glyphName",
              "glyph-name": "glyphName",
              glyphorientationhorizontal: "glyphOrientationHorizontal",
              "glyph-orientation-horizontal": "glyphOrientationHorizontal",
              glyphorientationvertical: "glyphOrientationVertical",
              "glyph-orientation-vertical": "glyphOrientationVertical",
              glyphref: "glyphRef",
              gradienttransform: "gradientTransform",
              gradientunits: "gradientUnits",
              hanging: "hanging",
              horizadvx: "horizAdvX",
              "horiz-adv-x": "horizAdvX",
              horizoriginx: "horizOriginX",
              "horiz-origin-x": "horizOriginX",
              ideographic: "ideographic",
              imagerendering: "imageRendering",
              "image-rendering": "imageRendering",
              in2: "in2",
              in: "in",
              inlist: "inlist",
              intercept: "intercept",
              k1: "k1",
              k2: "k2",
              k3: "k3",
              k4: "k4",
              k: "k",
              kernelmatrix: "kernelMatrix",
              kernelunitlength: "kernelUnitLength",
              kerning: "kerning",
              keypoints: "keyPoints",
              keysplines: "keySplines",
              keytimes: "keyTimes",
              lengthadjust: "lengthAdjust",
              letterspacing: "letterSpacing",
              "letter-spacing": "letterSpacing",
              lightingcolor: "lightingColor",
              "lighting-color": "lightingColor",
              limitingconeangle: "limitingConeAngle",
              local: "local",
              markerend: "markerEnd",
              "marker-end": "markerEnd",
              markerheight: "markerHeight",
              markermid: "markerMid",
              "marker-mid": "markerMid",
              markerstart: "markerStart",
              "marker-start": "markerStart",
              markerunits: "markerUnits",
              markerwidth: "markerWidth",
              mask: "mask",
              maskcontentunits: "maskContentUnits",
              maskunits: "maskUnits",
              mathematical: "mathematical",
              mode: "mode",
              numoctaves: "numOctaves",
              offset: "offset",
              opacity: "opacity",
              operator: "operator",
              order: "order",
              orient: "orient",
              orientation: "orientation",
              origin: "origin",
              overflow: "overflow",
              overlineposition: "overlinePosition",
              "overline-position": "overlinePosition",
              overlinethickness: "overlineThickness",
              "overline-thickness": "overlineThickness",
              paintorder: "paintOrder",
              "paint-order": "paintOrder",
              panose1: "panose1",
              "panose-1": "panose1",
              pathlength: "pathLength",
              patterncontentunits: "patternContentUnits",
              patterntransform: "patternTransform",
              patternunits: "patternUnits",
              pointerevents: "pointerEvents",
              "pointer-events": "pointerEvents",
              points: "points",
              pointsatx: "pointsAtX",
              pointsaty: "pointsAtY",
              pointsatz: "pointsAtZ",
              prefix: "prefix",
              preservealpha: "preserveAlpha",
              preserveaspectratio: "preserveAspectRatio",
              primitiveunits: "primitiveUnits",
              property: "property",
              r: "r",
              radius: "radius",
              refx: "refX",
              refy: "refY",
              renderingintent: "renderingIntent",
              "rendering-intent": "renderingIntent",
              repeatcount: "repeatCount",
              repeatdur: "repeatDur",
              requiredextensions: "requiredExtensions",
              requiredfeatures: "requiredFeatures",
              resource: "resource",
              restart: "restart",
              result: "result",
              results: "results",
              rotate: "rotate",
              rx: "rx",
              ry: "ry",
              scale: "scale",
              security: "security",
              seed: "seed",
              shaperendering: "shapeRendering",
              "shape-rendering": "shapeRendering",
              slope: "slope",
              spacing: "spacing",
              specularconstant: "specularConstant",
              specularexponent: "specularExponent",
              speed: "speed",
              spreadmethod: "spreadMethod",
              startoffset: "startOffset",
              stddeviation: "stdDeviation",
              stemh: "stemh",
              stemv: "stemv",
              stitchtiles: "stitchTiles",
              stopcolor: "stopColor",
              "stop-color": "stopColor",
              stopopacity: "stopOpacity",
              "stop-opacity": "stopOpacity",
              strikethroughposition: "strikethroughPosition",
              "strikethrough-position": "strikethroughPosition",
              strikethroughthickness: "strikethroughThickness",
              "strikethrough-thickness": "strikethroughThickness",
              string: "string",
              stroke: "stroke",
              strokedasharray: "strokeDasharray",
              "stroke-dasharray": "strokeDasharray",
              strokedashoffset: "strokeDashoffset",
              "stroke-dashoffset": "strokeDashoffset",
              strokelinecap: "strokeLinecap",
              "stroke-linecap": "strokeLinecap",
              strokelinejoin: "strokeLinejoin",
              "stroke-linejoin": "strokeLinejoin",
              strokemiterlimit: "strokeMiterlimit",
              "stroke-miterlimit": "strokeMiterlimit",
              strokewidth: "strokeWidth",
              "stroke-width": "strokeWidth",
              strokeopacity: "strokeOpacity",
              "stroke-opacity": "strokeOpacity",
              suppresscontenteditablewarning: "suppressContentEditableWarning",
              suppresshydrationwarning: "suppressHydrationWarning",
              surfacescale: "surfaceScale",
              systemlanguage: "systemLanguage",
              tablevalues: "tableValues",
              targetx: "targetX",
              targety: "targetY",
              textanchor: "textAnchor",
              "text-anchor": "textAnchor",
              textdecoration: "textDecoration",
              "text-decoration": "textDecoration",
              textlength: "textLength",
              textrendering: "textRendering",
              "text-rendering": "textRendering",
              to: "to",
              transform: "transform",
              typeof: "typeof",
              u1: "u1",
              u2: "u2",
              underlineposition: "underlinePosition",
              "underline-position": "underlinePosition",
              underlinethickness: "underlineThickness",
              "underline-thickness": "underlineThickness",
              unicode: "unicode",
              unicodebidi: "unicodeBidi",
              "unicode-bidi": "unicodeBidi",
              unicoderange: "unicodeRange",
              "unicode-range": "unicodeRange",
              unitsperem: "unitsPerEm",
              "units-per-em": "unitsPerEm",
              unselectable: "unselectable",
              valphabetic: "vAlphabetic",
              "v-alphabetic": "vAlphabetic",
              values: "values",
              vectoreffect: "vectorEffect",
              "vector-effect": "vectorEffect",
              version: "version",
              vertadvy: "vertAdvY",
              "vert-adv-y": "vertAdvY",
              vertoriginx: "vertOriginX",
              "vert-origin-x": "vertOriginX",
              vertoriginy: "vertOriginY",
              "vert-origin-y": "vertOriginY",
              vhanging: "vHanging",
              "v-hanging": "vHanging",
              videographic: "vIdeographic",
              "v-ideographic": "vIdeographic",
              viewbox: "viewBox",
              viewtarget: "viewTarget",
              visibility: "visibility",
              vmathematical: "vMathematical",
              "v-mathematical": "vMathematical",
              vocab: "vocab",
              widths: "widths",
              wordspacing: "wordSpacing",
              "word-spacing": "wordSpacing",
              writingmode: "writingMode",
              "writing-mode": "writingMode",
              x1: "x1",
              x2: "x2",
              x: "x",
              xchannelselector: "xChannelSelector",
              xheight: "xHeight",
              "x-height": "xHeight",
              xlinkactuate: "xlinkActuate",
              "xlink:actuate": "xlinkActuate",
              xlinkarcrole: "xlinkArcrole",
              "xlink:arcrole": "xlinkArcrole",
              xlinkhref: "xlinkHref",
              "xlink:href": "xlinkHref",
              xlinkrole: "xlinkRole",
              "xlink:role": "xlinkRole",
              xlinkshow: "xlinkShow",
              "xlink:show": "xlinkShow",
              xlinktitle: "xlinkTitle",
              "xlink:title": "xlinkTitle",
              xlinktype: "xlinkType",
              "xlink:type": "xlinkType",
              xmlbase: "xmlBase",
              "xml:base": "xmlBase",
              xmllang: "xmlLang",
              "xml:lang": "xmlLang",
              xmlns: "xmlns",
              "xml:space": "xmlSpace",
              xmlnsxlink: "xmlnsXlink",
              "xmlns:xlink": "xmlnsXlink",
              xmlspace: "xmlSpace",
              y1: "y1",
              y2: "y2",
              y: "y",
              ychannelselector: "yChannelSelector",
              z: "z",
              zoomandpan: "zoomAndPan"
            };
            var ariaProperties = {
              "aria-current": 0,
              // state
              "aria-details": 0,
              "aria-disabled": 0,
              // state
              "aria-hidden": 0,
              // state
              "aria-invalid": 0,
              // state
              "aria-keyshortcuts": 0,
              "aria-label": 0,
              "aria-roledescription": 0,
              // Widget Attributes
              "aria-autocomplete": 0,
              "aria-checked": 0,
              "aria-expanded": 0,
              "aria-haspopup": 0,
              "aria-level": 0,
              "aria-modal": 0,
              "aria-multiline": 0,
              "aria-multiselectable": 0,
              "aria-orientation": 0,
              "aria-placeholder": 0,
              "aria-pressed": 0,
              "aria-readonly": 0,
              "aria-required": 0,
              "aria-selected": 0,
              "aria-sort": 0,
              "aria-valuemax": 0,
              "aria-valuemin": 0,
              "aria-valuenow": 0,
              "aria-valuetext": 0,
              // Live Region Attributes
              "aria-atomic": 0,
              "aria-busy": 0,
              "aria-live": 0,
              "aria-relevant": 0,
              // Drag-and-Drop Attributes
              "aria-dropeffect": 0,
              "aria-grabbed": 0,
              // Relationship Attributes
              "aria-activedescendant": 0,
              "aria-colcount": 0,
              "aria-colindex": 0,
              "aria-colspan": 0,
              "aria-controls": 0,
              "aria-describedby": 0,
              "aria-errormessage": 0,
              "aria-flowto": 0,
              "aria-labelledby": 0,
              "aria-owns": 0,
              "aria-posinset": 0,
              "aria-rowcount": 0,
              "aria-rowindex": 0,
              "aria-rowspan": 0,
              "aria-setsize": 0
            };
            var warnedProperties = {};
            var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel = new RegExp(
              "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
            );
            var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

            function validateProperty(tagName, name) {
              if (
                hasOwnProperty$2.call(warnedProperties, name) &&
                warnedProperties[name]
              ) {
                return true;
              }

              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName)
                  ? ariaName
                  : null; // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.

                if (correctName == null) {
                  warning$1(
                    false,
                    "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                    name
                  );
                  warnedProperties[name] = true;
                  return true;
                } // aria-* attributes should be lowercase; suggest the lowercase version.

                if (name !== correctName) {
                  warning$1(
                    false,
                    "Invalid ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    correctName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }

              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                  ? lowerCasedName
                  : null; // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.

                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                } // aria-* attributes should be lowercase; suggest the lowercase version.

                if (name !== standardName) {
                  warning$1(
                    false,
                    "Unknown ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    standardName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }

              return true;
            }

            function warnInvalidARIAProps(type, props) {
              var invalidProps = [];

              for (var key in props) {
                var isValid = validateProperty(type, key);

                if (!isValid) {
                  invalidProps.push(key);
                }
              }

              var unknownPropString = invalidProps
                .map(function(prop) {
                  return "`" + prop + "`";
                })
                .join(", ");

              if (invalidProps.length === 1) {
                warning$1(
                  false,
                  "Invalid aria prop %s on <%s> tag. " +
                    "For details, see https://fb.me/invalid-aria-prop",
                  unknownPropString,
                  type
                );
              } else if (invalidProps.length > 1) {
                warning$1(
                  false,
                  "Invalid aria props %s on <%s> tag. " +
                    "For details, see https://fb.me/invalid-aria-prop",
                  unknownPropString,
                  type
                );
              }
            }

            function validateProperties(type, props) {
              if (isCustomComponent(type, props)) {
                return;
              }

              warnInvalidARIAProps(type, props);
            }

            var didWarnValueNull = false;

            function validateProperties$1(type, props) {
              if (
                type !== "input" &&
                type !== "textarea" &&
                type !== "select"
              ) {
                return;
              }

              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;

                if (type === "select" && props.multiple) {
                  warning$1(
                    false,
                    "`value` prop on `%s` should not be null. " +
                      "Consider using an empty array when `multiple` is set to `true` " +
                      "to clear the component or `undefined` for uncontrolled components.",
                    type
                  );
                } else {
                  warning$1(
                    false,
                    "`value` prop on `%s` should not be null. " +
                      "Consider using an empty string to clear the component or `undefined` " +
                      "for uncontrolled components.",
                    type
                  );
                }
              }
            }

            var validateProperty$1 = function() {};

            {
              var warnedProperties$1 = {};
              var _hasOwnProperty = Object.prototype.hasOwnProperty;
              var EVENT_NAME_REGEX = /^on./;
              var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
              var rARIA$1 = new RegExp(
                "^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"
              );
              var rARIACamel$1 = new RegExp(
                "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
              );

              validateProperty$1 = function(
                tagName,
                name,
                value,
                canUseEventSystem
              ) {
                if (
                  _hasOwnProperty.call(warnedProperties$1, name) &&
                  warnedProperties$1[name]
                ) {
                  return true;
                }

                var lowerCasedName = name.toLowerCase();

                if (
                  lowerCasedName === "onfocusin" ||
                  lowerCasedName === "onfocusout"
                ) {
                  warning$1(
                    false,
                    "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. " +
                      "All React events are normalized to bubble, so onFocusIn and onFocusOut " +
                      "are not needed/supported by React."
                  );
                  warnedProperties$1[name] = true;
                  return true;
                } // We can't rely on the event system being injected on the server.

                if (canUseEventSystem) {
                  if (registrationNameModules.hasOwnProperty(name)) {
                    return true;
                  }

                  var registrationName = possibleRegistrationNames.hasOwnProperty(
                    lowerCasedName
                  )
                    ? possibleRegistrationNames[lowerCasedName]
                    : null;

                  if (registrationName != null) {
                    warning$1(
                      false,
                      "Invalid event handler property `%s`. Did you mean `%s`?",
                      name,
                      registrationName
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }

                  if (EVENT_NAME_REGEX.test(name)) {
                    warning$1(
                      false,
                      "Unknown event handler property `%s`. It will be ignored.",
                      name
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (EVENT_NAME_REGEX.test(name)) {
                  // If no event plugins have been injected, we are in a server environment.
                  // So we can't tell if the event name is correct for sure, but we can filter
                  // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                  if (INVALID_EVENT_NAME_REGEX.test(name)) {
                    warning$1(
                      false,
                      "Invalid event handler property `%s`. " +
                        "React events use the camelCase naming convention, for example `onClick`.",
                      name
                    );
                  }

                  warnedProperties$1[name] = true;
                  return true;
                } // Let the ARIA attribute hook validate ARIA attributes

                if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                  return true;
                }

                if (lowerCasedName === "innerhtml") {
                  warning$1(
                    false,
                    "Directly setting property `innerHTML` is not permitted. " +
                      "For more information, lookup documentation on `dangerouslySetInnerHTML`."
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (lowerCasedName === "aria") {
                  warning$1(
                    false,
                    "The `aria` attribute is reserved for future use in React. " +
                      "Pass individual `aria-` attributes instead."
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (
                  lowerCasedName === "is" &&
                  value !== null &&
                  value !== undefined &&
                  typeof value !== "string"
                ) {
                  warning$1(
                    false,
                    "Received a `%s` for a string attribute `is`. If this is expected, cast " +
                      "the value to a string.",
                    typeof value
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (typeof value === "number" && isNaN(value)) {
                  warning$1(
                    false,
                    "Received NaN for the `%s` attribute. If this is expected, cast " +
                      "the value to a string.",
                    name
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                var propertyInfo = getPropertyInfo(name);
                var isReserved =
                  propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                  var standardName = possibleStandardNames[lowerCasedName];

                  if (standardName !== name) {
                    warning$1(
                      false,
                      "Invalid DOM property `%s`. Did you mean `%s`?",
                      name,
                      standardName
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (!isReserved && name !== lowerCasedName) {
                  // Unknown attributes should have lowercase casing since that's how they
                  // will be cased anyway with server rendering.
                  warning$1(
                    false,
                    "React does not recognize the `%s` prop on a DOM element. If you " +
                      "intentionally want it to appear in the DOM as a custom " +
                      "attribute, spell it as lowercase `%s` instead. " +
                      "If you accidentally passed it from a parent component, remove " +
                      "it from the DOM element.",
                    name,
                    lowerCasedName
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (
                  typeof value === "boolean" &&
                  shouldRemoveAttributeWithWarning(
                    name,
                    value,
                    propertyInfo,
                    false
                  )
                ) {
                  if (value) {
                    warning$1(
                      false,
                      "Received `%s` for a non-boolean attribute `%s`.\n\n" +
                        "If you want to write it to the DOM, pass a string instead: " +
                        '%s="%s" or %s={value.toString()}.',
                      value,
                      name,
                      name,
                      value,
                      name
                    );
                  } else {
                    warning$1(
                      false,
                      "Received `%s` for a non-boolean attribute `%s`.\n\n" +
                        "If you want to write it to the DOM, pass a string instead: " +
                        '%s="%s" or %s={value.toString()}.\n\n' +
                        "If you used to conditionally omit it with %s={condition && value}, " +
                        "pass %s={condition ? value : undefined} instead.",
                      value,
                      name,
                      name,
                      value,
                      name,
                      name,
                      name
                    );
                  }

                  warnedProperties$1[name] = true;
                  return true;
                } // Now that we've validated casing, do not validate
                // data types for reserved props

                if (isReserved) {
                  return true;
                } // Warn when a known attribute is a bad type

                if (
                  shouldRemoveAttributeWithWarning(
                    name,
                    value,
                    propertyInfo,
                    false
                  )
                ) {
                  warnedProperties$1[name] = true;
                  return false;
                } // Warn when passing the strings 'false' or 'true' into a boolean prop

                if (
                  (value === "false" || value === "true") &&
                  propertyInfo !== null &&
                  propertyInfo.type === BOOLEAN
                ) {
                  warning$1(
                    false,
                    "Received the string `%s` for the boolean attribute `%s`. " +
                      "%s " +
                      "Did you mean %s={%s}?",
                    value,
                    name,
                    value === "false"
                      ? "The browser will interpret it as a truthy value."
                      : 'Although this works, it will not work as expected if you pass the string "false".',
                    name,
                    value
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                return true;
              };
            }

            var warnUnknownProperties = function(
              type,
              props,
              canUseEventSystem
            ) {
              var unknownProps = [];

              for (var key in props) {
                var isValid = validateProperty$1(
                  type,
                  key,
                  props[key],
                  canUseEventSystem
                );

                if (!isValid) {
                  unknownProps.push(key);
                }
              }

              var unknownPropString = unknownProps
                .map(function(prop) {
                  return "`" + prop + "`";
                })
                .join(", ");

              if (unknownProps.length === 1) {
                warning$1(
                  false,
                  "Invalid value for prop %s on <%s> tag. Either remove it from the element, " +
                    "or pass a string or number value to keep it in the DOM. " +
                    "For details, see https://fb.me/react-attribute-behavior",
                  unknownPropString,
                  type
                );
              } else if (unknownProps.length > 1) {
                warning$1(
                  false,
                  "Invalid values for props %s on <%s> tag. Either remove them from the element, " +
                    "or pass a string or number value to keep them in the DOM. " +
                    "For details, see https://fb.me/react-attribute-behavior",
                  unknownPropString,
                  type
                );
              }
            };

            function validateProperties$2(type, props, canUseEventSystem) {
              if (isCustomComponent(type, props)) {
                return;
              }

              warnUnknownProperties(type, props, canUseEventSystem);
            } // TODO: direct imports like some-package/src/* are bad. Fix me.

            var didWarnInvalidHydration = false;
            var didWarnShadyDOM = false;
            var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
            var SUPPRESS_CONTENT_EDITABLE_WARNING =
              "suppressContentEditableWarning";
            var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
            var AUTOFOCUS = "autoFocus";
            var CHILDREN = "children";
            var STYLE$1 = "style";
            var HTML = "__html";
            var HTML_NAMESPACE = Namespaces.html;
            var warnedUnknownTags = void 0;
            var suppressHydrationWarning = void 0;
            var validatePropertiesInDevelopment = void 0;
            var warnForTextDifference = void 0;
            var warnForPropDifference = void 0;
            var warnForExtraAttributes = void 0;
            var warnForInvalidEventListener = void 0;
            var canDiffStyleForHydrationWarning = void 0;
            var normalizeMarkupForTextOrAttribute = void 0;
            var normalizeHTML = void 0;
            {
              warnedUnknownTags = {
                // Chrome is the only major browser not shipping <time>. But as of July
                // 2017 it intends to ship it due to widespread usage. We intentionally
                // *don't* warn for <time> even if it's unrecognized by Chrome because
                // it soon will be, and many apps have been using it anyway.
                time: true,
                // There are working polyfills for <dialog>. Let people use it.
                dialog: true,
                // Electron ships a custom <webview> tag to display external web content in
                // an isolated frame and process.
                // This tag is not present in non Electron environments such as JSDom which
                // is often used for testing purposes.
                // @see https://electronjs.org/docs/api/webview-tag
                webview: true
              };

              validatePropertiesInDevelopment = function(type, props) {
                validateProperties(type, props);
                validateProperties$1(type, props);
                validateProperties$2(
                  type,
                  props,
                  /* canUseEventSystem */
                  true
                );
              }; // IE 11 parses & normalizes the style attribute as opposed to other
              // browsers. It adds spaces and sorts the properties in some
              // non-alphabetical order. Handling that would require sorting CSS
              // properties in the client & server versions or applying
              // `expectedStyle` to a temporary DOM node to read its `style` attribute
              // normalized. Since it only affects IE, we're skipping style warnings
              // in that browser completely in favor of doing all that work.
              // See https://github.com/facebook/react/issues/11807

              canDiffStyleForHydrationWarning =
                canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
              // It also can turn \u0000 into \uFFFD inside attributes.
              // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
              // If we have a mismatch, it might be caused by that.
              // We will still patch up in this case but not fire the warning.

              var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
              var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

              normalizeMarkupForTextOrAttribute = function(markup) {
                var markupString =
                  typeof markup === "string" ? markup : "" + markup;
                return markupString
                  .replace(NORMALIZE_NEWLINES_REGEX, "\n")
                  .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
              };

              warnForTextDifference = function(serverText, clientText) {
                if (didWarnInvalidHydration) {
                  return;
                }

                var normalizedClientText = normalizeMarkupForTextOrAttribute(
                  clientText
                );
                var normalizedServerText = normalizeMarkupForTextOrAttribute(
                  serverText
                );

                if (normalizedServerText === normalizedClientText) {
                  return;
                }

                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Text content did not match. Server: "%s" Client: "%s"',
                  normalizedServerText,
                  normalizedClientText
                );
              };

              warnForPropDifference = function(
                propName,
                serverValue,
                clientValue
              ) {
                if (didWarnInvalidHydration) {
                  return;
                }

                var normalizedClientValue = normalizeMarkupForTextOrAttribute(
                  clientValue
                );
                var normalizedServerValue = normalizeMarkupForTextOrAttribute(
                  serverValue
                );

                if (normalizedServerValue === normalizedClientValue) {
                  return;
                }

                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  "Prop `%s` did not match. Server: %s Client: %s",
                  propName,
                  JSON.stringify(normalizedServerValue),
                  JSON.stringify(normalizedClientValue)
                );
              };

              warnForExtraAttributes = function(attributeNames) {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;
                var names = [];
                attributeNames.forEach(function(name) {
                  names.push(name);
                });
                warningWithoutStack$1(
                  false,
                  "Extra attributes from the server: %s",
                  names
                );
              };

              warnForInvalidEventListener = function(
                registrationName,
                listener
              ) {
                if (listener === false) {
                  warning$1(
                    false,
                    "Expected `%s` listener to be a function, instead got `false`.\n\n" +
                      "If you used to conditionally omit it with %s={condition && value}, " +
                      "pass %s={condition ? value : undefined} instead.",
                    registrationName,
                    registrationName,
                    registrationName
                  );
                } else {
                  warning$1(
                    false,
                    "Expected `%s` listener to be a function, instead got a value of `%s` type.",
                    registrationName,
                    typeof listener
                  );
                }
              }; // Parse the HTML and read it back to normalize the HTML string so that it
              // can be used for comparison.

              normalizeHTML = function(parent, html) {
                // We could have created a separate document here to avoid
                // re-initializing custom elements if they exist. But this breaks
                // how <noscript> is being handled. So we use the same document.
                // See the discussion in https://github.com/facebook/react/pull/11157.
                var testElement =
                  parent.namespaceURI === HTML_NAMESPACE
                    ? parent.ownerDocument.createElement(parent.tagName)
                    : parent.ownerDocument.createElementNS(
                        parent.namespaceURI,
                        parent.tagName
                      );
                testElement.innerHTML = html;
                return testElement.innerHTML;
              };
            }

            function ensureListeningTo(rootContainerElement, registrationName) {
              var isDocumentOrFragment =
                rootContainerElement.nodeType === DOCUMENT_NODE ||
                rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
              var doc = isDocumentOrFragment
                ? rootContainerElement
                : rootContainerElement.ownerDocument;
              listenTo(registrationName, doc);
            }

            function getOwnerDocumentFromRootContainer(rootContainerElement) {
              return rootContainerElement.nodeType === DOCUMENT_NODE
                ? rootContainerElement
                : rootContainerElement.ownerDocument;
            }

            function noop() {}

            function trapClickOnNonInteractiveElement(node) {
              // Mobile Safari does not fire properly bubble click events on
              // non-interactive elements, which means delegated click listeners do not
              // fire. The workaround for this bug involves attaching an empty click
              // listener on the target node.
              // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
              // Just set it using the onclick property so that we don't have to manage any
              // bookkeeping for it. Not sure if we need to clear it when the listener is
              // removed.
              // TODO: Only do this for the relevant Safaris maybe?
              node.onclick = noop;
            }

            function setInitialDOMProperties(
              tag,
              domElement,
              rootContainerElement,
              nextProps,
              isCustomComponentTag
            ) {
              for (var propKey in nextProps) {
                if (!nextProps.hasOwnProperty(propKey)) {
                  continue;
                }

                var nextProp = nextProps[propKey];

                if (propKey === STYLE$1) {
                  {
                    if (nextProp) {
                      // Freeze the next style object so that we can assume it won't be
                      // mutated. We have already warned for this in the past.
                      Object.freeze(nextProp);
                    }
                  } // Relies on `updateStylesByID` not mutating `styleUpdates`.

                  setValueForStyles(domElement, nextProp);
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var nextHtml = nextProp ? nextProp[HTML] : undefined;

                  if (nextHtml != null) {
                    setInnerHTML(domElement, nextHtml);
                  }
                } else if (propKey === CHILDREN) {
                  if (typeof nextProp === "string") {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent =
                      tag !== "textarea" || nextProp !== "";

                    if (canSetTextContent) {
                      setTextContent(domElement, nextProp);
                    }
                  } else if (typeof nextProp === "number") {
                    setTextContent(domElement, "" + nextProp);
                  }
                } else if (
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING$1
                ) {
                  // Noop
                } else if (propKey === AUTOFOCUS) {
                  // We polyfill it separately on the client during commit.
                  // We could have excluded it in the property list instead of
                  // adding a special case here, but then it wouldn't be emitted
                  // on server rendering (but we *do* want to emit it in SSR).
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    if (true && typeof nextProp !== "function") {
                      warnForInvalidEventListener(propKey, nextProp);
                    }

                    ensureListeningTo(rootContainerElement, propKey);
                  }
                } else if (nextProp != null) {
                  setValueForProperty(
                    domElement,
                    propKey,
                    nextProp,
                    isCustomComponentTag
                  );
                }
              }
            }

            function updateDOMProperties(
              domElement,
              updatePayload,
              wasCustomComponentTag,
              isCustomComponentTag
            ) {
              // TODO: Handle wasCustomComponentTag
              for (var i = 0; i < updatePayload.length; i += 2) {
                var propKey = updatePayload[i];
                var propValue = updatePayload[i + 1];

                if (propKey === STYLE$1) {
                  setValueForStyles(domElement, propValue);
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  setInnerHTML(domElement, propValue);
                } else if (propKey === CHILDREN) {
                  setTextContent(domElement, propValue);
                } else {
                  setValueForProperty(
                    domElement,
                    propKey,
                    propValue,
                    isCustomComponentTag
                  );
                }
              }
            }

            function createElement(
              type,
              props,
              rootContainerElement,
              parentNamespace
            ) {
              var isCustomComponentTag = void 0; // We create tags in the namespace of their parent container, except HTML
              // tags get no namespace.

              var ownerDocument = getOwnerDocumentFromRootContainer(
                rootContainerElement
              );
              var domElement = void 0;
              var namespaceURI = parentNamespace;

              if (namespaceURI === HTML_NAMESPACE) {
                namespaceURI = getIntrinsicNamespace(type);
              }

              if (namespaceURI === HTML_NAMESPACE) {
                {
                  isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
                  // allow <SVG> or <mATH>.

                  !(isCustomComponentTag || type === type.toLowerCase())
                    ? warning$1(
                        false,
                        "<%s /> is using incorrect casing. " +
                          "Use PascalCase for React components, " +
                          "or lowercase for HTML elements.",
                        type
                      )
                    : void 0;
                }

                if (type === "script") {
                  // Create the script via .innerHTML so its "parser-inserted" flag is
                  // set to true and it does not execute
                  var div = ownerDocument.createElement("div");
                  div.innerHTML = "<script><" + "/script>"; // eslint-disable-line
                  // This is guaranteed to yield a script element.

                  var firstChild = div.firstChild;
                  domElement = div.removeChild(firstChild);
                } else if (typeof props.is === "string") {
                  // $FlowIssue `createElement` should be updated for Web Components
                  domElement = ownerDocument.createElement(type, {
                    is: props.is
                  });
                } else {
                  // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                  // See discussion in https://github.com/facebook/react/pull/6896
                  // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                  domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
                  // attribute on `select`s needs to be added before `option`s are inserted. This prevents
                  // a bug where the `select` does not scroll to the correct option because singular
                  // `select` elements automatically pick the first item.
                  // See https://github.com/facebook/react/issues/13222

                  if (type === "select" && props.multiple) {
                    var node = domElement;
                    node.multiple = true;
                  }
                }
              } else {
                domElement = ownerDocument.createElementNS(namespaceURI, type);
              }

              {
                if (namespaceURI === HTML_NAMESPACE) {
                  if (
                    !isCustomComponentTag &&
                    Object.prototype.toString.call(domElement) ===
                      "[object HTMLUnknownElement]" &&
                    !Object.prototype.hasOwnProperty.call(
                      warnedUnknownTags,
                      type
                    )
                  ) {
                    warnedUnknownTags[type] = true;
                    warning$1(
                      false,
                      "The tag <%s> is unrecognized in this browser. " +
                        "If you meant to render a React component, start its name with " +
                        "an uppercase letter.",
                      type
                    );
                  }
                }
              }
              return domElement;
            }

            function createTextNode(text, rootContainerElement) {
              return getOwnerDocumentFromRootContainer(
                rootContainerElement
              ).createTextNode(text);
            }

            function setInitialProperties(
              domElement,
              tag,
              rawProps,
              rootContainerElement
            ) {
              var isCustomComponentTag = isCustomComponent(tag, rawProps);
              {
                validatePropertiesInDevelopment(tag, rawProps);

                if (
                  isCustomComponentTag &&
                  !didWarnShadyDOM &&
                  domElement.shadyRoot
                ) {
                  warning$1(
                    false,
                    "%s is using shady DOM. Using shady DOM with React can " +
                      "cause things to break subtly.",
                    getCurrentFiberOwnerNameInDevOrNull() || "A component"
                  );
                  didWarnShadyDOM = true;
                }
              } // TODO: Make sure that we check isMounted before firing any of these events.

              var props = void 0;

              switch (tag) {
                case "iframe":
                case "object":
                  trapBubbledEvent(TOP_LOAD, domElement);
                  props = rawProps;
                  break;

                case "video":
                case "audio":
                  // Create listener for each media event
                  for (var i = 0; i < mediaEventTypes.length; i++) {
                    trapBubbledEvent(mediaEventTypes[i], domElement);
                  }

                  props = rawProps;
                  break;

                case "source":
                  trapBubbledEvent(TOP_ERROR, domElement);
                  props = rawProps;
                  break;

                case "img":
                case "image":
                case "link":
                  trapBubbledEvent(TOP_ERROR, domElement);
                  trapBubbledEvent(TOP_LOAD, domElement);
                  props = rawProps;
                  break;

                case "form":
                  trapBubbledEvent(TOP_RESET, domElement);
                  trapBubbledEvent(TOP_SUBMIT, domElement);
                  props = rawProps;
                  break;

                case "details":
                  trapBubbledEvent(TOP_TOGGLE, domElement);
                  props = rawProps;
                  break;

                case "input":
                  initWrapperState(domElement, rawProps);
                  props = getHostProps(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.

                  ensureListeningTo(rootContainerElement, "onChange");
                  break;

                case "option":
                  validateProps(domElement, rawProps);
                  props = getHostProps$1(domElement, rawProps);
                  break;

                case "select":
                  initWrapperState$1(domElement, rawProps);
                  props = getHostProps$2(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.

                  ensureListeningTo(rootContainerElement, "onChange");
                  break;

                case "textarea":
                  initWrapperState$2(domElement, rawProps);
                  props = getHostProps$3(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.

                  ensureListeningTo(rootContainerElement, "onChange");
                  break;

                default:
                  props = rawProps;
              }

              assertValidProps(tag, props);
              setInitialDOMProperties(
                tag,
                domElement,
                rootContainerElement,
                props,
                isCustomComponentTag
              );

              switch (tag) {
                case "input":
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper(domElement, rawProps, false);
                  break;

                case "textarea":
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper$3(domElement, rawProps);
                  break;

                case "option":
                  postMountWrapper$1(domElement, rawProps);
                  break;

                case "select":
                  postMountWrapper$2(domElement, rawProps);
                  break;

                default:
                  if (typeof props.onClick === "function") {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }

                  break;
              }
            } // Calculate the diff between the two objects.

            function diffProperties(
              domElement,
              tag,
              lastRawProps,
              nextRawProps,
              rootContainerElement
            ) {
              {
                validatePropertiesInDevelopment(tag, nextRawProps);
              }
              var updatePayload = null;
              var lastProps = void 0;
              var nextProps = void 0;

              switch (tag) {
                case "input":
                  lastProps = getHostProps(domElement, lastRawProps);
                  nextProps = getHostProps(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                case "option":
                  lastProps = getHostProps$1(domElement, lastRawProps);
                  nextProps = getHostProps$1(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                case "select":
                  lastProps = getHostProps$2(domElement, lastRawProps);
                  nextProps = getHostProps$2(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                case "textarea":
                  lastProps = getHostProps$3(domElement, lastRawProps);
                  nextProps = getHostProps$3(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                default:
                  lastProps = lastRawProps;
                  nextProps = nextRawProps;

                  if (
                    typeof lastProps.onClick !== "function" &&
                    typeof nextProps.onClick === "function"
                  ) {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }

                  break;
              }

              assertValidProps(tag, nextProps);
              var propKey = void 0;
              var styleName = void 0;
              var styleUpdates = null;

              for (propKey in lastProps) {
                if (
                  nextProps.hasOwnProperty(propKey) ||
                  !lastProps.hasOwnProperty(propKey) ||
                  lastProps[propKey] == null
                ) {
                  continue;
                }

                if (propKey === STYLE$1) {
                  var lastStyle = lastProps[propKey];

                  for (styleName in lastStyle) {
                    if (lastStyle.hasOwnProperty(styleName)) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }

                      styleUpdates[styleName] = "";
                    }
                  }
                } else if (
                  propKey === DANGEROUSLY_SET_INNER_HTML ||
                  propKey === CHILDREN
                ) {
                  // Noop. This is handled by the clear text mechanism.
                } else if (
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING$1
                ) {
                  // Noop
                } else if (propKey === AUTOFOCUS) {
                  // Noop. It doesn't work on updates anyway.
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  // This is a special case. If any listener updates we need to ensure
                  // that the "current" fiber pointer gets updated so we need a commit
                  // to update this element.
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                } else {
                  // For all other deleted properties we add it to the queue. We use
                  // the whitelist in the commit phase instead.
                  (updatePayload = updatePayload || []).push(propKey, null);
                }
              }

              for (propKey in nextProps) {
                var nextProp = nextProps[propKey];
                var lastProp =
                  lastProps != null ? lastProps[propKey] : undefined;

                if (
                  !nextProps.hasOwnProperty(propKey) ||
                  nextProp === lastProp ||
                  (nextProp == null && lastProp == null)
                ) {
                  continue;
                }

                if (propKey === STYLE$1) {
                  {
                    if (nextProp) {
                      // Freeze the next style object so that we can assume it won't be
                      // mutated. We have already warned for this in the past.
                      Object.freeze(nextProp);
                    }
                  }

                  if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for (styleName in lastProp) {
                      if (
                        lastProp.hasOwnProperty(styleName) &&
                        (!nextProp || !nextProp.hasOwnProperty(styleName))
                      ) {
                        if (!styleUpdates) {
                          styleUpdates = {};
                        }

                        styleUpdates[styleName] = "";
                      }
                    } // Update styles that changed since `lastProp`.

                    for (styleName in nextProp) {
                      if (
                        nextProp.hasOwnProperty(styleName) &&
                        lastProp[styleName] !== nextProp[styleName]
                      ) {
                        if (!styleUpdates) {
                          styleUpdates = {};
                        }

                        styleUpdates[styleName] = nextProp[styleName];
                      }
                    }
                  } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                      if (!updatePayload) {
                        updatePayload = [];
                      }

                      updatePayload.push(propKey, styleUpdates);
                    }

                    styleUpdates = nextProp;
                  }
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var nextHtml = nextProp ? nextProp[HTML] : undefined;
                  var lastHtml = lastProp ? lastProp[HTML] : undefined;

                  if (nextHtml != null) {
                    if (lastHtml !== nextHtml) {
                      (updatePayload = updatePayload || []).push(
                        propKey,
                        "" + nextHtml
                      );
                    }
                  } else {
                    // TODO: It might be too late to clear this if we have children
                    // inserted already.
                  }
                } else if (propKey === CHILDREN) {
                  if (
                    lastProp !== nextProp &&
                    (typeof nextProp === "string" ||
                      typeof nextProp === "number")
                  ) {
                    (updatePayload = updatePayload || []).push(
                      propKey,
                      "" + nextProp
                    );
                  }
                } else if (
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING$1
                ) {
                  // Noop
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (true && typeof nextProp !== "function") {
                      warnForInvalidEventListener(propKey, nextProp);
                    }

                    ensureListeningTo(rootContainerElement, propKey);
                  }

                  if (!updatePayload && lastProp !== nextProp) {
                    // This is a special case. If any listener updates we need to ensure
                    // that the "current" props pointer gets updated so we need a commit
                    // to update this element.
                    updatePayload = [];
                  }
                } else {
                  // For any other property we always add it to the queue and then we
                  // filter it out using the whitelist during the commit.
                  (updatePayload = updatePayload || []).push(propKey, nextProp);
                }
              }

              if (styleUpdates) {
                (updatePayload = updatePayload || []).push(
                  STYLE$1,
                  styleUpdates
                );
              }

              return updatePayload;
            } // Apply the diff.

            function updateProperties(
              domElement,
              updatePayload,
              tag,
              lastRawProps,
              nextRawProps
            ) {
              // Update checked *before* name.
              // In the middle of an update, it is possible to have multiple checked.
              // When a checked radio tries to change name, browser makes another radio's checked false.
              if (
                tag === "input" &&
                nextRawProps.type === "radio" &&
                nextRawProps.name != null
              ) {
                updateChecked(domElement, nextRawProps);
              }

              var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
              var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

              updateDOMProperties(
                domElement,
                updatePayload,
                wasCustomComponentTag,
                isCustomComponentTag
              ); // TODO: Ensure that an update gets scheduled if any of the special props
              // changed.

              switch (tag) {
                case "input":
                  // Update the wrapper around inputs *after* updating props. This has to
                  // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                  // raise warnings and prevent the new value from being assigned.
                  updateWrapper(domElement, nextRawProps);
                  break;

                case "textarea":
                  updateWrapper$1(domElement, nextRawProps);
                  break;

                case "select":
                  // <select> value update needs to occur after <option> children
                  // reconciliation
                  postUpdateWrapper(domElement, nextRawProps);
                  break;
              }
            }

            function getPossibleStandardName(propName) {
              {
                var lowerCasedName = propName.toLowerCase();

                if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                  return null;
                }

                return possibleStandardNames[lowerCasedName] || null;
              }
              return null;
            }

            function diffHydratedProperties(
              domElement,
              tag,
              rawProps,
              parentNamespace,
              rootContainerElement
            ) {
              var isCustomComponentTag = void 0;
              var extraAttributeNames = void 0;
              {
                suppressHydrationWarning =
                  rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
                isCustomComponentTag = isCustomComponent(tag, rawProps);
                validatePropertiesInDevelopment(tag, rawProps);

                if (
                  isCustomComponentTag &&
                  !didWarnShadyDOM &&
                  domElement.shadyRoot
                ) {
                  warning$1(
                    false,
                    "%s is using shady DOM. Using shady DOM with React can " +
                      "cause things to break subtly.",
                    getCurrentFiberOwnerNameInDevOrNull() || "A component"
                  );
                  didWarnShadyDOM = true;
                }
              } // TODO: Make sure that we check isMounted before firing any of these events.

              switch (tag) {
                case "iframe":
                case "object":
                  trapBubbledEvent(TOP_LOAD, domElement);
                  break;

                case "video":
                case "audio":
                  // Create listener for each media event
                  for (var i = 0; i < mediaEventTypes.length; i++) {
                    trapBubbledEvent(mediaEventTypes[i], domElement);
                  }

                  break;

                case "source":
                  trapBubbledEvent(TOP_ERROR, domElement);
                  break;

                case "img":
                case "image":
                case "link":
                  trapBubbledEvent(TOP_ERROR, domElement);
                  trapBubbledEvent(TOP_LOAD, domElement);
                  break;

                case "form":
                  trapBubbledEvent(TOP_RESET, domElement);
                  trapBubbledEvent(TOP_SUBMIT, domElement);
                  break;

                case "details":
                  trapBubbledEvent(TOP_TOGGLE, domElement);
                  break;

                case "input":
                  initWrapperState(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.

                  ensureListeningTo(rootContainerElement, "onChange");
                  break;

                case "option":
                  validateProps(domElement, rawProps);
                  break;

                case "select":
                  initWrapperState$1(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.

                  ensureListeningTo(rootContainerElement, "onChange");
                  break;

                case "textarea":
                  initWrapperState$2(domElement, rawProps);
                  trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
                  // to onChange. Even if there is no listener.

                  ensureListeningTo(rootContainerElement, "onChange");
                  break;
              }

              assertValidProps(tag, rawProps);
              {
                extraAttributeNames = new Set();
                var attributes = domElement.attributes;

                for (var _i = 0; _i < attributes.length; _i++) {
                  var name = attributes[_i].name.toLowerCase();

                  switch (name) {
                    // Built-in SSR attribute is whitelisted
                    case "data-reactroot":
                      break;
                    // Controlled attributes are not validated
                    // TODO: Only ignore them on controlled tags.

                    case "value":
                      break;

                    case "checked":
                      break;

                    case "selected":
                      break;

                    default:
                      // Intentionally use the original name.
                      // See discussion in https://github.com/facebook/react/pull/10676.
                      extraAttributeNames.add(attributes[_i].name);
                  }
                }
              }
              var updatePayload = null;

              for (var propKey in rawProps) {
                if (!rawProps.hasOwnProperty(propKey)) {
                  continue;
                }

                var nextProp = rawProps[propKey];

                if (propKey === CHILDREN) {
                  // For text content children we compare against textContent. This
                  // might match additional HTML that is hidden when we read it using
                  // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                  // satisfies our requirement. Our requirement is not to produce perfect
                  // HTML and attributes. Ideally we should preserve structure but it's
                  // ok not to if the visible content is still enough to indicate what
                  // even listeners these nodes might be wired up to.
                  // TODO: Warn if there is more than a single textNode as a child.
                  // TODO: Should we use domElement.firstChild.nodeValue to compare?
                  if (typeof nextProp === "string") {
                    if (domElement.textContent !== nextProp) {
                      if (true && !suppressHydrationWarning) {
                        warnForTextDifference(domElement.textContent, nextProp);
                      }

                      updatePayload = [CHILDREN, nextProp];
                    }
                  } else if (typeof nextProp === "number") {
                    if (domElement.textContent !== "" + nextProp) {
                      if (true && !suppressHydrationWarning) {
                        warnForTextDifference(domElement.textContent, nextProp);
                      }

                      updatePayload = [CHILDREN, "" + nextProp];
                    }
                  }
                } else if (registrationNameModules.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    if (true && typeof nextProp !== "function") {
                      warnForInvalidEventListener(propKey, nextProp);
                    }

                    ensureListeningTo(rootContainerElement, propKey);
                  }
                } else if (
                  true && // Convince Flow we've calculated it (it's DEV-only in this method.)
                  typeof isCustomComponentTag === "boolean"
                ) {
                  // Validate that the properties correspond to their expected values.
                  var serverValue = void 0;
                  var propertyInfo = getPropertyInfo(propKey);

                  if (suppressHydrationWarning) {
                    // Don't bother comparing. We're ignoring all these warnings.
                  } else if (
                    propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                    propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
                    // TODO: Only ignore them on controlled tags.
                    propKey === "value" ||
                    propKey === "checked" ||
                    propKey === "selected"
                  ) {
                    // Noop
                  } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML] : undefined;
                    var expectedHTML = normalizeHTML(
                      domElement,
                      nextHtml != null ? nextHtml : ""
                    );

                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  } else if (propKey === STYLE$1) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);

                    if (canDiffStyleForHydrationWarning) {
                      var expectedStyle = createDangerousStringForStyles(
                        nextProp
                      );
                      serverValue = domElement.getAttribute("style");

                      if (expectedStyle !== serverValue) {
                        warnForPropDifference(
                          propKey,
                          serverValue,
                          expectedStyle
                        );
                      }
                    }
                  } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(
                      domElement,
                      propKey,
                      nextProp
                    );

                    if (nextProp !== serverValue) {
                      warnForPropDifference(propKey, serverValue, nextProp);
                    }
                  } else if (
                    !shouldIgnoreAttribute(
                      propKey,
                      propertyInfo,
                      isCustomComponentTag
                    ) &&
                    !shouldRemoveAttribute(
                      propKey,
                      nextProp,
                      propertyInfo,
                      isCustomComponentTag
                    )
                  ) {
                    var isMismatchDueToBadCasing = false;

                    if (propertyInfo !== null) {
                      // $FlowFixMe - Should be inferred as not undefined.
                      extraAttributeNames.delete(propertyInfo.attributeName);
                      serverValue = getValueForProperty(
                        domElement,
                        propKey,
                        nextProp,
                        propertyInfo
                      );
                    } else {
                      var ownNamespace = parentNamespace;

                      if (ownNamespace === HTML_NAMESPACE) {
                        ownNamespace = getIntrinsicNamespace(tag);
                      }

                      if (ownNamespace === HTML_NAMESPACE) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                      } else {
                        var standardName = getPossibleStandardName(propKey);

                        if (standardName !== null && standardName !== propKey) {
                          // If an SVG prop is supplied with bad casing, it will
                          // be successfully parsed from HTML, but will produce a mismatch
                          // (and would be incorrectly rendered on the client).
                          // However, we already warn about bad casing elsewhere.
                          // So we'll skip the misleading extra mismatch warning in this case.
                          isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                          extraAttributeNames.delete(standardName);
                        } // $FlowFixMe - Should be inferred as not undefined.

                        extraAttributeNames.delete(propKey);
                      }

                      serverValue = getValueForAttribute(
                        domElement,
                        propKey,
                        nextProp
                      );
                    }

                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                      warnForPropDifference(propKey, serverValue, nextProp);
                    }
                  }
                }
              }

              {
                // $FlowFixMe - Should be inferred as not undefined.
                if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  warnForExtraAttributes(extraAttributeNames);
                }
              }

              switch (tag) {
                case "input":
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper(domElement, rawProps, true);
                  break;

                case "textarea":
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper$3(domElement, rawProps);
                  break;

                case "select":
                case "option":
                  // For input and textarea we current always set the value property at
                  // post mount to force it to diverge from attributes. However, for
                  // option and select we don't quite do the same thing and select
                  // is not resilient to the DOM state changing so we don't do that here.
                  // TODO: Consider not doing this for input and textarea.
                  break;

                default:
                  if (typeof rawProps.onClick === "function") {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }

                  break;
              }

              return updatePayload;
            }

            function diffHydratedText(textNode, text) {
              var isDifferent = textNode.nodeValue !== text;
              return isDifferent;
            }

            function warnForUnmatchedText(textNode, text) {
              {
                warnForTextDifference(textNode.nodeValue, text);
              }
            }

            function warnForDeletedHydratableElement(parentNode, child) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  "Did not expect server HTML to contain a <%s> in <%s>.",
                  child.nodeName.toLowerCase(),
                  parentNode.nodeName.toLowerCase()
                );
              }
            }

            function warnForDeletedHydratableText(parentNode, child) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Did not expect server HTML to contain the text node "%s" in <%s>.',
                  child.nodeValue,
                  parentNode.nodeName.toLowerCase()
                );
              }
            }

            function warnForInsertedHydratedElement(parentNode, tag, props) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  "Expected server HTML to contain a matching <%s> in <%s>.",
                  tag,
                  parentNode.nodeName.toLowerCase()
                );
              }
            }

            function warnForInsertedHydratedText(parentNode, text) {
              {
                if (text === "") {
                  // We expect to insert empty text nodes since they're not represented in
                  // the HTML.
                  // TODO: Remove this special case if we can just avoid inserting empty
                  // text nodes.
                  return;
                }

                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;
                warningWithoutStack$1(
                  false,
                  'Expected server HTML to contain a matching text node for "%s" in <%s>.',
                  text,
                  parentNode.nodeName.toLowerCase()
                );
              }
            }

            function restoreControlledState$1(domElement, tag, props) {
              switch (tag) {
                case "input":
                  restoreControlledState(domElement, props);
                  return;

                case "textarea":
                  restoreControlledState$3(domElement, props);
                  return;

                case "select":
                  restoreControlledState$2(domElement, props);
                  return;
              }
            } // TODO: direct imports like some-package/src/* are bad. Fix me.

            var validateDOMNesting = function() {};

            var updatedAncestorInfo = function() {};

            {
              // This validation code was written based on the HTML5 parsing spec:
              // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
              //
              // Note: this does not catch all invalid nesting, nor does it try to (as it's
              // not clear what practical benefit doing so provides); instead, we warn only
              // for cases where the parser will give a parse tree differing from what React
              // intended. For example, <b><div></div></b> is invalid but we don't warn
              // because it still parses correctly; we do warn for other cases like nested
              // <p> tags where the beginning of the second element implicitly closes the
              // first, causing a confusing mess.
              // https://html.spec.whatwg.org/multipage/syntax.html#special
              var specialTags = [
                "address",
                "applet",
                "area",
                "article",
                "aside",
                "base",
                "basefont",
                "bgsound",
                "blockquote",
                "body",
                "br",
                "button",
                "caption",
                "center",
                "col",
                "colgroup",
                "dd",
                "details",
                "dir",
                "div",
                "dl",
                "dt",
                "embed",
                "fieldset",
                "figcaption",
                "figure",
                "footer",
                "form",
                "frame",
                "frameset",
                "h1",
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "head",
                "header",
                "hgroup",
                "hr",
                "html",
                "iframe",
                "img",
                "input",
                "isindex",
                "li",
                "link",
                "listing",
                "main",
                "marquee",
                "menu",
                "menuitem",
                "meta",
                "nav",
                "noembed",
                "noframes",
                "noscript",
                "object",
                "ol",
                "p",
                "param",
                "plaintext",
                "pre",
                "script",
                "section",
                "select",
                "source",
                "style",
                "summary",
                "table",
                "tbody",
                "td",
                "template",
                "textarea",
                "tfoot",
                "th",
                "thead",
                "title",
                "tr",
                "track",
                "ul",
                "wbr",
                "xmp"
              ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

              var inScopeTags = [
                "applet",
                "caption",
                "html",
                "table",
                "td",
                "th",
                "marquee",
                "object",
                "template", // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
                // TODO: Distinguish by namespace here -- for <title>, including it here
                // errs on the side of fewer warnings
                "foreignObject",
                "desc",
                "title"
              ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

              var buttonScopeTags = inScopeTags.concat(["button"]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

              var impliedEndTags = [
                "dd",
                "dt",
                "li",
                "option",
                "optgroup",
                "p",
                "rp",
                "rt"
              ];
              var emptyAncestorInfo = {
                current: null,
                formTag: null,
                aTagInScope: null,
                buttonTagInScope: null,
                nobrTagInScope: null,
                pTagInButtonScope: null,
                listItemTagAutoclosing: null,
                dlItemTagAutoclosing: null
              };

              updatedAncestorInfo = function(oldInfo, tag) {
                var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

                var info = {
                  tag: tag
                };

                if (inScopeTags.indexOf(tag) !== -1) {
                  ancestorInfo.aTagInScope = null;
                  ancestorInfo.buttonTagInScope = null;
                  ancestorInfo.nobrTagInScope = null;
                }

                if (buttonScopeTags.indexOf(tag) !== -1) {
                  ancestorInfo.pTagInButtonScope = null;
                } // See rules for 'li', 'dd', 'dt' start tags in
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

                if (
                  specialTags.indexOf(tag) !== -1 &&
                  tag !== "address" &&
                  tag !== "div" &&
                  tag !== "p"
                ) {
                  ancestorInfo.listItemTagAutoclosing = null;
                  ancestorInfo.dlItemTagAutoclosing = null;
                }

                ancestorInfo.current = info;

                if (tag === "form") {
                  ancestorInfo.formTag = info;
                }

                if (tag === "a") {
                  ancestorInfo.aTagInScope = info;
                }

                if (tag === "button") {
                  ancestorInfo.buttonTagInScope = info;
                }

                if (tag === "nobr") {
                  ancestorInfo.nobrTagInScope = info;
                }

                if (tag === "p") {
                  ancestorInfo.pTagInButtonScope = info;
                }

                if (tag === "li") {
                  ancestorInfo.listItemTagAutoclosing = info;
                }

                if (tag === "dd" || tag === "dt") {
                  ancestorInfo.dlItemTagAutoclosing = info;
                }

                return ancestorInfo;
              };
              /**
               * Returns whether
               */

              var isTagValidWithParent = function(tag, parentTag) {
                // First, let's check if we're in an unusual parsing mode...
                switch (parentTag) {
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                  case "select":
                    return (
                      tag === "option" || tag === "optgroup" || tag === "#text"
                    );

                  case "optgroup":
                    return tag === "option" || tag === "#text";
                  // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                  // but

                  case "option":
                    return tag === "#text";
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                  // No special behavior since these rules fall back to "in body" mode for
                  // all except special table nodes which cause bad parsing behavior anyway.
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

                  case "tr":
                    return (
                      tag === "th" ||
                      tag === "td" ||
                      tag === "style" ||
                      tag === "script" ||
                      tag === "template"
                    );
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

                  case "tbody":
                  case "thead":
                  case "tfoot":
                    return (
                      tag === "tr" ||
                      tag === "style" ||
                      tag === "script" ||
                      tag === "template"
                    );
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

                  case "colgroup":
                    return tag === "col" || tag === "template";
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

                  case "table":
                    return (
                      tag === "caption" ||
                      tag === "colgroup" ||
                      tag === "tbody" ||
                      tag === "tfoot" ||
                      tag === "thead" ||
                      tag === "style" ||
                      tag === "script" ||
                      tag === "template"
                    );
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

                  case "head":
                    return (
                      tag === "base" ||
                      tag === "basefont" ||
                      tag === "bgsound" ||
                      tag === "link" ||
                      tag === "meta" ||
                      tag === "title" ||
                      tag === "noscript" ||
                      tag === "noframes" ||
                      tag === "style" ||
                      tag === "script" ||
                      tag === "template"
                    );
                  // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

                  case "html":
                    return tag === "head" || tag === "body";

                  case "#document":
                    return tag === "html";
                } // Probably in the "in body" parsing mode, so we outlaw only tag combos
                // where the parsing rules cause implicit opens or closes to be added.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

                switch (tag) {
                  case "h1":
                  case "h2":
                  case "h3":
                  case "h4":
                  case "h5":
                  case "h6":
                    return (
                      parentTag !== "h1" &&
                      parentTag !== "h2" &&
                      parentTag !== "h3" &&
                      parentTag !== "h4" &&
                      parentTag !== "h5" &&
                      parentTag !== "h6"
                    );

                  case "rp":
                  case "rt":
                    return impliedEndTags.indexOf(parentTag) === -1;

                  case "body":
                  case "caption":
                  case "col":
                  case "colgroup":
                  case "frame":
                  case "head":
                  case "html":
                  case "tbody":
                  case "td":
                  case "tfoot":
                  case "th":
                  case "thead":
                  case "tr":
                    // These tags are only valid with a few parents that have special child
                    // parsing rules -- if we're down here, then none of those matched and
                    // so we allow it only if we don't know what the parent is, as all other
                    // cases are invalid.
                    return parentTag == null;
                }

                return true;
              };
              /**
               * Returns whether
               */

              var findInvalidAncestorForTag = function(tag, ancestorInfo) {
                switch (tag) {
                  case "address":
                  case "article":
                  case "aside":
                  case "blockquote":
                  case "center":
                  case "details":
                  case "dialog":
                  case "dir":
                  case "div":
                  case "dl":
                  case "fieldset":
                  case "figcaption":
                  case "figure":
                  case "footer":
                  case "header":
                  case "hgroup":
                  case "main":
                  case "menu":
                  case "nav":
                  case "ol":
                  case "p":
                  case "section":
                  case "summary":
                  case "ul":
                  case "pre":
                  case "listing":
                  case "table":
                  case "hr":
                  case "xmp":
                  case "h1":
                  case "h2":
                  case "h3":
                  case "h4":
                  case "h5":
                  case "h6":
                    return ancestorInfo.pTagInButtonScope;

                  case "form":
                    return (
                      ancestorInfo.formTag || ancestorInfo.pTagInButtonScope
                    );

                  case "li":
                    return ancestorInfo.listItemTagAutoclosing;

                  case "dd":
                  case "dt":
                    return ancestorInfo.dlItemTagAutoclosing;

                  case "button":
                    return ancestorInfo.buttonTagInScope;

                  case "a":
                    // Spec says something about storing a list of markers, but it sounds
                    // equivalent to this check.
                    return ancestorInfo.aTagInScope;

                  case "nobr":
                    return ancestorInfo.nobrTagInScope;
                }

                return null;
              };

              var didWarn = {};

              validateDOMNesting = function(childTag, childText, ancestorInfo) {
                ancestorInfo = ancestorInfo || emptyAncestorInfo;
                var parentInfo = ancestorInfo.current;
                var parentTag = parentInfo && parentInfo.tag;

                if (childText != null) {
                  !(childTag == null)
                    ? warningWithoutStack$1(
                        false,
                        "validateDOMNesting: when childText is passed, childTag should be null"
                      )
                    : void 0;
                  childTag = "#text";
                }

                var invalidParent = isTagValidWithParent(childTag, parentTag)
                  ? null
                  : parentInfo;
                var invalidAncestor = invalidParent
                  ? null
                  : findInvalidAncestorForTag(childTag, ancestorInfo);
                var invalidParentOrAncestor = invalidParent || invalidAncestor;

                if (!invalidParentOrAncestor) {
                  return;
                }

                var ancestorTag = invalidParentOrAncestor.tag;
                var addendum = getCurrentFiberStackInDev();
                var warnKey =
                  !!invalidParent +
                  "|" +
                  childTag +
                  "|" +
                  ancestorTag +
                  "|" +
                  addendum;

                if (didWarn[warnKey]) {
                  return;
                }

                didWarn[warnKey] = true;
                var tagDisplayName = childTag;
                var whitespaceInfo = "";

                if (childTag === "#text") {
                  if (/\S/.test(childText)) {
                    tagDisplayName = "Text nodes";
                  } else {
                    tagDisplayName = "Whitespace text nodes";
                    whitespaceInfo =
                      " Make sure you don't have any extra whitespace between tags on " +
                      "each line of your source code.";
                  }
                } else {
                  tagDisplayName = "<" + childTag + ">";
                }

                if (invalidParent) {
                  var info = "";

                  if (ancestorTag === "table" && childTag === "tr") {
                    info +=
                      " Add a <tbody> to your code to match the DOM tree generated by " +
                      "the browser.";
                  }

                  warningWithoutStack$1(
                    false,
                    "validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s",
                    tagDisplayName,
                    ancestorTag,
                    whitespaceInfo,
                    info,
                    addendum
                  );
                } else {
                  warningWithoutStack$1(
                    false,
                    "validateDOMNesting(...): %s cannot appear as a descendant of " +
                      "<%s>.%s",
                    tagDisplayName,
                    ancestorTag,
                    addendum
                  );
                }
              };
            } // Renderers that don't support persistence
            // can re-export everything from this module.

            function shim() {
              invariant(
                false,
                "The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue."
              );
            } // Persistence (when unsupported)

            var supportsPersistence = false;
            var cloneInstance = shim;
            var createContainerChildSet = shim;
            var appendChildToContainerChildSet = shim;
            var finalizeContainerChildren = shim;
            var replaceContainerChildren = shim;
            var cloneHiddenInstance = shim;
            var cloneUnhiddenInstance = shim;
            var createHiddenTextInstance = shim;
            var SUPPRESS_HYDRATION_WARNING = void 0;
            {
              SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
            }
            var STYLE = "style";
            var eventsEnabled = null;
            var selectionInformation = null;

            function shouldAutoFocusHostComponent(type, props) {
              switch (type) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  return !!props.autoFocus;
              }

              return false;
            }

            function getRootHostContext(rootContainerInstance) {
              var type = void 0;
              var namespace = void 0;
              var nodeType = rootContainerInstance.nodeType;

              switch (nodeType) {
                case DOCUMENT_NODE:
                case DOCUMENT_FRAGMENT_NODE: {
                  type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                  var root = rootContainerInstance.documentElement;
                  namespace = root
                    ? root.namespaceURI
                    : getChildNamespace(null, "");
                  break;
                }

                default: {
                  var container =
                    nodeType === COMMENT_NODE
                      ? rootContainerInstance.parentNode
                      : rootContainerInstance;
                  var ownNamespace = container.namespaceURI || null;
                  type = container.tagName;
                  namespace = getChildNamespace(ownNamespace, type);
                  break;
                }
              }

              {
                var validatedTag = type.toLowerCase();

                var _ancestorInfo = updatedAncestorInfo(null, validatedTag);

                return {
                  namespace: namespace,
                  ancestorInfo: _ancestorInfo
                };
              }
              return namespace;
            }

            function getChildHostContext(
              parentHostContext,
              type,
              rootContainerInstance
            ) {
              {
                var parentHostContextDev = parentHostContext;

                var _namespace = getChildNamespace(
                  parentHostContextDev.namespace,
                  type
                );

                var _ancestorInfo2 = updatedAncestorInfo(
                  parentHostContextDev.ancestorInfo,
                  type
                );

                return {
                  namespace: _namespace,
                  ancestorInfo: _ancestorInfo2
                };
              }
              var parentNamespace = parentHostContext;
              return getChildNamespace(parentNamespace, type);
            }

            function getPublicInstance(instance) {
              return instance;
            }

            function prepareForCommit(containerInfo) {
              eventsEnabled = isEnabled();
              selectionInformation = getSelectionInformation();
              setEnabled(false);
            }

            function resetAfterCommit(containerInfo) {
              restoreSelection(selectionInformation);
              selectionInformation = null;
              setEnabled(eventsEnabled);
              eventsEnabled = null;
            }

            function createInstance(
              type,
              props,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle
            ) {
              var parentNamespace = void 0;
              {
                // TODO: take namespace into account when validating.
                var hostContextDev = hostContext;
                validateDOMNesting(type, null, hostContextDev.ancestorInfo);

                if (
                  typeof props.children === "string" ||
                  typeof props.children === "number"
                ) {
                  var string = "" + props.children;
                  var ownAncestorInfo = updatedAncestorInfo(
                    hostContextDev.ancestorInfo,
                    type
                  );
                  validateDOMNesting(null, string, ownAncestorInfo);
                }

                parentNamespace = hostContextDev.namespace;
              }
              var domElement = createElement(
                type,
                props,
                rootContainerInstance,
                parentNamespace
              );
              precacheFiberNode(internalInstanceHandle, domElement);
              updateFiberProps(domElement, props);
              return domElement;
            }

            function appendInitialChild(parentInstance, child) {
              parentInstance.appendChild(child);
            }

            function finalizeInitialChildren(
              domElement,
              type,
              props,
              rootContainerInstance,
              hostContext
            ) {
              setInitialProperties(
                domElement,
                type,
                props,
                rootContainerInstance
              );
              return shouldAutoFocusHostComponent(type, props);
            }

            function prepareUpdate(
              domElement,
              type,
              oldProps,
              newProps,
              rootContainerInstance,
              hostContext
            ) {
              {
                var hostContextDev = hostContext;

                if (
                  typeof newProps.children !== typeof oldProps.children &&
                  (typeof newProps.children === "string" ||
                    typeof newProps.children === "number")
                ) {
                  var string = "" + newProps.children;
                  var ownAncestorInfo = updatedAncestorInfo(
                    hostContextDev.ancestorInfo,
                    type
                  );
                  validateDOMNesting(null, string, ownAncestorInfo);
                }
              }
              return diffProperties(
                domElement,
                type,
                oldProps,
                newProps,
                rootContainerInstance
              );
            }

            function shouldSetTextContent(type, props) {
              return (
                type === "textarea" ||
                type === "option" ||
                type === "noscript" ||
                typeof props.children === "string" ||
                typeof props.children === "number" ||
                (typeof props.dangerouslySetInnerHTML === "object" &&
                  props.dangerouslySetInnerHTML !== null &&
                  props.dangerouslySetInnerHTML.__html != null)
              );
            }

            function shouldDeprioritizeSubtree(type, props) {
              return !!props.hidden;
            }

            function createTextInstance(
              text,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle
            ) {
              {
                var hostContextDev = hostContext;
                validateDOMNesting(null, text, hostContextDev.ancestorInfo);
              }
              var textNode = createTextNode(text, rootContainerInstance);
              precacheFiberNode(internalInstanceHandle, textNode);
              return textNode;
            }

            var isPrimaryRenderer = true; // This initialization code may run even on server environments
            // if a component just imports ReactDOM (e.g. for findDOMNode).
            // Some environments might not have setTimeout or clearTimeout.

            var scheduleTimeout =
              typeof setTimeout === "function" ? setTimeout : undefined;
            var cancelTimeout =
              typeof clearTimeout === "function" ? clearTimeout : undefined;
            var noTimeout = -1; // -------------------
            //     Mutation
            // -------------------

            var supportsMutation = true;

            function commitMount(
              domElement,
              type,
              newProps,
              internalInstanceHandle
            ) {
              // Despite the naming that might imply otherwise, this method only
              // fires if there is an `Update` effect scheduled during mounting.
              // This happens if `finalizeInitialChildren` returns `true` (which it
              // does to implement the `autoFocus` attribute on the client). But
              // there are also other cases when this might happen (such as patching
              // up text content during hydration mismatch). So we'll check this again.
              if (shouldAutoFocusHostComponent(type, newProps)) {
                domElement.focus();
              }
            }

            function commitUpdate(
              domElement,
              updatePayload,
              type,
              oldProps,
              newProps,
              internalInstanceHandle
            ) {
              // Update the props handle so that we know which props are the ones with
              // with current event handlers.
              updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

              updateProperties(
                domElement,
                updatePayload,
                type,
                oldProps,
                newProps
              );
            }

            function resetTextContent(domElement) {
              setTextContent(domElement, "");
            }

            function commitTextUpdate(textInstance, oldText, newText) {
              textInstance.nodeValue = newText;
            }

            function appendChild(parentInstance, child) {
              parentInstance.appendChild(child);
            }

            function appendChildToContainer(container, child) {
              var parentNode = void 0;

              if (container.nodeType === COMMENT_NODE) {
                parentNode = container.parentNode;
                parentNode.insertBefore(child, container);
              } else {
                parentNode = container;
                parentNode.appendChild(child);
              } // This container might be used for a portal.
              // If something inside a portal is clicked, that click should bubble
              // through the React tree. However, on Mobile Safari the click would
              // never bubble through the *DOM* tree unless an ancestor with onclick
              // event exists. So we wouldn't see it and dispatch it.
              // This is why we ensure that non React root containers have inline onclick
              // defined.
              // https://github.com/facebook/react/issues/11918

              var reactRootContainer = container._reactRootContainer;

              if (
                (reactRootContainer === null ||
                  reactRootContainer === undefined) &&
                parentNode.onclick === null
              ) {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(parentNode);
              }
            }

            function insertBefore(parentInstance, child, beforeChild) {
              parentInstance.insertBefore(child, beforeChild);
            }

            function insertInContainerBefore(container, child, beforeChild) {
              if (container.nodeType === COMMENT_NODE) {
                container.parentNode.insertBefore(child, beforeChild);
              } else {
                container.insertBefore(child, beforeChild);
              }
            }

            function removeChild(parentInstance, child) {
              parentInstance.removeChild(child);
            }

            function removeChildFromContainer(container, child) {
              if (container.nodeType === COMMENT_NODE) {
                container.parentNode.removeChild(child);
              } else {
                container.removeChild(child);
              }
            }

            function hideInstance(instance) {
              // TODO: Does this work for all element types? What about MathML? Should we
              // pass host context to this method?
              instance = instance;
              instance.style.display = "none";
            }

            function hideTextInstance(textInstance) {
              textInstance.nodeValue = "";
            }

            function unhideInstance(instance, props) {
              instance = instance;
              var styleProp = props[STYLE];
              var display =
                styleProp !== undefined &&
                styleProp !== null &&
                styleProp.hasOwnProperty("display")
                  ? styleProp.display
                  : null;
              instance.style.display = dangerousStyleValue("display", display);
            }

            function unhideTextInstance(textInstance, text) {
              textInstance.nodeValue = text;
            } // -------------------
            //     Hydration
            // -------------------

            var supportsHydration = true;

            function canHydrateInstance(instance, type, props) {
              if (
                instance.nodeType !== ELEMENT_NODE ||
                type.toLowerCase() !== instance.nodeName.toLowerCase()
              ) {
                return null;
              } // This has now been refined to an element node.

              return instance;
            }

            function canHydrateTextInstance(instance, text) {
              if (text === "" || instance.nodeType !== TEXT_NODE) {
                // Empty strings are not parsed by HTML so there won't be a correct match here.
                return null;
              } // This has now been refined to a text node.

              return instance;
            }

            function getNextHydratableSibling(instance) {
              var node = instance.nextSibling; // Skip non-hydratable nodes.

              while (
                node &&
                node.nodeType !== ELEMENT_NODE &&
                node.nodeType !== TEXT_NODE
              ) {
                node = node.nextSibling;
              }

              return node;
            }

            function getFirstHydratableChild(parentInstance) {
              var next = parentInstance.firstChild; // Skip non-hydratable nodes.

              while (
                next &&
                next.nodeType !== ELEMENT_NODE &&
                next.nodeType !== TEXT_NODE
              ) {
                next = next.nextSibling;
              }

              return next;
            }

            function hydrateInstance(
              instance,
              type,
              props,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle
            ) {
              precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
              // get attached.

              updateFiberProps(instance, props);
              var parentNamespace = void 0;
              {
                var hostContextDev = hostContext;
                parentNamespace = hostContextDev.namespace;
              }
              return diffHydratedProperties(
                instance,
                type,
                props,
                parentNamespace,
                rootContainerInstance
              );
            }

            function hydrateTextInstance(
              textInstance,
              text,
              internalInstanceHandle
            ) {
              precacheFiberNode(internalInstanceHandle, textInstance);
              return diffHydratedText(textInstance, text);
            }

            function didNotMatchHydratedContainerTextInstance(
              parentContainer,
              textInstance,
              text
            ) {
              {
                warnForUnmatchedText(textInstance, text);
              }
            }

            function didNotMatchHydratedTextInstance(
              parentType,
              parentProps,
              parentInstance,
              textInstance,
              text
            ) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForUnmatchedText(textInstance, text);
              }
            }

            function didNotHydrateContainerInstance(parentContainer, instance) {
              {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentContainer, instance);
                } else {
                  warnForDeletedHydratableText(parentContainer, instance);
                }
              }
            }

            function didNotHydrateInstance(
              parentType,
              parentProps,
              parentInstance,
              instance
            ) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }

            function didNotFindHydratableContainerInstance(
              parentContainer,
              type,
              props
            ) {
              {
                warnForInsertedHydratedElement(parentContainer, type, props);
              }
            }

            function didNotFindHydratableContainerTextInstance(
              parentContainer,
              text
            ) {
              {
                warnForInsertedHydratedText(parentContainer, text);
              }
            }

            function didNotFindHydratableInstance(
              parentType,
              parentProps,
              parentInstance,
              type,
              props
            ) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForInsertedHydratedElement(parentInstance, type, props);
              }
            }

            function didNotFindHydratableTextInstance(
              parentType,
              parentProps,
              parentInstance,
              text
            ) {
              if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            } // Prefix measurements so that it's possible to filter them.
            // Longer prefixes are hard to read in DevTools.

            var reactEmoji = "\u269B";
            var warningEmoji = "\u26D4";
            var supportsUserTiming =
              typeof performance !== "undefined" &&
              typeof performance.mark === "function" &&
              typeof performance.clearMarks === "function" &&
              typeof performance.measure === "function" &&
              typeof performance.clearMeasures === "function"; // Keep track of current fiber so that we know the path to unwind on pause.
            // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

            var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
            // Reusing `currentFiber` would be confusing for this because user code fiber
            // can change during commit phase too, but we don't need to unwind it (since
            // lifecycles in the commit phase don't resemble a tree).

            var currentPhase = null;
            var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
            // so we will keep track of it, and include it in the report.
            // Track commits caused by cascading updates.

            var isCommitting = false;
            var hasScheduledUpdateInCurrentCommit = false;
            var hasScheduledUpdateInCurrentPhase = false;
            var commitCountInCurrentWorkLoop = 0;
            var effectCountInCurrentCommit = 0;
            var isWaitingForCallback = false; // During commits, we only show a measurement once per method name
            // to avoid stretch the commit phase with measurement overhead.

            var labelsInCurrentCommit = new Set();

            var formatMarkName = function(markName) {
              return reactEmoji + " " + markName;
            };

            var formatLabel = function(label, warning) {
              var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
              var suffix = warning ? " Warning: " + warning : "";
              return "" + prefix + label + suffix;
            };

            var beginMark = function(markName) {
              performance.mark(formatMarkName(markName));
            };

            var clearMark = function(markName) {
              performance.clearMarks(formatMarkName(markName));
            };

            var endMark = function(label, markName, warning) {
              var formattedMarkName = formatMarkName(markName);
              var formattedLabel = formatLabel(label, warning);

              try {
                performance.measure(formattedLabel, formattedMarkName);
              } catch (err) {} // If previous mark was missing for some reason, this will throw.
              // This could only happen if React crashed in an unexpected place earlier.
              // Don't pile on with more errors.
              // Clear marks immediately to avoid growing buffer.

              performance.clearMarks(formattedMarkName);
              performance.clearMeasures(formattedLabel);
            };

            var getFiberMarkName = function(label, debugID) {
              return label + " (#" + debugID + ")";
            };

            var getFiberLabel = function(componentName, isMounted, phase) {
              if (phase === null) {
                // These are composite component total time measurements.
                return (
                  componentName + " [" + (isMounted ? "update" : "mount") + "]"
                );
              } else {
                // Composite component methods.
                return componentName + "." + phase;
              }
            };

            var beginFiberMark = function(fiber, phase) {
              var componentName = getComponentName(fiber.type) || "Unknown";
              var debugID = fiber._debugID;
              var isMounted = fiber.alternate !== null;
              var label = getFiberLabel(componentName, isMounted, phase);

              if (isCommitting && labelsInCurrentCommit.has(label)) {
                // During the commit phase, we don't show duplicate labels because
                // there is a fixed overhead for every measurement, and we don't
                // want to stretch the commit phase beyond necessary.
                return false;
              }

              labelsInCurrentCommit.add(label);
              var markName = getFiberMarkName(label, debugID);
              beginMark(markName);
              return true;
            };

            var clearFiberMark = function(fiber, phase) {
              var componentName = getComponentName(fiber.type) || "Unknown";
              var debugID = fiber._debugID;
              var isMounted = fiber.alternate !== null;
              var label = getFiberLabel(componentName, isMounted, phase);
              var markName = getFiberMarkName(label, debugID);
              clearMark(markName);
            };

            var endFiberMark = function(fiber, phase, warning) {
              var componentName = getComponentName(fiber.type) || "Unknown";
              var debugID = fiber._debugID;
              var isMounted = fiber.alternate !== null;
              var label = getFiberLabel(componentName, isMounted, phase);
              var markName = getFiberMarkName(label, debugID);
              endMark(label, markName, warning);
            };

            var shouldIgnoreFiber = function(fiber) {
              // Host components should be skipped in the timeline.
              // We could check typeof fiber.type, but does this work with RN?
              switch (fiber.tag) {
                case HostRoot:
                case HostComponent:
                case HostText:
                case HostPortal:
                case Fragment:
                case ContextProvider:
                case ContextConsumer:
                case Mode:
                  return true;

                default:
                  return false;
              }
            };

            var clearPendingPhaseMeasurement = function() {
              if (currentPhase !== null && currentPhaseFiber !== null) {
                clearFiberMark(currentPhaseFiber, currentPhase);
              }

              currentPhaseFiber = null;
              currentPhase = null;
              hasScheduledUpdateInCurrentPhase = false;
            };

            var pauseTimers = function() {
              // Stops all currently active measurements so that they can be resumed
              // if we continue in a later deferred loop from the same unit of work.
              var fiber = currentFiber;

              while (fiber) {
                if (fiber._debugIsCurrentlyTiming) {
                  endFiberMark(fiber, null, null);
                }

                fiber = fiber.return;
              }
            };

            var resumeTimersRecursively = function(fiber) {
              if (fiber.return !== null) {
                resumeTimersRecursively(fiber.return);
              }

              if (fiber._debugIsCurrentlyTiming) {
                beginFiberMark(fiber, null);
              }
            };

            var resumeTimers = function() {
              // Resumes all measurements that were active during the last deferred loop.
              if (currentFiber !== null) {
                resumeTimersRecursively(currentFiber);
              }
            };

            function recordEffect() {
              if (enableUserTimingAPI) {
                effectCountInCurrentCommit++;
              }
            }

            function recordScheduleUpdate() {
              if (enableUserTimingAPI) {
                if (isCommitting) {
                  hasScheduledUpdateInCurrentCommit = true;
                }

                if (
                  currentPhase !== null &&
                  currentPhase !== "componentWillMount" &&
                  currentPhase !== "componentWillReceiveProps"
                ) {
                  hasScheduledUpdateInCurrentPhase = true;
                }
              }
            }

            function startRequestCallbackTimer() {
              if (enableUserTimingAPI) {
                if (supportsUserTiming && !isWaitingForCallback) {
                  isWaitingForCallback = true;
                  beginMark("(Waiting for async callback...)");
                }
              }
            }

            function stopRequestCallbackTimer(didExpire, expirationTime) {
              if (enableUserTimingAPI) {
                if (supportsUserTiming) {
                  isWaitingForCallback = false;
                  var warning = didExpire
                    ? "React was blocked by main thread"
                    : null;
                  endMark(
                    "(Waiting for async callback... will force flush in " +
                      expirationTime +
                      " ms)",
                    "(Waiting for async callback...)",
                    warning
                  );
                }
              }
            }

            function startWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                } // If we pause, this is the fiber to unwind from.

                currentFiber = fiber;

                if (!beginFiberMark(fiber, null)) {
                  return;
                }

                fiber._debugIsCurrentlyTiming = true;
              }
            }

            function cancelWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                } // Remember we shouldn't complete measurement for this fiber.
                // Otherwise flamechart will be deep even for small updates.

                fiber._debugIsCurrentlyTiming = false;
                clearFiberMark(fiber, null);
              }
            }

            function stopWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                } // If we pause, its parent is the fiber to unwind from.

                currentFiber = fiber.return;

                if (!fiber._debugIsCurrentlyTiming) {
                  return;
                }

                fiber._debugIsCurrentlyTiming = false;
                endFiberMark(fiber, null, null);
              }
            }

            function stopFailedWorkTimer(fiber) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                  return;
                } // If we pause, its parent is the fiber to unwind from.

                currentFiber = fiber.return;

                if (!fiber._debugIsCurrentlyTiming) {
                  return;
                }

                fiber._debugIsCurrentlyTiming = false;
                var warning =
                  fiber.tag === SuspenseComponent
                    ? "Rendering was suspended"
                    : "An error was thrown inside this error boundary";
                endFiberMark(fiber, null, warning);
              }
            }

            function startPhaseTimer(fiber, phase) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                clearPendingPhaseMeasurement();

                if (!beginFiberMark(fiber, phase)) {
                  return;
                }

                currentPhaseFiber = fiber;
                currentPhase = phase;
              }
            }

            function stopPhaseTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                if (currentPhase !== null && currentPhaseFiber !== null) {
                  var warning = hasScheduledUpdateInCurrentPhase
                    ? "Scheduled a cascading update"
                    : null;
                  endFiberMark(currentPhaseFiber, currentPhase, warning);
                }

                currentPhase = null;
                currentPhaseFiber = null;
              }
            }

            function startWorkLoopTimer(nextUnitOfWork) {
              if (enableUserTimingAPI) {
                currentFiber = nextUnitOfWork;

                if (!supportsUserTiming) {
                  return;
                }

                commitCountInCurrentWorkLoop = 0; // This is top level call.
                // Any other measurements are performed within.

                beginMark("(React Tree Reconciliation)"); // Resume any measurements that were in progress during the last loop.

                resumeTimers();
              }
            }

            function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                var warning = null;

                if (interruptedBy !== null) {
                  if (interruptedBy.tag === HostRoot) {
                    warning =
                      "A top-level update interrupted the previous render";
                  } else {
                    var componentName =
                      getComponentName(interruptedBy.type) || "Unknown";
                    warning =
                      "An update to " +
                      componentName +
                      " interrupted the previous render";
                  }
                } else if (commitCountInCurrentWorkLoop > 1) {
                  warning = "There were cascading updates";
                }

                commitCountInCurrentWorkLoop = 0;
                var label = didCompleteRoot
                  ? "(React Tree Reconciliation: Completed Root)"
                  : "(React Tree Reconciliation: Yielded)"; // Pause any measurements until the next loop.

                pauseTimers();
                endMark(label, "(React Tree Reconciliation)", warning);
              }
            }

            function startCommitTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                isCommitting = true;
                hasScheduledUpdateInCurrentCommit = false;
                labelsInCurrentCommit.clear();
                beginMark("(Committing Changes)");
              }
            }

            function stopCommitTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                var warning = null;

                if (hasScheduledUpdateInCurrentCommit) {
                  warning = "Lifecycle hook scheduled a cascading update";
                } else if (commitCountInCurrentWorkLoop > 0) {
                  warning = "Caused by a cascading update in earlier commit";
                }

                hasScheduledUpdateInCurrentCommit = false;
                commitCountInCurrentWorkLoop++;
                isCommitting = false;
                labelsInCurrentCommit.clear();
                endMark(
                  "(Committing Changes)",
                  "(Committing Changes)",
                  warning
                );
              }
            }

            function startCommitSnapshotEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                effectCountInCurrentCommit = 0;
                beginMark("(Committing Snapshot Effects)");
              }
            }

            function stopCommitSnapshotEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark(
                  "(Committing Snapshot Effects: " + count + " Total)",
                  "(Committing Snapshot Effects)",
                  null
                );
              }
            }

            function startCommitHostEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                effectCountInCurrentCommit = 0;
                beginMark("(Committing Host Effects)");
              }
            }

            function stopCommitHostEffectsTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark(
                  "(Committing Host Effects: " + count + " Total)",
                  "(Committing Host Effects)",
                  null
                );
              }
            }

            function startCommitLifeCyclesTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                effectCountInCurrentCommit = 0;
                beginMark("(Calling Lifecycle Methods)");
              }
            }

            function stopCommitLifeCyclesTimer() {
              if (enableUserTimingAPI) {
                if (!supportsUserTiming) {
                  return;
                }

                var count = effectCountInCurrentCommit;
                effectCountInCurrentCommit = 0;
                endMark(
                  "(Calling Lifecycle Methods: " + count + " Total)",
                  "(Calling Lifecycle Methods)",
                  null
                );
              }
            }

            var valueStack = [];
            var fiberStack = void 0;
            {
              fiberStack = [];
            }
            var index = -1;

            function createCursor(defaultValue) {
              return {
                current: defaultValue
              };
            }

            function pop(cursor, fiber) {
              if (index < 0) {
                {
                  warningWithoutStack$1(false, "Unexpected pop.");
                }
                return;
              }

              {
                if (fiber !== fiberStack[index]) {
                  warningWithoutStack$1(false, "Unexpected Fiber popped.");
                }
              }
              cursor.current = valueStack[index];
              valueStack[index] = null;
              {
                fiberStack[index] = null;
              }
              index--;
            }

            function push(cursor, value, fiber) {
              index++;
              valueStack[index] = cursor.current;
              {
                fiberStack[index] = fiber;
              }
              cursor.current = value;
            }

            function checkThatStackIsEmpty() {
              {
                if (index !== -1) {
                  warningWithoutStack$1(
                    false,
                    "Expected an empty stack. Something was not reset properly."
                  );
                }
              }
            }

            function resetStackAfterFatalErrorInDev() {
              {
                index = -1;
                valueStack.length = 0;
                fiberStack.length = 0;
              }
            }

            var warnedAboutMissingGetChildContext = void 0;
            {
              warnedAboutMissingGetChildContext = {};
            }
            var emptyContextObject = {};
            {
              Object.freeze(emptyContextObject);
            } // A cursor to the current merged context object on the stack.

            var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

            var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
            // We use this to get access to the parent context after we have already
            // pushed the next context provider, and now need to merge their contexts.

            var previousContext = emptyContextObject;

            function getUnmaskedContext(
              workInProgress,
              Component,
              didPushOwnContextIfProvider
            ) {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                // If the fiber is a context provider itself, when we read its context
                // we may have already pushed its own child context on the stack. A context
                // provider should not "see" its own child context. Therefore we read the
                // previous (parent) context instead for a context provider.
                return previousContext;
              }

              return contextStackCursor.current;
            }

            function cacheContext(
              workInProgress,
              unmaskedContext,
              maskedContext
            ) {
              var instance = workInProgress.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }

            function getMaskedContext(workInProgress, unmaskedContext) {
              var type = workInProgress.type;
              var contextTypes = type.contextTypes;

              if (!contextTypes) {
                return emptyContextObject;
              } // Avoid recreating masked context unless unmasked context has changed.
              // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
              // This may trigger infinite loops if componentWillReceiveProps calls setState.

              var instance = workInProgress.stateNode;

              if (
                instance &&
                instance.__reactInternalMemoizedUnmaskedChildContext ===
                  unmaskedContext
              ) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }

              var context = {};

              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }

              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(
                  contextTypes,
                  context,
                  "context",
                  name,
                  getCurrentFiberStackInDev
                );
              } // Cache unmasked context so we can avoid recreating masked context unless necessary.
              // Context is created before the class component is instantiated so check for instance.

              if (instance) {
                cacheContext(workInProgress, unmaskedContext, context);
              }

              return context;
            }

            function hasContextChanged() {
              return didPerformWorkStackCursor.current;
            }

            function isContextProvider(type) {
              var childContextTypes = type.childContextTypes;
              return (
                childContextTypes !== null && childContextTypes !== undefined
              );
            }

            function popContext(fiber) {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }

            function popTopLevelContextObject(fiber) {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }

            function pushTopLevelContextObject(fiber, context, didChange) {
              !(contextStackCursor.current === emptyContextObject)
                ? invariant(
                    false,
                    "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }

            function processChildContext(fiber, type, parentContext) {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
              // It has only been added in Fiber to match the (unintentional) behavior in Stack.

              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";

                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    warningWithoutStack$1(
                      false,
                      "%s.childContextTypes is specified but there is no getChildContext() method " +
                        "on the instance. You can either define getChildContext() on %s or remove " +
                        "childContextTypes from it.",
                      componentName,
                      componentName
                    );
                  }
                }
                return parentContext;
              }

              var childContext = void 0;
              {
                setCurrentPhase("getChildContext");
              }
              startPhaseTimer(fiber, "getChildContext");
              childContext = instance.getChildContext();
              stopPhaseTimer();
              {
                setCurrentPhase(null);
              }

              for (var contextKey in childContext) {
                !(contextKey in childContextTypes)
                  ? invariant(
                      false,
                      '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
                      getComponentName(type) || "Unknown",
                      contextKey
                    )
                  : void 0;
              }

              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(
                  childContextTypes,
                  childContext,
                  "child context",
                  name, // In practice, there is one case in which we won't get a stack. It's when
                  // somebody calls unstable_renderSubtreeIntoContainer() and we process
                  // context from the parent component instance. The stack will be missing
                  // because it's outside of the reconciliation, and so the pointer has not
                  // been set. This is rare and doesn't matter. We'll also remove that API.
                  getCurrentFiberStackInDev
                );
              }
              return _assign({}, parentContext, childContext);
            }

            function pushContextProvider(workInProgress) {
              var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
              // If the instance does not exist yet, we will push null at first,
              // and replace it on the stack later when invalidating the context.

              var memoizedMergedChildContext =
                (instance &&
                  instance.__reactInternalMemoizedMergedChildContext) ||
                emptyContextObject; // Remember the parent context so we can merge with it later.
              // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

              previousContext = contextStackCursor.current;
              push(
                contextStackCursor,
                memoizedMergedChildContext,
                workInProgress
              );
              push(
                didPerformWorkStackCursor,
                didPerformWorkStackCursor.current,
                workInProgress
              );
              return true;
            }

            function invalidateContextProvider(
              workInProgress,
              type,
              didChange
            ) {
              var instance = workInProgress.stateNode;
              !instance
                ? invariant(
                    false,
                    "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;

              if (didChange) {
                // Merge parent and own context.
                // Skip this if we're not updating due to sCU.
                // This avoids unnecessarily recomputing memoized values.
                var mergedContext = processChildContext(
                  workInProgress,
                  type,
                  previousContext
                );
                instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
                // It is important to unwind the context in the reverse order.

                pop(didPerformWorkStackCursor, workInProgress);
                pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

                push(contextStackCursor, mergedContext, workInProgress);
                push(didPerformWorkStackCursor, didChange, workInProgress);
              } else {
                pop(didPerformWorkStackCursor, workInProgress);
                push(didPerformWorkStackCursor, didChange, workInProgress);
              }
            }

            function findCurrentUnmaskedContext(fiber) {
              // Currently this is only used with renderSubtreeIntoContainer; not sure if it
              // makes sense elsewhere
              !(isFiberMounted(fiber) && fiber.tag === ClassComponent)
                ? invariant(
                    false,
                    "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              var node = fiber;

              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;

                  case ClassComponent: {
                    var Component = node.type;

                    if (isContextProvider(Component)) {
                      return node.stateNode
                        .__reactInternalMemoizedMergedChildContext;
                    }

                    break;
                  }
                }

                node = node.return;
              } while (node !== null);

              invariant(
                false,
                "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."
              );
            }

            var onCommitFiberRoot = null;
            var onCommitFiberUnmount = null;
            var hasLoggedError = false;

            function catchErrors(fn) {
              return function(arg) {
                try {
                  return fn(arg);
                } catch (err) {
                  if (true && !hasLoggedError) {
                    hasLoggedError = true;
                    warningWithoutStack$1(
                      false,
                      "React DevTools encountered an error: %s",
                      err
                    );
                  }
                }
              };
            }

            var isDevToolsPresent =
              typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";

            function injectInternals(internals) {
              if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
                // No DevTools
                return false;
              }

              var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

              if (hook.isDisabled) {
                // This isn't a real property on the hook, but it can be set to opt out
                // of DevTools integration and associated warnings and logs.
                // https://github.com/facebook/react/issues/3877
                return true;
              }

              if (!hook.supportsFiber) {
                {
                  warningWithoutStack$1(
                    false,
                    "The installed version of React DevTools is too old and will not work " +
                      "with the current version of React. Please update React DevTools. " +
                      "https://fb.me/react-devtools"
                  );
                } // DevTools exists, even though it doesn't support Fiber.

                return true;
              }

              try {
                var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

                onCommitFiberRoot = catchErrors(function(root) {
                  return hook.onCommitFiberRoot(rendererID, root);
                });
                onCommitFiberUnmount = catchErrors(function(fiber) {
                  return hook.onCommitFiberUnmount(rendererID, fiber);
                });
              } catch (err) {
                // Catch all errors because it is unsafe to throw during initialization.
                {
                  warningWithoutStack$1(
                    false,
                    "React DevTools encountered an error: %s.",
                    err
                  );
                }
              } // DevTools exists

              return true;
            }

            function onCommitRoot(root) {
              if (typeof onCommitFiberRoot === "function") {
                onCommitFiberRoot(root);
              }
            }

            function onCommitUnmount(fiber) {
              if (typeof onCommitFiberUnmount === "function") {
                onCommitFiberUnmount(fiber);
              }
            } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
            // Math.pow(2, 30) - 1
            // 0b111111111111111111111111111111

            var maxSigned31BitInt = 1073741823;
            var NoWork = 0;
            var Never = 1;
            var Sync = maxSigned31BitInt;
            var UNIT_SIZE = 10;
            var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1; // 1 unit of expiration time represents 10ms.

            function msToExpirationTime(ms) {
              // Always add an offset so that we don't clash with the magic number for NoWork.
              return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);
            }

            function expirationTimeToMs(expirationTime) {
              return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
            }

            function ceiling(num, precision) {
              return (((num / precision) | 0) + 1) * precision;
            }

            function computeExpirationBucket(
              currentTime,
              expirationInMs,
              bucketSizeMs
            ) {
              return (
                MAGIC_NUMBER_OFFSET -
                ceiling(
                  MAGIC_NUMBER_OFFSET -
                    currentTime +
                    expirationInMs / UNIT_SIZE,
                  bucketSizeMs / UNIT_SIZE
                )
              );
            }

            var LOW_PRIORITY_EXPIRATION = 5000;
            var LOW_PRIORITY_BATCH_SIZE = 250;

            function computeAsyncExpiration(currentTime) {
              return computeExpirationBucket(
                currentTime,
                LOW_PRIORITY_EXPIRATION,
                LOW_PRIORITY_BATCH_SIZE
              );
            } // We intentionally set a higher expiration time for interactive updates in
            // dev than in production.
            //
            // If the main thread is being blocked so long that you hit the expiration,
            // it's a problem that could be solved with better scheduling.
            //
            // People will be more likely to notice this and fix it with the long
            // expiration time in development.
            //
            // In production we opt for better UX at the risk of masking scheduling
            // problems, by expiring fast.

            var HIGH_PRIORITY_EXPIRATION = 500;
            var HIGH_PRIORITY_BATCH_SIZE = 100;

            function computeInteractiveExpiration(currentTime) {
              return computeExpirationBucket(
                currentTime,
                HIGH_PRIORITY_EXPIRATION,
                HIGH_PRIORITY_BATCH_SIZE
              );
            }

            var NoContext = 0;
            var ConcurrentMode = 1;
            var StrictMode = 2;
            var ProfileMode = 4;
            var hasBadMapPolyfill = void 0;
            {
              hasBadMapPolyfill = false;

              try {
                var nonExtensibleObject = Object.preventExtensions({});
                var testMap = new Map([[nonExtensibleObject, null]]);
                var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
                // https://github.com/rollup/rollup/issues/1771
                // TODO: we can remove these if Rollup fixes the bug.

                testMap.set(0, 0);
                testSet.add(0);
              } catch (e) {
                // TODO: Consider warning about bad polyfills
                hasBadMapPolyfill = true;
              }
            } // A Fiber is work on a Component that needs to be done or was done. There can
            // be more than one per component.

            var debugCounter = void 0;
            {
              debugCounter = 1;
            }

            function FiberNode(tag, pendingProps, key, mode) {
              // Instance
              this.tag = tag;
              this.key = key;
              this.elementType = null;
              this.type = null;
              this.stateNode = null; // Fiber

              this.return = null;
              this.child = null;
              this.sibling = null;
              this.index = 0;
              this.ref = null;
              this.pendingProps = pendingProps;
              this.memoizedProps = null;
              this.updateQueue = null;
              this.memoizedState = null;
              this.firstContextDependency = null;
              this.mode = mode; // Effects

              this.effectTag = NoEffect;
              this.nextEffect = null;
              this.firstEffect = null;
              this.lastEffect = null;
              this.expirationTime = NoWork;
              this.childExpirationTime = NoWork;
              this.alternate = null;

              if (enableProfilerTimer) {
                this.actualDuration = 0;
                this.actualStartTime = -1;
                this.selfBaseDuration = 0;
                this.treeBaseDuration = 0;
              }

              {
                this._debugID = debugCounter++;
                this._debugSource = null;
                this._debugOwner = null;
                this._debugIsCurrentlyTiming = false;

                if (
                  !hasBadMapPolyfill &&
                  typeof Object.preventExtensions === "function"
                ) {
                  Object.preventExtensions(this);
                }
              }
            } // This is a constructor function, rather than a POJO constructor, still
            // please ensure we do the following:
            // 1) Nobody should add any instance methods on this. Instance methods can be
            //    more difficult to predict when they get optimized and they are almost
            //    never inlined properly in static compilers.
            // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
            //    always know when it is a fiber.
            // 3) We might want to experiment with using numeric keys since they are easier
            //    to optimize in a non-JIT environment.
            // 4) We can easily go from a constructor to a createFiber object literal if that
            //    is faster.
            // 5) It should be easy to port this to a C struct and keep a C implementation
            //    compatible.

            var createFiber = function(tag, pendingProps, key, mode) {
              // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
              return new FiberNode(tag, pendingProps, key, mode);
            };

            function shouldConstruct(Component) {
              var prototype = Component.prototype;
              return !!(prototype && prototype.isReactComponent);
            }

            function isSimpleFunctionComponent(type) {
              return (
                typeof type === "function" &&
                !shouldConstruct(type) &&
                type.defaultProps === undefined
              );
            }

            function resolveLazyComponentTag(Component) {
              if (typeof Component === "function") {
                return shouldConstruct(Component)
                  ? ClassComponent
                  : FunctionComponent;
              } else if (Component !== undefined && Component !== null) {
                var $$typeof = Component.$$typeof;

                if ($$typeof === REACT_FORWARD_REF_TYPE) {
                  return ForwardRef;
                }

                if ($$typeof === REACT_MEMO_TYPE) {
                  return MemoComponent;
                }
              }

              return IndeterminateComponent;
            } // This is used to create an alternate fiber to do work on.

            function createWorkInProgress(
              current,
              pendingProps,
              expirationTime
            ) {
              var workInProgress = current.alternate;

              if (workInProgress === null) {
                // We use a double buffering pooling technique because we know that we'll
                // only ever need at most two versions of a tree. We pool the "other" unused
                // node that we're free to reuse. This is lazily created to avoid allocating
                // extra objects for things that are never updated. It also allow us to
                // reclaim the extra memory if needed.
                workInProgress = createFiber(
                  current.tag,
                  pendingProps,
                  current.key,
                  current.mode
                );
                workInProgress.elementType = current.elementType;
                workInProgress.type = current.type;
                workInProgress.stateNode = current.stateNode;
                {
                  // DEV-only fields
                  workInProgress._debugID = current._debugID;
                  workInProgress._debugSource = current._debugSource;
                  workInProgress._debugOwner = current._debugOwner;
                }
                workInProgress.alternate = current;
                current.alternate = workInProgress;
              } else {
                workInProgress.pendingProps = pendingProps; // We already have an alternate.
                // Reset the effect tag.

                workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

                workInProgress.nextEffect = null;
                workInProgress.firstEffect = null;
                workInProgress.lastEffect = null;

                if (enableProfilerTimer) {
                  // We intentionally reset, rather than copy, actualDuration & actualStartTime.
                  // This prevents time from endlessly accumulating in new commits.
                  // This has the downside of resetting values for different priority renders,
                  // But works for yielding (the common case) and should support resuming.
                  workInProgress.actualDuration = 0;
                  workInProgress.actualStartTime = -1;
                }
              }

              workInProgress.childExpirationTime = current.childExpirationTime;
              workInProgress.expirationTime = current.expirationTime;
              workInProgress.child = current.child;
              workInProgress.memoizedProps = current.memoizedProps;
              workInProgress.memoizedState = current.memoizedState;
              workInProgress.updateQueue = current.updateQueue;
              workInProgress.firstContextDependency =
                current.firstContextDependency; // These will be overridden during the parent's reconciliation

              workInProgress.sibling = current.sibling;
              workInProgress.index = current.index;
              workInProgress.ref = current.ref;

              if (enableProfilerTimer) {
                workInProgress.selfBaseDuration = current.selfBaseDuration;
                workInProgress.treeBaseDuration = current.treeBaseDuration;
              }

              return workInProgress;
            }

            function createHostRootFiber(isConcurrent) {
              var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

              if (enableProfilerTimer && isDevToolsPresent) {
                // Always collect profile timings when DevTools are present.
                // This enables DevTools to start capturing timing at any point–
                // Without some nodes in the tree having empty base times.
                mode |= ProfileMode;
              }

              return createFiber(HostRoot, null, null, mode);
            }

            function createFiberFromTypeAndProps(
              type, // React$ElementType
              key,
              pendingProps,
              owner,
              mode,
              expirationTime
            ) {
              var fiber = void 0;
              var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

              var resolvedType = type;

              if (typeof type === "function") {
                if (shouldConstruct(type)) {
                  fiberTag = ClassComponent;
                }
              } else if (typeof type === "string") {
                fiberTag = HostComponent;
              } else {
                getTag: switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(
                      pendingProps.children,
                      mode,
                      expirationTime,
                      key
                    );

                  case REACT_CONCURRENT_MODE_TYPE:
                    return createFiberFromMode(
                      pendingProps,
                      mode | ConcurrentMode | StrictMode,
                      expirationTime,
                      key
                    );

                  case REACT_STRICT_MODE_TYPE:
                    return createFiberFromMode(
                      pendingProps,
                      mode | StrictMode,
                      expirationTime,
                      key
                    );

                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(
                      pendingProps,
                      mode,
                      expirationTime,
                      key
                    );

                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(
                      pendingProps,
                      mode,
                      expirationTime,
                      key
                    );

                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;

                        case REACT_CONTEXT_TYPE:
                          // This is a consumer
                          fiberTag = ContextConsumer;
                          break getTag;

                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          break getTag;

                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;

                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }

                    var info = "";
                    {
                      if (
                        type === undefined ||
                        (typeof type === "object" &&
                          type !== null &&
                          Object.keys(type).length === 0)
                      ) {
                        info +=
                          " You likely forgot to export your component from the file " +
                          "it's defined in, or you might have mixed up default and " +
                          "named imports.";
                      }

                      var ownerName = owner
                        ? getComponentName(owner.type)
                        : null;

                      if (ownerName) {
                        info +=
                          "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    invariant(
                      false,
                      "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
                      type == null ? type : typeof type,
                      info
                    );
                  }
                }
              }

              fiber = createFiber(fiberTag, pendingProps, key, mode);
              fiber.elementType = type;
              fiber.type = resolvedType;
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromElement(element, mode, expirationTime) {
              var owner = null;
              {
                owner = element._owner;
              }
              var type = element.type;
              var key = element.key;
              var pendingProps = element.props;
              var fiber = createFiberFromTypeAndProps(
                type,
                key,
                pendingProps,
                owner,
                mode,
                expirationTime
              );
              {
                fiber._debugSource = element._source;
                fiber._debugOwner = element._owner;
              }
              return fiber;
            }

            function createFiberFromFragment(
              elements,
              mode,
              expirationTime,
              key
            ) {
              var fiber = createFiber(Fragment, elements, key, mode);
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromProfiler(
              pendingProps,
              mode,
              expirationTime,
              key
            ) {
              {
                if (
                  typeof pendingProps.id !== "string" ||
                  typeof pendingProps.onRender !== "function"
                ) {
                  warningWithoutStack$1(
                    false,
                    'Profiler must specify an "id" string and "onRender" function as props'
                  );
                }
              }
              var fiber = createFiber(
                Profiler,
                pendingProps,
                key,
                mode | ProfileMode
              ); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

              fiber.elementType = REACT_PROFILER_TYPE;
              fiber.type = REACT_PROFILER_TYPE;
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromMode(
              pendingProps,
              mode,
              expirationTime,
              key
            ) {
              var fiber = createFiber(Mode, pendingProps, key, mode); // TODO: The Mode fiber shouldn't have a type. It has a tag.

              var type =
                (mode & ConcurrentMode) === NoContext
                  ? REACT_STRICT_MODE_TYPE
                  : REACT_CONCURRENT_MODE_TYPE;
              fiber.elementType = type;
              fiber.type = type;
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromSuspense(
              pendingProps,
              mode,
              expirationTime,
              key
            ) {
              var fiber = createFiber(
                SuspenseComponent,
                pendingProps,
                key,
                mode
              ); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

              var type = REACT_SUSPENSE_TYPE;
              fiber.elementType = type;
              fiber.type = type;
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromText(content, mode, expirationTime) {
              var fiber = createFiber(HostText, content, null, mode);
              fiber.expirationTime = expirationTime;
              return fiber;
            }

            function createFiberFromHostInstanceForDeletion() {
              var fiber = createFiber(HostComponent, null, null, NoContext); // TODO: These should not need a type.

              fiber.elementType = "DELETED";
              fiber.type = "DELETED";
              return fiber;
            }

            function createFiberFromPortal(portal, mode, expirationTime) {
              var pendingProps =
                portal.children !== null ? portal.children : [];
              var fiber = createFiber(
                HostPortal,
                pendingProps,
                portal.key,
                mode
              );
              fiber.expirationTime = expirationTime;
              fiber.stateNode = {
                containerInfo: portal.containerInfo,
                pendingChildren: null,
                // Used by persistent updates
                implementation: portal.implementation
              };
              return fiber;
            } // Used for stashing WIP properties to replay failed work in DEV.

            function assignFiberPropertiesInDEV(target, source) {
              if (target === null) {
                // This Fiber's initial properties will always be overwritten.
                // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
                target = createFiber(
                  IndeterminateComponent,
                  null,
                  null,
                  NoContext
                );
              } // This is intentionally written as a list of all properties.
              // We tried to use Object.assign() instead but this is called in
              // the hottest path, and Object.assign() was too slow:
              // https://github.com/facebook/react/issues/12502
              // This code is DEV-only so size is not a concern.

              target.tag = source.tag;
              target.key = source.key;
              target.elementType = source.elementType;
              target.type = source.type;
              target.stateNode = source.stateNode;
              target.return = source.return;
              target.child = source.child;
              target.sibling = source.sibling;
              target.index = source.index;
              target.ref = source.ref;
              target.pendingProps = source.pendingProps;
              target.memoizedProps = source.memoizedProps;
              target.updateQueue = source.updateQueue;
              target.memoizedState = source.memoizedState;
              target.firstContextDependency = source.firstContextDependency;
              target.mode = source.mode;
              target.effectTag = source.effectTag;
              target.nextEffect = source.nextEffect;
              target.firstEffect = source.firstEffect;
              target.lastEffect = source.lastEffect;
              target.expirationTime = source.expirationTime;
              target.childExpirationTime = source.childExpirationTime;
              target.alternate = source.alternate;

              if (enableProfilerTimer) {
                target.actualDuration = source.actualDuration;
                target.actualStartTime = source.actualStartTime;
                target.selfBaseDuration = source.selfBaseDuration;
                target.treeBaseDuration = source.treeBaseDuration;
              }

              target._debugID = source._debugID;
              target._debugSource = source._debugSource;
              target._debugOwner = source._debugOwner;
              target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
              return target;
            } // TODO: This should be lifted into the renderer.
            // The following attributes are only used by interaction tracing builds.
            // They enable interactions to be associated with their async work,
            // And expose interaction metadata to the React DevTools Profiler plugin.
            // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
            // Exported FiberRoot type includes all properties,
            // To avoid requiring potentially error-prone :any casts throughout the project.
            // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
            // The types are defined separately within this file to ensure they stay in sync.
            // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)

            function createFiberRoot(containerInfo, isConcurrent, hydrate) {
              // Cyclic construction. This cheats the type system right now because
              // stateNode is any.
              var uninitializedFiber = createHostRootFiber(isConcurrent);
              var root = void 0;

              if (enableSchedulerTracing) {
                root = {
                  current: uninitializedFiber,
                  containerInfo: containerInfo,
                  pendingChildren: null,
                  earliestPendingTime: NoWork,
                  latestPendingTime: NoWork,
                  earliestSuspendedTime: NoWork,
                  latestSuspendedTime: NoWork,
                  latestPingedTime: NoWork,
                  didError: false,
                  pendingCommitExpirationTime: NoWork,
                  finishedWork: null,
                  timeoutHandle: noTimeout,
                  context: null,
                  pendingContext: null,
                  hydrate: hydrate,
                  nextExpirationTimeToWorkOn: NoWork,
                  expirationTime: NoWork,
                  firstBatch: null,
                  nextScheduledRoot: null,
                  interactionThreadID: tracing.unstable_getThreadID(),
                  memoizedInteractions: new Set(),
                  pendingInteractionMap: new Map()
                };
              } else {
                root = {
                  current: uninitializedFiber,
                  containerInfo: containerInfo,
                  pendingChildren: null,
                  earliestPendingTime: NoWork,
                  latestPendingTime: NoWork,
                  earliestSuspendedTime: NoWork,
                  latestSuspendedTime: NoWork,
                  latestPingedTime: NoWork,
                  didError: false,
                  pendingCommitExpirationTime: NoWork,
                  finishedWork: null,
                  timeoutHandle: noTimeout,
                  context: null,
                  pendingContext: null,
                  hydrate: hydrate,
                  nextExpirationTimeToWorkOn: NoWork,
                  expirationTime: NoWork,
                  firstBatch: null,
                  nextScheduledRoot: null
                };
              }

              uninitializedFiber.stateNode = root; // The reason for the way the Flow types are structured in this file,
              // Is to avoid needing :any casts everywhere interaction tracing fields are used.
              // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
              // $FlowFixMe Remove this :any cast and replace it with something better.

              return root;
            }
            /**
             * Forked from fbjs/warning:
             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
             *
             * Only change is we use console.warn instead of console.error,
             * and do nothing when 'console' is not supported.
             * This really simplifies the code.
             * ---
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var lowPriorityWarning = function() {};

            {
              var printWarning = function(format) {
                for (
                  var _len = arguments.length,
                    args = Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }

                var argIndex = 0;
                var message =
                  "Warning: " +
                  format.replace(/%s/g, function() {
                    return args[argIndex++];
                  });

                if (typeof console !== "undefined") {
                  console.warn(message);
                }

                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };

              lowPriorityWarning = function(condition, format) {
                if (format === undefined) {
                  throw new Error(
                    "`lowPriorityWarning(condition, format, ...args)` requires a warning " +
                      "message argument"
                  );
                }

                if (!condition) {
                  for (
                    var _len2 = arguments.length,
                      args = Array(_len2 > 2 ? _len2 - 2 : 0),
                      _key2 = 2;
                    _key2 < _len2;
                    _key2++
                  ) {
                    args[_key2 - 2] = arguments[_key2];
                  }

                  printWarning.apply(undefined, [format].concat(args));
                }
              };
            }
            var lowPriorityWarning$1 = lowPriorityWarning;
            var ReactStrictModeWarnings = {
              discardPendingWarnings: function() {},
              flushPendingDeprecationWarnings: function() {},
              flushPendingUnsafeLifecycleWarnings: function() {},
              recordDeprecationWarnings: function(fiber, instance) {},
              recordUnsafeLifecycleWarnings: function(fiber, instance) {},
              recordLegacyContextWarning: function(fiber, instance) {},
              flushLegacyContextWarning: function() {}
            };
            {
              var LIFECYCLE_SUGGESTIONS = {
                UNSAFE_componentWillMount: "componentDidMount",
                UNSAFE_componentWillReceiveProps:
                  "static getDerivedStateFromProps",
                UNSAFE_componentWillUpdate: "componentDidUpdate"
              };
              var pendingComponentWillMountWarnings = [];
              var pendingComponentWillReceivePropsWarnings = [];
              var pendingComponentWillUpdateWarnings = [];
              var pendingUnsafeLifecycleWarnings = new Map();
              var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

              var didWarnAboutDeprecatedLifecycles = new Set();
              var didWarnAboutUnsafeLifecycles = new Set();
              var didWarnAboutLegacyContext = new Set();

              var setToSortedString = function(set) {
                var array = [];
                set.forEach(function(value) {
                  array.push(value);
                });
                return array.sort().join(", ");
              };

              ReactStrictModeWarnings.discardPendingWarnings = function() {
                pendingComponentWillMountWarnings = [];
                pendingComponentWillReceivePropsWarnings = [];
                pendingComponentWillUpdateWarnings = [];
                pendingUnsafeLifecycleWarnings = new Map();
                pendingLegacyContextWarning = new Map();
              };

              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
                pendingUnsafeLifecycleWarnings.forEach(function(
                  lifecycleWarningsMap,
                  strictRoot
                ) {
                  var lifecyclesWarningMesages = [];
                  Object.keys(lifecycleWarningsMap).forEach(function(
                    lifecycle
                  ) {
                    var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

                    if (lifecycleWarnings.length > 0) {
                      var componentNames = new Set();
                      lifecycleWarnings.forEach(function(fiber) {
                        componentNames.add(
                          getComponentName(fiber.type) || "Component"
                        );
                        didWarnAboutUnsafeLifecycles.add(fiber.type);
                      });
                      var formatted = lifecycle.replace("UNSAFE_", "");
                      var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
                      var sortedComponentNames = setToSortedString(
                        componentNames
                      );
                      lifecyclesWarningMesages.push(
                        formatted +
                          ": Please update the following components to use " +
                          (suggestion + " instead: " + sortedComponentNames)
                      );
                    }
                  });

                  if (lifecyclesWarningMesages.length > 0) {
                    var strictRootComponentStack = getStackByFiberInDevAndProd(
                      strictRoot
                    );
                    warningWithoutStack$1(
                      false,
                      "Unsafe lifecycle methods were found within a strict-mode tree:%s" +
                        "\n\n%s" +
                        "\n\nLearn more about this warning here:" +
                        "\nhttps://fb.me/react-strict-mode-warnings",
                      strictRootComponentStack,
                      lifecyclesWarningMesages.join("\n\n")
                    );
                  }
                });
                pendingUnsafeLifecycleWarnings = new Map();
              };

              var findStrictRoot = function(fiber) {
                var maybeStrictRoot = null;
                var node = fiber;

                while (node !== null) {
                  if (node.mode & StrictMode) {
                    maybeStrictRoot = node;
                  }

                  node = node.return;
                }

                return maybeStrictRoot;
              };

              ReactStrictModeWarnings.flushPendingDeprecationWarnings = function() {
                if (pendingComponentWillMountWarnings.length > 0) {
                  var uniqueNames = new Set();
                  pendingComponentWillMountWarnings.forEach(function(fiber) {
                    uniqueNames.add(
                      getComponentName(fiber.type) || "Component"
                    );
                    didWarnAboutDeprecatedLifecycles.add(fiber.type);
                  });
                  var sortedNames = setToSortedString(uniqueNames);
                  lowPriorityWarning$1(
                    false,
                    "componentWillMount is deprecated and will be removed in the next major version. " +
                      "Use componentDidMount instead. As a temporary workaround, " +
                      "you can rename to UNSAFE_componentWillMount." +
                      "\n\nPlease update the following components: %s" +
                      "\n\nLearn more about this warning here:" +
                      "\nhttps://fb.me/react-async-component-lifecycle-hooks",
                    sortedNames
                  );
                  pendingComponentWillMountWarnings = [];
                }

                if (pendingComponentWillReceivePropsWarnings.length > 0) {
                  var _uniqueNames = new Set();

                  pendingComponentWillReceivePropsWarnings.forEach(function(
                    fiber
                  ) {
                    _uniqueNames.add(
                      getComponentName(fiber.type) || "Component"
                    );

                    didWarnAboutDeprecatedLifecycles.add(fiber.type);
                  });

                  var _sortedNames = setToSortedString(_uniqueNames);

                  lowPriorityWarning$1(
                    false,
                    "componentWillReceiveProps is deprecated and will be removed in the next major version. " +
                      "Use static getDerivedStateFromProps instead." +
                      "\n\nPlease update the following components: %s" +
                      "\n\nLearn more about this warning here:" +
                      "\nhttps://fb.me/react-async-component-lifecycle-hooks",
                    _sortedNames
                  );
                  pendingComponentWillReceivePropsWarnings = [];
                }

                if (pendingComponentWillUpdateWarnings.length > 0) {
                  var _uniqueNames2 = new Set();

                  pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                    _uniqueNames2.add(
                      getComponentName(fiber.type) || "Component"
                    );

                    didWarnAboutDeprecatedLifecycles.add(fiber.type);
                  });

                  var _sortedNames2 = setToSortedString(_uniqueNames2);

                  lowPriorityWarning$1(
                    false,
                    "componentWillUpdate is deprecated and will be removed in the next major version. " +
                      "Use componentDidUpdate instead. As a temporary workaround, " +
                      "you can rename to UNSAFE_componentWillUpdate." +
                      "\n\nPlease update the following components: %s" +
                      "\n\nLearn more about this warning here:" +
                      "\nhttps://fb.me/react-async-component-lifecycle-hooks",
                    _sortedNames2
                  );
                  pendingComponentWillUpdateWarnings = [];
                }
              };

              ReactStrictModeWarnings.recordDeprecationWarnings = function(
                fiber,
                instance
              ) {
                // Dedup strategy: Warn once per component.
                if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
                  return;
                } // Don't warn about react-lifecycles-compat polyfilled components.

                if (
                  typeof instance.componentWillMount === "function" &&
                  instance.componentWillMount.__suppressDeprecationWarning !==
                    true
                ) {
                  pendingComponentWillMountWarnings.push(fiber);
                }

                if (
                  typeof instance.componentWillReceiveProps === "function" &&
                  instance.componentWillReceiveProps
                    .__suppressDeprecationWarning !== true
                ) {
                  pendingComponentWillReceivePropsWarnings.push(fiber);
                }

                if (
                  typeof instance.componentWillUpdate === "function" &&
                  instance.componentWillUpdate.__suppressDeprecationWarning !==
                    true
                ) {
                  pendingComponentWillUpdateWarnings.push(fiber);
                }
              };

              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(
                fiber,
                instance
              ) {
                var strictRoot = findStrictRoot(fiber);

                if (strictRoot === null) {
                  warningWithoutStack$1(
                    false,
                    "Expected to find a StrictMode component in a strict mode tree. " +
                      "This error is likely caused by a bug in React. Please file an issue."
                  );
                  return;
                } // Dedup strategy: Warn once per component.
                // This is difficult to track any other way since component names
                // are often vague and are likely to collide between 3rd party libraries.
                // An expand property is probably okay to use here since it's DEV-only,
                // and will only be set in the event of serious warnings.

                if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                  return;
                }

                var warningsForRoot = void 0;

                if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
                  warningsForRoot = {
                    UNSAFE_componentWillMount: [],
                    UNSAFE_componentWillReceiveProps: [],
                    UNSAFE_componentWillUpdate: []
                  };
                  pendingUnsafeLifecycleWarnings.set(
                    strictRoot,
                    warningsForRoot
                  );
                } else {
                  warningsForRoot = pendingUnsafeLifecycleWarnings.get(
                    strictRoot
                  );
                }

                var unsafeLifecycles = [];

                if (
                  (typeof instance.componentWillMount === "function" &&
                    instance.componentWillMount.__suppressDeprecationWarning !==
                      true) ||
                  typeof instance.UNSAFE_componentWillMount === "function"
                ) {
                  unsafeLifecycles.push("UNSAFE_componentWillMount");
                }

                if (
                  (typeof instance.componentWillReceiveProps === "function" &&
                    instance.componentWillReceiveProps
                      .__suppressDeprecationWarning !== true) ||
                  typeof instance.UNSAFE_componentWillReceiveProps ===
                    "function"
                ) {
                  unsafeLifecycles.push("UNSAFE_componentWillReceiveProps");
                }

                if (
                  (typeof instance.componentWillUpdate === "function" &&
                    instance.componentWillUpdate
                      .__suppressDeprecationWarning !== true) ||
                  typeof instance.UNSAFE_componentWillUpdate === "function"
                ) {
                  unsafeLifecycles.push("UNSAFE_componentWillUpdate");
                }

                if (unsafeLifecycles.length > 0) {
                  unsafeLifecycles.forEach(function(lifecycle) {
                    warningsForRoot[lifecycle].push(fiber);
                  });
                }
              };

              ReactStrictModeWarnings.recordLegacyContextWarning = function(
                fiber,
                instance
              ) {
                var strictRoot = findStrictRoot(fiber);

                if (strictRoot === null) {
                  warningWithoutStack$1(
                    false,
                    "Expected to find a StrictMode component in a strict mode tree. " +
                      "This error is likely caused by a bug in React. Please file an issue."
                  );
                  return;
                } // Dedup strategy: Warn once per component.

                if (didWarnAboutLegacyContext.has(fiber.type)) {
                  return;
                }

                var warningsForRoot = pendingLegacyContextWarning.get(
                  strictRoot
                );

                if (
                  fiber.type.contextTypes != null ||
                  fiber.type.childContextTypes != null ||
                  (instance !== null &&
                    typeof instance.getChildContext === "function")
                ) {
                  if (warningsForRoot === undefined) {
                    warningsForRoot = [];
                    pendingLegacyContextWarning.set(
                      strictRoot,
                      warningsForRoot
                    );
                  }

                  warningsForRoot.push(fiber);
                }
              };

              ReactStrictModeWarnings.flushLegacyContextWarning = function() {
                pendingLegacyContextWarning.forEach(function(
                  fiberArray,
                  strictRoot
                ) {
                  var uniqueNames = new Set();
                  fiberArray.forEach(function(fiber) {
                    uniqueNames.add(
                      getComponentName(fiber.type) || "Component"
                    );
                    didWarnAboutLegacyContext.add(fiber.type);
                  });
                  var sortedNames = setToSortedString(uniqueNames);
                  var strictRootComponentStack = getStackByFiberInDevAndProd(
                    strictRoot
                  );
                  warningWithoutStack$1(
                    false,
                    "Legacy context API has been detected within a strict-mode tree: %s" +
                      "\n\nPlease update the following components: %s" +
                      "\n\nLearn more about this warning here:" +
                      "\nhttps://fb.me/react-strict-mode-warnings",
                    strictRootComponentStack,
                    sortedNames
                  );
                });
              };
            } // This lets us hook into Fiber to debug what it's doing.
            // See https://github.com/facebook/react/pull/8033.
            // This is not part of the public API, not even for React DevTools.
            // You may only inject a debugTool if you work on React Fiber itself.

            var ReactFiberInstrumentation = {
              debugTool: null
            };
            var ReactFiberInstrumentation_1 = ReactFiberInstrumentation; // TODO: Offscreen updates should never suspend. However, a promise that
            // suspended inside an offscreen subtree should be able to ping at the priority
            // of the outer render.

            function markPendingPriorityLevel(root, expirationTime) {
              // If there's a gap between completing a failed root and retrying it,
              // additional updates may be scheduled. Clear `didError`, in case the update
              // is sufficient to fix the error.
              root.didError = false; // Update the latest and earliest pending times

              var earliestPendingTime = root.earliestPendingTime;

              if (earliestPendingTime === NoWork) {
                // No other pending updates.
                root.earliestPendingTime = root.latestPendingTime = expirationTime;
              } else {
                if (earliestPendingTime < expirationTime) {
                  // This is the earliest pending update.
                  root.earliestPendingTime = expirationTime;
                } else {
                  var latestPendingTime = root.latestPendingTime;

                  if (latestPendingTime > expirationTime) {
                    // This is the latest pending update
                    root.latestPendingTime = expirationTime;
                  }
                }
              }

              findNextExpirationTimeToWorkOn(expirationTime, root);
            }

            function markCommittedPriorityLevels(root, earliestRemainingTime) {
              root.didError = false;

              if (earliestRemainingTime === NoWork) {
                // Fast path. There's no remaining work. Clear everything.
                root.earliestPendingTime = NoWork;
                root.latestPendingTime = NoWork;
                root.earliestSuspendedTime = NoWork;
                root.latestSuspendedTime = NoWork;
                root.latestPingedTime = NoWork;
                findNextExpirationTimeToWorkOn(NoWork, root);
                return;
              } // Let's see if the previous latest known pending level was just flushed.

              var latestPendingTime = root.latestPendingTime;

              if (latestPendingTime !== NoWork) {
                if (latestPendingTime > earliestRemainingTime) {
                  // We've flushed all the known pending levels.
                  root.earliestPendingTime = root.latestPendingTime = NoWork;
                } else {
                  var earliestPendingTime = root.earliestPendingTime;

                  if (earliestPendingTime > earliestRemainingTime) {
                    // We've flushed the earliest known pending level. Set this to the
                    // latest pending time.
                    root.earliestPendingTime = root.latestPendingTime;
                  }
                }
              } // Now let's handle the earliest remaining level in the whole tree. We need to
              // decide whether to treat it as a pending level or as suspended. Check
              // it falls within the range of known suspended levels.

              var earliestSuspendedTime = root.earliestSuspendedTime;

              if (earliestSuspendedTime === NoWork) {
                // There's no suspended work. Treat the earliest remaining level as a
                // pending level.
                markPendingPriorityLevel(root, earliestRemainingTime);
                findNextExpirationTimeToWorkOn(NoWork, root);
                return;
              }

              var latestSuspendedTime = root.latestSuspendedTime;

              if (earliestRemainingTime < latestSuspendedTime) {
                // The earliest remaining level is later than all the suspended work. That
                // means we've flushed all the suspended work.
                root.earliestSuspendedTime = NoWork;
                root.latestSuspendedTime = NoWork;
                root.latestPingedTime = NoWork; // There's no suspended work. Treat the earliest remaining level as a
                // pending level.

                markPendingPriorityLevel(root, earliestRemainingTime);
                findNextExpirationTimeToWorkOn(NoWork, root);
                return;
              }

              if (earliestRemainingTime > earliestSuspendedTime) {
                // The earliest remaining time is earlier than all the suspended work.
                // Treat it as a pending update.
                markPendingPriorityLevel(root, earliestRemainingTime);
                findNextExpirationTimeToWorkOn(NoWork, root);
                return;
              } // The earliest remaining time falls within the range of known suspended
              // levels. We should treat this as suspended work.

              findNextExpirationTimeToWorkOn(NoWork, root);
            }

            function hasLowerPriorityWork(root, erroredExpirationTime) {
              var latestPendingTime = root.latestPendingTime;
              var latestSuspendedTime = root.latestSuspendedTime;
              var latestPingedTime = root.latestPingedTime;
              return (
                (latestPendingTime !== NoWork &&
                  latestPendingTime < erroredExpirationTime) ||
                (latestSuspendedTime !== NoWork &&
                  latestSuspendedTime < erroredExpirationTime) ||
                (latestPingedTime !== NoWork &&
                  latestPingedTime < erroredExpirationTime)
              );
            }

            function isPriorityLevelSuspended(root, expirationTime) {
              var earliestSuspendedTime = root.earliestSuspendedTime;
              var latestSuspendedTime = root.latestSuspendedTime;
              return (
                earliestSuspendedTime !== NoWork &&
                expirationTime <= earliestSuspendedTime &&
                expirationTime >= latestSuspendedTime
              );
            }

            function markSuspendedPriorityLevel(root, suspendedTime) {
              root.didError = false;
              clearPing(root, suspendedTime); // First, check the known pending levels and update them if needed.

              var earliestPendingTime = root.earliestPendingTime;
              var latestPendingTime = root.latestPendingTime;

              if (earliestPendingTime === suspendedTime) {
                if (latestPendingTime === suspendedTime) {
                  // Both known pending levels were suspended. Clear them.
                  root.earliestPendingTime = root.latestPendingTime = NoWork;
                } else {
                  // The earliest pending level was suspended. Clear by setting it to the
                  // latest pending level.
                  root.earliestPendingTime = latestPendingTime;
                }
              } else if (latestPendingTime === suspendedTime) {
                // The latest pending level was suspended. Clear by setting it to the
                // latest pending level.
                root.latestPendingTime = earliestPendingTime;
              } // Finally, update the known suspended levels.

              var earliestSuspendedTime = root.earliestSuspendedTime;
              var latestSuspendedTime = root.latestSuspendedTime;

              if (earliestSuspendedTime === NoWork) {
                // No other suspended levels.
                root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
              } else {
                if (earliestSuspendedTime < suspendedTime) {
                  // This is the earliest suspended level.
                  root.earliestSuspendedTime = suspendedTime;
                } else if (latestSuspendedTime > suspendedTime) {
                  // This is the latest suspended level
                  root.latestSuspendedTime = suspendedTime;
                }
              }

              findNextExpirationTimeToWorkOn(suspendedTime, root);
            }

            function markPingedPriorityLevel(root, pingedTime) {
              root.didError = false; // TODO: When we add back resuming, we need to ensure the progressed work
              // is thrown out and not reused during the restarted render. One way to
              // invalidate the progressed work is to restart at expirationTime + 1.

              var latestPingedTime = root.latestPingedTime;

              if (
                latestPingedTime === NoWork ||
                latestPingedTime > pingedTime
              ) {
                root.latestPingedTime = pingedTime;
              }

              findNextExpirationTimeToWorkOn(pingedTime, root);
            }

            function clearPing(root, completedTime) {
              // TODO: Track whether the root was pinged during the render phase. If so,
              // we need to make sure we don't lose track of it.
              var latestPingedTime = root.latestPingedTime;

              if (
                latestPingedTime !== NoWork &&
                latestPingedTime >= completedTime
              ) {
                root.latestPingedTime = NoWork;
              }
            }

            function findEarliestOutstandingPriorityLevel(
              root,
              renderExpirationTime
            ) {
              var earliestExpirationTime = renderExpirationTime;
              var earliestPendingTime = root.earliestPendingTime;
              var earliestSuspendedTime = root.earliestSuspendedTime;

              if (earliestPendingTime > earliestExpirationTime) {
                earliestExpirationTime = earliestPendingTime;
              }

              if (earliestSuspendedTime > earliestExpirationTime) {
                earliestExpirationTime = earliestSuspendedTime;
              }

              return earliestExpirationTime;
            }

            function didExpireAtExpirationTime(root, currentTime) {
              var expirationTime = root.expirationTime;

              if (expirationTime !== NoWork && currentTime <= expirationTime) {
                // The root has expired. Flush all work up to the current time.
                root.nextExpirationTimeToWorkOn = currentTime;
              }
            }

            function findNextExpirationTimeToWorkOn(
              completedExpirationTime,
              root
            ) {
              var earliestSuspendedTime = root.earliestSuspendedTime;
              var latestSuspendedTime = root.latestSuspendedTime;
              var earliestPendingTime = root.earliestPendingTime;
              var latestPingedTime = root.latestPingedTime; // Work on the earliest pending time. Failing that, work on the latest
              // pinged time.

              var nextExpirationTimeToWorkOn =
                earliestPendingTime !== NoWork
                  ? earliestPendingTime
                  : latestPingedTime; // If there is no pending or pinged work, check if there's suspended work
              // that's lower priority than what we just completed.

              if (
                nextExpirationTimeToWorkOn === NoWork &&
                (completedExpirationTime === NoWork ||
                  latestSuspendedTime < completedExpirationTime)
              ) {
                // The lowest priority suspended work is the work most likely to be
                // committed next. Let's start rendering it again, so that if it times out,
                // it's ready to commit.
                nextExpirationTimeToWorkOn = latestSuspendedTime;
              }

              var expirationTime = nextExpirationTimeToWorkOn;

              if (
                expirationTime !== NoWork &&
                earliestSuspendedTime > expirationTime
              ) {
                // Expire using the earliest known expiration time.
                expirationTime = earliestSuspendedTime;
              }

              root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
              root.expirationTime = expirationTime;
            } // UpdateQueue is a linked list of prioritized updates.
            //
            // Like fibers, update queues come in pairs: a current queue, which represents
            // the visible state of the screen, and a work-in-progress queue, which is
            // can be mutated and processed asynchronously before it is committed — a form
            // of double buffering. If a work-in-progress render is discarded before
            // finishing, we create a new work-in-progress by cloning the current queue.
            //
            // Both queues share a persistent, singly-linked list structure. To schedule an
            // update, we append it to the end of both queues. Each queue maintains a
            // pointer to first update in the persistent list that hasn't been processed.
            // The work-in-progress pointer always has a position equal to or greater than
            // the current queue, since we always work on that one. The current queue's
            // pointer is only updated during the commit phase, when we swap in the
            // work-in-progress.
            //
            // For example:
            //
            //   Current pointer:           A - B - C - D - E - F
            //   Work-in-progress pointer:              D - E - F
            //                                          ^
            //                                          The work-in-progress queue has
            //                                          processed more updates than current.
            //
            // The reason we append to both queues is because otherwise we might drop
            // updates without ever processing them. For example, if we only add updates to
            // the work-in-progress queue, some updates could be lost whenever a work-in
            // -progress render restarts by cloning from current. Similarly, if we only add
            // updates to the current queue, the updates will be lost whenever an already
            // in-progress queue commits and swaps with the current queue. However, by
            // adding to both queues, we guarantee that the update will be part of the next
            // work-in-progress. (And because the work-in-progress queue becomes the
            // current queue once it commits, there's no danger of applying the same
            // update twice.)
            //
            // Prioritization
            // --------------
            //
            // Updates are not sorted by priority, but by insertion; new updates are always
            // appended to the end of the list.
            //
            // The priority is still important, though. When processing the update queue
            // during the render phase, only the updates with sufficient priority are
            // included in the result. If we skip an update because it has insufficient
            // priority, it remains in the queue to be processed later, during a lower
            // priority render. Crucially, all updates subsequent to a skipped update also
            // remain in the queue *regardless of their priority*. That means high priority
            // updates are sometimes processed twice, at two separate priorities. We also
            // keep track of a base state, that represents the state before the first
            // update in the queue is applied.
            //
            // For example:
            //
            //   Given a base state of '', and the following queue of updates
            //
            //     A1 - B2 - C1 - D2
            //
            //   where the number indicates the priority, and the update is applied to the
            //   previous state by appending a letter, React will process these updates as
            //   two separate renders, one per distinct priority level:
            //
            //   First render, at priority 1:
            //     Base state: ''
            //     Updates: [A1, C1]
            //     Result state: 'AC'
            //
            //   Second render, at priority 2:
            //     Base state: 'A'            <-  The base state does not include C1,
            //                                    because B2 was skipped.
            //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
            //     Result state: 'ABCD'
            //
            // Because we process updates in insertion order, and rebase high priority
            // updates when preceding updates are skipped, the final result is deterministic
            // regardless of priority. Intermediate state may vary according to system
            // resources, but the final state is always the same.

            var UpdateState = 0;
            var ReplaceState = 1;
            var ForceUpdate = 2;
            var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
            // It should only be read right after calling `processUpdateQueue`, via
            // `checkHasForceUpdateAfterProcessing`.

            var hasForceUpdate = false;
            var didWarnUpdateInsideUpdate = void 0;
            var currentlyProcessingQueue = void 0;
            var resetCurrentlyProcessingQueue = void 0;
            {
              didWarnUpdateInsideUpdate = false;
              currentlyProcessingQueue = null;

              resetCurrentlyProcessingQueue = function() {
                currentlyProcessingQueue = null;
              };
            }

            function createUpdateQueue(baseState) {
              var queue = {
                baseState: baseState,
                firstUpdate: null,
                lastUpdate: null,
                firstCapturedUpdate: null,
                lastCapturedUpdate: null,
                firstEffect: null,
                lastEffect: null,
                firstCapturedEffect: null,
                lastCapturedEffect: null
              };
              return queue;
            }

            function cloneUpdateQueue(currentQueue) {
              var queue = {
                baseState: currentQueue.baseState,
                firstUpdate: currentQueue.firstUpdate,
                lastUpdate: currentQueue.lastUpdate,
                // TODO: With resuming, if we bail out and resuse the child tree, we should
                // keep these effects.
                firstCapturedUpdate: null,
                lastCapturedUpdate: null,
                firstEffect: null,
                lastEffect: null,
                firstCapturedEffect: null,
                lastCapturedEffect: null
              };
              return queue;
            }

            function createUpdate(expirationTime) {
              return {
                expirationTime: expirationTime,
                tag: UpdateState,
                payload: null,
                callback: null,
                next: null,
                nextEffect: null
              };
            }

            function appendUpdateToQueue(queue, update) {
              // Append the update to the end of the list.
              if (queue.lastUpdate === null) {
                // Queue is empty
                queue.firstUpdate = queue.lastUpdate = update;
              } else {
                queue.lastUpdate.next = update;
                queue.lastUpdate = update;
              }
            }

            function enqueueUpdate(fiber, update) {
              // Update queues are created lazily.
              var alternate = fiber.alternate;
              var queue1 = void 0;
              var queue2 = void 0;

              if (alternate === null) {
                // There's only one fiber.
                queue1 = fiber.updateQueue;
                queue2 = null;

                if (queue1 === null) {
                  queue1 = fiber.updateQueue = createUpdateQueue(
                    fiber.memoizedState
                  );
                }
              } else {
                // There are two owners.
                queue1 = fiber.updateQueue;
                queue2 = alternate.updateQueue;

                if (queue1 === null) {
                  if (queue2 === null) {
                    // Neither fiber has an update queue. Create new ones.
                    queue1 = fiber.updateQueue = createUpdateQueue(
                      fiber.memoizedState
                    );
                    queue2 = alternate.updateQueue = createUpdateQueue(
                      alternate.memoizedState
                    );
                  } else {
                    // Only one fiber has an update queue. Clone to create a new one.
                    queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
                  }
                } else {
                  if (queue2 === null) {
                    // Only one fiber has an update queue. Clone to create a new one.
                    queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
                  } else {
                    // Both owners have an update queue.
                  }
                }
              }

              if (queue2 === null || queue1 === queue2) {
                // There's only a single queue.
                appendUpdateToQueue(queue1, update);
              } else {
                // There are two queues. We need to append the update to both queues,
                // while accounting for the persistent structure of the list — we don't
                // want the same update to be added multiple times.
                if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
                  // One of the queues is not empty. We must add the update to both queues.
                  appendUpdateToQueue(queue1, update);
                  appendUpdateToQueue(queue2, update);
                } else {
                  // Both queues are non-empty. The last update is the same in both lists,
                  // because of structural sharing. So, only append to one of the lists.
                  appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

                  queue2.lastUpdate = update;
                }
              }

              {
                if (
                  fiber.tag === ClassComponent &&
                  (currentlyProcessingQueue === queue1 ||
                    (queue2 !== null && currentlyProcessingQueue === queue2)) &&
                  !didWarnUpdateInsideUpdate
                ) {
                  warningWithoutStack$1(
                    false,
                    "An update (setState, replaceState, or forceUpdate) was scheduled " +
                      "from inside an update function. Update functions should be pure, " +
                      "with zero side-effects. Consider using componentDidUpdate or a " +
                      "callback."
                  );
                  didWarnUpdateInsideUpdate = true;
                }
              }
            }

            function enqueueCapturedUpdate(workInProgress, update) {
              // Captured updates go into a separate list, and only on the work-in-
              // progress queue.
              var workInProgressQueue = workInProgress.updateQueue;

              if (workInProgressQueue === null) {
                workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(
                  workInProgress.memoizedState
                );
              } else {
                // TODO: I put this here rather than createWorkInProgress so that we don't
                // clone the queue unnecessarily. There's probably a better way to
                // structure this.
                workInProgressQueue = ensureWorkInProgressQueueIsAClone(
                  workInProgress,
                  workInProgressQueue
                );
              } // Append the update to the end of the list.

              if (workInProgressQueue.lastCapturedUpdate === null) {
                // This is the first render phase update
                workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
              } else {
                workInProgressQueue.lastCapturedUpdate.next = update;
                workInProgressQueue.lastCapturedUpdate = update;
              }
            }

            function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
              var current = workInProgress.alternate;

              if (current !== null) {
                // If the work-in-progress queue is equal to the current queue,
                // we need to clone it first.
                if (queue === current.updateQueue) {
                  queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
                }
              }

              return queue;
            }

            function getStateFromUpdate(
              workInProgress,
              queue,
              update,
              prevState,
              nextProps,
              instance
            ) {
              switch (update.tag) {
                case ReplaceState: {
                  var _payload = update.payload;

                  if (typeof _payload === "function") {
                    // Updater function
                    {
                      if (
                        debugRenderPhaseSideEffects ||
                        (debugRenderPhaseSideEffectsForStrictMode &&
                          workInProgress.mode & StrictMode)
                      ) {
                        _payload.call(instance, prevState, nextProps);
                      }
                    }
                    return _payload.call(instance, prevState, nextProps);
                  } // State object

                  return _payload;
                }

                case CaptureUpdate: {
                  workInProgress.effectTag =
                    (workInProgress.effectTag & ~ShouldCapture) | DidCapture;
                }
                // Intentional fallthrough

                case UpdateState: {
                  var _payload2 = update.payload;
                  var partialState = void 0;

                  if (typeof _payload2 === "function") {
                    // Updater function
                    {
                      if (
                        debugRenderPhaseSideEffects ||
                        (debugRenderPhaseSideEffectsForStrictMode &&
                          workInProgress.mode & StrictMode)
                      ) {
                        _payload2.call(instance, prevState, nextProps);
                      }
                    }
                    partialState = _payload2.call(
                      instance,
                      prevState,
                      nextProps
                    );
                  } else {
                    // Partial state object
                    partialState = _payload2;
                  }

                  if (partialState === null || partialState === undefined) {
                    // Null and undefined are treated as no-ops.
                    return prevState;
                  } // Merge the partial state and the previous state.

                  return _assign({}, prevState, partialState);
                }

                case ForceUpdate: {
                  hasForceUpdate = true;
                  return prevState;
                }
              }

              return prevState;
            }

            function processUpdateQueue(
              workInProgress,
              queue,
              props,
              instance,
              renderExpirationTime
            ) {
              hasForceUpdate = false;
              queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
              {
                currentlyProcessingQueue = queue;
              } // These values may change as we process the queue.

              var newBaseState = queue.baseState;
              var newFirstUpdate = null;
              var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

              var update = queue.firstUpdate;
              var resultState = newBaseState;

              while (update !== null) {
                var updateExpirationTime = update.expirationTime;

                if (updateExpirationTime < renderExpirationTime) {
                  // This update does not have sufficient priority. Skip it.
                  if (newFirstUpdate === null) {
                    // This is the first skipped update. It will be the first update in
                    // the new list.
                    newFirstUpdate = update; // Since this is the first update that was skipped, the current result
                    // is the new base state.

                    newBaseState = resultState;
                  } // Since this update will remain in the list, update the remaining
                  // expiration time.

                  if (newExpirationTime < updateExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                  }
                } else {
                  // This update does have sufficient priority. Process it and compute
                  // a new result.
                  resultState = getStateFromUpdate(
                    workInProgress,
                    queue,
                    update,
                    resultState,
                    props,
                    instance
                  );
                  var _callback = update.callback;

                  if (_callback !== null) {
                    workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

                    update.nextEffect = null;

                    if (queue.lastEffect === null) {
                      queue.firstEffect = queue.lastEffect = update;
                    } else {
                      queue.lastEffect.nextEffect = update;
                      queue.lastEffect = update;
                    }
                  }
                } // Continue to the next update.

                update = update.next;
              } // Separately, iterate though the list of captured updates.

              var newFirstCapturedUpdate = null;
              update = queue.firstCapturedUpdate;

              while (update !== null) {
                var _updateExpirationTime = update.expirationTime;

                if (_updateExpirationTime < renderExpirationTime) {
                  // This update does not have sufficient priority. Skip it.
                  if (newFirstCapturedUpdate === null) {
                    // This is the first skipped captured update. It will be the first
                    // update in the new list.
                    newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
                    // the new base state.

                    if (newFirstUpdate === null) {
                      newBaseState = resultState;
                    }
                  } // Since this update will remain in the list, update the remaining
                  // expiration time.

                  if (newExpirationTime < _updateExpirationTime) {
                    newExpirationTime = _updateExpirationTime;
                  }
                } else {
                  // This update does have sufficient priority. Process it and compute
                  // a new result.
                  resultState = getStateFromUpdate(
                    workInProgress,
                    queue,
                    update,
                    resultState,
                    props,
                    instance
                  );
                  var _callback2 = update.callback;

                  if (_callback2 !== null) {
                    workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

                    update.nextEffect = null;

                    if (queue.lastCapturedEffect === null) {
                      queue.firstCapturedEffect = queue.lastCapturedEffect = update;
                    } else {
                      queue.lastCapturedEffect.nextEffect = update;
                      queue.lastCapturedEffect = update;
                    }
                  }
                }

                update = update.next;
              }

              if (newFirstUpdate === null) {
                queue.lastUpdate = null;
              }

              if (newFirstCapturedUpdate === null) {
                queue.lastCapturedUpdate = null;
              } else {
                workInProgress.effectTag |= Callback;
              }

              if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
                // We processed every update, without skipping. That means the new base
                // state is the same as the result state.
                newBaseState = resultState;
              }

              queue.baseState = newBaseState;
              queue.firstUpdate = newFirstUpdate;
              queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
              // This should be fine because the only two other things that contribute to
              // expiration time are props and context. We're already in the middle of the
              // begin phase by the time we start processing the queue, so we've already
              // dealt with the props. Context in components that specify
              // shouldComponentUpdate is tricky; but we'll have to account for
              // that regardless.

              workInProgress.expirationTime = newExpirationTime;
              workInProgress.memoizedState = resultState;
              {
                currentlyProcessingQueue = null;
              }
            }

            function callCallback(callback, context) {
              !(typeof callback === "function")
                ? invariant(
                    false,
                    "Invalid argument passed as callback. Expected a function. Instead received: %s",
                    callback
                  )
                : void 0;
              callback.call(context);
            }

            function resetHasForceUpdateBeforeProcessing() {
              hasForceUpdate = false;
            }

            function checkHasForceUpdateAfterProcessing() {
              return hasForceUpdate;
            }

            function commitUpdateQueue(
              finishedWork,
              finishedQueue,
              instance,
              renderExpirationTime
            ) {
              // If the finished render included captured updates, and there are still
              // lower priority updates left over, we need to keep the captured updates
              // in the queue so that they are rebased and not dropped once we process the
              // queue again at the lower priority.
              if (finishedQueue.firstCapturedUpdate !== null) {
                // Join the captured update list to the end of the normal list.
                if (finishedQueue.lastUpdate !== null) {
                  finishedQueue.lastUpdate.next =
                    finishedQueue.firstCapturedUpdate;
                  finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
                } // Clear the list of captured updates.

                finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
              } // Commit the effects

              commitUpdateEffects(finishedQueue.firstEffect, instance);
              finishedQueue.firstEffect = finishedQueue.lastEffect = null;
              commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
              finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
            }

            function commitUpdateEffects(effect, instance) {
              while (effect !== null) {
                var _callback3 = effect.callback;

                if (_callback3 !== null) {
                  effect.callback = null;
                  callCallback(_callback3, instance);
                }

                effect = effect.nextEffect;
              }
            }

            function createCapturedValue(value, source) {
              // If the value is an error, call this function immediately after it is thrown
              // so the stack is accurate.
              return {
                value: value,
                source: source,
                stack: getStackByFiberInDevAndProd(source)
              };
            }

            var valueCursor = createCursor(null);
            var rendererSigil = void 0;
            {
              // Use this to detect multiple renderers using the same context
              rendererSigil = {};
            }
            var currentlyRenderingFiber = null;
            var lastContextDependency = null;
            var lastContextWithAllBitsObserved = null;

            function resetContextDependences() {
              // This is called right before React yields execution, to ensure `readContext`
              // cannot be called outside the render phase.
              currentlyRenderingFiber = null;
              lastContextDependency = null;
              lastContextWithAllBitsObserved = null;
            }

            function pushProvider(providerFiber, nextValue) {
              var context = providerFiber.type._context;

              if (isPrimaryRenderer) {
                push(valueCursor, context._currentValue, providerFiber);
                context._currentValue = nextValue;
                {
                  !(
                    context._currentRenderer === undefined ||
                    context._currentRenderer === null ||
                    context._currentRenderer === rendererSigil
                  )
                    ? warningWithoutStack$1(
                        false,
                        "Detected multiple renderers concurrently rendering the " +
                          "same context provider. This is currently unsupported."
                      )
                    : void 0;
                  context._currentRenderer = rendererSigil;
                }
              } else {
                push(valueCursor, context._currentValue2, providerFiber);
                context._currentValue2 = nextValue;
                {
                  !(
                    context._currentRenderer2 === undefined ||
                    context._currentRenderer2 === null ||
                    context._currentRenderer2 === rendererSigil
                  )
                    ? warningWithoutStack$1(
                        false,
                        "Detected multiple renderers concurrently rendering the " +
                          "same context provider. This is currently unsupported."
                      )
                    : void 0;
                  context._currentRenderer2 = rendererSigil;
                }
              }
            }

            function popProvider(providerFiber) {
              var currentValue = valueCursor.current;
              pop(valueCursor, providerFiber);
              var context = providerFiber.type._context;

              if (isPrimaryRenderer) {
                context._currentValue = currentValue;
              } else {
                context._currentValue2 = currentValue;
              }
            }

            function calculateChangedBits(context, newValue, oldValue) {
              // Use Object.is to compare the new context value to the old value. Inlined
              // Object.is polyfill.
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
              if (
                (oldValue === newValue &&
                  (oldValue !== 0 || 1 / oldValue === 1 / newValue)) ||
                (oldValue !== oldValue && newValue !== newValue) // eslint-disable-line no-self-compare
              ) {
                // No change
                return 0;
              } else {
                var changedBits =
                  typeof context._calculateChangedBits === "function"
                    ? context._calculateChangedBits(oldValue, newValue)
                    : maxSigned31BitInt;
                {
                  !((changedBits & maxSigned31BitInt) === changedBits)
                    ? warning$1(
                        false,
                        "calculateChangedBits: Expected the return value to be a " +
                          "31-bit integer. Instead received: %s",
                        changedBits
                      )
                    : void 0;
                }
                return changedBits | 0;
              }
            }

            function propagateContextChange(
              workInProgress,
              context,
              changedBits,
              renderExpirationTime
            ) {
              var fiber = workInProgress.child;

              if (fiber !== null) {
                // Set the return pointer of the child to the work-in-progress fiber.
                fiber.return = workInProgress;
              }

              while (fiber !== null) {
                var nextFiber = void 0; // Visit this fiber.

                var dependency = fiber.firstContextDependency;

                if (dependency !== null) {
                  do {
                    // Check if the context matches.
                    if (
                      dependency.context === context &&
                      (dependency.observedBits & changedBits) !== 0
                    ) {
                      // Match! Schedule an update on this fiber.
                      if (fiber.tag === ClassComponent) {
                        // Schedule a force update on the work-in-progress.
                        var update = createUpdate(renderExpirationTime);
                        update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                        // update to the current fiber, too, which means it will persist even if
                        // this render is thrown away. Since it's a race condition, not sure it's
                        // worth fixing.

                        enqueueUpdate(fiber, update);
                      }

                      if (fiber.expirationTime < renderExpirationTime) {
                        fiber.expirationTime = renderExpirationTime;
                      }

                      var alternate = fiber.alternate;

                      if (
                        alternate !== null &&
                        alternate.expirationTime < renderExpirationTime
                      ) {
                        alternate.expirationTime = renderExpirationTime;
                      } // Update the child expiration time of all the ancestors, including
                      // the alternates.

                      var node = fiber.return;

                      while (node !== null) {
                        alternate = node.alternate;

                        if (node.childExpirationTime < renderExpirationTime) {
                          node.childExpirationTime = renderExpirationTime;

                          if (
                            alternate !== null &&
                            alternate.childExpirationTime < renderExpirationTime
                          ) {
                            alternate.childExpirationTime = renderExpirationTime;
                          }
                        } else if (
                          alternate !== null &&
                          alternate.childExpirationTime < renderExpirationTime
                        ) {
                          alternate.childExpirationTime = renderExpirationTime;
                        } else {
                          // Neither alternate was updated, which means the rest of the
                          // ancestor path already has sufficient priority.
                          break;
                        }

                        node = node.return;
                      }
                    }

                    nextFiber = fiber.child;
                    dependency = dependency.next;
                  } while (dependency !== null);
                } else if (fiber.tag === ContextProvider) {
                  // Don't scan deeper if this is a matching provider
                  nextFiber =
                    fiber.type === workInProgress.type ? null : fiber.child;
                } else {
                  // Traverse down.
                  nextFiber = fiber.child;
                }

                if (nextFiber !== null) {
                  // Set the return pointer of the child to the work-in-progress fiber.
                  nextFiber.return = fiber;
                } else {
                  // No child. Traverse to next sibling.
                  nextFiber = fiber;

                  while (nextFiber !== null) {
                    if (nextFiber === workInProgress) {
                      // We're back to the root of this subtree. Exit.
                      nextFiber = null;
                      break;
                    }

                    var sibling = nextFiber.sibling;

                    if (sibling !== null) {
                      // Set the return pointer of the sibling to the work-in-progress fiber.
                      sibling.return = nextFiber.return;
                      nextFiber = sibling;
                      break;
                    } // No more siblings. Traverse up.

                    nextFiber = nextFiber.return;
                  }
                }

                fiber = nextFiber;
              }
            }

            function prepareToReadContext(
              workInProgress,
              renderExpirationTime
            ) {
              currentlyRenderingFiber = workInProgress;
              lastContextDependency = null;
              lastContextWithAllBitsObserved = null; // Reset the work-in-progress list

              workInProgress.firstContextDependency = null;
            }

            function readContext(context, observedBits) {
              if (lastContextWithAllBitsObserved === context) {
                // Nothing to do. We already observe everything in this context.
              } else if (observedBits === false || observedBits === 0) {
                // Do not observe any updates.
              } else {
                var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.

                if (
                  typeof observedBits !== "number" ||
                  observedBits === maxSigned31BitInt
                ) {
                  // Observe all updates.
                  lastContextWithAllBitsObserved = context;
                  resolvedObservedBits = maxSigned31BitInt;
                } else {
                  resolvedObservedBits = observedBits;
                }

                var contextItem = {
                  context: context,
                  observedBits: resolvedObservedBits,
                  next: null
                };

                if (lastContextDependency === null) {
                  !(currentlyRenderingFiber !== null)
                    ? invariant(
                        false,
                        "Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps."
                      )
                    : void 0; // This is the first dependency in the list

                  currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;
                } else {
                  // Append a new context item.
                  lastContextDependency = lastContextDependency.next = contextItem;
                }
              }

              return isPrimaryRenderer
                ? context._currentValue
                : context._currentValue2;
            }

            var NoEffect$1 =
              /*             */
              0;
            var UnmountSnapshot =
              /*      */
              2;
            var UnmountMutation =
              /*      */
              4;
            var MountMutation =
              /*        */
              8;
            var UnmountLayout =
              /*        */
              16;
            var MountLayout =
              /*          */
              32;
            var MountPassive =
              /*         */
              64;
            var UnmountPassive =
              /*       */
              128;

            function areHookInputsEqual(arr1, arr2) {
              // Don't bother comparing lengths in prod because these arrays should be
              // passed inline.
              {
                !(arr1.length === arr2.length)
                  ? warning$1(
                      false,
                      "Detected a variable number of hook dependencies. The length of the " +
                        "dependencies array should be constant between renders.\n\n" +
                        "Previous: %s\n" +
                        "Incoming: %s",
                      arr1.join(", "),
                      arr2.join(", ")
                    )
                  : void 0;
              }

              for (var i = 0; i < arr1.length; i++) {
                // Inlined Object.is polyfill.
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
                var val1 = arr1[i];
                var val2 = arr2[i];

                if (
                  (val1 === val2 && (val1 !== 0 || 1 / val1 === 1 / val2)) ||
                  (val1 !== val1 && val2 !== val2) // eslint-disable-line no-self-compare
                ) {
                  continue;
                }

                return false;
              }

              return true;
            } // These are set right before calling the component.

            var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
            // the work-in-progress hook.

            var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
            // current hook list is the list that belongs to the current fiber. The
            // work-in-progress hook list is a new list that will be added to the
            // work-in-progress fiber.

            var firstCurrentHook = null;
            var currentHook = null;
            var firstWorkInProgressHook = null;
            var workInProgressHook = null;
            var remainingExpirationTime = NoWork;
            var componentUpdateQueue = null; // Updates scheduled during render will trigger an immediate re-render at the
            // end of the current pass. We can't store these updates on the normal queue,
            // because if the work is aborted, they should be discarded. Because this is
            // a relatively rare case, we also don't want to add an additional field to
            // either the hook or queue object types. So we store them in a lazily create
            // map of queue -> render-phase updates, which are discarded once the component
            // completes without re-rendering.
            // Whether the work-in-progress hook is a re-rendered hook

            var isReRender = false; // Whether an update was scheduled during the currently executing render pass.

            var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

            var renderPhaseUpdates = null; // Counter to prevent infinite loops.

            var numberOfReRenders = 0;
            var RE_RENDER_LIMIT = 25;

            function resolveCurrentlyRenderingFiber() {
              !(currentlyRenderingFiber$1 !== null)
                ? invariant(
                    false,
                    "Hooks can only be called inside the body of a function component."
                  )
                : void 0;
              return currentlyRenderingFiber$1;
            }

            function prepareToUseHooks(
              current,
              workInProgress,
              nextRenderExpirationTime
            ) {
              if (!enableHooks) {
                return;
              }

              renderExpirationTime = nextRenderExpirationTime;
              currentlyRenderingFiber$1 = workInProgress;
              firstCurrentHook =
                current !== null ? current.memoizedState : null; // The following should have already been reset
              // currentHook = null;
              // workInProgressHook = null;
              // remainingExpirationTime = NoWork;
              // componentUpdateQueue = null;
              // isReRender = false;
              // didScheduleRenderPhaseUpdate = false;
              // renderPhaseUpdates = null;
              // numberOfReRenders = 0;
            }

            function finishHooks(Component, props, children, refOrContext) {
              if (!enableHooks) {
                return children;
              } // This must be called after every function component to prevent hooks from
              // being used in classes.

              while (didScheduleRenderPhaseUpdate) {
                // Updates were scheduled during the render phase. They are stored in
                // the `renderPhaseUpdates` map. Call the component again, reusing the
                // work-in-progress hooks and applying the additional updates on top. Keep
                // restarting until no more updates are scheduled.
                didScheduleRenderPhaseUpdate = false;
                numberOfReRenders += 1; // Start over from the beginning of the list

                currentHook = null;
                workInProgressHook = null;
                componentUpdateQueue = null;
                children = Component(props, refOrContext);
              }

              renderPhaseUpdates = null;
              numberOfReRenders = 0;
              var renderedWork = currentlyRenderingFiber$1;
              renderedWork.memoizedState = firstWorkInProgressHook;
              renderedWork.expirationTime = remainingExpirationTime;
              renderedWork.updateQueue = componentUpdateQueue;
              var didRenderTooFewHooks =
                currentHook !== null && currentHook.next !== null;
              renderExpirationTime = NoWork;
              currentlyRenderingFiber$1 = null;
              firstCurrentHook = null;
              currentHook = null;
              firstWorkInProgressHook = null;
              workInProgressHook = null;
              remainingExpirationTime = NoWork;
              componentUpdateQueue = null; // Always set during createWorkInProgress
              // isReRender = false;
              // These were reset above
              // didScheduleRenderPhaseUpdate = false;
              // renderPhaseUpdates = null;
              // numberOfReRenders = 0;

              !!didRenderTooFewHooks
                ? invariant(
                    false,
                    "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
                  )
                : void 0;
              return children;
            }

            function resetHooks() {
              if (!enableHooks) {
                return;
              } // This is called instead of `finishHooks` if the component throws. It's also
              // called inside mountIndeterminateComponent if we determine the component
              // is a module-style component.

              renderExpirationTime = NoWork;
              currentlyRenderingFiber$1 = null;
              firstCurrentHook = null;
              currentHook = null;
              firstWorkInProgressHook = null;
              workInProgressHook = null;
              remainingExpirationTime = NoWork;
              componentUpdateQueue = null; // Always set during createWorkInProgress
              // isReRender = false;

              didScheduleRenderPhaseUpdate = false;
              renderPhaseUpdates = null;
              numberOfReRenders = 0;
            }

            function createHook() {
              return {
                memoizedState: null,
                baseState: null,
                queue: null,
                baseUpdate: null,
                next: null
              };
            }

            function cloneHook(hook) {
              return {
                memoizedState: hook.memoizedState,
                baseState: hook.memoizedState,
                queue: hook.queue,
                baseUpdate: hook.baseUpdate,
                next: null
              };
            }

            function createWorkInProgressHook() {
              if (workInProgressHook === null) {
                // This is the first hook in the list
                if (firstWorkInProgressHook === null) {
                  isReRender = false;
                  currentHook = firstCurrentHook;

                  if (currentHook === null) {
                    // This is a newly mounted hook
                    workInProgressHook = createHook();
                  } else {
                    // Clone the current hook.
                    workInProgressHook = cloneHook(currentHook);
                  }

                  firstWorkInProgressHook = workInProgressHook;
                } else {
                  // There's already a work-in-progress. Reuse it.
                  isReRender = true;
                  currentHook = firstCurrentHook;
                  workInProgressHook = firstWorkInProgressHook;
                }
              } else {
                if (workInProgressHook.next === null) {
                  isReRender = false;
                  var hook = void 0;

                  if (currentHook === null) {
                    // This is a newly mounted hook
                    hook = createHook();
                  } else {
                    currentHook = currentHook.next;

                    if (currentHook === null) {
                      // This is a newly mounted hook
                      hook = createHook();
                    } else {
                      // Clone the current hook.
                      hook = cloneHook(currentHook);
                    }
                  } // Append to the end of the list

                  workInProgressHook = workInProgressHook.next = hook;
                } else {
                  // There's already a work-in-progress. Reuse it.
                  isReRender = true;
                  workInProgressHook = workInProgressHook.next;
                  currentHook = currentHook !== null ? currentHook.next : null;
                }
              }

              return workInProgressHook;
            }

            function createFunctionComponentUpdateQueue() {
              return {
                lastEffect: null
              };
            }

            function basicStateReducer(state, action) {
              return typeof action === "function" ? action(state) : action;
            }

            function useContext(context, observedBits) {
              // Ensure we're in a function component (class components support only the
              // .unstable_read() form)
              resolveCurrentlyRenderingFiber();
              return readContext(context, observedBits);
            }

            function useState(initialState) {
              return useReducer(
                basicStateReducer, // useReducer has a special case to support lazy useState initializers
                initialState
              );
            }

            function useReducer(reducer, initialState, initialAction) {
              currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
              workInProgressHook = createWorkInProgressHook();
              var queue = workInProgressHook.queue;

              if (queue !== null) {
                // Already have a queue, so this is an update.
                if (isReRender) {
                  // This is a re-render. Apply the new render phase updates to the previous
                  var _dispatch2 = queue.dispatch;

                  if (renderPhaseUpdates !== null) {
                    // Render phase updates are stored in a map of queue -> linked list
                    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

                    if (firstRenderPhaseUpdate !== undefined) {
                      renderPhaseUpdates.delete(queue);
                      var newState = workInProgressHook.memoizedState;
                      var update = firstRenderPhaseUpdate;

                      do {
                        // Process this render phase update. We don't have to check the
                        // priority because it will always be the same as the current
                        // render's.
                        var _action = update.action;
                        newState = reducer(newState, _action);
                        update = update.next;
                      } while (update !== null);

                      workInProgressHook.memoizedState = newState; // Don't persist the state accumlated from the render phase updates to
                      // the base state unless the queue is empty.
                      // TODO: Not sure if this is the desired semantics, but it's what we
                      // do for gDSFP. I can't remember why.

                      if (workInProgressHook.baseUpdate === queue.last) {
                        workInProgressHook.baseState = newState;
                      }

                      return [newState, _dispatch2];
                    }
                  }

                  return [workInProgressHook.memoizedState, _dispatch2];
                } // The last update in the entire queue

                var _last = queue.last; // The last update that is part of the base state.

                var _baseUpdate = workInProgressHook.baseUpdate; // Find the first unprocessed update.

                var first = void 0;

                if (_baseUpdate !== null) {
                  if (_last !== null) {
                    // For the first update, the queue is a circular linked list where
                    // `queue.last.next = queue.first`. Once the first update commits, and
                    // the `baseUpdate` is no longer empty, we can unravel the list.
                    _last.next = null;
                  }

                  first = _baseUpdate.next;
                } else {
                  first = _last !== null ? _last.next : null;
                }

                if (first !== null) {
                  var _newState = workInProgressHook.baseState;
                  var newBaseState = null;
                  var newBaseUpdate = null;
                  var prevUpdate = _baseUpdate;
                  var _update = first;
                  var didSkip = false;

                  do {
                    var updateExpirationTime = _update.expirationTime;

                    if (updateExpirationTime < renderExpirationTime) {
                      // Priority is insufficient. Skip this update. If this is the first
                      // skipped update, the previous update/state is the new base
                      // update/state.
                      if (!didSkip) {
                        didSkip = true;
                        newBaseUpdate = prevUpdate;
                        newBaseState = _newState;
                      } // Update the remaining priority in the queue.

                      if (updateExpirationTime > remainingExpirationTime) {
                        remainingExpirationTime = updateExpirationTime;
                      }
                    } else {
                      // Process this update.
                      var _action2 = _update.action;
                      _newState = reducer(_newState, _action2);
                    }

                    prevUpdate = _update;
                    _update = _update.next;
                  } while (_update !== null && _update !== first);

                  if (!didSkip) {
                    newBaseUpdate = prevUpdate;
                    newBaseState = _newState;
                  }

                  workInProgressHook.memoizedState = _newState;
                  workInProgressHook.baseUpdate = newBaseUpdate;
                  workInProgressHook.baseState = newBaseState;
                }

                var _dispatch = queue.dispatch;
                return [workInProgressHook.memoizedState, _dispatch];
              } // There's no existing queue, so this is the initial render.

              if (reducer === basicStateReducer) {
                // Special case for `useState`.
                if (typeof initialState === "function") {
                  initialState = initialState();
                }
              } else if (
                initialAction !== undefined &&
                initialAction !== null
              ) {
                initialState = reducer(initialState, initialAction);
              }

              workInProgressHook.memoizedState = workInProgressHook.baseState = initialState;
              queue = workInProgressHook.queue = {
                last: null,
                dispatch: null
              };
              var dispatch = (queue.dispatch = dispatchAction.bind(
                null,
                currentlyRenderingFiber$1,
                queue
              ));
              return [workInProgressHook.memoizedState, dispatch];
            }

            function pushEffect(tag, create, destroy, inputs) {
              var effect = {
                tag: tag,
                create: create,
                destroy: destroy,
                inputs: inputs,
                // Circular
                next: null
              };

              if (componentUpdateQueue === null) {
                componentUpdateQueue = createFunctionComponentUpdateQueue();
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var _lastEffect = componentUpdateQueue.lastEffect;

                if (_lastEffect === null) {
                  componentUpdateQueue.lastEffect = effect.next = effect;
                } else {
                  var firstEffect = _lastEffect.next;
                  _lastEffect.next = effect;
                  effect.next = firstEffect;
                  componentUpdateQueue.lastEffect = effect;
                }
              }

              return effect;
            }

            function useRef(initialValue) {
              currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
              workInProgressHook = createWorkInProgressHook();
              var ref = void 0;

              if (workInProgressHook.memoizedState === null) {
                ref = {
                  current: initialValue
                };
                {
                  Object.seal(ref);
                }
                workInProgressHook.memoizedState = ref;
              } else {
                ref = workInProgressHook.memoizedState;
              }

              return ref;
            }

            function useMutationEffect(create, inputs) {
              useEffectImpl(
                Snapshot | Update,
                UnmountSnapshot | MountMutation,
                create,
                inputs
              );
            }

            function useLayoutEffect(create, inputs) {
              useEffectImpl(
                Update,
                UnmountMutation | MountLayout,
                create,
                inputs
              );
            }

            function useEffect(create, inputs) {
              useEffectImpl(
                Update | Passive,
                UnmountPassive | MountPassive,
                create,
                inputs
              );
            }

            function useEffectImpl(
              fiberEffectTag,
              hookEffectTag,
              create,
              inputs
            ) {
              currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
              workInProgressHook = createWorkInProgressHook();
              var nextInputs =
                inputs !== undefined && inputs !== null ? inputs : [create];
              var destroy = null;

              if (currentHook !== null) {
                var prevEffect = currentHook.memoizedState;
                destroy = prevEffect.destroy;

                if (areHookInputsEqual(nextInputs, prevEffect.inputs)) {
                  pushEffect(NoEffect$1, create, destroy, nextInputs);
                  return;
                }
              }

              currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
              workInProgressHook.memoizedState = pushEffect(
                hookEffectTag,
                create,
                destroy,
                nextInputs
              );
            }

            function useImperativeMethods(ref, create, inputs) {
              // TODO: If inputs are provided, should we skip comparing the ref itself?
              var nextInputs =
                inputs !== null && inputs !== undefined
                  ? inputs.concat([ref])
                  : [ref, create]; // TODO: I've implemented this on top of useEffect because it's almost the
              // same thing, and it would require an equal amount of code. It doesn't seem
              // like a common enough use case to justify the additional size.

              useEffectImpl(
                Update,
                UnmountMutation | MountLayout,
                function() {
                  if (typeof ref === "function") {
                    var refCallback = ref;

                    var _inst = create();

                    refCallback(_inst);
                    return function() {
                      return refCallback(null);
                    };
                  } else if (ref !== null && ref !== undefined) {
                    var refObject = ref;

                    var _inst2 = create();

                    refObject.current = _inst2;
                    return function() {
                      refObject.current = null;
                    };
                  }
                },
                nextInputs
              );
            }

            function useCallback(callback, inputs) {
              currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
              workInProgressHook = createWorkInProgressHook();
              var nextInputs =
                inputs !== undefined && inputs !== null ? inputs : [callback];
              var prevState = workInProgressHook.memoizedState;

              if (prevState !== null) {
                var prevInputs = prevState[1];

                if (areHookInputsEqual(nextInputs, prevInputs)) {
                  return prevState[0];
                }
              }

              workInProgressHook.memoizedState = [callback, nextInputs];
              return callback;
            }

            function useMemo(nextCreate, inputs) {
              currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
              workInProgressHook = createWorkInProgressHook();
              var nextInputs =
                inputs !== undefined && inputs !== null ? inputs : [nextCreate];
              var prevState = workInProgressHook.memoizedState;

              if (prevState !== null) {
                var prevInputs = prevState[1];

                if (areHookInputsEqual(nextInputs, prevInputs)) {
                  return prevState[0];
                }
              }

              var nextValue = nextCreate();
              workInProgressHook.memoizedState = [nextValue, nextInputs];
              return nextValue;
            }

            function dispatchAction(fiber, queue, action) {
              !(numberOfReRenders < RE_RENDER_LIMIT)
                ? invariant(
                    false,
                    "Too many re-renders. React limits the number of renders to prevent an infinite loop."
                  )
                : void 0;
              var alternate = fiber.alternate;

              if (
                fiber === currentlyRenderingFiber$1 ||
                (alternate !== null && alternate === currentlyRenderingFiber$1)
              ) {
                // This is a render phase update. Stash it in a lazily-created map of
                // queue -> linked list of updates. After this render pass, we'll restart
                // and apply the stashed updates on top of the work-in-progress hook.
                didScheduleRenderPhaseUpdate = true;
                var update = {
                  expirationTime: renderExpirationTime,
                  action: action,
                  next: null
                };

                if (renderPhaseUpdates === null) {
                  renderPhaseUpdates = new Map();
                }

                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

                if (firstRenderPhaseUpdate === undefined) {
                  renderPhaseUpdates.set(queue, update);
                } else {
                  // Append the update to the end of the list.
                  var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

                  while (lastRenderPhaseUpdate.next !== null) {
                    lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                  }

                  lastRenderPhaseUpdate.next = update;
                }
              } else {
                var currentTime = requestCurrentTime();

                var _expirationTime = computeExpirationForFiber(
                  currentTime,
                  fiber
                );

                var _update2 = {
                  expirationTime: _expirationTime,
                  action: action,
                  next: null
                };
                flushPassiveEffects(); // Append the update to the end of the list.

                var _last2 = queue.last;

                if (_last2 === null) {
                  // This is the first update. Create a circular list.
                  _update2.next = _update2;
                } else {
                  var first = _last2.next;

                  if (first !== null) {
                    // Still circular.
                    _update2.next = first;
                  }

                  _last2.next = _update2;
                }

                queue.last = _update2;
                scheduleWork(fiber, _expirationTime);
              }
            }

            var NO_CONTEXT = {};
            var contextStackCursor$1 = createCursor(NO_CONTEXT);
            var contextFiberStackCursor = createCursor(NO_CONTEXT);
            var rootInstanceStackCursor = createCursor(NO_CONTEXT);

            function requiredContext(c) {
              !(c !== NO_CONTEXT)
                ? invariant(
                    false,
                    "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              return c;
            }

            function getRootHostContainer() {
              var rootInstance = requiredContext(
                rootInstanceStackCursor.current
              );
              return rootInstance;
            }

            function pushHostContainer(fiber, nextRootInstance) {
              // Push current root instance onto the stack;
              // This allows us to reset root when portals are popped.
              push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.

              push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
              // However, we can't just call getRootHostContext() and push it because
              // we'd have a different number of entries on the stack depending on
              // whether getRootHostContext() throws somewhere in renderer code or not.
              // So we push an empty value first. This lets us safely unwind on errors.

              push(contextStackCursor$1, NO_CONTEXT, fiber);
              var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

              pop(contextStackCursor$1, fiber);
              push(contextStackCursor$1, nextRootContext, fiber);
            }

            function popHostContainer(fiber) {
              pop(contextStackCursor$1, fiber);
              pop(contextFiberStackCursor, fiber);
              pop(rootInstanceStackCursor, fiber);
            }

            function getHostContext() {
              var context = requiredContext(contextStackCursor$1.current);
              return context;
            }

            function pushHostContext(fiber) {
              var rootInstance = requiredContext(
                rootInstanceStackCursor.current
              );
              var context = requiredContext(contextStackCursor$1.current);
              var nextContext = getChildHostContext(
                context,
                fiber.type,
                rootInstance
              ); // Don't push this Fiber's context unless it's unique.

              if (context === nextContext) {
                return;
              } // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.

              push(contextFiberStackCursor, fiber, fiber);
              push(contextStackCursor$1, nextContext, fiber);
            }

            function popHostContext(fiber) {
              // Do not pop unless this Fiber provided the current context.
              // pushHostContext() only pushes Fibers that provide unique contexts.
              if (contextFiberStackCursor.current !== fiber) {
                return;
              }

              pop(contextStackCursor$1, fiber);
              pop(contextFiberStackCursor, fiber);
            }

            var commitTime = 0;
            var profilerStartTime = -1;

            function getCommitTime() {
              return commitTime;
            }

            function recordCommitTime() {
              if (!enableProfilerTimer) {
                return;
              }

              commitTime = scheduler.unstable_now();
            }

            function startProfilerTimer(fiber) {
              if (!enableProfilerTimer) {
                return;
              }

              profilerStartTime = scheduler.unstable_now();

              if (fiber.actualStartTime < 0) {
                fiber.actualStartTime = scheduler.unstable_now();
              }
            }

            function stopProfilerTimerIfRunning(fiber) {
              if (!enableProfilerTimer) {
                return;
              }

              profilerStartTime = -1;
            }

            function stopProfilerTimerIfRunningAndRecordDelta(
              fiber,
              overrideBaseTime
            ) {
              if (!enableProfilerTimer) {
                return;
              }

              if (profilerStartTime >= 0) {
                var elapsedTime = scheduler.unstable_now() - profilerStartTime;
                fiber.actualDuration += elapsedTime;

                if (overrideBaseTime) {
                  fiber.selfBaseDuration = elapsedTime;
                }

                profilerStartTime = -1;
              }
            }

            function resolveDefaultProps(Component, baseProps) {
              if (Component && Component.defaultProps) {
                // Resolve default props. Taken from ReactElement
                var props = _assign({}, baseProps);

                var defaultProps = Component.defaultProps;

                for (var propName in defaultProps) {
                  if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                  }
                }

                return props;
              }

              return baseProps;
            }

            function readLazyComponentType(lazyComponent) {
              var status = lazyComponent._status;
              var result = lazyComponent._result;

              switch (status) {
                case Resolved: {
                  var Component = result;
                  return Component;
                }

                case Rejected: {
                  var error = result;
                  throw error;
                }

                case Pending: {
                  var thenable = result;
                  throw thenable;
                }

                default: {
                  lazyComponent._status = Pending;
                  var ctor = lazyComponent._ctor;

                  var _thenable = ctor();

                  _thenable.then(
                    function(moduleObject) {
                      if (lazyComponent._status === Pending) {
                        var defaultExport = moduleObject.default;
                        {
                          if (defaultExport === undefined) {
                            warning$1(
                              false,
                              "lazy: Expected the result of a dynamic import() call. " +
                                "Instead received: %s\n\nYour code should look like: \n  " +
                                "const MyComponent = lazy(() => import('./MyComponent'))",
                              moduleObject
                            );
                          }
                        }
                        lazyComponent._status = Resolved;
                        lazyComponent._result = defaultExport;
                      }
                    },
                    function(error) {
                      if (lazyComponent._status === Pending) {
                        lazyComponent._status = Rejected;
                        lazyComponent._result = error;
                      }
                    }
                  );

                  lazyComponent._result = _thenable;
                  throw _thenable;
                }
              }
            }

            var ReactCurrentOwner$4 = ReactSharedInternals.ReactCurrentOwner;

            function readContext$1(contextType) {
              var dispatcher = ReactCurrentOwner$4.currentDispatcher;
              return dispatcher.readContext(contextType);
            }

            var fakeInternalInstance = {};
            var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
            // We'll use it to determine whether we need to initialize legacy refs.

            var emptyRefsObject = new React.Component().refs;
            var didWarnAboutStateAssignmentForComponent = void 0;
            var didWarnAboutUninitializedState = void 0;
            var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
            var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
            var didWarnAboutUndefinedDerivedState = void 0;
            var warnOnUndefinedDerivedState = void 0;
            var warnOnInvalidCallback$1 = void 0;
            var didWarnAboutDirectlyAssigningPropsToState = void 0;
            var didWarnAboutContextTypeAndContextTypes = void 0;
            var didWarnAboutInvalidateContextType = void 0;
            {
              didWarnAboutStateAssignmentForComponent = new Set();
              didWarnAboutUninitializedState = new Set();
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
              didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
              didWarnAboutDirectlyAssigningPropsToState = new Set();
              didWarnAboutUndefinedDerivedState = new Set();
              didWarnAboutContextTypeAndContextTypes = new Set();
              didWarnAboutInvalidateContextType = new Set();
              var didWarnOnInvalidCallback = new Set();

              warnOnInvalidCallback$1 = function(callback, callerName) {
                if (callback === null || typeof callback === "function") {
                  return;
                }

                var key = callerName + "_" + callback;

                if (!didWarnOnInvalidCallback.has(key)) {
                  didWarnOnInvalidCallback.add(key);
                  warningWithoutStack$1(
                    false,
                    "%s(...): Expected the last optional `callback` argument to be a " +
                      "function. Instead received: %s.",
                    callerName,
                    callback
                  );
                }
              };

              warnOnUndefinedDerivedState = function(type, partialState) {
                if (partialState === undefined) {
                  var componentName = getComponentName(type) || "Component";

                  if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                    didWarnAboutUndefinedDerivedState.add(componentName);
                    warningWithoutStack$1(
                      false,
                      "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " +
                        "You have returned undefined.",
                      componentName
                    );
                  }
                }
              }; // This is so gross but it's at least non-critical and can be removed if
              // it causes problems. This is meant to give a nicer error message for
              // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
              // ...)) which otherwise throws a "_processChildContext is not a function"
              // exception.

              Object.defineProperty(
                fakeInternalInstance,
                "_processChildContext",
                {
                  enumerable: false,
                  value: function() {
                    invariant(
                      false,
                      "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
                    );
                  }
                }
              );
              Object.freeze(fakeInternalInstance);
            }

            function applyDerivedStateFromProps(
              workInProgress,
              ctor,
              getDerivedStateFromProps,
              nextProps
            ) {
              var prevState = workInProgress.memoizedState;
              {
                if (
                  debugRenderPhaseSideEffects ||
                  (debugRenderPhaseSideEffectsForStrictMode &&
                    workInProgress.mode & StrictMode)
                ) {
                  // Invoke the function an extra time to help detect side-effects.
                  getDerivedStateFromProps(nextProps, prevState);
                }
              }
              var partialState = getDerivedStateFromProps(nextProps, prevState);
              {
                warnOnUndefinedDerivedState(ctor, partialState);
              } // Merge the partial state and the previous state.

              var memoizedState =
                partialState === null || partialState === undefined
                  ? prevState
                  : _assign({}, prevState, partialState);
              workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
              // base state.

              var updateQueue = workInProgress.updateQueue;

              if (
                updateQueue !== null &&
                workInProgress.expirationTime === NoWork
              ) {
                updateQueue.baseState = memoizedState;
              }
            }

            var classComponentUpdater = {
              isMounted: isMounted,
              enqueueSetState: function(inst, payload, callback) {
                var fiber = get(inst);
                var currentTime = requestCurrentTime();
                var expirationTime = computeExpirationForFiber(
                  currentTime,
                  fiber
                );
                var update = createUpdate(expirationTime);
                update.payload = payload;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback$1(callback, "setState");
                  }
                  update.callback = callback;
                }

                flushPassiveEffects();
                enqueueUpdate(fiber, update);
                scheduleWork(fiber, expirationTime);
              },
              enqueueReplaceState: function(inst, payload, callback) {
                var fiber = get(inst);
                var currentTime = requestCurrentTime();
                var expirationTime = computeExpirationForFiber(
                  currentTime,
                  fiber
                );
                var update = createUpdate(expirationTime);
                update.tag = ReplaceState;
                update.payload = payload;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback$1(callback, "replaceState");
                  }
                  update.callback = callback;
                }

                flushPassiveEffects();
                enqueueUpdate(fiber, update);
                scheduleWork(fiber, expirationTime);
              },
              enqueueForceUpdate: function(inst, callback) {
                var fiber = get(inst);
                var currentTime = requestCurrentTime();
                var expirationTime = computeExpirationForFiber(
                  currentTime,
                  fiber
                );
                var update = createUpdate(expirationTime);
                update.tag = ForceUpdate;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback$1(callback, "forceUpdate");
                  }
                  update.callback = callback;
                }

                flushPassiveEffects();
                enqueueUpdate(fiber, update);
                scheduleWork(fiber, expirationTime);
              }
            };

            function checkShouldComponentUpdate(
              workInProgress,
              ctor,
              oldProps,
              newProps,
              oldState,
              newState,
              nextContext
            ) {
              var instance = workInProgress.stateNode;

              if (typeof instance.shouldComponentUpdate === "function") {
                startPhaseTimer(workInProgress, "shouldComponentUpdate");
                var shouldUpdate = instance.shouldComponentUpdate(
                  newProps,
                  newState,
                  nextContext
                );
                stopPhaseTimer();
                {
                  !(shouldUpdate !== undefined)
                    ? warningWithoutStack$1(
                        false,
                        "%s.shouldComponentUpdate(): Returned undefined instead of a " +
                          "boolean value. Make sure to return true or false.",
                        getComponentName(ctor) || "Component"
                      )
                    : void 0;
                }
                return shouldUpdate;
              }

              if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                return (
                  !shallowEqual(oldProps, newProps) ||
                  !shallowEqual(oldState, newState)
                );
              }

              return true;
            }

            function checkClassInstance(workInProgress, ctor, newProps) {
              var instance = workInProgress.stateNode;
              {
                var name = getComponentName(ctor) || "Component";
                var renderPresent = instance.render;

                if (!renderPresent) {
                  if (
                    ctor.prototype &&
                    typeof ctor.prototype.render === "function"
                  ) {
                    warningWithoutStack$1(
                      false,
                      "%s(...): No `render` method found on the returned component " +
                        "instance: did you accidentally return an object from the constructor?",
                      name
                    );
                  } else {
                    warningWithoutStack$1(
                      false,
                      "%s(...): No `render` method found on the returned component " +
                        "instance: you may have forgotten to define `render`.",
                      name
                    );
                  }
                }

                var noGetInitialStateOnES6 =
                  !instance.getInitialState ||
                  instance.getInitialState.isReactClassApproved ||
                  instance.state;
                !noGetInitialStateOnES6
                  ? warningWithoutStack$1(
                      false,
                      "getInitialState was defined on %s, a plain JavaScript class. " +
                        "This is only supported for classes created using React.createClass. " +
                        "Did you mean to define a state property instead?",
                      name
                    )
                  : void 0;
                var noGetDefaultPropsOnES6 =
                  !instance.getDefaultProps ||
                  instance.getDefaultProps.isReactClassApproved;
                !noGetDefaultPropsOnES6
                  ? warningWithoutStack$1(
                      false,
                      "getDefaultProps was defined on %s, a plain JavaScript class. " +
                        "This is only supported for classes created using React.createClass. " +
                        "Use a static property to define defaultProps instead.",
                      name
                    )
                  : void 0;
                var noInstancePropTypes = !instance.propTypes;
                !noInstancePropTypes
                  ? warningWithoutStack$1(
                      false,
                      "propTypes was defined as an instance property on %s. Use a static " +
                        "property to define propTypes instead.",
                      name
                    )
                  : void 0;
                var noInstanceContextType = !instance.contextType;
                !noInstanceContextType
                  ? warningWithoutStack$1(
                      false,
                      "contextType was defined as an instance property on %s. Use a static " +
                        "property to define contextType instead.",
                      name
                    )
                  : void 0;
                var noInstanceContextTypes = !instance.contextTypes;
                !noInstanceContextTypes
                  ? warningWithoutStack$1(
                      false,
                      "contextTypes was defined as an instance property on %s. Use a static " +
                        "property to define contextTypes instead.",
                      name
                    )
                  : void 0;

                if (
                  ctor.contextType &&
                  ctor.contextTypes &&
                  !didWarnAboutContextTypeAndContextTypes.has(ctor)
                ) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  warningWithoutStack$1(
                    false,
                    "%s declares both contextTypes and contextType static properties. " +
                      "The legacy contextTypes property will be ignored.",
                    name
                  );
                }

                var noComponentShouldUpdate =
                  typeof instance.componentShouldUpdate !== "function";
                !noComponentShouldUpdate
                  ? warningWithoutStack$1(
                      false,
                      "%s has a method called " +
                        "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " +
                        "The name is phrased as a question because the function is " +
                        "expected to return a value.",
                      name
                    )
                  : void 0;

                if (
                  ctor.prototype &&
                  ctor.prototype.isPureReactComponent &&
                  typeof instance.shouldComponentUpdate !== "undefined"
                ) {
                  warningWithoutStack$1(
                    false,
                    "%s has a method called shouldComponentUpdate(). " +
                      "shouldComponentUpdate should not be used when extending React.PureComponent. " +
                      "Please extend React.Component if shouldComponentUpdate is used.",
                    getComponentName(ctor) || "A pure component"
                  );
                }

                var noComponentDidUnmount =
                  typeof instance.componentDidUnmount !== "function";
                !noComponentDidUnmount
                  ? warningWithoutStack$1(
                      false,
                      "%s has a method called " +
                        "componentDidUnmount(). But there is no such lifecycle method. " +
                        "Did you mean componentWillUnmount()?",
                      name
                    )
                  : void 0;
                var noComponentDidReceiveProps =
                  typeof instance.componentDidReceiveProps !== "function";
                !noComponentDidReceiveProps
                  ? warningWithoutStack$1(
                      false,
                      "%s has a method called " +
                        "componentDidReceiveProps(). But there is no such lifecycle method. " +
                        "If you meant to update the state in response to changing props, " +
                        "use componentWillReceiveProps(). If you meant to fetch data or " +
                        "run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
                      name
                    )
                  : void 0;
                var noComponentWillRecieveProps =
                  typeof instance.componentWillRecieveProps !== "function";
                !noComponentWillRecieveProps
                  ? warningWithoutStack$1(
                      false,
                      "%s has a method called " +
                        "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
                      name
                    )
                  : void 0;
                var noUnsafeComponentWillRecieveProps =
                  typeof instance.UNSAFE_componentWillRecieveProps !==
                  "function";
                !noUnsafeComponentWillRecieveProps
                  ? warningWithoutStack$1(
                      false,
                      "%s has a method called " +
                        "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
                      name
                    )
                  : void 0;
                var hasMutatedProps = instance.props !== newProps;
                !(instance.props === undefined || !hasMutatedProps)
                  ? warningWithoutStack$1(
                      false,
                      "%s(...): When calling super() in `%s`, make sure to pass " +
                        "up the same props that your component's constructor was passed.",
                      name,
                      name
                    )
                  : void 0;
                var noInstanceDefaultProps = !instance.defaultProps;
                !noInstanceDefaultProps
                  ? warningWithoutStack$1(
                      false,
                      "Setting defaultProps as an instance property on %s is not supported and will be ignored." +
                        " Instead, define defaultProps as a static property on %s.",
                      name,
                      name
                    )
                  : void 0;

                if (
                  typeof instance.getSnapshotBeforeUpdate === "function" &&
                  typeof instance.componentDidUpdate !== "function" &&
                  !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
                ) {
                  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                  warningWithoutStack$1(
                    false,
                    "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " +
                      "This component defines getSnapshotBeforeUpdate() only.",
                    getComponentName(ctor)
                  );
                }

                var noInstanceGetDerivedStateFromProps =
                  typeof instance.getDerivedStateFromProps !== "function";
                !noInstanceGetDerivedStateFromProps
                  ? warningWithoutStack$1(
                      false,
                      "%s: getDerivedStateFromProps() is defined as an instance method " +
                        "and will be ignored. Instead, declare it as a static method.",
                      name
                    )
                  : void 0;
                var noInstanceGetDerivedStateFromCatch =
                  typeof instance.getDerivedStateFromError !== "function";
                !noInstanceGetDerivedStateFromCatch
                  ? warningWithoutStack$1(
                      false,
                      "%s: getDerivedStateFromError() is defined as an instance method " +
                        "and will be ignored. Instead, declare it as a static method.",
                      name
                    )
                  : void 0;
                var noStaticGetSnapshotBeforeUpdate =
                  typeof ctor.getSnapshotBeforeUpdate !== "function";
                !noStaticGetSnapshotBeforeUpdate
                  ? warningWithoutStack$1(
                      false,
                      "%s: getSnapshotBeforeUpdate() is defined as a static method " +
                        "and will be ignored. Instead, declare it as an instance method.",
                      name
                    )
                  : void 0;
                var _state = instance.state;

                if (
                  _state &&
                  (typeof _state !== "object" || isArray$1(_state))
                ) {
                  warningWithoutStack$1(
                    false,
                    "%s.state: must be set to an object or null",
                    name
                  );
                }

                if (typeof instance.getChildContext === "function") {
                  !(typeof ctor.childContextTypes === "object")
                    ? warningWithoutStack$1(
                        false,
                        "%s.getChildContext(): childContextTypes must be defined in order to " +
                          "use getChildContext().",
                        name
                      )
                    : void 0;
                }
              }
            }

            function adoptClassInstance(workInProgress, instance) {
              instance.updater = classComponentUpdater;
              workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

              set(instance, workInProgress);
              {
                instance._reactInternalInstance = fakeInternalInstance;
              }
            }

            function constructClassInstance(
              workInProgress,
              ctor,
              props,
              renderExpirationTime
            ) {
              var isLegacyContextConsumer = false;
              var unmaskedContext = emptyContextObject;
              var context = null;
              var contextType = ctor.contextType;

              if (typeof contextType === "object" && contextType !== null) {
                {
                  if (
                    contextType.$$typeof !== REACT_CONTEXT_TYPE &&
                    !didWarnAboutInvalidateContextType.has(ctor)
                  ) {
                    didWarnAboutInvalidateContextType.add(ctor);
                    warningWithoutStack$1(
                      false,
                      "%s defines an invalid contextType. " +
                        "contextType should point to the Context object returned by React.createContext(). " +
                        "Did you accidentally pass the Context.Provider instead?",
                      getComponentName(ctor) || "Component"
                    );
                  }
                }
                context = readContext$1(contextType);
              } else {
                unmaskedContext = getUnmaskedContext(
                  workInProgress,
                  ctor,
                  true
                );
                var contextTypes = ctor.contextTypes;
                isLegacyContextConsumer =
                  contextTypes !== null && contextTypes !== undefined;
                context = isLegacyContextConsumer
                  ? getMaskedContext(workInProgress, unmaskedContext)
                  : emptyContextObject;
              } // Instantiate twice to help detect side-effects.

              {
                if (
                  debugRenderPhaseSideEffects ||
                  (debugRenderPhaseSideEffectsForStrictMode &&
                    workInProgress.mode & StrictMode)
                ) {
                  new ctor(props, context); // eslint-disable-line no-new
                }
              }
              var instance = new ctor(props, context);
              var state = (workInProgress.memoizedState =
                instance.state !== null && instance.state !== undefined
                  ? instance.state
                  : null);
              adoptClassInstance(workInProgress, instance);
              {
                if (
                  typeof ctor.getDerivedStateFromProps === "function" &&
                  state === null
                ) {
                  var componentName = getComponentName(ctor) || "Component";

                  if (!didWarnAboutUninitializedState.has(componentName)) {
                    didWarnAboutUninitializedState.add(componentName);
                    warningWithoutStack$1(
                      false,
                      "`%s` uses `getDerivedStateFromProps` but its initial state is " +
                        "%s. This is not recommended. Instead, define the initial state by " +
                        "assigning an object to `this.state` in the constructor of `%s`. " +
                        "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
                      componentName,
                      instance.state === null ? "null" : "undefined",
                      componentName
                    );
                  }
                } // If new component APIs are defined, "unsafe" lifecycles won't be called.
                // Warn about these lifecycles if they are present.
                // Don't warn about react-lifecycles-compat polyfilled methods though.

                if (
                  typeof ctor.getDerivedStateFromProps === "function" ||
                  typeof instance.getSnapshotBeforeUpdate === "function"
                ) {
                  var foundWillMountName = null;
                  var foundWillReceivePropsName = null;
                  var foundWillUpdateName = null;

                  if (
                    typeof instance.componentWillMount === "function" &&
                    instance.componentWillMount.__suppressDeprecationWarning !==
                      true
                  ) {
                    foundWillMountName = "componentWillMount";
                  } else if (
                    typeof instance.UNSAFE_componentWillMount === "function"
                  ) {
                    foundWillMountName = "UNSAFE_componentWillMount";
                  }

                  if (
                    typeof instance.componentWillReceiveProps === "function" &&
                    instance.componentWillReceiveProps
                      .__suppressDeprecationWarning !== true
                  ) {
                    foundWillReceivePropsName = "componentWillReceiveProps";
                  } else if (
                    typeof instance.UNSAFE_componentWillReceiveProps ===
                    "function"
                  ) {
                    foundWillReceivePropsName =
                      "UNSAFE_componentWillReceiveProps";
                  }

                  if (
                    typeof instance.componentWillUpdate === "function" &&
                    instance.componentWillUpdate
                      .__suppressDeprecationWarning !== true
                  ) {
                    foundWillUpdateName = "componentWillUpdate";
                  } else if (
                    typeof instance.UNSAFE_componentWillUpdate === "function"
                  ) {
                    foundWillUpdateName = "UNSAFE_componentWillUpdate";
                  }

                  if (
                    foundWillMountName !== null ||
                    foundWillReceivePropsName !== null ||
                    foundWillUpdateName !== null
                  ) {
                    var _componentName = getComponentName(ctor) || "Component";

                    var newApiName =
                      typeof ctor.getDerivedStateFromProps === "function"
                        ? "getDerivedStateFromProps()"
                        : "getSnapshotBeforeUpdate()";

                    if (
                      !didWarnAboutLegacyLifecyclesAndDerivedState.has(
                        _componentName
                      )
                    ) {
                      didWarnAboutLegacyLifecyclesAndDerivedState.add(
                        _componentName
                      );
                      warningWithoutStack$1(
                        false,
                        "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" +
                          "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" +
                          "The above lifecycles should be removed. Learn more about this warning here:\n" +
                          "https://fb.me/react-async-component-lifecycle-hooks",
                        _componentName,
                        newApiName,
                        foundWillMountName !== null
                          ? "\n  " + foundWillMountName
                          : "",
                        foundWillReceivePropsName !== null
                          ? "\n  " + foundWillReceivePropsName
                          : "",
                        foundWillUpdateName !== null
                          ? "\n  " + foundWillUpdateName
                          : ""
                      );
                    }
                  }
                }
              } // Cache unmasked context so we can avoid recreating masked context unless necessary.
              // ReactFiberContext usually updates this cache but can't for newly-created instances.

              if (isLegacyContextConsumer) {
                cacheContext(workInProgress, unmaskedContext, context);
              }

              return instance;
            }

            function callComponentWillMount(workInProgress, instance) {
              startPhaseTimer(workInProgress, "componentWillMount");
              var oldState = instance.state;

              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }

              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }

              stopPhaseTimer();

              if (oldState !== instance.state) {
                {
                  warningWithoutStack$1(
                    false,
                    "%s.componentWillMount(): Assigning directly to this.state is " +
                      "deprecated (except inside a component's " +
                      "constructor). Use setState instead.",
                    getComponentName(workInProgress.type) || "Component"
                  );
                }
                classComponentUpdater.enqueueReplaceState(
                  instance,
                  instance.state,
                  null
                );
              }
            }

            function callComponentWillReceiveProps(
              workInProgress,
              instance,
              newProps,
              nextContext
            ) {
              var oldState = instance.state;
              startPhaseTimer(workInProgress, "componentWillReceiveProps");

              if (typeof instance.componentWillReceiveProps === "function") {
                instance.componentWillReceiveProps(newProps, nextContext);
              }

              if (
                typeof instance.UNSAFE_componentWillReceiveProps === "function"
              ) {
                instance.UNSAFE_componentWillReceiveProps(
                  newProps,
                  nextContext
                );
              }

              stopPhaseTimer();

              if (instance.state !== oldState) {
                {
                  var componentName =
                    getComponentName(workInProgress.type) || "Component";

                  if (
                    !didWarnAboutStateAssignmentForComponent.has(componentName)
                  ) {
                    didWarnAboutStateAssignmentForComponent.add(componentName);
                    warningWithoutStack$1(
                      false,
                      "%s.componentWillReceiveProps(): Assigning directly to " +
                        "this.state is deprecated (except inside a component's " +
                        "constructor). Use setState instead.",
                      componentName
                    );
                  }
                }
                classComponentUpdater.enqueueReplaceState(
                  instance,
                  instance.state,
                  null
                );
              }
            } // Invokes the mount life-cycles on a previously never rendered instance.

            function mountClassInstance(
              workInProgress,
              ctor,
              newProps,
              renderExpirationTime
            ) {
              {
                checkClassInstance(workInProgress, ctor, newProps);
              }
              var instance = workInProgress.stateNode;
              instance.props = newProps;
              instance.state = workInProgress.memoizedState;
              instance.refs = emptyRefsObject;
              var contextType = ctor.contextType;

              if (typeof contextType === "object" && contextType !== null) {
                instance.context = readContext$1(contextType);
              } else {
                var unmaskedContext = getUnmaskedContext(
                  workInProgress,
                  ctor,
                  true
                );
                instance.context = getMaskedContext(
                  workInProgress,
                  unmaskedContext
                );
              }

              {
                if (instance.state === newProps) {
                  var componentName = getComponentName(ctor) || "Component";

                  if (
                    !didWarnAboutDirectlyAssigningPropsToState.has(
                      componentName
                    )
                  ) {
                    didWarnAboutDirectlyAssigningPropsToState.add(
                      componentName
                    );
                    warningWithoutStack$1(
                      false,
                      "%s: It is not recommended to assign props directly to state " +
                        "because updates to props won't be reflected in state. " +
                        "In most cases, it is better to use props directly.",
                      componentName
                    );
                  }
                }

                if (workInProgress.mode & StrictMode) {
                  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
                    workInProgress,
                    instance
                  );
                  ReactStrictModeWarnings.recordLegacyContextWarning(
                    workInProgress,
                    instance
                  );
                }

                if (warnAboutDeprecatedLifecycles) {
                  ReactStrictModeWarnings.recordDeprecationWarnings(
                    workInProgress,
                    instance
                  );
                }
              }
              var updateQueue = workInProgress.updateQueue;

              if (updateQueue !== null) {
                processUpdateQueue(
                  workInProgress,
                  updateQueue,
                  newProps,
                  instance,
                  renderExpirationTime
                );
                instance.state = workInProgress.memoizedState;
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(
                  workInProgress,
                  ctor,
                  getDerivedStateFromProps,
                  newProps
                );
                instance.state = workInProgress.memoizedState;
              } // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.

              if (
                typeof ctor.getDerivedStateFromProps !== "function" &&
                typeof instance.getSnapshotBeforeUpdate !== "function" &&
                (typeof instance.UNSAFE_componentWillMount === "function" ||
                  typeof instance.componentWillMount === "function")
              ) {
                callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
                // process them now.

                updateQueue = workInProgress.updateQueue;

                if (updateQueue !== null) {
                  processUpdateQueue(
                    workInProgress,
                    updateQueue,
                    newProps,
                    instance,
                    renderExpirationTime
                  );
                  instance.state = workInProgress.memoizedState;
                }
              }

              if (typeof instance.componentDidMount === "function") {
                workInProgress.effectTag |= Update;
              }
            }

            function resumeMountClassInstance(
              workInProgress,
              ctor,
              newProps,
              renderExpirationTime
            ) {
              var instance = workInProgress.stateNode;
              var oldProps = workInProgress.memoizedProps;
              instance.props = oldProps;
              var oldContext = instance.context;
              var contextType = ctor.contextType;
              var nextContext = void 0;

              if (typeof contextType === "object" && contextType !== null) {
                nextContext = readContext$1(contextType);
              } else {
                var nextLegacyUnmaskedContext = getUnmaskedContext(
                  workInProgress,
                  ctor,
                  true
                );
                nextContext = getMaskedContext(
                  workInProgress,
                  nextLegacyUnmaskedContext
                );
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
              var hasNewLifecycles =
                typeof getDerivedStateFromProps === "function" ||
                typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
              // ever the previously attempted to render - not the "current". However,
              // during componentDidUpdate we pass the "current" props.
              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.

              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillReceiveProps ===
                  "function" ||
                  typeof instance.componentWillReceiveProps === "function")
              ) {
                if (oldProps !== newProps || oldContext !== nextContext) {
                  callComponentWillReceiveProps(
                    workInProgress,
                    instance,
                    newProps,
                    nextContext
                  );
                }
              }

              resetHasForceUpdateBeforeProcessing();
              var oldState = workInProgress.memoizedState;
              var newState = (instance.state = oldState);
              var updateQueue = workInProgress.updateQueue;

              if (updateQueue !== null) {
                processUpdateQueue(
                  workInProgress,
                  updateQueue,
                  newProps,
                  instance,
                  renderExpirationTime
                );
                newState = workInProgress.memoizedState;
              }

              if (
                oldProps === newProps &&
                oldState === newState &&
                !hasContextChanged() &&
                !checkHasForceUpdateAfterProcessing()
              ) {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidMount === "function") {
                  workInProgress.effectTag |= Update;
                }

                return false;
              }

              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(
                  workInProgress,
                  ctor,
                  getDerivedStateFromProps,
                  newProps
                );
                newState = workInProgress.memoizedState;
              }

              var shouldUpdate =
                checkHasForceUpdateAfterProcessing() ||
                checkShouldComponentUpdate(
                  workInProgress,
                  ctor,
                  oldProps,
                  newProps,
                  oldState,
                  newState,
                  nextContext
                );

              if (shouldUpdate) {
                // In order to support react-lifecycles-compat polyfilled components,
                // Unsafe lifecycles should not be invoked for components using the new APIs.
                if (
                  !hasNewLifecycles &&
                  (typeof instance.UNSAFE_componentWillMount === "function" ||
                    typeof instance.componentWillMount === "function")
                ) {
                  startPhaseTimer(workInProgress, "componentWillMount");

                  if (typeof instance.componentWillMount === "function") {
                    instance.componentWillMount();
                  }

                  if (
                    typeof instance.UNSAFE_componentWillMount === "function"
                  ) {
                    instance.UNSAFE_componentWillMount();
                  }

                  stopPhaseTimer();
                }

                if (typeof instance.componentDidMount === "function") {
                  workInProgress.effectTag |= Update;
                }
              } else {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidMount === "function") {
                  workInProgress.effectTag |= Update;
                } // If shouldComponentUpdate returned false, we should still update the
                // memoized state to indicate that this work can be reused.

                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
              } // Update the existing instance's state, props, and context pointers even
              // if shouldComponentUpdate returns false.

              instance.props = newProps;
              instance.state = newState;
              instance.context = nextContext;
              return shouldUpdate;
            } // Invokes the update life-cycles and returns false if it shouldn't rerender.

            function updateClassInstance(
              current,
              workInProgress,
              ctor,
              newProps,
              renderExpirationTime
            ) {
              var instance = workInProgress.stateNode;
              var oldProps = workInProgress.memoizedProps;
              instance.props =
                workInProgress.type === workInProgress.elementType
                  ? oldProps
                  : resolveDefaultProps(workInProgress.type, oldProps);
              var oldContext = instance.context;
              var contextType = ctor.contextType;
              var nextContext = void 0;

              if (typeof contextType === "object" && contextType !== null) {
                nextContext = readContext$1(contextType);
              } else {
                var nextUnmaskedContext = getUnmaskedContext(
                  workInProgress,
                  ctor,
                  true
                );
                nextContext = getMaskedContext(
                  workInProgress,
                  nextUnmaskedContext
                );
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
              var hasNewLifecycles =
                typeof getDerivedStateFromProps === "function" ||
                typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
              // ever the previously attempted to render - not the "current". However,
              // during componentDidUpdate we pass the "current" props.
              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.

              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillReceiveProps ===
                  "function" ||
                  typeof instance.componentWillReceiveProps === "function")
              ) {
                if (oldProps !== newProps || oldContext !== nextContext) {
                  callComponentWillReceiveProps(
                    workInProgress,
                    instance,
                    newProps,
                    nextContext
                  );
                }
              }

              resetHasForceUpdateBeforeProcessing();
              var oldState = workInProgress.memoizedState;
              var newState = (instance.state = oldState);
              var updateQueue = workInProgress.updateQueue;

              if (updateQueue !== null) {
                processUpdateQueue(
                  workInProgress,
                  updateQueue,
                  newProps,
                  instance,
                  renderExpirationTime
                );
                newState = workInProgress.memoizedState;
              }

              if (
                oldProps === newProps &&
                oldState === newState &&
                !hasContextChanged() &&
                !checkHasForceUpdateAfterProcessing()
              ) {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === "function") {
                  if (
                    oldProps !== current.memoizedProps ||
                    oldState !== current.memoizedState
                  ) {
                    workInProgress.effectTag |= Update;
                  }
                }

                if (typeof instance.getSnapshotBeforeUpdate === "function") {
                  if (
                    oldProps !== current.memoizedProps ||
                    oldState !== current.memoizedState
                  ) {
                    workInProgress.effectTag |= Snapshot;
                  }
                }

                return false;
              }

              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(
                  workInProgress,
                  ctor,
                  getDerivedStateFromProps,
                  newProps
                );
                newState = workInProgress.memoizedState;
              }

              var shouldUpdate =
                checkHasForceUpdateAfterProcessing() ||
                checkShouldComponentUpdate(
                  workInProgress,
                  ctor,
                  oldProps,
                  newProps,
                  oldState,
                  newState,
                  nextContext
                );

              if (shouldUpdate) {
                // In order to support react-lifecycles-compat polyfilled components,
                // Unsafe lifecycles should not be invoked for components using the new APIs.
                if (
                  !hasNewLifecycles &&
                  (typeof instance.UNSAFE_componentWillUpdate === "function" ||
                    typeof instance.componentWillUpdate === "function")
                ) {
                  startPhaseTimer(workInProgress, "componentWillUpdate");

                  if (typeof instance.componentWillUpdate === "function") {
                    instance.componentWillUpdate(
                      newProps,
                      newState,
                      nextContext
                    );
                  }

                  if (
                    typeof instance.UNSAFE_componentWillUpdate === "function"
                  ) {
                    instance.UNSAFE_componentWillUpdate(
                      newProps,
                      newState,
                      nextContext
                    );
                  }

                  stopPhaseTimer();
                }

                if (typeof instance.componentDidUpdate === "function") {
                  workInProgress.effectTag |= Update;
                }

                if (typeof instance.getSnapshotBeforeUpdate === "function") {
                  workInProgress.effectTag |= Snapshot;
                }
              } else {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === "function") {
                  if (
                    oldProps !== current.memoizedProps ||
                    oldState !== current.memoizedState
                  ) {
                    workInProgress.effectTag |= Update;
                  }
                }

                if (typeof instance.getSnapshotBeforeUpdate === "function") {
                  if (
                    oldProps !== current.memoizedProps ||
                    oldState !== current.memoizedState
                  ) {
                    workInProgress.effectTag |= Snapshot;
                  }
                } // If shouldComponentUpdate returned false, we should still update the
                // memoized props/state to indicate that this work can be reused.

                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
              } // Update the existing instance's state, props, and context pointers even
              // if shouldComponentUpdate returns false.

              instance.props = newProps;
              instance.state = newState;
              instance.context = nextContext;
              return shouldUpdate;
            }

            var didWarnAboutMaps = void 0;
            var didWarnAboutGenerators = void 0;
            var didWarnAboutStringRefInStrictMode = void 0;
            var ownerHasKeyUseWarning = void 0;
            var ownerHasFunctionTypeWarning = void 0;

            var warnForMissingKey = function(child) {};

            {
              didWarnAboutMaps = false;
              didWarnAboutGenerators = false;
              didWarnAboutStringRefInStrictMode = {};
              /**
               * Warn if there's no key explicitly set on dynamic arrays of children or
               * object keys are not valid. This allows us to keep track of children between
               * updates.
               */

              ownerHasKeyUseWarning = {};
              ownerHasFunctionTypeWarning = {};

              warnForMissingKey = function(child) {
                if (child === null || typeof child !== "object") {
                  return;
                }

                if (
                  !child._store ||
                  child._store.validated ||
                  child.key != null
                ) {
                  return;
                }

                !(typeof child._store === "object")
                  ? invariant(
                      false,
                      "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
                    )
                  : void 0;
                child._store.validated = true;
                var currentComponentErrorInfo =
                  "Each child in an array or iterator should have a unique " +
                  '"key" prop. See https://fb.me/react-warning-keys for ' +
                  "more information." +
                  getCurrentFiberStackInDev();

                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                  return;
                }

                ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                warning$1(
                  false,
                  "Each child in an array or iterator should have a unique " +
                    '"key" prop. See https://fb.me/react-warning-keys for ' +
                    "more information."
                );
              };
            }
            var isArray = Array.isArray;

            function coerceRef(returnFiber, current$$1, element) {
              var mixedRef = element.ref;

              if (
                mixedRef !== null &&
                typeof mixedRef !== "function" &&
                typeof mixedRef !== "object"
              ) {
                {
                  if (returnFiber.mode & StrictMode) {
                    var componentName =
                      getComponentName(returnFiber.type) || "Component";

                    if (!didWarnAboutStringRefInStrictMode[componentName]) {
                      warningWithoutStack$1(
                        false,
                        'A string ref, "%s", has been found within a strict mode tree. ' +
                          "String refs are a source of potential bugs and should be avoided. " +
                          "We recommend using createRef() instead." +
                          "\n%s" +
                          "\n\nLearn more about using refs safely here:" +
                          "\nhttps://fb.me/react-strict-mode-string-ref",
                        mixedRef,
                        getStackByFiberInDevAndProd(returnFiber)
                      );
                      didWarnAboutStringRefInStrictMode[componentName] = true;
                    }
                  }
                }

                if (element._owner) {
                  var owner = element._owner;
                  var inst = void 0;

                  if (owner) {
                    var ownerFiber = owner;
                    !(ownerFiber.tag === ClassComponent)
                      ? invariant(
                          false,
                          "Function components cannot have refs."
                        )
                      : void 0;
                    inst = ownerFiber.stateNode;
                  }

                  !inst
                    ? invariant(
                        false,
                        "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.",
                        mixedRef
                      )
                    : void 0;
                  var stringRef = "" + mixedRef; // Check if previous string ref matches new string ref

                  if (
                    current$$1 !== null &&
                    current$$1.ref !== null &&
                    typeof current$$1.ref === "function" &&
                    current$$1.ref._stringRef === stringRef
                  ) {
                    return current$$1.ref;
                  }

                  var ref = function(value) {
                    var refs = inst.refs;

                    if (refs === emptyRefsObject) {
                      // This is a lazy pooled frozen object, so we need to initialize.
                      refs = inst.refs = {};
                    }

                    if (value === null) {
                      delete refs[stringRef];
                    } else {
                      refs[stringRef] = value;
                    }
                  };

                  ref._stringRef = stringRef;
                  return ref;
                } else {
                  !(typeof mixedRef === "string")
                    ? invariant(
                        false,
                        "Expected ref to be a function, a string, an object returned by React.createRef(), or null."
                      )
                    : void 0;
                  !element._owner
                    ? invariant(
                        false,
                        "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.",
                        mixedRef
                      )
                    : void 0;
                }
              }

              return mixedRef;
            }

            function throwOnInvalidObjectType(returnFiber, newChild) {
              if (returnFiber.type !== "textarea") {
                var addendum = "";
                {
                  addendum =
                    " If you meant to render a collection of children, use an array " +
                    "instead." +
                    getCurrentFiberStackInDev();
                }
                invariant(
                  false,
                  "Objects are not valid as a React child (found: %s).%s",
                  Object.prototype.toString.call(newChild) === "[object Object]"
                    ? "object with keys {" +
                        Object.keys(newChild).join(", ") +
                        "}"
                    : newChild,
                  addendum
                );
              }
            }

            function warnOnFunctionType() {
              var currentComponentErrorInfo =
                "Functions are not valid as a React child. This may happen if " +
                "you return a Component instead of <Component /> from render. " +
                "Or maybe you meant to call this function rather than return it." +
                getCurrentFiberStackInDev();

              if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                return;
              }

              ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
              warning$1(
                false,
                "Functions are not valid as a React child. This may happen if " +
                  "you return a Component instead of <Component /> from render. " +
                  "Or maybe you meant to call this function rather than return it."
              );
            } // This wrapper function exists because I expect to clone the code in each path
            // to be able to optimize each path individually by branching early. This needs
            // a compiler or we can do it manually. Helpers that don't need this branching
            // live outside of this function.

            function ChildReconciler(shouldTrackSideEffects) {
              function deleteChild(returnFiber, childToDelete) {
                if (!shouldTrackSideEffects) {
                  // Noop.
                  return;
                } // Deletions are added in reversed order so we add it to the front.
                // At this point, the return fiber's effect list is empty except for
                // deletions, so we can just append the deletion to the list. The remaining
                // effects aren't added until the complete phase. Once we implement
                // resuming, this may not be true.

                var last = returnFiber.lastEffect;

                if (last !== null) {
                  last.nextEffect = childToDelete;
                  returnFiber.lastEffect = childToDelete;
                } else {
                  returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                }

                childToDelete.nextEffect = null;
                childToDelete.effectTag = Deletion;
              }

              function deleteRemainingChildren(returnFiber, currentFirstChild) {
                if (!shouldTrackSideEffects) {
                  // Noop.
                  return null;
                } // TODO: For the shouldClone case, this could be micro-optimized a bit by
                // assuming that after the first child we've already added everything.

                var childToDelete = currentFirstChild;

                while (childToDelete !== null) {
                  deleteChild(returnFiber, childToDelete);
                  childToDelete = childToDelete.sibling;
                }

                return null;
              }

              function mapRemainingChildren(returnFiber, currentFirstChild) {
                // Add the remaining children to a temporary map so that we can find them by
                // keys quickly. Implicit (null) keys get added to this set with their index
                var existingChildren = new Map();
                var existingChild = currentFirstChild;

                while (existingChild !== null) {
                  if (existingChild.key !== null) {
                    existingChildren.set(existingChild.key, existingChild);
                  } else {
                    existingChildren.set(existingChild.index, existingChild);
                  }

                  existingChild = existingChild.sibling;
                }

                return existingChildren;
              }

              function useFiber(fiber, pendingProps, expirationTime) {
                // We currently set sibling to null and index to 0 here because it is easy
                // to forget to do before returning it. E.g. for the single child case.
                var clone = createWorkInProgress(
                  fiber,
                  pendingProps,
                  expirationTime
                );
                clone.index = 0;
                clone.sibling = null;
                return clone;
              }

              function placeChild(newFiber, lastPlacedIndex, newIndex) {
                newFiber.index = newIndex;

                if (!shouldTrackSideEffects) {
                  // Noop.
                  return lastPlacedIndex;
                }

                var current$$1 = newFiber.alternate;

                if (current$$1 !== null) {
                  var oldIndex = current$$1.index;

                  if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.effectTag = Placement;
                    return lastPlacedIndex;
                  } else {
                    // This item can stay in place.
                    return oldIndex;
                  }
                } else {
                  // This is an insertion.
                  newFiber.effectTag = Placement;
                  return lastPlacedIndex;
                }
              }

              function placeSingleChild(newFiber) {
                // This is simpler for the single child case. We only need to do a
                // placement for inserting new children.
                if (shouldTrackSideEffects && newFiber.alternate === null) {
                  newFiber.effectTag = Placement;
                }

                return newFiber;
              }

              function updateTextNode(
                returnFiber,
                current$$1,
                textContent,
                expirationTime
              ) {
                if (current$$1 === null || current$$1.tag !== HostText) {
                  // Insert
                  var created = createFiberFromText(
                    textContent,
                    returnFiber.mode,
                    expirationTime
                  );
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(
                    current$$1,
                    textContent,
                    expirationTime
                  );
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function updateElement(
                returnFiber,
                current$$1,
                element,
                expirationTime
              ) {
                if (
                  current$$1 !== null &&
                  current$$1.elementType === element.type
                ) {
                  // Move based on index
                  var existing = useFiber(
                    current$$1,
                    element.props,
                    expirationTime
                  );
                  existing.ref = coerceRef(returnFiber, current$$1, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                } else {
                  // Insert
                  var created = createFiberFromElement(
                    element,
                    returnFiber.mode,
                    expirationTime
                  );
                  created.ref = coerceRef(returnFiber, current$$1, element);
                  created.return = returnFiber;
                  return created;
                }
              }

              function updatePortal(
                returnFiber,
                current$$1,
                portal,
                expirationTime
              ) {
                if (
                  current$$1 === null ||
                  current$$1.tag !== HostPortal ||
                  current$$1.stateNode.containerInfo !== portal.containerInfo ||
                  current$$1.stateNode.implementation !== portal.implementation
                ) {
                  // Insert
                  var created = createFiberFromPortal(
                    portal,
                    returnFiber.mode,
                    expirationTime
                  );
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(
                    current$$1,
                    portal.children || [],
                    expirationTime
                  );
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function updateFragment(
                returnFiber,
                current$$1,
                fragment,
                expirationTime,
                key
              ) {
                if (current$$1 === null || current$$1.tag !== Fragment) {
                  // Insert
                  var created = createFiberFromFragment(
                    fragment,
                    returnFiber.mode,
                    expirationTime,
                    key
                  );
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(current$$1, fragment, expirationTime);
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function createChild(returnFiber, newChild, expirationTime) {
                if (
                  typeof newChild === "string" ||
                  typeof newChild === "number"
                ) {
                  // Text nodes don't have keys. If the previous node is implicitly keyed
                  // we can continue to replace it without aborting even if it is not a text
                  // node.
                  var created = createFiberFromText(
                    "" + newChild,
                    returnFiber.mode,
                    expirationTime
                  );
                  created.return = returnFiber;
                  return created;
                }

                if (typeof newChild === "object" && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE: {
                      var _created = createFiberFromElement(
                        newChild,
                        returnFiber.mode,
                        expirationTime
                      );

                      _created.ref = coerceRef(returnFiber, null, newChild);
                      _created.return = returnFiber;
                      return _created;
                    }

                    case REACT_PORTAL_TYPE: {
                      var _created2 = createFiberFromPortal(
                        newChild,
                        returnFiber.mode,
                        expirationTime
                      );

                      _created2.return = returnFiber;
                      return _created2;
                    }
                  }

                  if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(
                      newChild,
                      returnFiber.mode,
                      expirationTime,
                      null
                    );

                    _created3.return = returnFiber;
                    return _created3;
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === "function") {
                    warnOnFunctionType();
                  }
                }
                return null;
              }

              function updateSlot(
                returnFiber,
                oldFiber,
                newChild,
                expirationTime
              ) {
                // Update the fiber if the keys match, otherwise return null.
                var key = oldFiber !== null ? oldFiber.key : null;

                if (
                  typeof newChild === "string" ||
                  typeof newChild === "number"
                ) {
                  // Text nodes don't have keys. If the previous node is implicitly keyed
                  // we can continue to replace it without aborting even if it is not a text
                  // node.
                  if (key !== null) {
                    return null;
                  }

                  return updateTextNode(
                    returnFiber,
                    oldFiber,
                    "" + newChild,
                    expirationTime
                  );
                }

                if (typeof newChild === "object" && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE: {
                      if (newChild.key === key) {
                        if (newChild.type === REACT_FRAGMENT_TYPE) {
                          return updateFragment(
                            returnFiber,
                            oldFiber,
                            newChild.props.children,
                            expirationTime,
                            key
                          );
                        }

                        return updateElement(
                          returnFiber,
                          oldFiber,
                          newChild,
                          expirationTime
                        );
                      } else {
                        return null;
                      }
                    }

                    case REACT_PORTAL_TYPE: {
                      if (newChild.key === key) {
                        return updatePortal(
                          returnFiber,
                          oldFiber,
                          newChild,
                          expirationTime
                        );
                      } else {
                        return null;
                      }
                    }
                  }

                  if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) {
                      return null;
                    }

                    return updateFragment(
                      returnFiber,
                      oldFiber,
                      newChild,
                      expirationTime,
                      null
                    );
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === "function") {
                    warnOnFunctionType();
                  }
                }
                return null;
              }

              function updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                newChild,
                expirationTime
              ) {
                if (
                  typeof newChild === "string" ||
                  typeof newChild === "number"
                ) {
                  // Text nodes don't have keys, so we neither have to check the old nor
                  // new node for the key. If both are text nodes, they match.
                  var matchedFiber = existingChildren.get(newIdx) || null;
                  return updateTextNode(
                    returnFiber,
                    matchedFiber,
                    "" + newChild,
                    expirationTime
                  );
                }

                if (typeof newChild === "object" && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE: {
                      var _matchedFiber =
                        existingChildren.get(
                          newChild.key === null ? newIdx : newChild.key
                        ) || null;

                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment(
                          returnFiber,
                          _matchedFiber,
                          newChild.props.children,
                          expirationTime,
                          newChild.key
                        );
                      }

                      return updateElement(
                        returnFiber,
                        _matchedFiber,
                        newChild,
                        expirationTime
                      );
                    }

                    case REACT_PORTAL_TYPE: {
                      var _matchedFiber2 =
                        existingChildren.get(
                          newChild.key === null ? newIdx : newChild.key
                        ) || null;

                      return updatePortal(
                        returnFiber,
                        _matchedFiber2,
                        newChild,
                        expirationTime
                      );
                    }
                  }

                  if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;

                    return updateFragment(
                      returnFiber,
                      _matchedFiber3,
                      newChild,
                      expirationTime,
                      null
                    );
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === "function") {
                    warnOnFunctionType();
                  }
                }
                return null;
              }
              /**
               * Warns if there is a duplicate or missing key
               */

              function warnOnInvalidKey(child, knownKeys) {
                {
                  if (typeof child !== "object" || child === null) {
                    return knownKeys;
                  }

                  switch (child.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      warnForMissingKey(child);
                      var key = child.key;

                      if (typeof key !== "string") {
                        break;
                      }

                      if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                      }

                      if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                      }

                      warning$1(
                        false,
                        "Encountered two children with the same key, `%s`. " +
                          "Keys should be unique so that components maintain their identity " +
                          "across updates. Non-unique keys may cause children to be " +
                          "duplicated and/or omitted — the behavior is unsupported and " +
                          "could change in a future version.",
                        key
                      );
                      break;

                    default:
                      break;
                  }
                }
                return knownKeys;
              }

              function reconcileChildrenArray(
                returnFiber,
                currentFirstChild,
                newChildren,
                expirationTime
              ) {
                // This algorithm can't optimize by searching from boths ends since we
                // don't have backpointers on fibers. I'm trying to see how far we can get
                // with that model. If it ends up not being worth the tradeoffs, we can
                // add it later.
                // Even with a two ended optimization, we'd want to optimize for the case
                // where there are few changes and brute force the comparison instead of
                // going for the Map. It'd like to explore hitting that path first in
                // forward-only mode and only go for the Map once we notice that we need
                // lots of look ahead. This doesn't handle reversal as well as two ended
                // search but that's unusual. Besides, for the two ended optimization to
                // work on Iterables, we'd need to copy the whole set.
                // In this first iteration, we'll just live with hitting the bad case
                // (adding everything to a Map) in for every insert/move.
                // If you change this code, also update reconcileChildrenIterator() which
                // uses the same algorithm.
                {
                  // First, validate keys.
                  var knownKeys = null;

                  for (var i = 0; i < newChildren.length; i++) {
                    var child = newChildren[i];
                    knownKeys = warnOnInvalidKey(child, knownKeys);
                  }
                }
                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;

                for (
                  ;
                  oldFiber !== null && newIdx < newChildren.length;
                  newIdx++
                ) {
                  if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                  } else {
                    nextOldFiber = oldFiber.sibling;
                  }

                  var newFiber = updateSlot(
                    returnFiber,
                    oldFiber,
                    newChildren[newIdx],
                    expirationTime
                  );

                  if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) {
                      oldFiber = nextOldFiber;
                    }

                    break;
                  }

                  if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                      // We matched the slot, but we didn't reuse the existing fiber, so we
                      // need to delete the existing child.
                      deleteChild(returnFiber, oldFiber);
                    }
                  }

                  lastPlacedIndex = placeChild(
                    newFiber,
                    lastPlacedIndex,
                    newIdx
                  );

                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                  } else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                  }

                  previousNewFiber = newFiber;
                  oldFiber = nextOldFiber;
                }

                if (newIdx === newChildren.length) {
                  // We've reached the end of the new children. We can delete the rest.
                  deleteRemainingChildren(returnFiber, oldFiber);
                  return resultingFirstChild;
                }

                if (oldFiber === null) {
                  // If we don't have any more existing children we can choose a fast path
                  // since the rest will all be insertions.
                  for (; newIdx < newChildren.length; newIdx++) {
                    var _newFiber = createChild(
                      returnFiber,
                      newChildren[newIdx],
                      expirationTime
                    );

                    if (!_newFiber) {
                      continue;
                    }

                    lastPlacedIndex = placeChild(
                      _newFiber,
                      lastPlacedIndex,
                      newIdx
                    );

                    if (previousNewFiber === null) {
                      // TODO: Move out of the loop. This only happens for the first run.
                      resultingFirstChild = _newFiber;
                    } else {
                      previousNewFiber.sibling = _newFiber;
                    }

                    previousNewFiber = _newFiber;
                  }

                  return resultingFirstChild;
                } // Add all children to a key map for quick lookups.

                var existingChildren = mapRemainingChildren(
                  returnFiber,
                  oldFiber
                ); // Keep scanning and use the map to restore deleted items as moves.

                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber2 = updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    newChildren[newIdx],
                    expirationTime
                  );

                  if (_newFiber2) {
                    if (shouldTrackSideEffects) {
                      if (_newFiber2.alternate !== null) {
                        // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(
                          _newFiber2.key === null ? newIdx : _newFiber2.key
                        );
                      }
                    }

                    lastPlacedIndex = placeChild(
                      _newFiber2,
                      lastPlacedIndex,
                      newIdx
                    );

                    if (previousNewFiber === null) {
                      resultingFirstChild = _newFiber2;
                    } else {
                      previousNewFiber.sibling = _newFiber2;
                    }

                    previousNewFiber = _newFiber2;
                  }
                }

                if (shouldTrackSideEffects) {
                  // Any existing children that weren't consumed above were deleted. We need
                  // to add them to the deletion list.
                  existingChildren.forEach(function(child) {
                    return deleteChild(returnFiber, child);
                  });
                }

                return resultingFirstChild;
              }

              function reconcileChildrenIterator(
                returnFiber,
                currentFirstChild,
                newChildrenIterable,
                expirationTime
              ) {
                // This is the same implementation as reconcileChildrenArray(),
                // but using the iterator instead.
                var iteratorFn = getIteratorFn(newChildrenIterable);
                !(typeof iteratorFn === "function")
                  ? invariant(
                      false,
                      "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
                    )
                  : void 0;
                {
                  // We don't support rendering Generators because it's a mutation.
                  // See https://github.com/facebook/react/issues/12995
                  if (
                    typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                    newChildrenIterable[Symbol.toStringTag] === "Generator"
                  ) {
                    !didWarnAboutGenerators
                      ? warning$1(
                          false,
                          "Using Generators as children is unsupported and will likely yield " +
                            "unexpected results because enumerating a generator mutates it. " +
                            "You may convert it to an array with `Array.from()` or the " +
                            "`[...spread]` operator before rendering. Keep in mind " +
                            "you might need to polyfill these features for older browsers."
                        )
                      : void 0;
                    didWarnAboutGenerators = true;
                  } // Warn about using Maps as children

                  if (newChildrenIterable.entries === iteratorFn) {
                    !didWarnAboutMaps
                      ? warning$1(
                          false,
                          "Using Maps as children is unsupported and will likely yield " +
                            "unexpected results. Convert it to a sequence/iterable of keyed " +
                            "ReactElements instead."
                        )
                      : void 0;
                    didWarnAboutMaps = true;
                  } // First, validate keys.
                  // We'll get a different iterator later for the main pass.

                  var _newChildren = iteratorFn.call(newChildrenIterable);

                  if (_newChildren) {
                    var knownKeys = null;

                    var _step = _newChildren.next();

                    for (; !_step.done; _step = _newChildren.next()) {
                      var child = _step.value;
                      knownKeys = warnOnInvalidKey(child, knownKeys);
                    }
                  }
                }
                var newChildren = iteratorFn.call(newChildrenIterable);
                !(newChildren != null)
                  ? invariant(false, "An iterable object provided no iterator.")
                  : void 0;
                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;
                var step = newChildren.next();

                for (
                  ;
                  oldFiber !== null && !step.done;
                  newIdx++, step = newChildren.next()
                ) {
                  if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                  } else {
                    nextOldFiber = oldFiber.sibling;
                  }

                  var newFiber = updateSlot(
                    returnFiber,
                    oldFiber,
                    step.value,
                    expirationTime
                  );

                  if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (!oldFiber) {
                      oldFiber = nextOldFiber;
                    }

                    break;
                  }

                  if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                      // We matched the slot, but we didn't reuse the existing fiber, so we
                      // need to delete the existing child.
                      deleteChild(returnFiber, oldFiber);
                    }
                  }

                  lastPlacedIndex = placeChild(
                    newFiber,
                    lastPlacedIndex,
                    newIdx
                  );

                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                  } else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                  }

                  previousNewFiber = newFiber;
                  oldFiber = nextOldFiber;
                }

                if (step.done) {
                  // We've reached the end of the new children. We can delete the rest.
                  deleteRemainingChildren(returnFiber, oldFiber);
                  return resultingFirstChild;
                }

                if (oldFiber === null) {
                  // If we don't have any more existing children we can choose a fast path
                  // since the rest will all be insertions.
                  for (; !step.done; newIdx++, step = newChildren.next()) {
                    var _newFiber3 = createChild(
                      returnFiber,
                      step.value,
                      expirationTime
                    );

                    if (_newFiber3 === null) {
                      continue;
                    }

                    lastPlacedIndex = placeChild(
                      _newFiber3,
                      lastPlacedIndex,
                      newIdx
                    );

                    if (previousNewFiber === null) {
                      // TODO: Move out of the loop. This only happens for the first run.
                      resultingFirstChild = _newFiber3;
                    } else {
                      previousNewFiber.sibling = _newFiber3;
                    }

                    previousNewFiber = _newFiber3;
                  }

                  return resultingFirstChild;
                } // Add all children to a key map for quick lookups.

                var existingChildren = mapRemainingChildren(
                  returnFiber,
                  oldFiber
                ); // Keep scanning and use the map to restore deleted items as moves.

                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber4 = updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    step.value,
                    expirationTime
                  );

                  if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                      if (_newFiber4.alternate !== null) {
                        // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(
                          _newFiber4.key === null ? newIdx : _newFiber4.key
                        );
                      }
                    }

                    lastPlacedIndex = placeChild(
                      _newFiber4,
                      lastPlacedIndex,
                      newIdx
                    );

                    if (previousNewFiber === null) {
                      resultingFirstChild = _newFiber4;
                    } else {
                      previousNewFiber.sibling = _newFiber4;
                    }

                    previousNewFiber = _newFiber4;
                  }
                }

                if (shouldTrackSideEffects) {
                  // Any existing children that weren't consumed above were deleted. We need
                  // to add them to the deletion list.
                  existingChildren.forEach(function(child) {
                    return deleteChild(returnFiber, child);
                  });
                }

                return resultingFirstChild;
              }

              function reconcileSingleTextNode(
                returnFiber,
                currentFirstChild,
                textContent,
                expirationTime
              ) {
                // There's no need to check for keys on text nodes since we don't have a
                // way to define them.
                if (
                  currentFirstChild !== null &&
                  currentFirstChild.tag === HostText
                ) {
                  // We already have an existing node so let's just update it and delete
                  // the rest.
                  deleteRemainingChildren(
                    returnFiber,
                    currentFirstChild.sibling
                  );
                  var existing = useFiber(
                    currentFirstChild,
                    textContent,
                    expirationTime
                  );
                  existing.return = returnFiber;
                  return existing;
                } // The existing first child is not a text node so we need to create one
                // and delete the existing ones.

                deleteRemainingChildren(returnFiber, currentFirstChild);
                var created = createFiberFromText(
                  textContent,
                  returnFiber.mode,
                  expirationTime
                );
                created.return = returnFiber;
                return created;
              }

              function reconcileSingleElement(
                returnFiber,
                currentFirstChild,
                element,
                expirationTime
              ) {
                var key = element.key;
                var child = currentFirstChild;

                while (child !== null) {
                  // TODO: If key === null and child.key === null, then this only applies to
                  // the first item in the list.
                  if (child.key === key) {
                    if (
                      child.tag === Fragment
                        ? element.type === REACT_FRAGMENT_TYPE
                        : child.elementType === element.type
                    ) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(
                        child,
                        element.type === REACT_FRAGMENT_TYPE
                          ? element.props.children
                          : element.props,
                        expirationTime
                      );
                      existing.ref = coerceRef(returnFiber, child, element);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    } else {
                      deleteRemainingChildren(returnFiber, child);
                      break;
                    }
                  } else {
                    deleteChild(returnFiber, child);
                  }

                  child = child.sibling;
                }

                if (element.type === REACT_FRAGMENT_TYPE) {
                  var created = createFiberFromFragment(
                    element.props.children,
                    returnFiber.mode,
                    expirationTime,
                    element.key
                  );
                  created.return = returnFiber;
                  return created;
                } else {
                  var _created4 = createFiberFromElement(
                    element,
                    returnFiber.mode,
                    expirationTime
                  );

                  _created4.ref = coerceRef(
                    returnFiber,
                    currentFirstChild,
                    element
                  );
                  _created4.return = returnFiber;
                  return _created4;
                }
              }

              function reconcileSinglePortal(
                returnFiber,
                currentFirstChild,
                portal,
                expirationTime
              ) {
                var key = portal.key;
                var child = currentFirstChild;

                while (child !== null) {
                  // TODO: If key === null and child.key === null, then this only applies to
                  // the first item in the list.
                  if (child.key === key) {
                    if (
                      child.tag === HostPortal &&
                      child.stateNode.containerInfo === portal.containerInfo &&
                      child.stateNode.implementation === portal.implementation
                    ) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(
                        child,
                        portal.children || [],
                        expirationTime
                      );
                      existing.return = returnFiber;
                      return existing;
                    } else {
                      deleteRemainingChildren(returnFiber, child);
                      break;
                    }
                  } else {
                    deleteChild(returnFiber, child);
                  }

                  child = child.sibling;
                }

                var created = createFiberFromPortal(
                  portal,
                  returnFiber.mode,
                  expirationTime
                );
                created.return = returnFiber;
                return created;
              } // This API will tag the children with the side-effect of the reconciliation
              // itself. They will be added to the side-effect list as we pass through the
              // children and the parent.

              function reconcileChildFibers(
                returnFiber,
                currentFirstChild,
                newChild,
                expirationTime
              ) {
                // This function is not recursive.
                // If the top level item is an array, we treat it as a set of children,
                // not as a fragment. Nested arrays on the other hand will be treated as
                // fragment nodes. Recursion happens at the normal flow.
                // Handle top level unkeyed fragments as if they were arrays.
                // This leads to an ambiguity between <>{[...]}</> and <>...</>.
                // We treat the ambiguous cases above the same.
                var isUnkeyedTopLevelFragment =
                  typeof newChild === "object" &&
                  newChild !== null &&
                  newChild.type === REACT_FRAGMENT_TYPE &&
                  newChild.key === null;

                if (isUnkeyedTopLevelFragment) {
                  newChild = newChild.props.children;
                } // Handle object types

                var isObject =
                  typeof newChild === "object" && newChild !== null;

                if (isObject) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                      return placeSingleChild(
                        reconcileSingleElement(
                          returnFiber,
                          currentFirstChild,
                          newChild,
                          expirationTime
                        )
                      );

                    case REACT_PORTAL_TYPE:
                      return placeSingleChild(
                        reconcileSinglePortal(
                          returnFiber,
                          currentFirstChild,
                          newChild,
                          expirationTime
                        )
                      );
                  }
                }

                if (
                  typeof newChild === "string" ||
                  typeof newChild === "number"
                ) {
                  return placeSingleChild(
                    reconcileSingleTextNode(
                      returnFiber,
                      currentFirstChild,
                      "" + newChild,
                      expirationTime
                    )
                  );
                }

                if (isArray(newChild)) {
                  return reconcileChildrenArray(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    expirationTime
                  );
                }

                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    expirationTime
                  );
                }

                if (isObject) {
                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === "function") {
                    warnOnFunctionType();
                  }
                }

                if (
                  typeof newChild === "undefined" &&
                  !isUnkeyedTopLevelFragment
                ) {
                  // If the new child is undefined, and the return fiber is a composite
                  // component, throw an error. If Fiber return types are disabled,
                  // we already threw above.
                  switch (returnFiber.tag) {
                    case ClassComponent: {
                      {
                        var instance = returnFiber.stateNode;

                        if (instance.render._isMockFunction) {
                          // We allow auto-mocks to proceed as if they're returning null.
                          break;
                        }
                      }
                    }
                    // Intentionally fall through to the next case, which handles both
                    // functions and classes
                    // eslint-disable-next-lined no-fallthrough

                    case FunctionComponent: {
                      var Component = returnFiber.type;
                      invariant(
                        false,
                        "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.",
                        Component.displayName || Component.name || "Component"
                      );
                    }
                  }
                } // Remaining cases are all treated as empty.

                return deleteRemainingChildren(returnFiber, currentFirstChild);
              }

              return reconcileChildFibers;
            }

            var reconcileChildFibers = ChildReconciler(true);
            var mountChildFibers = ChildReconciler(false);

            function cloneChildFibers(current$$1, workInProgress) {
              !(
                current$$1 === null || workInProgress.child === current$$1.child
              )
                ? invariant(false, "Resuming work not yet implemented.")
                : void 0;

              if (workInProgress.child === null) {
                return;
              }

              var currentChild = workInProgress.child;
              var newChild = createWorkInProgress(
                currentChild,
                currentChild.pendingProps,
                currentChild.expirationTime
              );
              workInProgress.child = newChild;
              newChild.return = workInProgress;

              while (currentChild.sibling !== null) {
                currentChild = currentChild.sibling;
                newChild = newChild.sibling = createWorkInProgress(
                  currentChild,
                  currentChild.pendingProps,
                  currentChild.expirationTime
                );
                newChild.return = workInProgress;
              }

              newChild.sibling = null;
            } // The deepest Fiber on the stack involved in a hydration context.
            // This may have been an insertion or a hydration.

            var hydrationParentFiber = null;
            var nextHydratableInstance = null;
            var isHydrating = false;

            function enterHydrationState(fiber) {
              if (!supportsHydration) {
                return false;
              }

              var parentInstance = fiber.stateNode.containerInfo;
              nextHydratableInstance = getFirstHydratableChild(parentInstance);
              hydrationParentFiber = fiber;
              isHydrating = true;
              return true;
            }

            function deleteHydratableInstance(returnFiber, instance) {
              {
                switch (returnFiber.tag) {
                  case HostRoot:
                    didNotHydrateContainerInstance(
                      returnFiber.stateNode.containerInfo,
                      instance
                    );
                    break;

                  case HostComponent:
                    didNotHydrateInstance(
                      returnFiber.type,
                      returnFiber.memoizedProps,
                      returnFiber.stateNode,
                      instance
                    );
                    break;
                }
              }
              var childToDelete = createFiberFromHostInstanceForDeletion();
              childToDelete.stateNode = instance;
              childToDelete.return = returnFiber;
              childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
              // these children are not part of the reconciliation list of children.
              // Even if we abort and rereconcile the children, that will try to hydrate
              // again and the nodes are still in the host tree so these will be
              // recreated.

              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
            }

            function insertNonHydratedInstance(returnFiber, fiber) {
              fiber.effectTag |= Placement;
              {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;

                    switch (fiber.tag) {
                      case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(
                          parentContainer,
                          type,
                          props
                        );
                        break;

                      case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(
                          parentContainer,
                          text
                        );
                        break;
                    }

                    break;
                  }

                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;

                    switch (fiber.tag) {
                      case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          _type,
                          _props
                        );
                        break;

                      case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          _text
                        );
                        break;
                    }

                    break;
                  }

                  default:
                    return;
                }
              }
            }

            function tryHydrate(fiber, nextInstance) {
              switch (fiber.tag) {
                case HostComponent: {
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  var instance = canHydrateInstance(nextInstance, type, props);

                  if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                  }

                  return false;
                }

                case HostText: {
                  var text = fiber.pendingProps;
                  var textInstance = canHydrateTextInstance(nextInstance, text);

                  if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                  }

                  return false;
                }

                default:
                  return false;
              }
            }

            function tryToClaimNextHydratableInstance(fiber) {
              if (!isHydrating) {
                return;
              }

              var nextInstance = nextHydratableInstance;

              if (!nextInstance) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }

              var firstAttemptedInstance = nextInstance;

              if (!tryHydrate(fiber, nextInstance)) {
                // If we can't hydrate this instance let's try the next one.
                // We use this as a heuristic. It's based on intuition and not data so it
                // might be flawed or unnecessary.
                nextInstance = getNextHydratableSibling(firstAttemptedInstance);

                if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                  // Nothing to hydrate. Make it an insertion.
                  insertNonHydratedInstance(hydrationParentFiber, fiber);
                  isHydrating = false;
                  hydrationParentFiber = fiber;
                  return;
                } // We matched the next one, we'll now assume that the first one was
                // superfluous and we'll delete it. Since we can't eagerly delete it
                // we'll have to schedule a deletion. To do that, this node needs a dummy
                // fiber associated with it.

                deleteHydratableInstance(
                  hydrationParentFiber,
                  firstAttemptedInstance
                );
              }

              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(nextInstance);
            }

            function prepareToHydrateHostInstance(
              fiber,
              rootContainerInstance,
              hostContext
            ) {
              if (!supportsHydration) {
                invariant(
                  false,
                  "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
                );
              }

              var instance = fiber.stateNode;
              var updatePayload = hydrateInstance(
                instance,
                fiber.type,
                fiber.memoizedProps,
                rootContainerInstance,
                hostContext,
                fiber
              ); // TODO: Type this specific to this type of component.

              fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
              // is a new ref we mark this as an update.

              if (updatePayload !== null) {
                return true;
              }

              return false;
            }

            function prepareToHydrateHostTextInstance(fiber) {
              if (!supportsHydration) {
                invariant(
                  false,
                  "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
                );
              }

              var textInstance = fiber.stateNode;
              var textContent = fiber.memoizedProps;
              var shouldUpdate = hydrateTextInstance(
                textInstance,
                textContent,
                fiber
              );
              {
                if (shouldUpdate) {
                  // We assume that prepareToHydrateHostTextInstance is called in a context where the
                  // hydration parent is the parent host component of this host text.
                  var returnFiber = hydrationParentFiber;

                  if (returnFiber !== null) {
                    switch (returnFiber.tag) {
                      case HostRoot: {
                        var parentContainer =
                          returnFiber.stateNode.containerInfo;
                        didNotMatchHydratedContainerTextInstance(
                          parentContainer,
                          textInstance,
                          textContent
                        );
                        break;
                      }

                      case HostComponent: {
                        var parentType = returnFiber.type;
                        var parentProps = returnFiber.memoizedProps;
                        var parentInstance = returnFiber.stateNode;
                        didNotMatchHydratedTextInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          textInstance,
                          textContent
                        );
                        break;
                      }
                    }
                  }
                }
              }
              return shouldUpdate;
            }

            function popToNextHostParent(fiber) {
              var parent = fiber.return;

              while (
                parent !== null &&
                parent.tag !== HostComponent &&
                parent.tag !== HostRoot
              ) {
                parent = parent.return;
              }

              hydrationParentFiber = parent;
            }

            function popHydrationState(fiber) {
              if (!supportsHydration) {
                return false;
              }

              if (fiber !== hydrationParentFiber) {
                // We're deeper than the current hydration context, inside an inserted
                // tree.
                return false;
              }

              if (!isHydrating) {
                // If we're not currently hydrating but we're in a hydration context, then
                // we were an insertion and now need to pop up reenter hydration of our
                // siblings.
                popToNextHostParent(fiber);
                isHydrating = true;
                return false;
              }

              var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
              // We only do this deeper than head and body since they tend to have random
              // other nodes in them. We also ignore components with pure text content in
              // side of them.
              // TODO: Better heuristic.

              if (
                fiber.tag !== HostComponent ||
                (type !== "head" &&
                  type !== "body" &&
                  !shouldSetTextContent(type, fiber.memoizedProps))
              ) {
                var nextInstance = nextHydratableInstance;

                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }

              popToNextHostParent(fiber);
              nextHydratableInstance = hydrationParentFiber
                ? getNextHydratableSibling(fiber.stateNode)
                : null;
              return true;
            }

            function resetHydrationState() {
              if (!supportsHydration) {
                return;
              }

              hydrationParentFiber = null;
              nextHydratableInstance = null;
              isHydrating = false;
            }

            var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
            var didWarnAboutBadClass = void 0;
            var didWarnAboutContextTypeOnFunctionComponent = void 0;
            var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
            var didWarnAboutFunctionRefs = void 0;
            {
              didWarnAboutBadClass = {};
              didWarnAboutContextTypeOnFunctionComponent = {};
              didWarnAboutGetDerivedStateOnFunctionComponent = {};
              didWarnAboutFunctionRefs = {};
            }

            function reconcileChildren(
              current$$1,
              workInProgress,
              nextChildren,
              renderExpirationTime
            ) {
              if (current$$1 === null) {
                // If this is a fresh new component that hasn't been rendered yet, we
                // won't update its child set by applying minimal side-effects. Instead,
                // we will add them all to the child before it gets rendered. That means
                // we can optimize this reconciliation pass by not tracking side-effects.
                workInProgress.child = mountChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime
                );
              } else {
                // If the current child is the same as the work in progress, it means that
                // we haven't yet started any work on these children. Therefore, we use
                // the clone algorithm to create a copy of all the current children.
                // If we had any progressed work already, that is invalid at this point so
                // let's throw it out.
                workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  current$$1.child,
                  nextChildren,
                  renderExpirationTime
                );
              }
            }

            function forceUnmountCurrentAndReconcile(
              current$$1,
              workInProgress,
              nextChildren,
              renderExpirationTime
            ) {
              // This function is fork of reconcileChildren. It's used in cases where we
              // want to reconcile without matching against the existing set. This has the
              // effect of all current children being unmounted; even if the type and key
              // are the same, the old child is unmounted and a new child is created.
              //
              // To do this, we're going to go through the reconcile algorithm twice. In
              // the first pass, we schedule a deletion for all the current children by
              // passing null.
              workInProgress.child = reconcileChildFibers(
                workInProgress,
                current$$1.child,
                null,
                renderExpirationTime
              ); // In the second pass, we mount the new children. The trick here is that we
              // pass null in place of where we usually pass the current child set. This has
              // the effect of remounting all children regardless of whether their their
              // identity matches.

              workInProgress.child = reconcileChildFibers(
                workInProgress,
                null,
                nextChildren,
                renderExpirationTime
              );
            }

            function updateForwardRef(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime
            ) {
              var render = Component.render;
              var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

              var nextChildren = void 0;
              prepareToReadContext(workInProgress, renderExpirationTime);
              prepareToUseHooks(
                current$$1,
                workInProgress,
                renderExpirationTime
              );
              {
                ReactCurrentOwner$3.current = workInProgress;
                setCurrentPhase("render");
                nextChildren = render(nextProps, ref);
                setCurrentPhase(null);
              }
              nextChildren = finishHooks(render, nextProps, nextChildren, ref); // React DevTools reads this flag.

              workInProgress.effectTag |= PerformedWork;
              reconcileChildren(
                current$$1,
                workInProgress,
                nextChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            function updateMemoComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              updateExpirationTime,
              renderExpirationTime
            ) {
              if (current$$1 === null) {
                var type = Component.type;

                if (
                  isSimpleFunctionComponent(type) &&
                  Component.compare === null
                ) {
                  // If this is a plain function component without default props,
                  // and with only the default shallow comparison, we upgrade it
                  // to a SimpleMemoComponent to allow fast path updates.
                  workInProgress.tag = SimpleMemoComponent;
                  workInProgress.type = type;
                  return updateSimpleMemoComponent(
                    current$$1,
                    workInProgress,
                    type,
                    nextProps,
                    updateExpirationTime,
                    renderExpirationTime
                  );
                }

                var child = createFiberFromTypeAndProps(
                  Component.type,
                  null,
                  nextProps,
                  null,
                  workInProgress.mode,
                  renderExpirationTime
                );
                child.ref = workInProgress.ref;
                child.return = workInProgress;
                workInProgress.child = child;
                return child;
              }

              var currentChild = current$$1.child; // This is always exactly one child

              if (updateExpirationTime < renderExpirationTime) {
                // This will be the props with resolved defaultProps,
                // unlike current.memoizedProps which will be the unresolved ones.
                var prevProps = currentChild.memoizedProps; // Default to shallow comparison

                var compare = Component.compare;
                compare = compare !== null ? compare : shallowEqual;

                if (
                  compare(prevProps, nextProps) &&
                  current$$1.ref === workInProgress.ref
                ) {
                  return bailoutOnAlreadyFinishedWork(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );
                }
              } // React DevTools reads this flag.

              workInProgress.effectTag |= PerformedWork;
              var newChild = createWorkInProgress(
                currentChild,
                nextProps,
                renderExpirationTime
              );
              newChild.ref = workInProgress.ref;
              newChild.return = workInProgress;
              workInProgress.child = newChild;
              return newChild;
            }

            function updateSimpleMemoComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              updateExpirationTime,
              renderExpirationTime
            ) {
              if (
                current$$1 !== null &&
                updateExpirationTime < renderExpirationTime
              ) {
                var prevProps = current$$1.memoizedProps;

                if (
                  shallowEqual(prevProps, nextProps) &&
                  current$$1.ref === workInProgress.ref
                ) {
                  return bailoutOnAlreadyFinishedWork(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );
                }
              }

              return updateFunctionComponent(
                current$$1,
                workInProgress,
                Component,
                nextProps,
                renderExpirationTime
              );
            }

            function updateFragment(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              var nextChildren = workInProgress.pendingProps;
              reconcileChildren(
                current$$1,
                workInProgress,
                nextChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            function updateMode(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              var nextChildren = workInProgress.pendingProps.children;
              reconcileChildren(
                current$$1,
                workInProgress,
                nextChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            function updateProfiler(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              if (enableProfilerTimer) {
                workInProgress.effectTag |= Update;
              }

              var nextProps = workInProgress.pendingProps;
              var nextChildren = nextProps.children;
              reconcileChildren(
                current$$1,
                workInProgress,
                nextChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            function markRef(current$$1, workInProgress) {
              var ref = workInProgress.ref;

              if (
                (current$$1 === null && ref !== null) ||
                (current$$1 !== null && current$$1.ref !== ref)
              ) {
                // Schedule a Ref effect
                workInProgress.effectTag |= Ref;
              }
            }

            function updateFunctionComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime
            ) {
              var unmaskedContext = getUnmaskedContext(
                workInProgress,
                Component,
                true
              );
              var context = getMaskedContext(workInProgress, unmaskedContext);
              var nextChildren = void 0;
              prepareToReadContext(workInProgress, renderExpirationTime);
              prepareToUseHooks(
                current$$1,
                workInProgress,
                renderExpirationTime
              );
              {
                ReactCurrentOwner$3.current = workInProgress;
                setCurrentPhase("render");
                nextChildren = Component(nextProps, context);
                setCurrentPhase(null);
              }
              nextChildren = finishHooks(
                Component,
                nextProps,
                nextChildren,
                context
              ); // React DevTools reads this flag.

              workInProgress.effectTag |= PerformedWork;
              reconcileChildren(
                current$$1,
                workInProgress,
                nextChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            function updateClassComponent(
              current$$1,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime
            ) {
              // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.
              var hasContext = void 0;

              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
              } else {
                hasContext = false;
              }

              prepareToReadContext(workInProgress, renderExpirationTime);
              var instance = workInProgress.stateNode;
              var shouldUpdate = void 0;

              if (instance === null) {
                if (current$$1 !== null) {
                  // An class component without an instance only mounts if it suspended
                  // inside a non- concurrent tree, in an inconsistent state. We want to
                  // tree it like a new mount, even though an empty version of it already
                  // committed. Disconnect the alternate pointers.
                  current$$1.alternate = null;
                  workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                  workInProgress.effectTag |= Placement;
                } // In the initial pass we might need to construct the instance.

                constructClassInstance(
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                );
                mountClassInstance(
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                );
                shouldUpdate = true;
              } else if (current$$1 === null) {
                // In a resume, we'll already have an instance we can reuse.
                shouldUpdate = resumeMountClassInstance(
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                );
              } else {
                shouldUpdate = updateClassInstance(
                  current$$1,
                  workInProgress,
                  Component,
                  nextProps,
                  renderExpirationTime
                );
              }

              return finishClassComponent(
                current$$1,
                workInProgress,
                Component,
                shouldUpdate,
                hasContext,
                renderExpirationTime
              );
            }

            function finishClassComponent(
              current$$1,
              workInProgress,
              Component,
              shouldUpdate,
              hasContext,
              renderExpirationTime
            ) {
              // Refs should update even if shouldComponentUpdate returns false
              markRef(current$$1, workInProgress);
              var didCaptureError =
                (workInProgress.effectTag & DidCapture) !== NoEffect;

              if (!shouldUpdate && !didCaptureError) {
                // Context providers should defer to sCU for rendering
                if (hasContext) {
                  invalidateContextProvider(workInProgress, Component, false);
                }

                return bailoutOnAlreadyFinishedWork(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                );
              }

              var instance = workInProgress.stateNode; // Rerender

              ReactCurrentOwner$3.current = workInProgress;
              var nextChildren = void 0;

              if (
                didCaptureError &&
                typeof Component.getDerivedStateFromError !== "function"
              ) {
                // If we captured an error, but getDerivedStateFrom catch is not defined,
                // unmount all the children. componentDidCatch will schedule an update to
                // re-render a fallback. This is temporary until we migrate everyone to
                // the new API.
                // TODO: Warn in a future release.
                nextChildren = null;

                if (enableProfilerTimer) {
                  stopProfilerTimerIfRunning(workInProgress);
                }
              } else {
                {
                  setCurrentPhase("render");
                  nextChildren = instance.render();

                  if (
                    debugRenderPhaseSideEffects ||
                    (debugRenderPhaseSideEffectsForStrictMode &&
                      workInProgress.mode & StrictMode)
                  ) {
                    instance.render();
                  }

                  setCurrentPhase(null);
                }
              } // React DevTools reads this flag.

              workInProgress.effectTag |= PerformedWork;

              if (current$$1 !== null && didCaptureError) {
                // If we're recovering from an error, reconcile without reusing any of
                // the existing children. Conceptually, the normal children and the children
                // that are shown on error are two different sets, so we shouldn't reuse
                // normal children even if their identities match.
                forceUnmountCurrentAndReconcile(
                  current$$1,
                  workInProgress,
                  nextChildren,
                  renderExpirationTime
                );
              } else {
                reconcileChildren(
                  current$$1,
                  workInProgress,
                  nextChildren,
                  renderExpirationTime
                );
              } // Memoize state using the values we just used to render.
              // TODO: Restructure so we never read values from the instance.

              workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

              if (hasContext) {
                invalidateContextProvider(workInProgress, Component, true);
              }

              return workInProgress.child;
            }

            function pushHostRootContext(workInProgress) {
              var root = workInProgress.stateNode;

              if (root.pendingContext) {
                pushTopLevelContextObject(
                  workInProgress,
                  root.pendingContext,
                  root.pendingContext !== root.context
                );
              } else if (root.context) {
                // Should always be set
                pushTopLevelContextObject(workInProgress, root.context, false);
              }

              pushHostContainer(workInProgress, root.containerInfo);
            }

            function updateHostRoot(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              pushHostRootContext(workInProgress);
              var updateQueue = workInProgress.updateQueue;
              !(updateQueue !== null)
                ? invariant(
                    false,
                    "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              var nextProps = workInProgress.pendingProps;
              var prevState = workInProgress.memoizedState;
              var prevChildren = prevState !== null ? prevState.element : null;
              processUpdateQueue(
                workInProgress,
                updateQueue,
                nextProps,
                null,
                renderExpirationTime
              );
              var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
              // being called "element".

              var nextChildren = nextState.element;

              if (nextChildren === prevChildren) {
                // If the state is the same as before, that's a bailout because we had
                // no work that expires at this time.
                resetHydrationState();
                return bailoutOnAlreadyFinishedWork(
                  current$$1,
                  workInProgress,
                  renderExpirationTime
                );
              }

              var root = workInProgress.stateNode;

              if (
                (current$$1 === null || current$$1.child === null) &&
                root.hydrate &&
                enterHydrationState(workInProgress)
              ) {
                // If we don't have any current children this might be the first pass.
                // We always try to hydrate. If this isn't a hydration pass there won't
                // be any children to hydrate which is effectively the same thing as
                // not hydrating.
                // This is a bit of a hack. We track the host root as a placement to
                // know that we're currently in a mounting state. That way isMounted
                // works as expected. We must reset this before committing.
                // TODO: Delete this when we delete isMounted and findDOMNode.
                workInProgress.effectTag |= Placement; // Ensure that children mount into this root without tracking
                // side-effects. This ensures that we don't store Placement effects on
                // nodes that will be hydrated.

                workInProgress.child = mountChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime
                );
              } else {
                // Otherwise reset hydration state in case we aborted and resumed another
                // root.
                reconcileChildren(
                  current$$1,
                  workInProgress,
                  nextChildren,
                  renderExpirationTime
                );
                resetHydrationState();
              }

              return workInProgress.child;
            }

            function updateHostComponent(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              pushHostContext(workInProgress);

              if (current$$1 === null) {
                tryToClaimNextHydratableInstance(workInProgress);
              }

              var type = workInProgress.type;
              var nextProps = workInProgress.pendingProps;
              var prevProps =
                current$$1 !== null ? current$$1.memoizedProps : null;
              var nextChildren = nextProps.children;
              var isDirectTextChild = shouldSetTextContent(type, nextProps);

              if (isDirectTextChild) {
                // We special case a direct text child of a host node. This is a common
                // case. We won't handle it as a reified child. We will instead handle
                // this in the host environment that also have access to this prop. That
                // avoids allocating another HostText fiber and traversing it.
                nextChildren = null;
              } else if (
                prevProps !== null &&
                shouldSetTextContent(type, prevProps)
              ) {
                // If we're switching from a direct text child to a normal child, or to
                // empty, we need to schedule the text content to be reset.
                workInProgress.effectTag |= ContentReset;
              }

              markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

              if (
                renderExpirationTime !== Never &&
                workInProgress.mode & ConcurrentMode &&
                shouldDeprioritizeSubtree(type, nextProps)
              ) {
                // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.expirationTime = Never;
                return null;
              }

              reconcileChildren(
                current$$1,
                workInProgress,
                nextChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            function updateHostText(current$$1, workInProgress) {
              if (current$$1 === null) {
                tryToClaimNextHydratableInstance(workInProgress);
              } // Nothing to do here. This is terminal. We'll do the completion step
              // immediately after.

              return null;
            }

            function mountLazyComponent(
              _current,
              workInProgress,
              elementType,
              updateExpirationTime,
              renderExpirationTime
            ) {
              if (_current !== null) {
                // An lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                workInProgress.effectTag |= Placement;
              }

              var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
              // Cancel and resume right after we know the tag.

              cancelWorkTimer(workInProgress);
              var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

              workInProgress.type = Component;
              var resolvedTag = (workInProgress.tag = resolveLazyComponentTag(
                Component
              ));
              startWorkTimer(workInProgress);
              var resolvedProps = resolveDefaultProps(Component, props);
              var child = void 0;

              switch (resolvedTag) {
                case FunctionComponent: {
                  child = updateFunctionComponent(
                    null,
                    workInProgress,
                    Component,
                    resolvedProps,
                    renderExpirationTime
                  );
                  break;
                }

                case ClassComponent: {
                  child = updateClassComponent(
                    null,
                    workInProgress,
                    Component,
                    resolvedProps,
                    renderExpirationTime
                  );
                  break;
                }

                case ForwardRef: {
                  child = updateForwardRef(
                    null,
                    workInProgress,
                    Component,
                    resolvedProps,
                    renderExpirationTime
                  );
                  break;
                }

                case MemoComponent: {
                  child = updateMemoComponent(
                    null,
                    workInProgress,
                    Component,
                    resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                    updateExpirationTime,
                    renderExpirationTime
                  );
                  break;
                }

                default: {
                  // This message intentionally doesn't mention ForwardRef or MemoComponent
                  // because the fact that it's a separate type of work is an
                  // implementation detail.
                  invariant(
                    false,
                    "Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.",
                    Component
                  );
                }
              }

              return child;
            }

            function mountIncompleteClassComponent(
              _current,
              workInProgress,
              Component,
              nextProps,
              renderExpirationTime
            ) {
              if (_current !== null) {
                // An incomplete component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                workInProgress.effectTag |= Placement;
              } // Promote the fiber to a class and try rendering again.

              workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
              // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.

              var hasContext = void 0;

              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
              } else {
                hasContext = false;
              }

              prepareToReadContext(workInProgress, renderExpirationTime);
              constructClassInstance(
                workInProgress,
                Component,
                nextProps,
                renderExpirationTime
              );
              mountClassInstance(
                workInProgress,
                Component,
                nextProps,
                renderExpirationTime
              );
              return finishClassComponent(
                null,
                workInProgress,
                Component,
                true,
                hasContext,
                renderExpirationTime
              );
            }

            function mountIndeterminateComponent(
              _current,
              workInProgress,
              Component,
              renderExpirationTime
            ) {
              if (_current !== null) {
                // An indeterminate component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                workInProgress.effectTag |= Placement;
              }

              var props = workInProgress.pendingProps;
              var unmaskedContext = getUnmaskedContext(
                workInProgress,
                Component,
                false
              );
              var context = getMaskedContext(workInProgress, unmaskedContext);
              prepareToReadContext(workInProgress, renderExpirationTime);
              prepareToUseHooks(null, workInProgress, renderExpirationTime);
              var value = void 0;
              {
                if (
                  Component.prototype &&
                  typeof Component.prototype.render === "function"
                ) {
                  var componentName = getComponentName(Component) || "Unknown";

                  if (!didWarnAboutBadClass[componentName]) {
                    warningWithoutStack$1(
                      false,
                      "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                        "This is likely to cause errors. Change %s to extend React.Component instead.",
                      componentName,
                      componentName
                    );
                    didWarnAboutBadClass[componentName] = true;
                  }
                }

                if (workInProgress.mode & StrictMode) {
                  ReactStrictModeWarnings.recordLegacyContextWarning(
                    workInProgress,
                    null
                  );
                }

                ReactCurrentOwner$3.current = workInProgress;
                value = Component(props, context);
              } // React DevTools reads this flag.

              workInProgress.effectTag |= PerformedWork;

              if (
                typeof value === "object" &&
                value !== null &&
                typeof value.render === "function" &&
                value.$$typeof === undefined
              ) {
                // Proceed under the assumption that this is a class instance
                workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

                resetHooks(); // Push context providers early to prevent context stack mismatches.
                // During mounting we don't know the child context yet as the instance doesn't exist.
                // We will invalidate the child context in finishClassComponent() right after rendering.

                var hasContext = false;

                if (isContextProvider(Component)) {
                  hasContext = true;
                  pushContextProvider(workInProgress);
                } else {
                  hasContext = false;
                }

                workInProgress.memoizedState =
                  value.state !== null && value.state !== undefined
                    ? value.state
                    : null;
                var getDerivedStateFromProps =
                  Component.getDerivedStateFromProps;

                if (typeof getDerivedStateFromProps === "function") {
                  applyDerivedStateFromProps(
                    workInProgress,
                    Component,
                    getDerivedStateFromProps,
                    props
                  );
                }

                adoptClassInstance(workInProgress, value);
                mountClassInstance(
                  workInProgress,
                  Component,
                  props,
                  renderExpirationTime
                );
                return finishClassComponent(
                  null,
                  workInProgress,
                  Component,
                  true,
                  hasContext,
                  renderExpirationTime
                );
              } else {
                // Proceed under the assumption that this is a function component
                workInProgress.tag = FunctionComponent;
                value = finishHooks(Component, props, value, context);
                {
                  if (Component) {
                    !!Component.childContextTypes
                      ? warningWithoutStack$1(
                          false,
                          "%s(...): childContextTypes cannot be defined on a function component.",
                          Component.displayName || Component.name || "Component"
                        )
                      : void 0;
                  }

                  if (workInProgress.ref !== null) {
                    var info = "";
                    var ownerName = getCurrentFiberOwnerNameInDevOrNull();

                    if (ownerName) {
                      info +=
                        "\n\nCheck the render method of `" + ownerName + "`.";
                    }

                    var warningKey = ownerName || workInProgress._debugID || "";
                    var debugSource = workInProgress._debugSource;

                    if (debugSource) {
                      warningKey =
                        debugSource.fileName + ":" + debugSource.lineNumber;
                    }

                    if (!didWarnAboutFunctionRefs[warningKey]) {
                      didWarnAboutFunctionRefs[warningKey] = true;
                      warning$1(
                        false,
                        "Function components cannot be given refs. " +
                          "Attempts to access this ref will fail.%s",
                        info
                      );
                    }
                  }

                  if (
                    typeof Component.getDerivedStateFromProps === "function"
                  ) {
                    var _componentName =
                      getComponentName(Component) || "Unknown";

                    if (
                      !didWarnAboutGetDerivedStateOnFunctionComponent[
                        _componentName
                      ]
                    ) {
                      warningWithoutStack$1(
                        false,
                        "%s: Function components do not support getDerivedStateFromProps.",
                        _componentName
                      );
                      didWarnAboutGetDerivedStateOnFunctionComponent[
                        _componentName
                      ] = true;
                    }
                  }

                  if (
                    typeof Component.contextType === "object" &&
                    Component.contextType !== null
                  ) {
                    var _componentName2 =
                      getComponentName(Component) || "Unknown";

                    if (
                      !didWarnAboutContextTypeOnFunctionComponent[
                        _componentName2
                      ]
                    ) {
                      warningWithoutStack$1(
                        false,
                        "%s: Function components do not support contextType.",
                        _componentName2
                      );
                      didWarnAboutContextTypeOnFunctionComponent[
                        _componentName2
                      ] = true;
                    }
                  }
                }
                reconcileChildren(
                  null,
                  workInProgress,
                  value,
                  renderExpirationTime
                );
                return workInProgress.child;
              }
            }

            function updateSuspenseComponent(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              var mode = workInProgress.mode;
              var nextProps = workInProgress.pendingProps; // We should attempt to render the primary children unless this boundary
              // already suspended during this render (`alreadyCaptured` is true).

              var nextState = workInProgress.memoizedState;
              var nextDidTimeout = void 0;

              if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                // This is the first attempt.
                nextState = null;
                nextDidTimeout = false;
              } else {
                // Something in this boundary's subtree already suspended. Switch to
                // rendering the fallback children.
                nextState = {
                  timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
                };
                nextDidTimeout = true;
                workInProgress.effectTag &= ~DidCapture;
              } // This next part is a bit confusing. If the children timeout, we switch to
              // showing the fallback children in place of the "primary" children.
              // However, we don't want to delete the primary children because then their
              // state will be lost (both the React state and the host state, e.g.
              // uncontrolled form inputs). Instead we keep them mounted and hide them.
              // Both the fallback children AND the primary children are rendered at the
              // same time. Once the primary children are un-suspended, we can delete
              // the fallback children — don't need to preserve their state.
              //
              // The two sets of children are siblings in the host environment, but
              // semantically, for purposes of reconciliation, they are two separate sets.
              // So we store them using two fragment fibers.
              //
              // However, we want to avoid allocating extra fibers for every placeholder.
              // They're only necessary when the children time out, because that's the
              // only time when both sets are mounted.
              //
              // So, the extra fragment fibers are only used if the children time out.
              // Otherwise, we render the primary children directly. This requires some
              // custom reconciliation logic to preserve the state of the primary
              // children. It's essentially a very basic form of re-parenting.
              // `child` points to the child fiber. In the normal case, this is the first
              // fiber of the primary children set. In the timed-out case, it's a
              // a fragment fiber containing the primary children.

              var child = void 0; // `next` points to the next fiber React should render. In the normal case,
              // it's the same as `child`: the first fiber of the primary children set.
              // In the timed-out case, it's a fragment fiber containing the *fallback*
              // children -- we skip over the primary children entirely.

              var next = void 0;

              if (current$$1 === null) {
                // This is the initial mount. This branch is pretty simple because there's
                // no previous state that needs to be preserved.
                if (nextDidTimeout) {
                  // Mount separate fragments for primary and fallback children.
                  var nextFallbackChildren = nextProps.fallback;
                  var primaryChildFragment = createFiberFromFragment(
                    null,
                    mode,
                    NoWork,
                    null
                  );

                  if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                    // Outside of concurrent mode, we commit the effects from the
                    var progressedState = workInProgress.memoizedState;
                    var progressedPrimaryChild =
                      progressedState !== null
                        ? workInProgress.child.child
                        : workInProgress.child;
                    primaryChildFragment.child = progressedPrimaryChild;
                  }

                  var fallbackChildFragment = createFiberFromFragment(
                    nextFallbackChildren,
                    mode,
                    renderExpirationTime,
                    null
                  );
                  primaryChildFragment.sibling = fallbackChildFragment;
                  child = primaryChildFragment; // Skip the primary children, and continue working on the
                  // fallback children.

                  next = fallbackChildFragment;
                  child.return = next.return = workInProgress;
                } else {
                  // Mount the primary children without an intermediate fragment fiber.
                  var nextPrimaryChildren = nextProps.children;
                  child = next = mountChildFibers(
                    workInProgress,
                    null,
                    nextPrimaryChildren,
                    renderExpirationTime
                  );
                }
              } else {
                // This is an update. This branch is more complicated because we need to
                // ensure the state of the primary children is preserved.
                var prevState = current$$1.memoizedState;
                var prevDidTimeout = prevState !== null;

                if (prevDidTimeout) {
                  // The current tree already timed out. That means each child set is
                  var currentPrimaryChildFragment = current$$1.child;
                  var currentFallbackChildFragment =
                    currentPrimaryChildFragment.sibling;

                  if (nextDidTimeout) {
                    // Still timed out. Reuse the current primary children by cloning
                    // its fragment. We're going to skip over these entirely.
                    var _nextFallbackChildren = nextProps.fallback;

                    var _primaryChildFragment = createWorkInProgress(
                      currentPrimaryChildFragment,
                      currentPrimaryChildFragment.pendingProps,
                      NoWork
                    );

                    if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                      // Outside of concurrent mode, we commit the effects from the
                      var _progressedState = workInProgress.memoizedState;

                      var _progressedPrimaryChild =
                        _progressedState !== null
                          ? workInProgress.child.child
                          : workInProgress.child;

                      if (
                        _progressedPrimaryChild !==
                        currentPrimaryChildFragment.child
                      ) {
                        _primaryChildFragment.child = _progressedPrimaryChild;
                      }
                    } // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.

                    if (
                      enableProfilerTimer &&
                      workInProgress.mode & ProfileMode
                    ) {
                      // treeBaseDuration is the sum of all the child tree base durations.
                      var treeBaseDuration = 0;
                      var hiddenChild = _primaryChildFragment.child;

                      while (hiddenChild !== null) {
                        treeBaseDuration += hiddenChild.treeBaseDuration;
                        hiddenChild = hiddenChild.sibling;
                      }

                      _primaryChildFragment.treeBaseDuration = treeBaseDuration;
                    } // Clone the fallback child fragment, too. These we'll continue
                    // working on.

                    var _fallbackChildFragment = (_primaryChildFragment.sibling = createWorkInProgress(
                      currentFallbackChildFragment,
                      _nextFallbackChildren,
                      currentFallbackChildFragment.expirationTime
                    ));

                    child = _primaryChildFragment;
                    _primaryChildFragment.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
                    // fallback children.

                    next = _fallbackChildFragment;
                    child.return = next.return = workInProgress;
                  } else {
                    // No longer suspended. Switch back to showing the primary children,
                    // and remove the intermediate fragment fiber.
                    var _nextPrimaryChildren = nextProps.children;
                    var currentPrimaryChild = currentPrimaryChildFragment.child;
                    var primaryChild = reconcileChildFibers(
                      workInProgress,
                      currentPrimaryChild,
                      _nextPrimaryChildren,
                      renderExpirationTime
                    ); // If this render doesn't suspend, we need to delete the fallback
                    // children. Wait until the complete phase, after we've confirmed the
                    // fallback is no longer needed.
                    // TODO: Would it be better to store the fallback fragment on
                    // the stateNode?
                    // Continue rendering the children, like we normally do.

                    child = next = primaryChild;
                  }
                } else {
                  // The current tree has not already timed out. That means the primary
                  // children are not wrapped in a fragment fiber.
                  var _currentPrimaryChild = current$$1.child;

                  if (nextDidTimeout) {
                    // Timed out. Wrap the children in a fragment fiber to keep them
                    // separate from the fallback children.
                    var _nextFallbackChildren2 = nextProps.fallback;

                    var _primaryChildFragment2 = createFiberFromFragment(
                      // It shouldn't matter what the pending props are because we aren't
                      // going to render this fragment.
                      null,
                      mode,
                      NoWork,
                      null
                    );

                    _primaryChildFragment2.child = _currentPrimaryChild; // Even though we're creating a new fiber, there are no new children,
                    // because we're reusing an already mounted tree. So we don't need to
                    // schedule a placement.
                    // primaryChildFragment.effectTag |= Placement;

                    if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                      // Outside of concurrent mode, we commit the effects from the
                      var _progressedState2 = workInProgress.memoizedState;

                      var _progressedPrimaryChild2 =
                        _progressedState2 !== null
                          ? workInProgress.child.child
                          : workInProgress.child;

                      _primaryChildFragment2.child = _progressedPrimaryChild2;
                    } // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.

                    if (
                      enableProfilerTimer &&
                      workInProgress.mode & ProfileMode
                    ) {
                      // treeBaseDuration is the sum of all the child tree base durations.
                      var _treeBaseDuration = 0;
                      var _hiddenChild = _primaryChildFragment2.child;

                      while (_hiddenChild !== null) {
                        _treeBaseDuration += _hiddenChild.treeBaseDuration;
                        _hiddenChild = _hiddenChild.sibling;
                      }

                      _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                    } // Create a fragment from the fallback children, too.

                    var _fallbackChildFragment2 = (_primaryChildFragment2.sibling = createFiberFromFragment(
                      _nextFallbackChildren2,
                      mode,
                      renderExpirationTime,
                      null
                    ));

                    _fallbackChildFragment2.effectTag |= Placement;
                    child = _primaryChildFragment2;
                    _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
                    // fallback children.

                    next = _fallbackChildFragment2;
                    child.return = next.return = workInProgress;
                  } else {
                    // Still haven't timed out.  Continue rendering the children, like we
                    // normally do.
                    var _nextPrimaryChildren2 = nextProps.children;
                    next = child = reconcileChildFibers(
                      workInProgress,
                      _currentPrimaryChild,
                      _nextPrimaryChildren2,
                      renderExpirationTime
                    );
                  }
                }
              }

              workInProgress.memoizedState = nextState;
              workInProgress.child = child;
              return next;
            }

            function updatePortalComponent(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              pushHostContainer(
                workInProgress,
                workInProgress.stateNode.containerInfo
              );
              var nextChildren = workInProgress.pendingProps;

              if (current$$1 === null) {
                // Portals are special because we don't append the children during mount
                // but at commit. Therefore we need to track insertions which the normal
                // flow doesn't do during mount. This doesn't happen at the root because
                // the root always starts with a "current" with a null child.
                // TODO: Consider unifying this with how the root works.
                workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime
                );
              } else {
                reconcileChildren(
                  current$$1,
                  workInProgress,
                  nextChildren,
                  renderExpirationTime
                );
              }

              return workInProgress.child;
            }

            function updateContextProvider(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              var providerType = workInProgress.type;
              var context = providerType._context;
              var newProps = workInProgress.pendingProps;
              var oldProps = workInProgress.memoizedProps;
              var newValue = newProps.value;
              {
                var providerPropTypes = workInProgress.type.propTypes;

                if (providerPropTypes) {
                  checkPropTypes(
                    providerPropTypes,
                    newProps,
                    "prop",
                    "Context.Provider",
                    getCurrentFiberStackInDev
                  );
                }
              }
              pushProvider(workInProgress, newValue);

              if (oldProps !== null) {
                var oldValue = oldProps.value;
                var changedBits = calculateChangedBits(
                  context,
                  newValue,
                  oldValue
                );

                if (changedBits === 0) {
                  // No change. Bailout early if children are the same.
                  if (
                    oldProps.children === newProps.children &&
                    !hasContextChanged()
                  ) {
                    return bailoutOnAlreadyFinishedWork(
                      current$$1,
                      workInProgress,
                      renderExpirationTime
                    );
                  }
                } else {
                  // The context value changed. Search for matching consumers and schedule
                  // them to update.
                  propagateContextChange(
                    workInProgress,
                    context,
                    changedBits,
                    renderExpirationTime
                  );
                }
              }

              var newChildren = newProps.children;
              reconcileChildren(
                current$$1,
                workInProgress,
                newChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            var hasWarnedAboutUsingContextAsConsumer = false;

            function updateContextConsumer(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
              // DEV mode, we create a separate object for Context.Consumer that acts
              // like a proxy to Context. This proxy object adds unnecessary code in PROD
              // so we use the old behaviour (Context.Consumer references Context) to
              // reduce size and overhead. The separate object references context via
              // a property called "_context", which also gives us the ability to check
              // in DEV mode if this property exists or not and warn if it does not.

              {
                if (context._context === undefined) {
                  // This may be because it's a Context (rather than a Consumer).
                  // Or it may be because it's older React where they're the same thing.
                  // We only want to warn if we're sure it's a new React.
                  if (context !== context.Consumer) {
                    if (!hasWarnedAboutUsingContextAsConsumer) {
                      hasWarnedAboutUsingContextAsConsumer = true;
                      warning$1(
                        false,
                        "Rendering <Context> directly is not supported and will be removed in " +
                          "a future major release. Did you mean to render <Context.Consumer> instead?"
                      );
                    }
                  }
                } else {
                  context = context._context;
                }
              }
              var newProps = workInProgress.pendingProps;
              var render = newProps.children;
              {
                !(typeof render === "function")
                  ? warningWithoutStack$1(
                      false,
                      "A context consumer was rendered with multiple children, or a child " +
                        "that isn't a function. A context consumer expects a single child " +
                        "that is a function. If you did pass a function, make sure there " +
                        "is no trailing or leading whitespace around it."
                    )
                  : void 0;
              }
              prepareToReadContext(workInProgress, renderExpirationTime);
              var newValue = readContext(
                context,
                newProps.unstable_observedBits
              );
              var newChildren = void 0;
              {
                ReactCurrentOwner$3.current = workInProgress;
                setCurrentPhase("render");
                newChildren = render(newValue);
                setCurrentPhase(null);
              } // React DevTools reads this flag.

              workInProgress.effectTag |= PerformedWork;
              reconcileChildren(
                current$$1,
                workInProgress,
                newChildren,
                renderExpirationTime
              );
              return workInProgress.child;
            }

            function bailoutOnAlreadyFinishedWork(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              cancelWorkTimer(workInProgress);

              if (current$$1 !== null) {
                // Reuse previous context list
                workInProgress.firstContextDependency =
                  current$$1.firstContextDependency;
              }

              if (enableProfilerTimer) {
                // Don't update "base" render times for bailouts.
                stopProfilerTimerIfRunning(workInProgress);
              } // Check if the children have any pending work.

              var childExpirationTime = workInProgress.childExpirationTime;

              if (childExpirationTime < renderExpirationTime) {
                // The children don't have any work either. We can skip them.
                // TODO: Once we add back resuming, we should check if the children are
                // a work-in-progress set. If so, we need to transfer their effects.
                return null;
              } else {
                // This fiber doesn't have work, but its subtree does. Clone the child
                // fibers and continue.
                cloneChildFibers(current$$1, workInProgress);
                return workInProgress.child;
              }
            }

            function beginWork(
              current$$1,
              workInProgress,
              renderExpirationTime
            ) {
              var updateExpirationTime = workInProgress.expirationTime;

              if (current$$1 !== null) {
                var oldProps = current$$1.memoizedProps;
                var newProps = workInProgress.pendingProps;

                if (
                  oldProps === newProps &&
                  !hasContextChanged() &&
                  updateExpirationTime < renderExpirationTime
                ) {
                  // This fiber does not have any pending work. Bailout without entering
                  // the begin phase. There's still some bookkeeping we that needs to be done
                  // in this optimized path, mostly pushing stuff onto the stack.
                  switch (workInProgress.tag) {
                    case HostRoot:
                      pushHostRootContext(workInProgress);
                      resetHydrationState();
                      break;

                    case HostComponent:
                      pushHostContext(workInProgress);
                      break;

                    case ClassComponent: {
                      var Component = workInProgress.type;

                      if (isContextProvider(Component)) {
                        pushContextProvider(workInProgress);
                      }

                      break;
                    }

                    case HostPortal:
                      pushHostContainer(
                        workInProgress,
                        workInProgress.stateNode.containerInfo
                      );
                      break;

                    case ContextProvider: {
                      var newValue = workInProgress.memoizedProps.value;
                      pushProvider(workInProgress, newValue);
                      break;
                    }

                    case Profiler:
                      if (enableProfilerTimer) {
                        workInProgress.effectTag |= Update;
                      }

                      break;

                    case SuspenseComponent: {
                      var state = workInProgress.memoizedState;
                      var didTimeout = state !== null;

                      if (didTimeout) {
                        // If this boundary is currently timed out, we need to decide
                        // whether to retry the primary children, or to skip over it and
                        // go straight to the fallback. Check the priority of the primary
                        var primaryChildFragment = workInProgress.child;
                        var primaryChildExpirationTime =
                          primaryChildFragment.childExpirationTime;

                        if (
                          primaryChildExpirationTime !== NoWork &&
                          primaryChildExpirationTime >= renderExpirationTime
                        ) {
                          // The primary children have pending work. Use the normal path
                          // to attempt to render the primary children again.
                          return updateSuspenseComponent(
                            current$$1,
                            workInProgress,
                            renderExpirationTime
                          );
                        } else {
                          // The primary children do not have pending work with sufficient
                          // priority. Bailout.
                          var child = bailoutOnAlreadyFinishedWork(
                            current$$1,
                            workInProgress,
                            renderExpirationTime
                          );

                          if (child !== null) {
                            // The fallback children have pending work. Skip over the
                            // primary children and work on the fallback.
                            return child.sibling;
                          } else {
                            return null;
                          }
                        }
                      }

                      break;
                    }
                  }

                  return bailoutOnAlreadyFinishedWork(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );
                }
              } // Before entering the begin phase, clear the expiration time.

              workInProgress.expirationTime = NoWork;

              switch (workInProgress.tag) {
                case IndeterminateComponent: {
                  var elementType = workInProgress.elementType;
                  return mountIndeterminateComponent(
                    current$$1,
                    workInProgress,
                    elementType,
                    renderExpirationTime
                  );
                }

                case LazyComponent: {
                  var _elementType = workInProgress.elementType;
                  return mountLazyComponent(
                    current$$1,
                    workInProgress,
                    _elementType,
                    updateExpirationTime,
                    renderExpirationTime
                  );
                }

                case FunctionComponent: {
                  var _Component = workInProgress.type;
                  var unresolvedProps = workInProgress.pendingProps;
                  var resolvedProps =
                    workInProgress.elementType === _Component
                      ? unresolvedProps
                      : resolveDefaultProps(_Component, unresolvedProps);
                  return updateFunctionComponent(
                    current$$1,
                    workInProgress,
                    _Component,
                    resolvedProps,
                    renderExpirationTime
                  );
                }

                case ClassComponent: {
                  var _Component2 = workInProgress.type;
                  var _unresolvedProps = workInProgress.pendingProps;

                  var _resolvedProps =
                    workInProgress.elementType === _Component2
                      ? _unresolvedProps
                      : resolveDefaultProps(_Component2, _unresolvedProps);

                  return updateClassComponent(
                    current$$1,
                    workInProgress,
                    _Component2,
                    _resolvedProps,
                    renderExpirationTime
                  );
                }

                case HostRoot:
                  return updateHostRoot(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case HostComponent:
                  return updateHostComponent(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case HostText:
                  return updateHostText(current$$1, workInProgress);

                case SuspenseComponent:
                  return updateSuspenseComponent(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case HostPortal:
                  return updatePortalComponent(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case ForwardRef: {
                  var type = workInProgress.type;
                  var _unresolvedProps2 = workInProgress.pendingProps;

                  var _resolvedProps2 =
                    workInProgress.elementType === type
                      ? _unresolvedProps2
                      : resolveDefaultProps(type, _unresolvedProps2);

                  return updateForwardRef(
                    current$$1,
                    workInProgress,
                    type,
                    _resolvedProps2,
                    renderExpirationTime
                  );
                }

                case Fragment:
                  return updateFragment(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case Mode:
                  return updateMode(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case Profiler:
                  return updateProfiler(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case ContextProvider:
                  return updateContextProvider(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case ContextConsumer:
                  return updateContextConsumer(
                    current$$1,
                    workInProgress,
                    renderExpirationTime
                  );

                case MemoComponent: {
                  var _type = workInProgress.type;
                  var _unresolvedProps3 = workInProgress.pendingProps;

                  var _resolvedProps3 = resolveDefaultProps(
                    _type.type,
                    _unresolvedProps3
                  );

                  return updateMemoComponent(
                    current$$1,
                    workInProgress,
                    _type,
                    _resolvedProps3,
                    updateExpirationTime,
                    renderExpirationTime
                  );
                }

                case SimpleMemoComponent: {
                  return updateSimpleMemoComponent(
                    current$$1,
                    workInProgress,
                    workInProgress.type,
                    workInProgress.pendingProps,
                    updateExpirationTime,
                    renderExpirationTime
                  );
                }

                case IncompleteClassComponent: {
                  var _Component3 = workInProgress.type;
                  var _unresolvedProps4 = workInProgress.pendingProps;

                  var _resolvedProps4 =
                    workInProgress.elementType === _Component3
                      ? _unresolvedProps4
                      : resolveDefaultProps(_Component3, _unresolvedProps4);

                  return mountIncompleteClassComponent(
                    current$$1,
                    workInProgress,
                    _Component3,
                    _resolvedProps4,
                    renderExpirationTime
                  );
                }

                default:
                  invariant(
                    false,
                    "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."
                  );
              }
            }

            function markUpdate(workInProgress) {
              // Tag the fiber with an update effect. This turns a Placement into
              // a PlacementAndUpdate.
              workInProgress.effectTag |= Update;
            }

            function markRef$1(workInProgress) {
              workInProgress.effectTag |= Ref;
            }

            var appendAllChildren = void 0;
            var updateHostContainer = void 0;
            var updateHostComponent$1 = void 0;
            var updateHostText$1 = void 0;

            if (supportsMutation) {
              // Mutation mode
              appendAllChildren = function(
                parent,
                workInProgress,
                needsVisibilityToggle,
                isHidden
              ) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;

                while (node !== null) {
                  if (node.tag === HostComponent || node.tag === HostText) {
                    appendInitialChild(parent, node.stateNode);
                  } else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }

                  if (node === workInProgress) {
                    return;
                  }

                  while (node.sibling === null) {
                    if (
                      node.return === null ||
                      node.return === workInProgress
                    ) {
                      return;
                    }

                    node = node.return;
                  }

                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              };

              updateHostContainer = function(workInProgress) {
                // Noop
              };

              updateHostComponent$1 = function(
                current,
                workInProgress,
                type,
                newProps,
                rootContainerInstance
              ) {
                // If we have an alternate, that means this is an update and we need to
                // schedule a side-effect to do the updates.
                var oldProps = current.memoizedProps;

                if (oldProps === newProps) {
                  // In mutation mode, this is sufficient for a bailout because
                  // we won't touch this node even if children changed.
                  return;
                } // If we get updated because one of our children updated, we don't
                // have newProps so we'll have to reuse them.
                // TODO: Split the update API as separate for the props vs. children.
                // Even better would be if children weren't special cased at all tho.

                var instance = workInProgress.stateNode;
                var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
                // component is hitting the resume path. Figure out why. Possibly
                // related to `hidden`.

                var updatePayload = prepareUpdate(
                  instance,
                  type,
                  oldProps,
                  newProps,
                  rootContainerInstance,
                  currentHostContext
                ); // TODO: Type this specific to this type of component.

                workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
                // is a new ref we mark this as an update. All the work is done in commitWork.

                if (updatePayload) {
                  markUpdate(workInProgress);
                }
              };

              updateHostText$1 = function(
                current,
                workInProgress,
                oldText,
                newText
              ) {
                // If the text differs, mark it as an update. All the work in done in commitWork.
                if (oldText !== newText) {
                  markUpdate(workInProgress);
                }
              };
            } else if (supportsPersistence) {
              // Persistent host tree mode
              appendAllChildren = function(
                parent,
                workInProgress,
                needsVisibilityToggle,
                isHidden
              ) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;

                while (node !== null) {
                  // eslint-disable-next-line no-labels
                  branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;

                    if (needsVisibilityToggle) {
                      var props = node.memoizedProps;
                      var type = node.type;

                      if (isHidden) {
                        // This child is inside a timed out tree. Hide it.
                        instance = cloneHiddenInstance(
                          instance,
                          type,
                          props,
                          node
                        );
                      } else {
                        // This child was previously inside a timed out tree. If it was not
                        // updated during this render, it may need to be unhidden. Clone
                        // again to be sure.
                        instance = cloneUnhiddenInstance(
                          instance,
                          type,
                          props,
                          node
                        );
                      }

                      node.stateNode = instance;
                    }

                    appendInitialChild(parent, instance);
                  } else if (node.tag === HostText) {
                    var _instance = node.stateNode;

                    if (needsVisibilityToggle) {
                      var text = node.memoizedProps;
                      var rootContainerInstance = getRootHostContainer();
                      var currentHostContext = getHostContext();

                      if (isHidden) {
                        _instance = createHiddenTextInstance(
                          text,
                          rootContainerInstance,
                          currentHostContext,
                          workInProgress
                        );
                      } else {
                        _instance = createTextInstance(
                          text,
                          rootContainerInstance,
                          currentHostContext,
                          workInProgress
                        );
                      }

                      node.stateNode = _instance;
                    }

                    appendInitialChild(parent, _instance);
                  } else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                  } else if (node.tag === SuspenseComponent) {
                    var current = node.alternate;

                    if (current !== null) {
                      var oldState = current.memoizedState;
                      var newState = node.memoizedState;
                      var oldIsHidden = oldState !== null;
                      var newIsHidden = newState !== null;

                      if (oldIsHidden !== newIsHidden) {
                        // The placeholder either just timed out or switched back to the normal
                        // children after having previously timed out. Toggle the visibility of
                        // the direct host children.
                        var primaryChildParent = newIsHidden
                          ? node.child
                          : node;

                        if (primaryChildParent !== null) {
                          appendAllChildren(
                            parent,
                            primaryChildParent,
                            true,
                            newIsHidden
                          );
                        } // eslint-disable-next-line no-labels

                        break branches;
                      }
                    }

                    if (node.child !== null) {
                      // Continue traversing like normal
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  } // $FlowFixMe This is correct but Flow is confused by the labeled break.

                  node = node;

                  if (node === workInProgress) {
                    return;
                  }

                  while (node.sibling === null) {
                    if (
                      node.return === null ||
                      node.return === workInProgress
                    ) {
                      return;
                    }

                    node = node.return;
                  }

                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              }; // An unfortunate fork of appendAllChildren because we have two different parent types.

              var appendAllChildrenToContainer = function(
                containerChildSet,
                workInProgress,
                needsVisibilityToggle,
                isHidden
              ) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;

                while (node !== null) {
                  // eslint-disable-next-line no-labels
                  branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;

                    if (needsVisibilityToggle) {
                      var props = node.memoizedProps;
                      var type = node.type;

                      if (isHidden) {
                        // This child is inside a timed out tree. Hide it.
                        instance = cloneHiddenInstance(
                          instance,
                          type,
                          props,
                          node
                        );
                      } else {
                        // This child was previously inside a timed out tree. If it was not
                        // updated during this render, it may need to be unhidden. Clone
                        // again to be sure.
                        instance = cloneUnhiddenInstance(
                          instance,
                          type,
                          props,
                          node
                        );
                      }

                      node.stateNode = instance;
                    }

                    appendChildToContainerChildSet(containerChildSet, instance);
                  } else if (node.tag === HostText) {
                    var _instance2 = node.stateNode;

                    if (needsVisibilityToggle) {
                      var text = node.memoizedProps;
                      var rootContainerInstance = getRootHostContainer();
                      var currentHostContext = getHostContext();

                      if (isHidden) {
                        _instance2 = createHiddenTextInstance(
                          text,
                          rootContainerInstance,
                          currentHostContext,
                          workInProgress
                        );
                      } else {
                        _instance2 = createTextInstance(
                          text,
                          rootContainerInstance,
                          currentHostContext,
                          workInProgress
                        );
                      }

                      node.stateNode = _instance2;
                    }

                    appendChildToContainerChildSet(
                      containerChildSet,
                      _instance2
                    );
                  } else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                  } else if (node.tag === SuspenseComponent) {
                    var current = node.alternate;

                    if (current !== null) {
                      var oldState = current.memoizedState;
                      var newState = node.memoizedState;
                      var oldIsHidden = oldState !== null;
                      var newIsHidden = newState !== null;

                      if (oldIsHidden !== newIsHidden) {
                        // The placeholder either just timed out or switched back to the normal
                        // children after having previously timed out. Toggle the visibility of
                        // the direct host children.
                        var primaryChildParent = newIsHidden
                          ? node.child
                          : node;

                        if (primaryChildParent !== null) {
                          appendAllChildrenToContainer(
                            containerChildSet,
                            primaryChildParent,
                            true,
                            newIsHidden
                          );
                        } // eslint-disable-next-line no-labels

                        break branches;
                      }
                    }

                    if (node.child !== null) {
                      // Continue traversing like normal
                      node.child.return = node;
                      node = node.child;
                      continue;
                    }
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  } // $FlowFixMe This is correct but Flow is confused by the labeled break.

                  node = node;

                  if (node === workInProgress) {
                    return;
                  }

                  while (node.sibling === null) {
                    if (
                      node.return === null ||
                      node.return === workInProgress
                    ) {
                      return;
                    }

                    node = node.return;
                  }

                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              };

              updateHostContainer = function(workInProgress) {
                var portalOrRoot = workInProgress.stateNode;
                var childrenUnchanged = workInProgress.firstEffect === null;

                if (childrenUnchanged) {
                  // No changes, just reuse the existing instance.
                } else {
                  var container = portalOrRoot.containerInfo;
                  var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

                  appendAllChildrenToContainer(
                    newChildSet,
                    workInProgress,
                    false,
                    false
                  );
                  portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

                  markUpdate(workInProgress);
                  finalizeContainerChildren(container, newChildSet);
                }
              };

              updateHostComponent$1 = function(
                current,
                workInProgress,
                type,
                newProps,
                rootContainerInstance
              ) {
                var currentInstance = current.stateNode;
                var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
                // This guarantees that we can reuse all of them.

                var childrenUnchanged = workInProgress.firstEffect === null;

                if (childrenUnchanged && oldProps === newProps) {
                  // No changes, just reuse the existing instance.
                  // Note that this might release a previous clone.
                  workInProgress.stateNode = currentInstance;
                  return;
                }

                var recyclableInstance = workInProgress.stateNode;
                var currentHostContext = getHostContext();
                var updatePayload = null;

                if (oldProps !== newProps) {
                  updatePayload = prepareUpdate(
                    recyclableInstance,
                    type,
                    oldProps,
                    newProps,
                    rootContainerInstance,
                    currentHostContext
                  );
                }

                if (childrenUnchanged && updatePayload === null) {
                  // No changes, just reuse the existing instance.
                  // Note that this might release a previous clone.
                  workInProgress.stateNode = currentInstance;
                  return;
                }

                var newInstance = cloneInstance(
                  currentInstance,
                  updatePayload,
                  type,
                  oldProps,
                  newProps,
                  workInProgress,
                  childrenUnchanged,
                  recyclableInstance
                );

                if (
                  finalizeInitialChildren(
                    newInstance,
                    type,
                    newProps,
                    rootContainerInstance,
                    currentHostContext
                  )
                ) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = newInstance;

                if (childrenUnchanged) {
                  // If there are no other effects in this tree, we need to flag this node as having one.
                  // Even though we're not going to use it for anything.
                  // Otherwise parents won't know that there are new children to propagate upwards.
                  markUpdate(workInProgress);
                } else {
                  // If children might have changed, we have to add them all to the set.
                  appendAllChildren(newInstance, workInProgress, false, false);
                }
              };

              updateHostText$1 = function(
                current,
                workInProgress,
                oldText,
                newText
              ) {
                if (oldText !== newText) {
                  // If the text content differs, we'll create a new text instance for it.
                  var rootContainerInstance = getRootHostContainer();
                  var currentHostContext = getHostContext();
                  workInProgress.stateNode = createTextInstance(
                    newText,
                    rootContainerInstance,
                    currentHostContext,
                    workInProgress
                  ); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                  // This lets the parents know that at least one of their children has changed.

                  markUpdate(workInProgress);
                }
              };
            } else {
              // No host operations
              updateHostContainer = function(workInProgress) {
                // Noop
              };

              updateHostComponent$1 = function(
                current,
                workInProgress,
                type,
                newProps,
                rootContainerInstance
              ) {
                // Noop
              };

              updateHostText$1 = function(
                current,
                workInProgress,
                oldText,
                newText
              ) {
                // Noop
              };
            }

            function completeWork(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              var newProps = workInProgress.pendingProps;

              switch (workInProgress.tag) {
                case IndeterminateComponent:
                  break;

                case LazyComponent:
                  break;

                case SimpleMemoComponent:
                case FunctionComponent:
                  break;

                case ClassComponent: {
                  var Component = workInProgress.type;

                  if (isContextProvider(Component)) {
                    popContext(workInProgress);
                  }

                  break;
                }

                case HostRoot: {
                  popHostContainer(workInProgress);
                  popTopLevelContextObject(workInProgress);
                  var fiberRoot = workInProgress.stateNode;

                  if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                  }

                  if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    popHydrationState(workInProgress); // This resets the hacky state to fix isMounted before committing.
                    // TODO: Delete this when we delete isMounted and findDOMNode.

                    workInProgress.effectTag &= ~Placement;
                  }

                  updateHostContainer(workInProgress);
                  break;
                }

                case HostComponent: {
                  popHostContext(workInProgress);
                  var rootContainerInstance = getRootHostContainer();
                  var type = workInProgress.type;

                  if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(
                      current,
                      workInProgress,
                      type,
                      newProps,
                      rootContainerInstance
                    );

                    if (current.ref !== workInProgress.ref) {
                      markRef$1(workInProgress);
                    }
                  } else {
                    if (!newProps) {
                      !(workInProgress.stateNode !== null)
                        ? invariant(
                            false,
                            "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                          )
                        : void 0; // This can happen when we abort work.

                      break;
                    }

                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on we want to add then top->down or
                    // bottom->up. Top->down is faster in IE11.

                    var wasHydrated = popHydrationState(workInProgress);

                    if (wasHydrated) {
                      // TODO: Move this and createInstance step into the beginPhase
                      // to consolidate.
                      if (
                        prepareToHydrateHostInstance(
                          workInProgress,
                          rootContainerInstance,
                          currentHostContext
                        )
                      ) {
                        // If changes to the hydrated node needs to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                      }
                    } else {
                      var instance = createInstance(
                        type,
                        newProps,
                        rootContainerInstance,
                        currentHostContext,
                        workInProgress
                      );
                      appendAllChildren(instance, workInProgress, false, false); // Certain renderers require commit-time effects for initial mount.
                      // (eg DOM renderer supports auto-focus for certain elements).
                      // Make sure such renderers get scheduled for later work.

                      if (
                        finalizeInitialChildren(
                          instance,
                          type,
                          newProps,
                          rootContainerInstance,
                          currentHostContext
                        )
                      ) {
                        markUpdate(workInProgress);
                      }

                      workInProgress.stateNode = instance;
                    }

                    if (workInProgress.ref !== null) {
                      // If there is a ref on a host node we need to schedule a callback
                      markRef$1(workInProgress);
                    }
                  }

                  break;
                }

                case HostText: {
                  var newText = newProps;

                  if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.

                    updateHostText$1(current, workInProgress, oldText, newText);
                  } else {
                    if (typeof newText !== "string") {
                      !(workInProgress.stateNode !== null)
                        ? invariant(
                            false,
                            "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                          )
                        : void 0; // This can happen when we abort work.
                    }

                    var _rootContainerInstance = getRootHostContainer();

                    var _currentHostContext = getHostContext();

                    var _wasHydrated = popHydrationState(workInProgress);

                    if (_wasHydrated) {
                      if (prepareToHydrateHostTextInstance(workInProgress)) {
                        markUpdate(workInProgress);
                      }
                    } else {
                      workInProgress.stateNode = createTextInstance(
                        newText,
                        _rootContainerInstance,
                        _currentHostContext,
                        workInProgress
                      );
                    }
                  }

                  break;
                }

                case ForwardRef:
                  break;

                case SuspenseComponent: {
                  var nextState = workInProgress.memoizedState;

                  if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

                    return workInProgress;
                  }

                  var nextDidTimeout = nextState !== null;
                  var prevDidTimeout =
                    current !== null && current.memoizedState !== null;

                  if (current !== null && !nextDidTimeout && prevDidTimeout) {
                    // We just switched from the fallback to the normal children. Delete
                    // the fallback.
                    // TODO: Would it be better to store the fallback fragment on
                    var currentFallbackChild = current.child.sibling;

                    if (currentFallbackChild !== null) {
                      // Deletions go at the beginning of the return fiber's effect list
                      var first = workInProgress.firstEffect;

                      if (first !== null) {
                        workInProgress.firstEffect = currentFallbackChild;
                        currentFallbackChild.nextEffect = first;
                      } else {
                        workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                        currentFallbackChild.nextEffect = null;
                      }

                      currentFallbackChild.effectTag = Deletion;
                    }
                  } // The children either timed out after previously being visible, or
                  // were restored after previously being hidden. Schedule an effect
                  // to update their visiblity.

                  if (
                    //
                    nextDidTimeout !== prevDidTimeout || // Outside concurrent mode, the primary children commit in an
                    // inconsistent state, even if they are hidden. So if they are hidden,
                    // we need to schedule an effect to re-hide them, just in case.
                    ((workInProgress.effectTag & ConcurrentMode) ===
                      NoContext &&
                      nextDidTimeout)
                  ) {
                    workInProgress.effectTag |= Update;
                  }

                  break;
                }

                case Fragment:
                  break;

                case Mode:
                  break;

                case Profiler:
                  break;

                case HostPortal:
                  popHostContainer(workInProgress);
                  updateHostContainer(workInProgress);
                  break;

                case ContextProvider:
                  // Pop provider fiber
                  popProvider(workInProgress);
                  break;

                case ContextConsumer:
                  break;

                case MemoComponent:
                  break;

                case IncompleteClassComponent: {
                  // Same as class component case. I put it down here so that the tags are
                  // sequential to ensure this switch is compiled to a jump table.
                  var _Component = workInProgress.type;

                  if (isContextProvider(_Component)) {
                    popContext(workInProgress);
                  }

                  break;
                }

                default:
                  invariant(
                    false,
                    "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."
                  );
              }

              return null;
            }

            function shouldCaptureSuspense(current, workInProgress) {
              // In order to capture, the Suspense component must have a fallback prop.
              if (workInProgress.memoizedProps.fallback === undefined) {
                return false;
              } // If it was the primary children that just suspended, capture and render the
              // fallback. Otherwise, don't capture and bubble to the next boundary.

              var nextState = workInProgress.memoizedState;
              return nextState === null;
            } // This module is forked in different environments.
            // By default, return `true` to log errors to the console.
            // Forks can return `false` if this isn't desirable.

            function showErrorDialog(capturedError) {
              return true;
            }

            function logCapturedError(capturedError) {
              var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
              // This enables renderers like ReactNative to better manage redbox behavior.

              if (logError === false) {
                return;
              }

              var error = capturedError.error;
              {
                var componentName = capturedError.componentName,
                  componentStack = capturedError.componentStack,
                  errorBoundaryName = capturedError.errorBoundaryName,
                  errorBoundaryFound = capturedError.errorBoundaryFound,
                  willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
                // `preventDefault()` in window `error` handler.
                // We record this information as an expando on the error.

                if (error != null && error._suppressLogging) {
                  if (errorBoundaryFound && willRetry) {
                    // The error is recoverable and was silenced.
                    // Ignore it and don't print the stack addendum.
                    // This is handy for testing error boundaries without noise.
                    return;
                  } // The error is fatal. Since the silencing might have
                  // been accidental, we'll surface it anyway.
                  // However, the browser would have silenced the original error
                  // so we'll print it first, and then print the stack addendum.

                  console.error(error); // For a more detailed description of this block, see:
                  // https://github.com/facebook/react/pull/13384
                }

                var componentNameMessage = componentName
                  ? "The above error occurred in the <" +
                    componentName +
                    "> component:"
                  : "The above error occurred in one of your React components:";
                var errorBoundaryMessage = void 0; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

                if (errorBoundaryFound && errorBoundaryName) {
                  if (willRetry) {
                    errorBoundaryMessage =
                      "React will try to recreate this component tree from scratch " +
                      ("using the error boundary you provided, " +
                        errorBoundaryName +
                        ".");
                  } else {
                    errorBoundaryMessage =
                      "This error was initially handled by the error boundary " +
                      errorBoundaryName +
                      ".\n" +
                      "Recreating the tree from scratch failed so React will unmount the tree.";
                  }
                } else {
                  errorBoundaryMessage =
                    "Consider adding an error boundary to your tree to customize error handling behavior.\n" +
                    "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
                }

                var combinedMessage =
                  "" +
                  componentNameMessage +
                  componentStack +
                  "\n\n" +
                  ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
                // We don't include the original error message and JS stack because the browser
                // has already printed it. Even if the application swallows the error, it is still
                // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

                console.error(combinedMessage);
              }
            }

            var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
            {
              didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
            }

            function logError(boundary, errorInfo) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;

              if (stack === null && source !== null) {
                stack = getStackByFiberInDevAndProd(source);
              }

              var capturedError = {
                componentName:
                  source !== null ? getComponentName(source.type) : null,
                componentStack: stack !== null ? stack : "",
                error: errorInfo.value,
                errorBoundary: null,
                errorBoundaryName: null,
                errorBoundaryFound: false,
                willRetry: false
              };

              if (boundary !== null && boundary.tag === ClassComponent) {
                capturedError.errorBoundary = boundary.stateNode;
                capturedError.errorBoundaryName = getComponentName(
                  boundary.type
                );
                capturedError.errorBoundaryFound = true;
                capturedError.willRetry = true;
              }

              try {
                logCapturedError(capturedError);
              } catch (e) {
                // This method must not throw, or React internal state will get messed up.
                // If console.error is overridden, or logCapturedError() shows a dialog that throws,
                // we want to report this error outside of the normal stack as a last resort.
                // https://github.com/facebook/react/issues/13188
                setTimeout(function() {
                  throw e;
                });
              }
            }

            var callComponentWillUnmountWithTimer = function(
              current$$1,
              instance
            ) {
              startPhaseTimer(current$$1, "componentWillUnmount");
              instance.props = current$$1.memoizedProps;
              instance.state = current$$1.memoizedState;
              instance.componentWillUnmount();
              stopPhaseTimer();
            }; // Capture errors so they don't interrupt unmounting.

            function safelyCallComponentWillUnmount(current$$1, instance) {
              {
                invokeGuardedCallback(
                  null,
                  callComponentWillUnmountWithTimer,
                  null,
                  current$$1,
                  instance
                );

                if (hasCaughtError()) {
                  var unmountError = clearCaughtError();
                  captureCommitPhaseError(current$$1, unmountError);
                }
              }
            }

            function safelyDetachRef(current$$1) {
              var ref = current$$1.ref;

              if (ref !== null) {
                if (typeof ref === "function") {
                  {
                    invokeGuardedCallback(null, ref, null, null);

                    if (hasCaughtError()) {
                      var refError = clearCaughtError();
                      captureCommitPhaseError(current$$1, refError);
                    }
                  }
                } else {
                  ref.current = null;
                }
              }
            }

            function safelyCallDestroy(current$$1, destroy) {
              {
                invokeGuardedCallback(null, destroy, null);

                if (hasCaughtError()) {
                  var error = clearCaughtError();
                  captureCommitPhaseError(current$$1, error);
                }
              }
            }

            function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  commitHookEffectList(
                    UnmountSnapshot,
                    NoEffect$1,
                    finishedWork
                  );
                  return;
                }

                case ClassComponent: {
                  if (finishedWork.effectTag & Snapshot) {
                    if (current$$1 !== null) {
                      var prevProps = current$$1.memoizedProps;
                      var prevState = current$$1.memoizedState;
                      startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                      var instance = finishedWork.stateNode; // We could update instance props and state here,
                      // but instead we rely on them being set during last render.
                      // TODO: revisit this when we implement resuming.

                      {
                        if (finishedWork.type === finishedWork.elementType) {
                          !(instance.props === finishedWork.memoizedProps)
                            ? warning$1(
                                false,
                                "Expected instance props to match memoized props before " +
                                  "getSnapshotBeforeUpdate. This is likely due to a bug in React. " +
                                  "Please file an issue."
                              )
                            : void 0;
                          !(instance.state === finishedWork.memoizedState)
                            ? warning$1(
                                false,
                                "Expected instance state to match memoized state before " +
                                  "getSnapshotBeforeUpdate. This is likely due to a bug in React. " +
                                  "Please file an issue."
                              )
                            : void 0;
                        }
                      }
                      var snapshot = instance.getSnapshotBeforeUpdate(
                        finishedWork.elementType === finishedWork.type
                          ? prevProps
                          : resolveDefaultProps(finishedWork.type, prevProps),
                        prevState
                      );
                      {
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                        if (
                          snapshot === undefined &&
                          !didWarnSet.has(finishedWork.type)
                        ) {
                          didWarnSet.add(finishedWork.type);
                          warningWithoutStack$1(
                            false,
                            "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " +
                              "must be returned. You have returned undefined.",
                            getComponentName(finishedWork.type)
                          );
                        }
                      }
                      instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                      stopPhaseTimer();
                    }
                  }

                  return;
                }

                case HostRoot:
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  // Nothing to do for these component types
                  return;

                default: {
                  invariant(
                    false,
                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                  );
                }
              }
            }

            function commitHookEffectList(unmountTag, mountTag, finishedWork) {
              if (!enableHooks) {
                return;
              }

              var updateQueue = finishedWork.updateQueue;
              var lastEffect =
                updateQueue !== null ? updateQueue.lastEffect : null;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;

                do {
                  if ((effect.tag & unmountTag) !== NoEffect$1) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = null;

                    if (destroy !== null) {
                      destroy();
                    }
                  }

                  if ((effect.tag & mountTag) !== NoEffect$1) {
                    // Mount
                    var create = effect.create;

                    var _destroy = create();

                    if (typeof _destroy !== "function") {
                      {
                        if (_destroy !== null && _destroy !== undefined) {
                          warningWithoutStack$1(
                            false,
                            "useEffect function must return a cleanup function or " +
                              "nothing.%s%s",
                            typeof _destroy.then === "function"
                              ? " Promises and useEffect(async () => ...) are not " +
                                  "supported, but you can call an async function inside an " +
                                  "effect."
                              : "",
                            getStackByFiberInDevAndProd(finishedWork)
                          );
                        }
                      }
                      _destroy = null;
                    }

                    effect.destroy = _destroy;
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }

            function commitPassiveHookEffects(finishedWork) {
              commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
              commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
            }

            function commitLifeCycles(
              finishedRoot,
              current$$1,
              finishedWork,
              committedExpirationTime
            ) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  commitHookEffectList(
                    UnmountLayout,
                    MountLayout,
                    finishedWork
                  );
                  break;
                }

                case ClassComponent: {
                  var instance = finishedWork.stateNode;

                  if (finishedWork.effectTag & Update) {
                    if (current$$1 === null) {
                      startPhaseTimer(finishedWork, "componentDidMount"); // We could update instance props and state here,
                      // but instead we rely on them being set during last render.
                      // TODO: revisit this when we implement resuming.

                      {
                        if (finishedWork.type === finishedWork.elementType) {
                          !(instance.props === finishedWork.memoizedProps)
                            ? warning$1(
                                false,
                                "Expected instance props to match memoized props before " +
                                  "componentDidMount. This is likely due to a bug in React. " +
                                  "Please file an issue."
                              )
                            : void 0;
                          !(instance.state === finishedWork.memoizedState)
                            ? warning$1(
                                false,
                                "Expected instance state to match memoized state before " +
                                  "componentDidMount. This is likely due to a bug in React. " +
                                  "Please file an issue."
                              )
                            : void 0;
                        }
                      }
                      instance.componentDidMount();
                      stopPhaseTimer();
                    } else {
                      var prevProps =
                        finishedWork.elementType === finishedWork.type
                          ? current$$1.memoizedProps
                          : resolveDefaultProps(
                              finishedWork.type,
                              current$$1.memoizedProps
                            );
                      var prevState = current$$1.memoizedState;
                      startPhaseTimer(finishedWork, "componentDidUpdate"); // We could update instance props and state here,
                      // but instead we rely on them being set during last render.
                      // TODO: revisit this when we implement resuming.

                      {
                        if (finishedWork.type === finishedWork.elementType) {
                          !(instance.props === finishedWork.memoizedProps)
                            ? warning$1(
                                false,
                                "Expected instance props to match memoized props before " +
                                  "componentDidUpdate. This is likely due to a bug in React. " +
                                  "Please file an issue."
                              )
                            : void 0;
                          !(instance.state === finishedWork.memoizedState)
                            ? warning$1(
                                false,
                                "Expected instance state to match memoized state before " +
                                  "componentDidUpdate. This is likely due to a bug in React. " +
                                  "Please file an issue."
                              )
                            : void 0;
                        }
                      }
                      instance.componentDidUpdate(
                        prevProps,
                        prevState,
                        instance.__reactInternalSnapshotBeforeUpdate
                      );
                      stopPhaseTimer();
                    }
                  }

                  var updateQueue = finishedWork.updateQueue;

                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType) {
                        !(instance.props === finishedWork.memoizedProps)
                          ? warning$1(
                              false,
                              "Expected instance props to match memoized props before " +
                                "processing the update queue. This is likely due to a bug in React. " +
                                "Please file an issue."
                            )
                          : void 0;
                        !(instance.state === finishedWork.memoizedState)
                          ? warning$1(
                              false,
                              "Expected instance state to match memoized state before " +
                                "processing the update queue. This is likely due to a bug in React. " +
                                "Please file an issue."
                            )
                          : void 0;
                      }
                    } // We could update instance props and state here,
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.

                    commitUpdateQueue(
                      finishedWork,
                      updateQueue,
                      instance,
                      committedExpirationTime
                    );
                  }

                  return;
                }

                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;

                  if (_updateQueue !== null) {
                    var _instance = null;

                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(
                            finishedWork.child.stateNode
                          );
                          break;

                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }

                    commitUpdateQueue(
                      finishedWork,
                      _updateQueue,
                      _instance,
                      committedExpirationTime
                    );
                  }

                  return;
                }

                case HostComponent: {
                  var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                  // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                  // These effects should only be committed when components are first mounted,
                  // aka when there is no current/alternate.

                  if (current$$1 === null && finishedWork.effectTag & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props, finishedWork);
                  }

                  return;
                }

                case HostText: {
                  // We have no life-cycles associated with text.
                  return;
                }

                case HostPortal: {
                  // We have no life-cycles associated with portals.
                  return;
                }

                case Profiler: {
                  if (enableProfilerTimer) {
                    var onRender = finishedWork.memoizedProps.onRender;

                    if (enableSchedulerTracing) {
                      onRender(
                        finishedWork.memoizedProps.id,
                        current$$1 === null ? "mount" : "update",
                        finishedWork.actualDuration,
                        finishedWork.treeBaseDuration,
                        finishedWork.actualStartTime,
                        getCommitTime(),
                        finishedRoot.memoizedInteractions
                      );
                    } else {
                      onRender(
                        finishedWork.memoizedProps.id,
                        current$$1 === null ? "mount" : "update",
                        finishedWork.actualDuration,
                        finishedWork.treeBaseDuration,
                        finishedWork.actualStartTime,
                        getCommitTime()
                      );
                    }
                  }

                  return;
                }

                case SuspenseComponent:
                  break;

                case IncompleteClassComponent:
                  break;

                default: {
                  invariant(
                    false,
                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                  );
                }
              }
            }

            function hideOrUnhideAllChildren(finishedWork, isHidden) {
              if (supportsMutation) {
                // We only have the top Fiber that was inserted but we need recurse down its
                var node = finishedWork;

                while (true) {
                  if (node.tag === HostComponent) {
                    var instance = node.stateNode;

                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } else if (node.tag === HostText) {
                    var _instance3 = node.stateNode;

                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } else if (
                    node.tag === SuspenseComponent &&
                    node.memoizedState !== null
                  ) {
                    // Found a nested Suspense component that timed out. Skip over the
                    var fallbackChildFragment = node.child.sibling;
                    fallbackChildFragment.return = node;
                    node = fallbackChildFragment;
                    continue;
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }

                  if (node === finishedWork) {
                    return;
                  }

                  while (node.sibling === null) {
                    if (node.return === null || node.return === finishedWork) {
                      return;
                    }

                    node = node.return;
                  }

                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              }
            }

            function commitAttachRef(finishedWork) {
              var ref = finishedWork.ref;

              if (ref !== null) {
                var instance = finishedWork.stateNode;
                var instanceToUse = void 0;

                switch (finishedWork.tag) {
                  case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;

                  default:
                    instanceToUse = instance;
                }

                if (typeof ref === "function") {
                  ref(instanceToUse);
                } else {
                  {
                    if (!ref.hasOwnProperty("current")) {
                      warningWithoutStack$1(
                        false,
                        "Unexpected ref object provided for %s. " +
                          "Use either a ref-setter function or React.createRef().%s",
                        getComponentName(finishedWork.type),
                        getStackByFiberInDevAndProd(finishedWork)
                      );
                    }
                  }
                  ref.current = instanceToUse;
                }
              }
            }

            function commitDetachRef(current$$1) {
              var currentRef = current$$1.ref;

              if (currentRef !== null) {
                if (typeof currentRef === "function") {
                  currentRef(null);
                } else {
                  currentRef.current = null;
                }
              }
            } // User-originating errors (lifecycles and refs) should not interrupt
            // deletion, so don't let them throw. Host-originating errors should
            // interrupt deletion, so it's okay

            function commitUnmount(current$$1) {
              onCommitUnmount(current$$1);

              switch (current$$1.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  var updateQueue = current$$1.updateQueue;

                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;

                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;

                      do {
                        var destroy = effect.destroy;

                        if (destroy !== null) {
                          safelyCallDestroy(current$$1, destroy);
                        }

                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }

                  break;
                }

                case ClassComponent: {
                  safelyDetachRef(current$$1);
                  var instance = current$$1.stateNode;

                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(current$$1, instance);
                  }

                  return;
                }

                case HostComponent: {
                  safelyDetachRef(current$$1);
                  return;
                }

                case HostPortal: {
                  // TODO: this is recursive.
                  // We are also not using this parent because
                  // the portal will get pushed immediately.
                  if (supportsMutation) {
                    unmountHostComponents(current$$1);
                  } else if (supportsPersistence) {
                    emptyPortalContainer(current$$1);
                  }

                  return;
                }
              }
            }

            function commitNestedUnmounts(root) {
              // While we're inside a removed host node we don't want to call
              // removeChild on the inner nodes because they're removed by the top
              // call anyway. We also want to call componentWillUnmount on all
              // composites before this host node is removed from the tree. Therefore
              var node = root;

              while (true) {
                commitUnmount(node); // Visit children because they may contain more composite or host nodes.
                // Skip portals because commitUnmount() currently visits them recursively.

                if (
                  node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
                  // If we don't use mutation we drill down into portals here instead.
                  (!supportsMutation || node.tag !== HostPortal)
                ) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === root) {
                  return;
                }

                while (node.sibling === null) {
                  if (node.return === null || node.return === root) {
                    return;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function detachFiber(current$$1) {
              // Cut off the return pointers to disconnect it from the tree. Ideally, we
              // should clear the child pointer of the parent alternate to let this
              // get GC:ed but we don't know which for sure which parent is the current
              // one so we'll settle for GC:ing the subtree of this child. This child
              // itself will be GC:ed when the parent updates the next time.
              current$$1.return = null;
              current$$1.child = null;

              if (current$$1.alternate) {
                current$$1.alternate.child = null;
                current$$1.alternate.return = null;
              }
            }

            function emptyPortalContainer(current$$1) {
              if (!supportsPersistence) {
                return;
              }

              var portal = current$$1.stateNode;
              var containerInfo = portal.containerInfo;
              var emptyChildSet = createContainerChildSet(containerInfo);
              replaceContainerChildren(containerInfo, emptyChildSet);
            }

            function commitContainer(finishedWork) {
              if (!supportsPersistence) {
                return;
              }

              switch (finishedWork.tag) {
                case ClassComponent: {
                  return;
                }

                case HostComponent: {
                  return;
                }

                case HostText: {
                  return;
                }

                case HostRoot:
                case HostPortal: {
                  var portalOrRoot = finishedWork.stateNode;
                  var containerInfo = portalOrRoot.containerInfo,
                    _pendingChildren = portalOrRoot.pendingChildren;
                  replaceContainerChildren(containerInfo, _pendingChildren);
                  return;
                }

                default: {
                  invariant(
                    false,
                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                  );
                }
              }
            }

            function getHostParentFiber(fiber) {
              var parent = fiber.return;

              while (parent !== null) {
                if (isHostParent(parent)) {
                  return parent;
                }

                parent = parent.return;
              }

              invariant(
                false,
                "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
              );
            }

            function isHostParent(fiber) {
              return (
                fiber.tag === HostComponent ||
                fiber.tag === HostRoot ||
                fiber.tag === HostPortal
              );
            }

            function getHostSibling(fiber) {
              // We're going to search forward into the tree until we find a sibling host
              // node. Unfortunately, if multiple insertions are done in a row we have to
              // search past them. This leads to exponential search for the next sibling.
              var node = fiber;

              siblings: while (true) {
                // If we didn't find anything, let's try the next sibling.
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    // If we pop out of the root or hit the parent the fiber we are the
                    // last sibling.
                    return null;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;

                while (node.tag !== HostComponent && node.tag !== HostText) {
                  // If it is not host node and, we might have a host node inside it.
                  // Try to search down until we find one.
                  if (node.effectTag & Placement) {
                    // If we don't have a child, try the siblings instead.
                    continue siblings;
                  } // If we don't have a child, try the siblings instead.
                  // We also skip portals because they are not part of this host tree.

                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                } // Check if this host node is stable or about to be placed.

                if (!(node.effectTag & Placement)) {
                  // Found it!
                  return node.stateNode;
                }
              }
            }

            function commitPlacement(finishedWork) {
              if (!supportsMutation) {
                return;
              } // Recursively insert all host nodes into the parent.

              var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

              var parent = void 0;
              var isContainer = void 0;

              switch (parentFiber.tag) {
                case HostComponent:
                  parent = parentFiber.stateNode;
                  isContainer = false;
                  break;

                case HostRoot:
                  parent = parentFiber.stateNode.containerInfo;
                  isContainer = true;
                  break;

                case HostPortal:
                  parent = parentFiber.stateNode.containerInfo;
                  isContainer = true;
                  break;

                default:
                  invariant(
                    false,
                    "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
                  );
              }

              if (parentFiber.effectTag & ContentReset) {
                // Reset the text content of the parent before doing any insertions
                resetTextContent(parent); // Clear ContentReset from the effect tag

                parentFiber.effectTag &= ~ContentReset;
              }

              var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need recurse down its
              // children to find all the terminal nodes.

              var node = finishedWork;

              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  if (before) {
                    if (isContainer) {
                      insertInContainerBefore(parent, node.stateNode, before);
                    } else {
                      insertBefore(parent, node.stateNode, before);
                    }
                  } else {
                    if (isContainer) {
                      appendChildToContainer(parent, node.stateNode);
                    } else {
                      appendChild(parent, node.stateNode);
                    }
                  }
                } else if (node.tag === HostPortal) {
                  // If the insertion itself is a portal, then we don't want to traverse
                  // down its children. Instead, we'll get insertions from each child in
                  // the portal directly.
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === finishedWork) {
                  return;
                }

                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function unmountHostComponents(current$$1) {
              // We only have the top Fiber that was deleted but we need recurse down its
              var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
              // currentParentIsValid.

              var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

              var currentParent = void 0;
              var currentParentIsContainer = void 0;

              while (true) {
                if (!currentParentIsValid) {
                  var parent = node.return;

                  findParent: while (true) {
                    !(parent !== null)
                      ? invariant(
                          false,
                          "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
                        )
                      : void 0;

                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parent.stateNode;
                        currentParentIsContainer = false;
                        break findParent;

                      case HostRoot:
                        currentParent = parent.stateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;

                      case HostPortal:
                        currentParent = parent.stateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }

                    parent = parent.return;
                  }

                  currentParentIsValid = true;
                }

                if (node.tag === HostComponent || node.tag === HostText) {
                  commitNestedUnmounts(node); // After all the children have unmounted, it is now safe to remove the
                  // node from the tree.

                  if (currentParentIsContainer) {
                    removeChildFromContainer(currentParent, node.stateNode);
                  } else {
                    removeChild(currentParent, node.stateNode);
                  } // Don't visit children because we already visited them.
                } else if (node.tag === HostPortal) {
                  // When we go into a portal, it becomes the parent to remove from.
                  // We will reassign it back when we pop the portal on the way up.
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true; // Visit children because portals might contain host components.

                  if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                } else {
                  commitUnmount(node); // Visit children because we may find more host components below.

                  if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                }

                if (node === current$$1) {
                  return;
                }

                while (node.sibling === null) {
                  if (node.return === null || node.return === current$$1) {
                    return;
                  }

                  node = node.return;

                  if (node.tag === HostPortal) {
                    // When we go out of the portal, we need to restore the parent.
                    // Since we don't keep a stack of them, we will search for it.
                    currentParentIsValid = false;
                  }
                }

                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function commitDeletion(current$$1) {
              if (supportsMutation) {
                // Recursively delete all host nodes from the parent.
                // Detach refs and call componentWillUnmount() on the whole subtree.
                unmountHostComponents(current$$1);
              } else {
                // Detach refs and call componentWillUnmount() on the whole subtree.
                commitNestedUnmounts(current$$1);
              }

              detachFiber(current$$1);
            }

            function commitWork(current$$1, finishedWork) {
              if (!supportsMutation) {
                switch (finishedWork.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case MemoComponent:
                  case SimpleMemoComponent: {
                    commitHookEffectList(
                      UnmountMutation,
                      MountMutation,
                      finishedWork
                    );
                    return;
                  }
                }

                commitContainer(finishedWork);
                return;
              }

              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  commitHookEffectList(
                    UnmountMutation,
                    MountMutation,
                    finishedWork
                  );
                  return;
                }

                case ClassComponent: {
                  return;
                }

                case HostComponent: {
                  var instance = finishedWork.stateNode;

                  if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.

                    var oldProps =
                      current$$1 !== null ? current$$1.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;

                    if (updatePayload !== null) {
                      commitUpdate(
                        instance,
                        updatePayload,
                        type,
                        oldProps,
                        newProps,
                        finishedWork
                      );
                    }
                  }

                  return;
                }

                case HostText: {
                  !(finishedWork.stateNode !== null)
                    ? invariant(
                        false,
                        "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
                      )
                    : void 0;
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                  // as the newProps. The updatePayload will contain the real change in
                  // this case.

                  var oldText =
                    current$$1 !== null ? current$$1.memoizedProps : newText;
                  commitTextUpdate(textInstance, oldText, newText);
                  return;
                }

                case HostRoot: {
                  return;
                }

                case Profiler: {
                  return;
                }

                case SuspenseComponent: {
                  var newState = finishedWork.memoizedState;
                  var newDidTimeout = void 0;
                  var primaryChildParent = finishedWork;

                  if (newState === null) {
                    newDidTimeout = false;
                  } else {
                    newDidTimeout = true;
                    primaryChildParent = finishedWork.child;

                    if (newState.timedOutAt === NoWork) {
                      // If the children had not already timed out, record the time.
                      // This is used to compute the elapsed time during subsequent
                      // attempts to render the children.
                      newState.timedOutAt = requestCurrentTime();
                    }
                  }

                  if (primaryChildParent !== null) {
                    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
                  }

                  return;
                }

                case IncompleteClassComponent: {
                  return;
                }

                default: {
                  invariant(
                    false,
                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                  );
                }
              }
            }

            function commitResetTextContent(current$$1) {
              if (!supportsMutation) {
                return;
              }

              resetTextContent(current$$1.stateNode);
            }

            function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
              var update = createUpdate(expirationTime); // Unmount the root by rendering null.

              update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
              // being called "element".

              update.payload = {
                element: null
              };
              var error = errorInfo.value;

              update.callback = function() {
                onUncaughtError(error);
                logError(fiber, errorInfo);
              };

              return update;
            }

            function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
              var update = createUpdate(expirationTime);
              update.tag = CaptureUpdate;
              var getDerivedStateFromError =
                fiber.type.getDerivedStateFromError;

              if (typeof getDerivedStateFromError === "function") {
                var error = errorInfo.value;

                update.payload = function() {
                  return getDerivedStateFromError(error);
                };
              }

              var inst = fiber.stateNode;

              if (
                inst !== null &&
                typeof inst.componentDidCatch === "function"
              ) {
                update.callback = function callback() {
                  if (typeof getDerivedStateFromError !== "function") {
                    // To preserve the preexisting retry behavior of error boundaries,
                    // we keep track of which ones already failed during this batch.
                    // This gets reset before we yield back to the browser.
                    // TODO: Warn in strict mode if getDerivedStateFromError is
                    // not defined.
                    markLegacyErrorBoundaryAsFailed(this);
                  }

                  var error = errorInfo.value;
                  var stack = errorInfo.stack;
                  logError(fiber, errorInfo);
                  this.componentDidCatch(error, {
                    componentStack: stack !== null ? stack : ""
                  });
                  {
                    if (typeof getDerivedStateFromError !== "function") {
                      // If componentDidCatch is the only error boundary method defined,
                      // then it needs to call setState to recover from errors.
                      // If no state update is scheduled then the boundary will swallow the error.
                      !(fiber.expirationTime === Sync)
                        ? warningWithoutStack$1(
                            false,
                            "%s: Error boundaries should implement getDerivedStateFromError(). " +
                              "In that method, return a state update to display an error message or fallback UI.",
                            getComponentName(fiber.type) || "Unknown"
                          )
                        : void 0;
                    }
                  }
                };
              }

              return update;
            }

            function throwException(
              root,
              returnFiber,
              sourceFiber,
              value,
              renderExpirationTime
            ) {
              // The source fiber did not complete.
              sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

              sourceFiber.firstEffect = sourceFiber.lastEffect = null;

              if (
                value !== null &&
                typeof value === "object" &&
                typeof value.then === "function"
              ) {
                // This is a thenable.
                var thenable = value; // Find the earliest timeout threshold of all the placeholders in the
                // ancestor path. We could avoid this traversal by storing the thresholds on
                // the stack, but we choose not to because we only hit this path if we're
                // IO-bound (i.e. if something suspends). Whereas the stack is used even in
                // the non-IO- bound case.

                var _workInProgress = returnFiber;
                var earliestTimeoutMs = -1;
                var startTimeMs = -1;

                do {
                  if (_workInProgress.tag === SuspenseComponent) {
                    var current$$1 = _workInProgress.alternate;

                    if (current$$1 !== null) {
                      var currentState = current$$1.memoizedState;

                      if (currentState !== null) {
                        // Reached a boundary that already timed out. Do not search
                        // any further.
                        var timedOutAt = currentState.timedOutAt;
                        startTimeMs = expirationTimeToMs(timedOutAt); // Do not search any further.

                        break;
                      }
                    }

                    var timeoutPropMs =
                      _workInProgress.pendingProps.maxDuration;

                    if (typeof timeoutPropMs === "number") {
                      if (timeoutPropMs <= 0) {
                        earliestTimeoutMs = 0;
                      } else if (
                        earliestTimeoutMs === -1 ||
                        timeoutPropMs < earliestTimeoutMs
                      ) {
                        earliestTimeoutMs = timeoutPropMs;
                      }
                    }
                  }

                  _workInProgress = _workInProgress.return;
                } while (_workInProgress !== null); // Schedule the nearest Suspense to re-render the timed out view.

                _workInProgress = returnFiber;

                do {
                  if (
                    _workInProgress.tag === SuspenseComponent &&
                    shouldCaptureSuspense(
                      _workInProgress.alternate,
                      _workInProgress
                    )
                  ) {
                    // Found the nearest boundary.
                    // If the boundary is not in concurrent mode, we should not suspend, and
                    // likewise, when the promise resolves, we should ping synchronously.
                    var pingTime =
                      (_workInProgress.mode & ConcurrentMode) === NoEffect
                        ? Sync
                        : renderExpirationTime; // Attach a listener to the promise to "ping" the root and retry.

                    var onResolveOrReject = retrySuspendedRoot.bind(
                      null,
                      root,
                      _workInProgress,
                      sourceFiber,
                      pingTime
                    );

                    if (enableSchedulerTracing) {
                      onResolveOrReject = tracing.unstable_wrap(
                        onResolveOrReject
                      );
                    }

                    thenable.then(onResolveOrReject, onResolveOrReject); // If the boundary is outside of concurrent mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a concurrent mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.

                    if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
                      _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
                      // But we shouldn't call any lifecycle methods or callbacks. Remove
                      // all lifecycle effect tags.

                      sourceFiber.effectTag &= ~(
                        LifecycleEffectMask | Incomplete
                      );

                      if (sourceFiber.tag === ClassComponent) {
                        var _current = sourceFiber.alternate;

                        if (_current === null) {
                          // This is a new mount. Change the tag so it's not mistaken for a
                          // completed class component. For example, we should not call
                          // componentWillUnmount if it is deleted.
                          sourceFiber.tag = IncompleteClassComponent;
                        }
                      } // The source fiber did not complete. Mark it with the current
                      // render priority to indicate that it still has pending work.

                      sourceFiber.expirationTime = renderExpirationTime; // Exit without suspending.

                      return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.

                    var absoluteTimeoutMs = void 0;

                    if (earliestTimeoutMs === -1) {
                      // If no explicit threshold is given, default to an abitrarily large
                      // value. The actual size doesn't matter because the threshold for the
                      // whole tree will be clamped to the expiration time.
                      absoluteTimeoutMs = maxSigned31BitInt;
                    } else {
                      if (startTimeMs === -1) {
                        // This suspend happened outside of any already timed-out
                        // placeholders. We don't know exactly when the update was
                        // scheduled, but we can infer an approximate start time from the
                        // expiration time. First, find the earliest uncommitted expiration
                        // time in the tree, including work that is suspended. Then subtract
                        // the offset used to compute an async update's expiration time.
                        // This will cause high priority (interactive) work to expire
                        // earlier than necessary, but we can account for this by adjusting
                        // for the Just Noticeable Difference.
                        var earliestExpirationTime = findEarliestOutstandingPriorityLevel(
                          root,
                          renderExpirationTime
                        );
                        var earliestExpirationTimeMs = expirationTimeToMs(
                          earliestExpirationTime
                        );
                        startTimeMs =
                          earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
                      }

                      absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
                    } // Mark the earliest timeout in the suspended fiber's ancestor path.
                    // After completing the root, we'll take the largest of all the
                    // suspended fiber's timeouts and use it to compute a timeout for the
                    // whole tree.

                    renderDidSuspend(
                      root,
                      absoluteTimeoutMs,
                      renderExpirationTime
                    );
                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime;
                    return;
                  } // This boundary already captured during this render. Continue to the next
                  // boundary.

                  _workInProgress = _workInProgress.return;
                } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
                // TODO: Use invariant so the message is stripped in prod?

                value = new Error(
                  (getComponentName(sourceFiber.type) || "A React component") +
                    " suspended while rendering, but no fallback UI was specified.\n" +
                    "\n" +
                    "Add a <Suspense fallback=...> component higher in the tree to " +
                    "provide a loading indicator or placeholder to display." +
                    getStackByFiberInDevAndProd(sourceFiber)
                );
              } // We didn't find a boundary that could handle this type of exception. Start
              // over and traverse parent path again, this time treating the exception
              // as an error.

              renderDidError();
              value = createCapturedValue(value, sourceFiber);
              var workInProgress = returnFiber;

              do {
                switch (workInProgress.tag) {
                  case HostRoot: {
                    var _errorInfo = value;
                    workInProgress.effectTag |= ShouldCapture;
                    workInProgress.expirationTime = renderExpirationTime;
                    var update = createRootErrorUpdate(
                      workInProgress,
                      _errorInfo,
                      renderExpirationTime
                    );
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                  }

                  case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;

                    if (
                      (workInProgress.effectTag & DidCapture) === NoEffect &&
                      (typeof ctor.getDerivedStateFromError === "function" ||
                        (instance !== null &&
                          typeof instance.componentDidCatch === "function" &&
                          !isAlreadyFailedLegacyErrorBoundary(instance)))
                    ) {
                      workInProgress.effectTag |= ShouldCapture;
                      workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

                      var _update = createClassErrorUpdate(
                        workInProgress,
                        errorInfo,
                        renderExpirationTime
                      );

                      enqueueCapturedUpdate(workInProgress, _update);
                      return;
                    }

                    break;

                  default:
                    break;
                }

                workInProgress = workInProgress.return;
              } while (workInProgress !== null);
            }

            function unwindWork(workInProgress, renderExpirationTime) {
              switch (workInProgress.tag) {
                case ClassComponent: {
                  var Component = workInProgress.type;

                  if (isContextProvider(Component)) {
                    popContext(workInProgress);
                  }

                  var effectTag = workInProgress.effectTag;

                  if (effectTag & ShouldCapture) {
                    workInProgress.effectTag =
                      (effectTag & ~ShouldCapture) | DidCapture;
                    return workInProgress;
                  }

                  return null;
                }

                case HostRoot: {
                  popHostContainer(workInProgress);
                  popTopLevelContextObject(workInProgress);
                  var _effectTag = workInProgress.effectTag;
                  !((_effectTag & DidCapture) === NoEffect)
                    ? invariant(
                        false,
                        "The root failed to unmount after an error. This is likely a bug in React. Please file an issue."
                      )
                    : void 0;
                  workInProgress.effectTag =
                    (_effectTag & ~ShouldCapture) | DidCapture;
                  return workInProgress;
                }

                case HostComponent: {
                  popHostContext(workInProgress);
                  return null;
                }

                case SuspenseComponent: {
                  var _effectTag2 = workInProgress.effectTag;

                  if (_effectTag2 & ShouldCapture) {
                    workInProgress.effectTag =
                      (_effectTag2 & ~ShouldCapture) | DidCapture; // Captured a suspense effect. Re-render the boundary.

                    return workInProgress;
                  }

                  return null;
                }

                case HostPortal:
                  popHostContainer(workInProgress);
                  return null;

                case ContextProvider:
                  popProvider(workInProgress);
                  return null;

                default:
                  return null;
              }
            }

            function unwindInterruptedWork(interruptedWork) {
              switch (interruptedWork.tag) {
                case ClassComponent: {
                  var childContextTypes =
                    interruptedWork.type.childContextTypes;

                  if (
                    childContextTypes !== null &&
                    childContextTypes !== undefined
                  ) {
                    popContext(interruptedWork);
                  }

                  break;
                }

                case HostRoot: {
                  popHostContainer(interruptedWork);
                  popTopLevelContextObject(interruptedWork);
                  break;
                }

                case HostComponent: {
                  popHostContext(interruptedWork);
                  break;
                }

                case HostPortal:
                  popHostContainer(interruptedWork);
                  break;

                case ContextProvider:
                  popProvider(interruptedWork);
                  break;

                default:
                  break;
              }
            }

            var Dispatcher = {
              readContext: readContext,
              useCallback: useCallback,
              useContext: useContext,
              useEffect: useEffect,
              useImperativeMethods: useImperativeMethods,
              useLayoutEffect: useLayoutEffect,
              useMemo: useMemo,
              useMutationEffect: useMutationEffect,
              useReducer: useReducer,
              useRef: useRef,
              useState: useState
            };
            var DispatcherWithoutHooks = {
              readContext: readContext
            };
            var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
            var didWarnAboutStateTransition = void 0;
            var didWarnSetStateChildContext = void 0;
            var warnAboutUpdateOnUnmounted = void 0;
            var warnAboutInvalidUpdates = void 0;

            if (enableSchedulerTracing) {
              // Provide explicit error message when production+profiling bundle of e.g. react-dom
              // is used with production (non-profiling) bundle of scheduler/tracing
              !(
                tracing.__interactionsRef != null &&
                tracing.__interactionsRef.current != null
              )
                ? invariant(
                    false,
                    "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling"
                  )
                : void 0;
            }

            {
              didWarnAboutStateTransition = false;
              didWarnSetStateChildContext = false;
              var didWarnStateUpdateForUnmountedComponent = {};

              warnAboutUpdateOnUnmounted = function(fiber, isClass) {
                // We show the whole stack but dedupe on the top component's name because
                // the problematic code almost always lies inside that component.
                var componentName =
                  getComponentName(fiber.type) || "ReactComponent";

                if (didWarnStateUpdateForUnmountedComponent[componentName]) {
                  return;
                }

                warningWithoutStack$1(
                  false,
                  "Can't perform a React state update on an unmounted component. This " +
                    "is a no-op, but it indicates a memory leak in your application. To " +
                    "fix, cancel all subscriptions and asynchronous tasks in %s.%s",
                  isClass
                    ? "the componentWillUnmount method"
                    : "a useEffect cleanup function",
                  getStackByFiberInDevAndProd(fiber)
                );
                didWarnStateUpdateForUnmountedComponent[componentName] = true;
              };

              warnAboutInvalidUpdates = function(instance) {
                switch (phase) {
                  case "getChildContext":
                    if (didWarnSetStateChildContext) {
                      return;
                    }

                    warningWithoutStack$1(
                      false,
                      "setState(...): Cannot call setState() inside getChildContext()"
                    );
                    didWarnSetStateChildContext = true;
                    break;

                  case "render":
                    if (didWarnAboutStateTransition) {
                      return;
                    }

                    warningWithoutStack$1(
                      false,
                      "Cannot update during an existing state transition (such as within " +
                        "`render`). Render methods should be a pure function of props and state."
                    );
                    didWarnAboutStateTransition = true;
                    break;
                }
              };
            } // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.

            var lastUniqueAsyncExpiration = Sync - 1; // Represents the expiration time that incoming updates should use. (If this
            // is NoWork, use the default strategy: async updates in async mode, sync
            // updates in sync mode.)

            var expirationContext = NoWork;
            var isWorking = false; // The next work in progress fiber that we're currently working on.

            var nextUnitOfWork = null;
            var nextRoot = null; // The time at which we're currently rendering work.

            var nextRenderExpirationTime = NoWork;
            var nextLatestAbsoluteTimeoutMs = -1;
            var nextRenderDidError = false; // The next fiber with an effect that we're currently committing.

            var nextEffect = null;
            var isCommitting$1 = false;
            var rootWithPendingPassiveEffects = null;
            var passiveEffectCallbackHandle = null;
            var passiveEffectCallback = null;
            var legacyErrorBoundariesThatAlreadyFailed = null; // Used for performance tracking.

            var interruptedBy = null;
            var stashedWorkInProgressProperties = void 0;
            var replayUnitOfWork = void 0;
            var mayReplayFailedUnitOfWork = void 0;
            var isReplayingFailedUnitOfWork = void 0;
            var originalReplayError = void 0;
            var rethrowOriginalError = void 0;

            if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
              stashedWorkInProgressProperties = null;
              mayReplayFailedUnitOfWork = true;
              isReplayingFailedUnitOfWork = false;
              originalReplayError = null;

              replayUnitOfWork = function(
                failedUnitOfWork,
                thrownValue,
                isYieldy
              ) {
                if (
                  thrownValue !== null &&
                  typeof thrownValue === "object" &&
                  typeof thrownValue.then === "function"
                ) {
                  // Don't replay promises. Treat everything else like an error.
                  // TODO: Need to figure out a different strategy if/when we add
                  // support for catching other types.
                  return;
                } // Restore the original state of the work-in-progress

                if (stashedWorkInProgressProperties === null) {
                  // This should never happen. Don't throw because this code is DEV-only.
                  warningWithoutStack$1(
                    false,
                    "Could not replay rendering after an error. This is likely a bug in React. " +
                      "Please file an issue."
                  );
                  return;
                }

                assignFiberPropertiesInDEV(
                  failedUnitOfWork,
                  stashedWorkInProgressProperties
                );

                switch (failedUnitOfWork.tag) {
                  case HostRoot:
                    popHostContainer(failedUnitOfWork);
                    popTopLevelContextObject(failedUnitOfWork);
                    break;

                  case HostComponent:
                    popHostContext(failedUnitOfWork);
                    break;

                  case ClassComponent: {
                    var Component = failedUnitOfWork.type;

                    if (isContextProvider(Component)) {
                      popContext(failedUnitOfWork);
                    }

                    break;
                  }

                  case HostPortal:
                    popHostContainer(failedUnitOfWork);
                    break;

                  case ContextProvider:
                    popProvider(failedUnitOfWork);
                    break;
                } // Replay the begin phase.

                isReplayingFailedUnitOfWork = true;
                originalReplayError = thrownValue;
                invokeGuardedCallback(null, workLoop, null, isYieldy);
                isReplayingFailedUnitOfWork = false;
                originalReplayError = null;

                if (hasCaughtError()) {
                  var replayError = clearCaughtError();

                  if (replayError != null && thrownValue != null) {
                    try {
                      // Reading the expando property is intentionally
                      // inside `try` because it might be a getter or Proxy.
                      if (replayError._suppressLogging) {
                        // Also suppress logging for the original error.
                        thrownValue._suppressLogging = true;
                      }
                    } catch (inner) {
                      // Ignore.
                    }
                  }
                } else {
                  // If the begin phase did not fail the second time, set this pointer
                  // back to the original value.
                  nextUnitOfWork = failedUnitOfWork;
                }
              };

              rethrowOriginalError = function() {
                throw originalReplayError;
              };
            }

            function resetStack() {
              if (nextUnitOfWork !== null) {
                var interruptedWork = nextUnitOfWork.return;

                while (interruptedWork !== null) {
                  unwindInterruptedWork(interruptedWork);
                  interruptedWork = interruptedWork.return;
                }
              }

              {
                ReactStrictModeWarnings.discardPendingWarnings();
                checkThatStackIsEmpty();
              }
              nextRoot = null;
              nextRenderExpirationTime = NoWork;
              nextLatestAbsoluteTimeoutMs = -1;
              nextRenderDidError = false;
              nextUnitOfWork = null;
            }

            function commitAllHostEffects() {
              while (nextEffect !== null) {
                {
                  setCurrentFiber(nextEffect);
                }
                recordEffect();
                var effectTag = nextEffect.effectTag;

                if (effectTag & ContentReset) {
                  commitResetTextContent(nextEffect);
                }

                if (effectTag & Ref) {
                  var current$$1 = nextEffect.alternate;

                  if (current$$1 !== null) {
                    commitDetachRef(current$$1);
                  }
                } // The following switch statement is only concerned about placement,
                // updates, and deletions. To avoid needing to add a case for every
                // possible bitmap value, we remove the secondary effects from the
                // effect tag and switch on that value.

                var primaryEffectTag =
                  effectTag & (Placement | Update | Deletion);

                switch (primaryEffectTag) {
                  case Placement: {
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
                    // any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted
                    // does and isMounted is deprecated anyway so we should be able
                    // to kill this.

                    nextEffect.effectTag &= ~Placement;
                    break;
                  }

                  case PlacementAndUpdate: {
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
                    // any life-cycles like componentDidMount gets called.

                    nextEffect.effectTag &= ~Placement; // Update

                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                  }

                  case Update: {
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                  }

                  case Deletion: {
                    commitDeletion(nextEffect);
                    break;
                  }
                }

                nextEffect = nextEffect.nextEffect;
              }

              {
                resetCurrentFiber();
              }
            }

            function commitBeforeMutationLifecycles() {
              while (nextEffect !== null) {
                {
                  setCurrentFiber(nextEffect);
                }
                var effectTag = nextEffect.effectTag;

                if (effectTag & Snapshot) {
                  recordEffect();
                  var current$$1 = nextEffect.alternate;
                  commitBeforeMutationLifeCycles(current$$1, nextEffect);
                }

                nextEffect = nextEffect.nextEffect;
              }

              {
                resetCurrentFiber();
              }
            }

            function commitAllLifeCycles(
              finishedRoot,
              committedExpirationTime
            ) {
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                ReactStrictModeWarnings.flushLegacyContextWarning();

                if (warnAboutDeprecatedLifecycles) {
                  ReactStrictModeWarnings.flushPendingDeprecationWarnings();
                }
              }

              while (nextEffect !== null) {
                var effectTag = nextEffect.effectTag;

                if (effectTag & (Update | Callback)) {
                  recordEffect();
                  var current$$1 = nextEffect.alternate;
                  commitLifeCycles(
                    finishedRoot,
                    current$$1,
                    nextEffect,
                    committedExpirationTime
                  );
                }

                if (effectTag & Ref) {
                  recordEffect();
                  commitAttachRef(nextEffect);
                }

                if (enableHooks && effectTag & Passive) {
                  rootWithPendingPassiveEffects = finishedRoot;
                }

                nextEffect = nextEffect.nextEffect;
              }
            }

            function commitPassiveEffects(root, firstEffect) {
              rootWithPendingPassiveEffects = null;
              passiveEffectCallbackHandle = null;
              passiveEffectCallback = null; // Set this to true to prevent re-entrancy

              var previousIsRendering = isRendering;
              isRendering = true;
              var effect = firstEffect;

              do {
                if (effect.effectTag & Passive) {
                  var didError = false;
                  var error = void 0;
                  {
                    invokeGuardedCallback(
                      null,
                      commitPassiveHookEffects,
                      null,
                      effect
                    );

                    if (hasCaughtError()) {
                      didError = true;
                      error = clearCaughtError();
                    }
                  }

                  if (didError) {
                    captureCommitPhaseError(effect, error);
                  }
                }

                effect = effect.nextEffect;
              } while (effect !== null);

              isRendering = previousIsRendering; // Check if work was scheduled by one of the effects

              var rootExpirationTime = root.expirationTime;

              if (rootExpirationTime !== NoWork) {
                requestWork(root, rootExpirationTime);
              }
            }

            function isAlreadyFailedLegacyErrorBoundary(instance) {
              return (
                legacyErrorBoundariesThatAlreadyFailed !== null &&
                legacyErrorBoundariesThatAlreadyFailed.has(instance)
              );
            }

            function markLegacyErrorBoundaryAsFailed(instance) {
              if (legacyErrorBoundariesThatAlreadyFailed === null) {
                legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
              } else {
                legacyErrorBoundariesThatAlreadyFailed.add(instance);
              }
            }

            function flushPassiveEffects() {
              if (passiveEffectCallback !== null) {
                scheduler.unstable_cancelCallback(passiveEffectCallbackHandle); // We call the scheduled callback instead of commitPassiveEffects directly
                // to ensure tracing works correctly.

                passiveEffectCallback();
              }
            }

            function commitRoot(root, finishedWork) {
              isWorking = true;
              isCommitting$1 = true;
              startCommitTimer();
              !(root.current !== finishedWork)
                ? invariant(
                    false,
                    "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              var committedExpirationTime = root.pendingCommitExpirationTime;
              !(committedExpirationTime !== NoWork)
                ? invariant(
                    false,
                    "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              root.pendingCommitExpirationTime = NoWork; // Update the pending priority levels to account for the work that we are
              // about to commit. This needs to happen before calling the lifecycles, since
              // they may schedule additional updates.

              var updateExpirationTimeBeforeCommit =
                finishedWork.expirationTime;
              var childExpirationTimeBeforeCommit =
                finishedWork.childExpirationTime;
              var earliestRemainingTimeBeforeCommit =
                childExpirationTimeBeforeCommit >
                updateExpirationTimeBeforeCommit
                  ? childExpirationTimeBeforeCommit
                  : updateExpirationTimeBeforeCommit;
              markCommittedPriorityLevels(
                root,
                earliestRemainingTimeBeforeCommit
              );
              var prevInteractions = null;

              if (enableSchedulerTracing) {
                // Restore any pending interactions at this point,
                // So that cascading work triggered during the render phase will be accounted for.
                prevInteractions = tracing.__interactionsRef.current;
                tracing.__interactionsRef.current = root.memoizedInteractions;
              } // Reset this to null before calling lifecycles

              ReactCurrentOwner$2.current = null;
              var firstEffect = void 0;

              if (finishedWork.effectTag > PerformedWork) {
                // A fiber's effect list consists only of its children, not itself. So if
                // the root has an effect, we need to add it to the end of the list. The
                // resulting list is the set that would belong to the root's parent, if
                // it had one; that is, all the effects in the tree including the root.
                if (finishedWork.lastEffect !== null) {
                  finishedWork.lastEffect.nextEffect = finishedWork;
                  firstEffect = finishedWork.firstEffect;
                } else {
                  firstEffect = finishedWork;
                }
              } else {
                // There is no effect on the root.
                firstEffect = finishedWork.firstEffect;
              }

              prepareForCommit(root.containerInfo); // Invoke instances of getSnapshotBeforeUpdate before mutation.

              nextEffect = firstEffect;
              startCommitSnapshotEffectsTimer();

              while (nextEffect !== null) {
                var didError = false;
                var error = void 0;
                {
                  invokeGuardedCallback(
                    null,
                    commitBeforeMutationLifecycles,
                    null
                  );

                  if (hasCaughtError()) {
                    didError = true;
                    error = clearCaughtError();
                  }
                }

                if (didError) {
                  !(nextEffect !== null)
                    ? invariant(
                        false,
                        "Should have next effect. This error is likely caused by a bug in React. Please file an issue."
                      )
                    : void 0;
                  captureCommitPhaseError(nextEffect, error); // Clean-up

                  if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              }

              stopCommitSnapshotEffectsTimer();

              if (enableProfilerTimer) {
                // Mark the current commit time to be shared by all Profilers in this batch.
                // This enables them to be grouped later.
                recordCommitTime();
              } // Commit all the side-effects within a tree. We'll do this in two passes.
              // The first pass performs all the host insertions, updates, deletions and
              // ref unmounts.

              nextEffect = firstEffect;
              startCommitHostEffectsTimer();

              while (nextEffect !== null) {
                var _didError = false;

                var _error = void 0;

                {
                  invokeGuardedCallback(null, commitAllHostEffects, null);

                  if (hasCaughtError()) {
                    _didError = true;
                    _error = clearCaughtError();
                  }
                }

                if (_didError) {
                  !(nextEffect !== null)
                    ? invariant(
                        false,
                        "Should have next effect. This error is likely caused by a bug in React. Please file an issue."
                      )
                    : void 0;
                  captureCommitPhaseError(nextEffect, _error); // Clean-up

                  if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              }

              stopCommitHostEffectsTimer();
              resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
              // the first pass of the commit phase, so that the previous tree is still
              // current during componentWillUnmount, but before the second pass, so that
              // the finished work is current during componentDidMount/Update.

              root.current = finishedWork; // In the second pass we'll perform all life-cycles and ref callbacks.
              // Life-cycles happen as a separate pass so that all placements, updates,
              // and deletions in the entire tree have already been invoked.
              // This pass also triggers any renderer-specific initial effects.

              nextEffect = firstEffect;
              startCommitLifeCyclesTimer();

              while (nextEffect !== null) {
                var _didError2 = false;

                var _error2 = void 0;

                {
                  invokeGuardedCallback(
                    null,
                    commitAllLifeCycles,
                    null,
                    root,
                    committedExpirationTime
                  );

                  if (hasCaughtError()) {
                    _didError2 = true;
                    _error2 = clearCaughtError();
                  }
                }

                if (_didError2) {
                  !(nextEffect !== null)
                    ? invariant(
                        false,
                        "Should have next effect. This error is likely caused by a bug in React. Please file an issue."
                      )
                    : void 0;
                  captureCommitPhaseError(nextEffect, _error2);

                  if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              }

              if (
                enableHooks &&
                firstEffect !== null &&
                rootWithPendingPassiveEffects !== null
              ) {
                // This commit included a passive effect. These do not need to fire until
                // after the next paint. Schedule an callback to fire them in an async
                // event. To ensure serial execution, the callback will be flushed early if
                // we enter rootWithPendingPassiveEffects commit phase before then.
                var callback = commitPassiveEffects.bind(
                  null,
                  root,
                  firstEffect
                );

                if (enableSchedulerTracing) {
                  // TODO: Avoid this extra callback by mutating the tracing ref directly,
                  // like we do at the beginning of commitRoot. I've opted not to do that
                  // here because that code is still in flux.
                  callback = tracing.unstable_wrap(callback);
                }

                passiveEffectCallbackHandle = scheduler.unstable_scheduleCallback(
                  callback
                );
                passiveEffectCallback = callback;
              }

              isCommitting$1 = false;
              isWorking = false;
              stopCommitLifeCyclesTimer();
              stopCommitTimer();
              onCommitRoot(finishedWork.stateNode);

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCommitWork(
                  finishedWork
                );
              }

              var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
              var childExpirationTimeAfterCommit =
                finishedWork.childExpirationTime;
              var earliestRemainingTimeAfterCommit =
                childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit
                  ? childExpirationTimeAfterCommit
                  : updateExpirationTimeAfterCommit;

              if (earliestRemainingTimeAfterCommit === NoWork) {
                // If there's no remaining work, we can clear the set of already failed
                // error boundaries.
                legacyErrorBoundariesThatAlreadyFailed = null;
              }

              onCommit(root, earliestRemainingTimeAfterCommit);

              if (enableSchedulerTracing) {
                tracing.__interactionsRef.current = prevInteractions;
                var subscriber = void 0;

                try {
                  subscriber = tracing.__subscriberRef.current;

                  if (
                    subscriber !== null &&
                    root.memoizedInteractions.size > 0
                  ) {
                    var threadID = computeThreadID(
                      committedExpirationTime,
                      root.interactionThreadID
                    );
                    subscriber.onWorkStopped(
                      root.memoizedInteractions,
                      threadID
                    );
                  }
                } catch (error) {
                  // It's not safe for commitRoot() to throw.
                  // Store the error for now and we'll re-throw in finishRendering().
                  if (!hasUnhandledError) {
                    hasUnhandledError = true;
                    unhandledError = error;
                  }
                } finally {
                  // Clear completed interactions from the pending Map.
                  // Unless the render was suspended or cascading work was scheduled,
                  // In which case– leave pending interactions until the subsequent render.
                  var pendingInteractionMap = root.pendingInteractionMap;
                  pendingInteractionMap.forEach(function(
                    scheduledInteractions,
                    scheduledExpirationTime
                  ) {
                    // Only decrement the pending interaction count if we're done.
                    // If there's still work at the current priority,
                    // That indicates that we are waiting for suspense data.
                    if (
                      scheduledExpirationTime > earliestRemainingTimeAfterCommit
                    ) {
                      pendingInteractionMap.delete(scheduledExpirationTime);
                      scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;

                        if (subscriber !== null && interaction.__count === 0) {
                          try {
                            subscriber.onInteractionScheduledWorkCompleted(
                              interaction
                            );
                          } catch (error) {
                            // It's not safe for commitRoot() to throw.
                            // Store the error for now and we'll re-throw in finishRendering().
                            if (!hasUnhandledError) {
                              hasUnhandledError = true;
                              unhandledError = error;
                            }
                          }
                        }
                      });
                    }
                  });
                }
              }
            }

            function resetChildExpirationTime(workInProgress, renderTime) {
              if (
                renderTime !== Never &&
                workInProgress.childExpirationTime === Never
              ) {
                // The children of this component are hidden. Don't bubble their
                // expiration times.
                return;
              }

              var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

              if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                // We're in profiling mode.
                // Let's use this same traversal to update the render durations.
                var actualDuration = workInProgress.actualDuration;
                var treeBaseDuration = workInProgress.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0.
                // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
                // When work is done, it should bubble to the parent's actualDuration.
                // If the fiber has not been cloned though, (meaning no work was done),
                // Then this value will reflect the amount of time spent working on a previous render.
                // In that case it should not bubble.
                // We determine whether it was cloned by comparing the child pointer.

                var shouldBubbleActualDurations =
                  workInProgress.alternate === null ||
                  workInProgress.child !== workInProgress.alternate.child;
                var child = workInProgress.child;

                while (child !== null) {
                  var childUpdateExpirationTime = child.expirationTime;
                  var childChildExpirationTime = child.childExpirationTime;

                  if (childUpdateExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = childUpdateExpirationTime;
                  }

                  if (childChildExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = childChildExpirationTime;
                  }

                  if (shouldBubbleActualDurations) {
                    actualDuration += child.actualDuration;
                  }

                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }

                workInProgress.actualDuration = actualDuration;
                workInProgress.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = workInProgress.child;

                while (_child !== null) {
                  var _childUpdateExpirationTime = _child.expirationTime;
                  var _childChildExpirationTime = _child.childExpirationTime;

                  if (_childUpdateExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = _childUpdateExpirationTime;
                  }

                  if (_childChildExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = _childChildExpirationTime;
                  }

                  _child = _child.sibling;
                }
              }

              workInProgress.childExpirationTime = newChildExpirationTime;
            }

            function completeUnitOfWork(workInProgress) {
              // Attempt to complete the current unit of work, then move to the
              // next sibling. If there are no more siblings, return to the
              // parent fiber.
              while (true) {
                // The current, flushed, state of this fiber is the alternate.
                // Ideally nothing should rely on this, but relying on it here
                // means that we don't need an additional field on the work in
                // progress.
                var current$$1 = workInProgress.alternate;
                {
                  setCurrentFiber(workInProgress);
                }
                var returnFiber = workInProgress.return;
                var siblingFiber = workInProgress.sibling;

                if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    // Don't replay if it fails during completion phase.
                    mayReplayFailedUnitOfWork = false;
                  } // This fiber completed.
                  // Remember we're completing this unit so we can find a boundary if it fails.

                  nextUnitOfWork = workInProgress;

                  if (enableProfilerTimer) {
                    if (workInProgress.mode & ProfileMode) {
                      startProfilerTimer(workInProgress);
                    }

                    nextUnitOfWork = completeWork(
                      current$$1,
                      workInProgress,
                      nextRenderExpirationTime
                    );

                    if (workInProgress.mode & ProfileMode) {
                      // Update render duration assuming we didn't error.
                      stopProfilerTimerIfRunningAndRecordDelta(
                        workInProgress,
                        false
                      );
                    }
                  } else {
                    nextUnitOfWork = completeWork(
                      current$$1,
                      workInProgress,
                      nextRenderExpirationTime
                    );
                  }

                  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    // We're out of completion phase so replaying is fine now.
                    mayReplayFailedUnitOfWork = true;
                  }

                  stopWorkTimer(workInProgress);
                  resetChildExpirationTime(
                    workInProgress,
                    nextRenderExpirationTime
                  );
                  {
                    resetCurrentFiber();
                  }

                  if (nextUnitOfWork !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    return nextUnitOfWork;
                  }

                  if (
                    returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
                    (returnFiber.effectTag & Incomplete) === NoEffect
                  ) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) {
                      returnFiber.firstEffect = workInProgress.firstEffect;
                    }

                    if (workInProgress.lastEffect !== null) {
                      if (returnFiber.lastEffect !== null) {
                        returnFiber.lastEffect.nextEffect =
                          workInProgress.firstEffect;
                      }

                      returnFiber.lastEffect = workInProgress.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if
                    // needed, by doing multiple passes over the effect list. We don't want
                    // to schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.

                    var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect list.
                    // PerformedWork effect is read by React DevTools but shouldn't be committed.

                    if (effectTag > PerformedWork) {
                      if (returnFiber.lastEffect !== null) {
                        returnFiber.lastEffect.nextEffect = workInProgress;
                      } else {
                        returnFiber.firstEffect = workInProgress;
                      }

                      returnFiber.lastEffect = workInProgress;
                    }
                  }

                  if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                      workInProgress
                    );
                  }

                  if (siblingFiber !== null) {
                    // If there is more work to do in this returnFiber, do that next.
                    return siblingFiber;
                  } else if (returnFiber !== null) {
                    // If there's no more work in this returnFiber. Complete the returnFiber.
                    workInProgress = returnFiber;
                    continue;
                  } else {
                    // We've reached the root.
                    return null;
                  }
                } else {
                  if (
                    enableProfilerTimer &&
                    workInProgress.mode & ProfileMode
                  ) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(
                      workInProgress,
                      false
                    ); // Include the time spent working on failed children before continuing.

                    var actualDuration = workInProgress.actualDuration;
                    var child = workInProgress.child;

                    while (child !== null) {
                      actualDuration += child.actualDuration;
                      child = child.sibling;
                    }

                    workInProgress.actualDuration = actualDuration;
                  } // This fiber did not complete because something threw. Pop values off
                  // the stack without entering the complete phase. If this is a boundary,
                  // capture values if possible.

                  var next = unwindWork(
                    workInProgress,
                    nextRenderExpirationTime
                  ); // Because this fiber did not complete, don't reset its expiration time.

                  if (workInProgress.effectTag & DidCapture) {
                    // Restarting an error boundary
                    stopFailedWorkTimer(workInProgress);
                  } else {
                    stopWorkTimer(workInProgress);
                  }

                  {
                    resetCurrentFiber();
                  }

                  if (next !== null) {
                    stopWorkTimer(workInProgress);

                    if (true && ReactFiberInstrumentation_1.debugTool) {
                      ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                        workInProgress
                      );
                    } // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.

                    next.effectTag &= HostEffectMask;
                    return next;
                  }

                  if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.effectTag |= Incomplete;
                  }

                  if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                      workInProgress
                    );
                  }

                  if (siblingFiber !== null) {
                    // If there is more work to do in this returnFiber, do that next.
                    return siblingFiber;
                  } else if (returnFiber !== null) {
                    // If there's no more work in this returnFiber. Complete the returnFiber.
                    workInProgress = returnFiber;
                    continue;
                  } else {
                    return null;
                  }
                }
              } // Without this explicit null return Flow complains of invalid return type
              // TODO Remove the above while(true) loop
              // eslint-disable-next-line no-unreachable

              return null;
            }

            function performUnitOfWork(workInProgress) {
              // The current, flushed, state of this fiber is the alternate.
              // Ideally nothing should rely on this, but relying on it here
              // means that we don't need an additional field on the work in
              // progress.
              var current$$1 = workInProgress.alternate; // See if beginning this work spawns more work.

              startWorkTimer(workInProgress);
              {
                setCurrentFiber(workInProgress);
              }

              if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                stashedWorkInProgressProperties = assignFiberPropertiesInDEV(
                  stashedWorkInProgressProperties,
                  workInProgress
                );
              }

              var next = void 0;

              if (enableProfilerTimer) {
                if (workInProgress.mode & ProfileMode) {
                  startProfilerTimer(workInProgress);
                }

                next = beginWork(
                  current$$1,
                  workInProgress,
                  nextRenderExpirationTime
                );
                workInProgress.memoizedProps = workInProgress.pendingProps;

                if (workInProgress.mode & ProfileMode) {
                  // Record the render duration assuming we didn't bailout (or error).
                  stopProfilerTimerIfRunningAndRecordDelta(
                    workInProgress,
                    true
                  );
                }
              } else {
                next = beginWork(
                  current$$1,
                  workInProgress,
                  nextRenderExpirationTime
                );
                workInProgress.memoizedProps = workInProgress.pendingProps;
              }

              {
                resetCurrentFiber();

                if (isReplayingFailedUnitOfWork) {
                  // Currently replaying a failed unit of work. This should be unreachable,
                  // because the render phase is meant to be idempotent, and it should
                  // have thrown again. Since it didn't, rethrow the original error, so
                  // React's internal stack is not misaligned.
                  rethrowOriginalError();
                }
              }

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onBeginWork(
                  workInProgress
                );
              }

              if (next === null) {
                // If this doesn't spawn new work, complete the current work.
                next = completeUnitOfWork(workInProgress);
              }

              ReactCurrentOwner$2.current = null;
              return next;
            }

            function workLoop(isYieldy) {
              if (!isYieldy) {
                // Flush work without yielding
                while (nextUnitOfWork !== null) {
                  nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                }
              } else {
                // Flush asynchronous work until there's a higher priority event
                while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
                  nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
                }
              }
            }

            function renderRoot(root, isYieldy) {
              !!isWorking
                ? invariant(
                    false,
                    "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              flushPassiveEffects();
              isWorking = true;

              if (enableHooks) {
                ReactCurrentOwner$2.currentDispatcher = Dispatcher;
              } else {
                ReactCurrentOwner$2.currentDispatcher = DispatcherWithoutHooks;
              }

              var expirationTime = root.nextExpirationTimeToWorkOn; // Check if we're starting from a fresh stack, or if we're resuming from
              // previously yielded work.

              if (
                expirationTime !== nextRenderExpirationTime ||
                root !== nextRoot ||
                nextUnitOfWork === null
              ) {
                // Reset the stack and start working from the root.
                resetStack();
                nextRoot = root;
                nextRenderExpirationTime = expirationTime;
                nextUnitOfWork = createWorkInProgress(
                  nextRoot.current,
                  null,
                  nextRenderExpirationTime
                );
                root.pendingCommitExpirationTime = NoWork;

                if (enableSchedulerTracing) {
                  // Determine which interactions this batch of work currently includes,
                  // So that we can accurately attribute time spent working on it,
                  var interactions = new Set();
                  root.pendingInteractionMap.forEach(function(
                    scheduledInteractions,
                    scheduledExpirationTime
                  ) {
                    if (scheduledExpirationTime >= expirationTime) {
                      scheduledInteractions.forEach(function(interaction) {
                        return interactions.add(interaction);
                      });
                    }
                  }); // Store the current set of interactions on the FiberRoot for a few reasons:
                  // We can re-use it in hot functions like renderRoot() without having to recalculate it.
                  // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
                  // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.

                  root.memoizedInteractions = interactions;

                  if (interactions.size > 0) {
                    var subscriber = tracing.__subscriberRef.current;

                    if (subscriber !== null) {
                      var threadID = computeThreadID(
                        expirationTime,
                        root.interactionThreadID
                      );

                      try {
                        subscriber.onWorkStarted(interactions, threadID);
                      } catch (error) {
                        // Work thrown by an interaction tracing subscriber should be rethrown,
                        // But only once it's safe (to avoid leaveing the scheduler in an invalid state).
                        // Store the error for now and we'll re-throw in finishRendering().
                        if (!hasUnhandledError) {
                          hasUnhandledError = true;
                          unhandledError = error;
                        }
                      }
                    }
                  }
                }
              }

              var prevInteractions = null;

              if (enableSchedulerTracing) {
                // We're about to start new traced work.
                // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
                prevInteractions = tracing.__interactionsRef.current;
                tracing.__interactionsRef.current = root.memoizedInteractions;
              }

              var didFatal = false;
              startWorkLoopTimer(nextUnitOfWork);

              do {
                try {
                  workLoop(isYieldy);
                } catch (thrownValue) {
                  resetContextDependences();
                  resetHooks(); // Reset in case completion throws.
                  // This is only used in DEV and when replaying is on.

                  var mayReplay = void 0;

                  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    mayReplay = mayReplayFailedUnitOfWork;
                    mayReplayFailedUnitOfWork = true;
                  }

                  if (nextUnitOfWork === null) {
                    // This is a fatal error.
                    didFatal = true;
                    onUncaughtError(thrownValue);
                  } else {
                    if (
                      enableProfilerTimer &&
                      nextUnitOfWork.mode & ProfileMode
                    ) {
                      // Record the time spent rendering before an error was thrown.
                      // This avoids inaccurate Profiler durations in the case of a suspended render.
                      stopProfilerTimerIfRunningAndRecordDelta(
                        nextUnitOfWork,
                        true
                      );
                    }

                    {
                      // Reset global debug state
                      // We assume this is defined in DEV
                      resetCurrentlyProcessingQueue();
                    }

                    if (
                      true &&
                      replayFailedUnitOfWorkWithInvokeGuardedCallback
                    ) {
                      if (mayReplay) {
                        var failedUnitOfWork = nextUnitOfWork;
                        replayUnitOfWork(
                          failedUnitOfWork,
                          thrownValue,
                          isYieldy
                        );
                      }
                    } // TODO: we already know this isn't true in some cases.
                    // At least this shows a nicer error message until we figure out the cause.
                    // https://github.com/facebook/react/issues/12449#issuecomment-386727431

                    !(nextUnitOfWork !== null)
                      ? invariant(
                          false,
                          "Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it."
                        )
                      : void 0;
                    var sourceFiber = nextUnitOfWork;
                    var returnFiber = sourceFiber.return;

                    if (returnFiber === null) {
                      // This is the root. The root could capture its own errors. However,
                      // we don't know if it errors before or after we pushed the host
                      // context. This information is needed to avoid a stack mismatch.
                      // Because we're not sure, treat this as a fatal error. We could track
                      // which phase it fails in, but doesn't seem worth it. At least
                      // for now.
                      didFatal = true;
                      onUncaughtError(thrownValue);
                    } else {
                      throwException(
                        root,
                        returnFiber,
                        sourceFiber,
                        thrownValue,
                        nextRenderExpirationTime
                      );
                      nextUnitOfWork = completeUnitOfWork(sourceFiber);
                      continue;
                    }
                  }
                }

                break;
              } while (true);

              if (enableSchedulerTracing) {
                // Traced work is done for now; restore the previous interactions.
                tracing.__interactionsRef.current = prevInteractions;
              } // We're done performing work. Time to clean up.

              isWorking = false;
              ReactCurrentOwner$2.currentDispatcher = null;
              resetContextDependences();
              resetHooks(); // Yield back to main thread.

              if (didFatal) {
                var _didCompleteRoot = false;
                stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
                interruptedBy = null; // There was a fatal error.

                {
                  resetStackAfterFatalErrorInDev();
                } // `nextRoot` points to the in-progress root. A non-null value indicates
                // that we're in the middle of an async render. Set it to null to indicate
                // there's no more work to be done in the current batch.

                nextRoot = null;
                onFatal(root);
                return;
              }

              if (nextUnitOfWork !== null) {
                // There's still remaining async work in this tree, but we ran out of time
                // in the current frame. Yield back to the renderer. Unless we're
                // interrupted by a higher priority update, we'll continue later from where
                // we left off.
                var _didCompleteRoot2 = false;
                stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
                interruptedBy = null;
                onYield(root);
                return;
              } // We completed the whole tree.

              var didCompleteRoot = true;
              stopWorkLoopTimer(interruptedBy, didCompleteRoot);
              var rootWorkInProgress = root.current.alternate;
              !(rootWorkInProgress !== null)
                ? invariant(
                    false,
                    "Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0; // `nextRoot` points to the in-progress root. A non-null value indicates
              // that we're in the middle of an async render. Set it to null to indicate
              // there's no more work to be done in the current batch.

              nextRoot = null;
              interruptedBy = null;

              if (nextRenderDidError) {
                // There was an error
                if (hasLowerPriorityWork(root, expirationTime)) {
                  // There's lower priority work. If so, it may have the effect of fixing
                  // the exception that was just thrown. Exit without committing. This is
                  // similar to a suspend, but without a timeout because we're not waiting
                  // for a promise to resolve. React will restart at the lower
                  // priority level.
                  markSuspendedPriorityLevel(root, expirationTime);
                  var suspendedExpirationTime = expirationTime;
                  var rootExpirationTime = root.expirationTime;
                  onSuspend(
                    root,
                    rootWorkInProgress,
                    suspendedExpirationTime,
                    rootExpirationTime,
                    -1 // Indicates no timeout
                  );
                  return;
                } else if (
                  // There's no lower priority work, but we're rendering asynchronously.
                  // Synchronsouly attempt to render the same level one more time. This is
                  // similar to a suspend, but without a timeout because we're not waiting
                  // for a promise to resolve.
                  !root.didError &&
                  isYieldy
                ) {
                  root.didError = true;

                  var _suspendedExpirationTime = (root.nextExpirationTimeToWorkOn = expirationTime);

                  var _rootExpirationTime = (root.expirationTime = Sync);

                  onSuspend(
                    root,
                    rootWorkInProgress,
                    _suspendedExpirationTime,
                    _rootExpirationTime,
                    -1 // Indicates no timeout
                  );
                  return;
                }
              }

              if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
                // The tree was suspended.
                var _suspendedExpirationTime2 = expirationTime;
                markSuspendedPriorityLevel(root, _suspendedExpirationTime2); // Find the earliest uncommitted expiration time in the tree, including
                // work that is suspended. The timeout threshold cannot be longer than
                // the overall expiration.

                var earliestExpirationTime = findEarliestOutstandingPriorityLevel(
                  root,
                  expirationTime
                );
                var earliestExpirationTimeMs = expirationTimeToMs(
                  earliestExpirationTime
                );

                if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
                  nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
                } // Subtract the current time from the absolute timeout to get the number
                // of milliseconds until the timeout. In other words, convert an absolute
                // timestamp to a relative time. This is the value that is passed
                // to `setTimeout`.

                var currentTimeMs = expirationTimeToMs(requestCurrentTime());
                var msUntilTimeout =
                  nextLatestAbsoluteTimeoutMs - currentTimeMs;
                msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout; // TODO: Account for the Just Noticeable Difference

                var _rootExpirationTime2 = root.expirationTime;
                onSuspend(
                  root,
                  rootWorkInProgress,
                  _suspendedExpirationTime2,
                  _rootExpirationTime2,
                  msUntilTimeout
                );
                return;
              } // Ready to commit.

              onComplete(root, rootWorkInProgress, expirationTime);
            }

            function captureCommitPhaseError(sourceFiber, value) {
              var expirationTime = Sync;
              var fiber = sourceFiber.return;

              while (fiber !== null) {
                switch (fiber.tag) {
                  case ClassComponent:
                    var ctor = fiber.type;
                    var instance = fiber.stateNode;

                    if (
                      typeof ctor.getDerivedStateFromError === "function" ||
                      (typeof instance.componentDidCatch === "function" &&
                        !isAlreadyFailedLegacyErrorBoundary(instance))
                    ) {
                      var errorInfo = createCapturedValue(value, sourceFiber);
                      var update = createClassErrorUpdate(
                        fiber,
                        errorInfo,
                        expirationTime
                      );
                      enqueueUpdate(fiber, update);
                      scheduleWork(fiber, expirationTime);
                      return;
                    }

                    break;

                  case HostRoot: {
                    var _errorInfo = createCapturedValue(value, sourceFiber);

                    var _update = createRootErrorUpdate(
                      fiber,
                      _errorInfo,
                      expirationTime
                    );

                    enqueueUpdate(fiber, _update);
                    scheduleWork(fiber, expirationTime);
                    return;
                  }
                }

                fiber = fiber.return;
              }

              if (sourceFiber.tag === HostRoot) {
                // Error was thrown at the root. There is no parent, so the root
                // itself should capture it.
                var rootFiber = sourceFiber;

                var _errorInfo2 = createCapturedValue(value, rootFiber);

                var _update2 = createRootErrorUpdate(
                  rootFiber,
                  _errorInfo2,
                  expirationTime
                );

                enqueueUpdate(rootFiber, _update2);
                scheduleWork(rootFiber, expirationTime);
              }
            }

            function computeThreadID(expirationTime, interactionThreadID) {
              // Interaction threads are unique per root and expiration time.
              return expirationTime * 1000 + interactionThreadID;
            } // Creates a unique async expiration time.

            function computeUniqueAsyncExpiration() {
              var currentTime = requestCurrentTime();
              var result = computeAsyncExpiration(currentTime);

              if (result >= lastUniqueAsyncExpiration) {
                // Since we assume the current time monotonically increases, we only hit
                // this branch when computeUniqueAsyncExpiration is fired multiple times
                // within a 200ms window (or whatever the async bucket size is).
                result = lastUniqueAsyncExpiration - 1;
              }

              lastUniqueAsyncExpiration = result;
              return lastUniqueAsyncExpiration;
            }

            function computeExpirationForFiber(currentTime, fiber) {
              var expirationTime = void 0;

              if (expirationContext !== NoWork) {
                // An explicit expiration context was set;
                expirationTime = expirationContext;
              } else if (isWorking) {
                if (isCommitting$1) {
                  // Updates that occur during the commit phase should have sync priority
                  // by default.
                  expirationTime = Sync;
                } else {
                  // Updates during the render phase should expire at the same time as
                  // the work that is being rendered.
                  expirationTime = nextRenderExpirationTime;
                }
              } else {
                // No explicit expiration context was set, and we're not currently
                // performing work. Calculate a new expiration time.
                if (fiber.mode & ConcurrentMode) {
                  if (isBatchingInteractiveUpdates) {
                    // This is an interactive update
                    expirationTime = computeInteractiveExpiration(currentTime);
                  } else {
                    // This is an async update
                    expirationTime = computeAsyncExpiration(currentTime);
                  } // If we're in the middle of rendering a tree, do not update at the same
                  // expiration time that is already rendering.

                  if (
                    nextRoot !== null &&
                    expirationTime === nextRenderExpirationTime
                  ) {
                    expirationTime -= 1;
                  }
                } else {
                  // This is a sync update
                  expirationTime = Sync;
                }
              }

              if (isBatchingInteractiveUpdates) {
                // This is an interactive update. Keep track of the lowest pending
                // interactive expiration time. This allows us to synchronously flush
                // all interactive updates when needed.
                if (
                  lowestPriorityPendingInteractiveExpirationTime === NoWork ||
                  expirationTime <
                    lowestPriorityPendingInteractiveExpirationTime
                ) {
                  lowestPriorityPendingInteractiveExpirationTime = expirationTime;
                }
              }

              return expirationTime;
            }

            function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
              // Schedule the timeout.
              if (
                absoluteTimeoutMs >= 0 &&
                nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs
              ) {
                nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
              }
            }

            function renderDidError() {
              nextRenderDidError = true;
            }

            function retrySuspendedRoot(
              root,
              boundaryFiber,
              sourceFiber,
              suspendedTime
            ) {
              var retryTime = void 0;

              if (isPriorityLevelSuspended(root, suspendedTime)) {
                // Ping at the original level
                retryTime = suspendedTime;
                markPingedPriorityLevel(root, retryTime);
              } else {
                // Suspense already timed out. Compute a new expiration time
                var currentTime = requestCurrentTime();
                retryTime = computeExpirationForFiber(
                  currentTime,
                  boundaryFiber
                );
                markPendingPriorityLevel(root, retryTime);
              } // TODO: If the suspense fiber has already rendered the primary children
              // without suspending (that is, all of the promises have already resolved),
              // we should not trigger another update here. One case this happens is when
              // we are in sync mode and a single promise is thrown both on initial render
              // and on update; we attach two .then(retrySuspendedRoot) callbacks and each
              // one performs Sync work, rerendering the Suspense.

              if ((boundaryFiber.mode & ConcurrentMode) !== NoContext) {
                if (
                  root === nextRoot &&
                  nextRenderExpirationTime === suspendedTime
                ) {
                  // Received a ping at the same priority level at which we're currently
                  // rendering. Restart from the root.
                  nextRoot = null;
                }
              }

              scheduleWorkToRoot(boundaryFiber, retryTime);

              if ((boundaryFiber.mode & ConcurrentMode) === NoContext) {
                // Outside of concurrent mode, we must schedule an update on the source
                // fiber, too, since it already committed in an inconsistent state and
                // therefore does not have any pending work.
                scheduleWorkToRoot(sourceFiber, retryTime);
                var sourceTag = sourceFiber.tag;

                if (
                  sourceTag === ClassComponent &&
                  sourceFiber.stateNode !== null
                ) {
                  // When we try rendering again, we should not reuse the current fiber,
                  // since it's known to be in an inconsistent state. Use a force updte to
                  // prevent a bail out.
                  var update = createUpdate(retryTime);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              }

              var rootExpirationTime = root.expirationTime;

              if (rootExpirationTime !== NoWork) {
                requestWork(root, rootExpirationTime);
              }
            }

            function scheduleWorkToRoot(fiber, expirationTime) {
              recordScheduleUpdate();
              {
                if (fiber.tag === ClassComponent) {
                  var instance = fiber.stateNode;
                  warnAboutInvalidUpdates(instance);
                }
              } // Update the source fiber's expiration time

              if (fiber.expirationTime < expirationTime) {
                fiber.expirationTime = expirationTime;
              }

              var alternate = fiber.alternate;

              if (
                alternate !== null &&
                alternate.expirationTime < expirationTime
              ) {
                alternate.expirationTime = expirationTime;
              } // Walk the parent path to the root and update the child expiration time.

              var node = fiber.return;
              var root = null;

              if (node === null && fiber.tag === HostRoot) {
                root = fiber.stateNode;
              } else {
                while (node !== null) {
                  alternate = node.alternate;

                  if (node.childExpirationTime < expirationTime) {
                    node.childExpirationTime = expirationTime;

                    if (
                      alternate !== null &&
                      alternate.childExpirationTime < expirationTime
                    ) {
                      alternate.childExpirationTime = expirationTime;
                    }
                  } else if (
                    alternate !== null &&
                    alternate.childExpirationTime < expirationTime
                  ) {
                    alternate.childExpirationTime = expirationTime;
                  }

                  if (node.return === null && node.tag === HostRoot) {
                    root = node.stateNode;
                    break;
                  }

                  node = node.return;
                }
              }

              if (enableSchedulerTracing) {
                if (root !== null) {
                  var interactions = tracing.__interactionsRef.current;

                  if (interactions.size > 0) {
                    var pendingInteractionMap = root.pendingInteractionMap;
                    var pendingInteractions = pendingInteractionMap.get(
                      expirationTime
                    );

                    if (pendingInteractions != null) {
                      interactions.forEach(function(interaction) {
                        if (!pendingInteractions.has(interaction)) {
                          // Update the pending async work count for previously unscheduled interaction.
                          interaction.__count++;
                        }

                        pendingInteractions.add(interaction);
                      });
                    } else {
                      pendingInteractionMap.set(
                        expirationTime,
                        new Set(interactions)
                      ); // Update the pending async work count for the current interactions.

                      interactions.forEach(function(interaction) {
                        interaction.__count++;
                      });
                    }

                    var subscriber = tracing.__subscriberRef.current;

                    if (subscriber !== null) {
                      var threadID = computeThreadID(
                        expirationTime,
                        root.interactionThreadID
                      );
                      subscriber.onWorkScheduled(interactions, threadID);
                    }
                  }
                }
              }

              return root;
            }

            function scheduleWork(fiber, expirationTime) {
              var root = scheduleWorkToRoot(fiber, expirationTime);

              if (root === null) {
                {
                  switch (fiber.tag) {
                    case ClassComponent:
                      warnAboutUpdateOnUnmounted(fiber, true);
                      break;

                    case FunctionComponent:
                    case ForwardRef:
                    case MemoComponent:
                    case SimpleMemoComponent:
                      warnAboutUpdateOnUnmounted(fiber, false);
                      break;
                  }
                }
                return;
              }

              if (
                !isWorking &&
                nextRenderExpirationTime !== NoWork &&
                expirationTime > nextRenderExpirationTime
              ) {
                // This is an interruption. (Used for performance tracking.)
                interruptedBy = fiber;
                resetStack();
              }

              markPendingPriorityLevel(root, expirationTime);

              if (
                // If we're in the render phase, we don't need to schedule this root
                // for an update, because we'll do it before we exit...
                !isWorking ||
                isCommitting$1 || // ...unless this is a different root than the one we're rendering.
                nextRoot !== root
              ) {
                var rootExpirationTime = root.expirationTime;
                requestWork(root, rootExpirationTime);
              }

              if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                // Reset this back to zero so subsequent updates don't throw.
                nestedUpdateCount = 0;
                invariant(
                  false,
                  "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
                );
              }
            }

            function syncUpdates(fn, a, b, c, d) {
              var previousExpirationContext = expirationContext;
              expirationContext = Sync;

              try {
                return fn(a, b, c, d);
              } finally {
                expirationContext = previousExpirationContext;
              }
            } // TODO: Everything below this is written as if it has been lifted to the
            // renderers. I'll do this in a follow-up.
            // Linked-list of roots

            var firstScheduledRoot = null;
            var lastScheduledRoot = null;
            var callbackExpirationTime = NoWork;
            var callbackID = void 0;
            var isRendering = false;
            var nextFlushedRoot = null;
            var nextFlushedExpirationTime = NoWork;
            var lowestPriorityPendingInteractiveExpirationTime = NoWork;
            var hasUnhandledError = false;
            var unhandledError = null;
            var isBatchingUpdates = false;
            var isUnbatchingUpdates = false;
            var isBatchingInteractiveUpdates = false;
            var completedBatches = null;
            var originalStartTimeMs = scheduler.unstable_now();
            var currentRendererTime = msToExpirationTime(originalStartTimeMs);
            var currentSchedulerTime = currentRendererTime; // Use these to prevent an infinite loop of nested updates

            var NESTED_UPDATE_LIMIT = 50;
            var nestedUpdateCount = 0;
            var lastCommittedRootDuringThisBatch = null;

            function recomputeCurrentRendererTime() {
              var currentTimeMs =
                scheduler.unstable_now() - originalStartTimeMs;
              currentRendererTime = msToExpirationTime(currentTimeMs);
            }

            function scheduleCallbackWithExpirationTime(root, expirationTime) {
              if (callbackExpirationTime !== NoWork) {
                // A callback is already scheduled. Check its expiration time (timeout).
                if (expirationTime < callbackExpirationTime) {
                  // Existing callback has sufficient timeout. Exit.
                  return;
                } else {
                  if (callbackID !== null) {
                    // Existing callback has insufficient timeout. Cancel and schedule a
                    // new one.
                    scheduler.unstable_cancelCallback(callbackID);
                  }
                } // The request callback timer is already running. Don't start a new one.
              } else {
                startRequestCallbackTimer();
              }

              callbackExpirationTime = expirationTime;
              var currentMs = scheduler.unstable_now() - originalStartTimeMs;
              var expirationTimeMs = expirationTimeToMs(expirationTime);
              var timeout = expirationTimeMs - currentMs;
              callbackID = scheduler.unstable_scheduleCallback(
                performAsyncWork,
                {
                  timeout: timeout
                }
              );
            } // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
            // onYield is called upon exiting. We use these in lieu of returning a tuple.
            // I've also chosen not to inline them into renderRoot because these will
            // eventually be lifted into the renderer.

            function onFatal(root) {
              root.finishedWork = null;
            }

            function onComplete(root, finishedWork, expirationTime) {
              root.pendingCommitExpirationTime = expirationTime;
              root.finishedWork = finishedWork;
            }

            function onSuspend(
              root,
              finishedWork,
              suspendedExpirationTime,
              rootExpirationTime,
              msUntilTimeout
            ) {
              root.expirationTime = rootExpirationTime;

              if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
                // Don't wait an additional tick. Commit the tree immediately.
                root.pendingCommitExpirationTime = suspendedExpirationTime;
                root.finishedWork = finishedWork;
              } else if (msUntilTimeout > 0) {
                // Wait `msUntilTimeout` milliseconds before committing.
                root.timeoutHandle = scheduleTimeout(
                  onTimeout.bind(
                    null,
                    root,
                    finishedWork,
                    suspendedExpirationTime
                  ),
                  msUntilTimeout
                );
              }
            }

            function onYield(root) {
              root.finishedWork = null;
            }

            function onTimeout(root, finishedWork, suspendedExpirationTime) {
              // The root timed out. Commit it.
              root.pendingCommitExpirationTime = suspendedExpirationTime;
              root.finishedWork = finishedWork; // Read the current time before entering the commit phase. We can be
              // certain this won't cause tearing related to batching of event updates
              // because we're at the top of a timer event.

              recomputeCurrentRendererTime();
              currentSchedulerTime = currentRendererTime;
              flushRoot(root, suspendedExpirationTime);
            }

            function onCommit(root, expirationTime) {
              root.expirationTime = expirationTime;
              root.finishedWork = null;
            }

            function requestCurrentTime() {
              // requestCurrentTime is called by the scheduler to compute an expiration
              // time.
              //
              // Expiration times are computed by adding to the current time (the start
              // time). However, if two updates are scheduled within the same event, we
              // should treat their start times as simultaneous, even if the actual clock
              // time has advanced between the first and second call.
              // In other words, because expiration times determine how updates are batched,
              // we want all updates of like priority that occur within the same event to
              // receive the same expiration time. Otherwise we get tearing.
              //
              // We keep track of two separate times: the current "renderer" time and the
              // current "scheduler" time. The renderer time can be updated whenever; it
              // only exists to minimize the calls performance.now.
              //
              // But the scheduler time can only be updated if there's no pending work, or
              // if we know for certain that we're not in the middle of an event.
              if (isRendering) {
                // We're already rendering. Return the most recently read time.
                return currentSchedulerTime;
              } // Check if there's pending work.

              findHighestPriorityRoot();

              if (
                nextFlushedExpirationTime === NoWork ||
                nextFlushedExpirationTime === Never
              ) {
                // If there's no pending work, or if the pending work is offscreen, we can
                // read the current time without risk of tearing.
                recomputeCurrentRendererTime();
                currentSchedulerTime = currentRendererTime;
                return currentSchedulerTime;
              } // There's already pending work. We might be in the middle of a browser
              // event. If we were to read the current time, it could cause multiple updates
              // within the same event to receive different expiration times, leading to
              // tearing. Return the last read time. During the next idle callback, the
              // time will be updated.

              return currentSchedulerTime;
            } // requestWork is called by the scheduler whenever a root receives an update.
            // It's up to the renderer to call renderRoot at some point in the future.

            function requestWork(root, expirationTime) {
              addRootToSchedule(root, expirationTime);

              if (isRendering) {
                // Prevent reentrancy. Remaining work will be scheduled at the end of
                // the currently rendering batch.
                return;
              }

              if (isBatchingUpdates) {
                // Flush work at the end of the batch.
                if (isUnbatchingUpdates) {
                  // ...unless we're inside unbatchedUpdates, in which case we should
                  // flush it now.
                  nextFlushedRoot = root;
                  nextFlushedExpirationTime = Sync;
                  performWorkOnRoot(root, Sync, false);
                }

                return;
              } // TODO: Get rid of Sync and use current time?

              if (expirationTime === Sync) {
                performSyncWork();
              } else {
                scheduleCallbackWithExpirationTime(root, expirationTime);
              }
            }

            function addRootToSchedule(root, expirationTime) {
              // Add the root to the schedule.
              // Check if this root is already part of the schedule.
              if (root.nextScheduledRoot === null) {
                // This root is not already scheduled. Add it.
                root.expirationTime = expirationTime;

                if (lastScheduledRoot === null) {
                  firstScheduledRoot = lastScheduledRoot = root;
                  root.nextScheduledRoot = root;
                } else {
                  lastScheduledRoot.nextScheduledRoot = root;
                  lastScheduledRoot = root;
                  lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                }
              } else {
                // This root is already scheduled, but its priority may have increased.
                var remainingExpirationTime = root.expirationTime;

                if (expirationTime > remainingExpirationTime) {
                  // Update the priority.
                  root.expirationTime = expirationTime;
                }
              }
            }

            function findHighestPriorityRoot() {
              var highestPriorityWork = NoWork;
              var highestPriorityRoot = null;

              if (lastScheduledRoot !== null) {
                var previousScheduledRoot = lastScheduledRoot;
                var root = firstScheduledRoot;

                while (root !== null) {
                  var remainingExpirationTime = root.expirationTime;

                  if (remainingExpirationTime === NoWork) {
                    // This root no longer has work. Remove it from the scheduler.
                    // TODO: This check is redudant, but Flow is confused by the branch
                    // below where we set lastScheduledRoot to null, even though we break
                    // from the loop right after.
                    !(
                      previousScheduledRoot !== null &&
                      lastScheduledRoot !== null
                    )
                      ? invariant(
                          false,
                          "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue."
                        )
                      : void 0;

                    if (root === root.nextScheduledRoot) {
                      // This is the only root in the list.
                      root.nextScheduledRoot = null;
                      firstScheduledRoot = lastScheduledRoot = null;
                      break;
                    } else if (root === firstScheduledRoot) {
                      // This is the first root in the list.
                      var next = root.nextScheduledRoot;
                      firstScheduledRoot = next;
                      lastScheduledRoot.nextScheduledRoot = next;
                      root.nextScheduledRoot = null;
                    } else if (root === lastScheduledRoot) {
                      // This is the last root in the list.
                      lastScheduledRoot = previousScheduledRoot;
                      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                      root.nextScheduledRoot = null;
                      break;
                    } else {
                      previousScheduledRoot.nextScheduledRoot =
                        root.nextScheduledRoot;
                      root.nextScheduledRoot = null;
                    }

                    root = previousScheduledRoot.nextScheduledRoot;
                  } else {
                    if (remainingExpirationTime > highestPriorityWork) {
                      // Update the priority, if it's higher
                      highestPriorityWork = remainingExpirationTime;
                      highestPriorityRoot = root;
                    }

                    if (root === lastScheduledRoot) {
                      break;
                    }

                    if (highestPriorityWork === Sync) {
                      // Sync is highest priority by definition so
                      // we can stop searching.
                      break;
                    }

                    previousScheduledRoot = root;
                    root = root.nextScheduledRoot;
                  }
                }
              }

              nextFlushedRoot = highestPriorityRoot;
              nextFlushedExpirationTime = highestPriorityWork;
            } // TODO: This wrapper exists because many of the older tests (the ones that use
            // flushDeferredPri) rely on the number of times `shouldYield` is called. We
            // should get rid of it.

            var didYield = false;

            function shouldYieldToRenderer() {
              if (didYield) {
                return true;
              }

              if (scheduler.unstable_shouldYield()) {
                didYield = true;
                return true;
              }

              return false;
            }

            function performAsyncWork() {
              try {
                if (!shouldYieldToRenderer()) {
                  // The callback timed out. That means at least one update has expired.
                  // Iterate through the root schedule. If they contain expired work, set
                  // the next render expiration time to the current time. This has the effect
                  // of flushing all expired work in a single batch, instead of flushing each
                  // level one at a time.
                  if (firstScheduledRoot !== null) {
                    recomputeCurrentRendererTime();
                    var root = firstScheduledRoot;

                    do {
                      didExpireAtExpirationTime(root, currentRendererTime); // The root schedule is circular, so this is never null.

                      root = root.nextScheduledRoot;
                    } while (root !== firstScheduledRoot);
                  }
                }

                performWork(NoWork, true);
              } finally {
                didYield = false;
              }
            }

            function performSyncWork() {
              performWork(Sync, false);
            }

            function performWork(minExpirationTime, isYieldy) {
              // Keep working on roots until there's no more work, or until there's a higher
              // priority event.
              findHighestPriorityRoot();

              if (isYieldy) {
                recomputeCurrentRendererTime();
                currentSchedulerTime = currentRendererTime;

                if (enableUserTimingAPI) {
                  var didExpire =
                    nextFlushedExpirationTime > currentRendererTime;
                  var timeout = expirationTimeToMs(nextFlushedExpirationTime);
                  stopRequestCallbackTimer(didExpire, timeout);
                }

                while (
                  nextFlushedRoot !== null &&
                  nextFlushedExpirationTime !== NoWork &&
                  minExpirationTime <= nextFlushedExpirationTime &&
                  !(didYield && currentRendererTime > nextFlushedExpirationTime)
                ) {
                  performWorkOnRoot(
                    nextFlushedRoot,
                    nextFlushedExpirationTime,
                    currentRendererTime > nextFlushedExpirationTime
                  );
                  findHighestPriorityRoot();
                  recomputeCurrentRendererTime();
                  currentSchedulerTime = currentRendererTime;
                }
              } else {
                while (
                  nextFlushedRoot !== null &&
                  nextFlushedExpirationTime !== NoWork &&
                  minExpirationTime <= nextFlushedExpirationTime
                ) {
                  performWorkOnRoot(
                    nextFlushedRoot,
                    nextFlushedExpirationTime,
                    false
                  );
                  findHighestPriorityRoot();
                }
              } // We're done flushing work. Either we ran out of time in this callback,
              // or there's no more work left with sufficient priority.
              // If we're inside a callback, set this to false since we just completed it.

              if (isYieldy) {
                callbackExpirationTime = NoWork;
                callbackID = null;
              } // If there's work left over, schedule a new callback.

              if (nextFlushedExpirationTime !== NoWork) {
                scheduleCallbackWithExpirationTime(
                  nextFlushedRoot,
                  nextFlushedExpirationTime
                );
              } // Clean-up.

              finishRendering();
            }

            function flushRoot(root, expirationTime) {
              !!isRendering
                ? invariant(
                    false,
                    "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method."
                  )
                : void 0; // Perform work on root as if the given expiration time is the current time.
              // This has the effect of synchronously flushing all work up to and
              // including the given time.

              nextFlushedRoot = root;
              nextFlushedExpirationTime = expirationTime;
              performWorkOnRoot(root, expirationTime, false); // Flush any sync work that was scheduled by lifecycles

              performSyncWork();
            }

            function finishRendering() {
              nestedUpdateCount = 0;
              lastCommittedRootDuringThisBatch = null;

              if (completedBatches !== null) {
                var batches = completedBatches;
                completedBatches = null;

                for (var i = 0; i < batches.length; i++) {
                  var batch = batches[i];

                  try {
                    batch._onComplete();
                  } catch (error) {
                    if (!hasUnhandledError) {
                      hasUnhandledError = true;
                      unhandledError = error;
                    }
                  }
                }
              }

              if (hasUnhandledError) {
                var error = unhandledError;
                unhandledError = null;
                hasUnhandledError = false;
                throw error;
              }
            }

            function performWorkOnRoot(root, expirationTime, isYieldy) {
              !!isRendering
                ? invariant(
                    false,
                    "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0;
              isRendering = true; // Check if this is async work or sync/expired work.

              if (!isYieldy) {
                // Flush work without yielding.
                // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
                // may want to perform some work without yielding, but also without
                // requiring the root to complete (by triggering placeholders).
                var finishedWork = root.finishedWork;

                if (finishedWork !== null) {
                  // This root is already complete. We can commit it.
                  completeRoot(root, finishedWork, expirationTime);
                } else {
                  root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
                  // we're about to try rendering again.

                  var timeoutHandle = root.timeoutHandle;

                  if (timeoutHandle !== noTimeout) {
                    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

                    cancelTimeout(timeoutHandle);
                  }

                  renderRoot(root, isYieldy);
                  finishedWork = root.finishedWork;

                  if (finishedWork !== null) {
                    // We've completed the root. Commit it.
                    completeRoot(root, finishedWork, expirationTime);
                  }
                }
              } else {
                // Flush async work.
                var _finishedWork = root.finishedWork;

                if (_finishedWork !== null) {
                  // This root is already complete. We can commit it.
                  completeRoot(root, _finishedWork, expirationTime);
                } else {
                  root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
                  // we're about to try rendering again.

                  var _timeoutHandle = root.timeoutHandle;

                  if (_timeoutHandle !== noTimeout) {
                    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

                    cancelTimeout(_timeoutHandle);
                  }

                  renderRoot(root, isYieldy);
                  _finishedWork = root.finishedWork;

                  if (_finishedWork !== null) {
                    // We've completed the root. Check the if we should yield one more time
                    // before committing.
                    if (!shouldYieldToRenderer()) {
                      // Still time left. Commit the root.
                      completeRoot(root, _finishedWork, expirationTime);
                    } else {
                      // There's no time left. Mark this root as complete. We'll come
                      // back and commit it later.
                      root.finishedWork = _finishedWork;
                    }
                  }
                }
              }

              isRendering = false;
            }

            function completeRoot(root, finishedWork, expirationTime) {
              // Check if there's a batch that matches this expiration time.
              var firstBatch = root.firstBatch;

              if (
                firstBatch !== null &&
                firstBatch._expirationTime >= expirationTime
              ) {
                if (completedBatches === null) {
                  completedBatches = [firstBatch];
                } else {
                  completedBatches.push(firstBatch);
                }

                if (firstBatch._defer) {
                  // This root is blocked from committing by a batch. Unschedule it until
                  // we receive another update.
                  root.finishedWork = finishedWork;
                  root.expirationTime = NoWork;
                  return;
                }
              } // Commit the root.

              root.finishedWork = null; // Check if this is a nested update (a sync update scheduled during the
              // commit phase).

              if (root === lastCommittedRootDuringThisBatch) {
                // If the next root is the same as the previous root, this is a nested
                // update. To prevent an infinite loop, increment the nested update count.
                nestedUpdateCount++;
              } else {
                // Reset whenever we switch roots.
                lastCommittedRootDuringThisBatch = root;
                nestedUpdateCount = 0;
              }

              commitRoot(root, finishedWork);
            }

            function onUncaughtError(error) {
              !(nextFlushedRoot !== null)
                ? invariant(
                    false,
                    "Should be working on a root. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0; // Unschedule this root so we don't work on it again until there's
              // another update.

              nextFlushedRoot.expirationTime = NoWork;

              if (!hasUnhandledError) {
                hasUnhandledError = true;
                unhandledError = error;
              }
            } // TODO: Batching should be implemented at the renderer level, not inside
            // the reconciler.

            function batchedUpdates$1(fn, a) {
              var previousIsBatchingUpdates = isBatchingUpdates;
              isBatchingUpdates = true;

              try {
                return fn(a);
              } finally {
                isBatchingUpdates = previousIsBatchingUpdates;

                if (!isBatchingUpdates && !isRendering) {
                  performSyncWork();
                }
              }
            } // TODO: Batching should be implemented at the renderer level, not inside
            // the reconciler.

            function unbatchedUpdates(fn, a) {
              if (isBatchingUpdates && !isUnbatchingUpdates) {
                isUnbatchingUpdates = true;

                try {
                  return fn(a);
                } finally {
                  isUnbatchingUpdates = false;
                }
              }

              return fn(a);
            } // TODO: Batching should be implemented at the renderer level, not within
            // the reconciler.

            function flushSync(fn, a) {
              !!isRendering
                ? invariant(
                    false,
                    "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering."
                  )
                : void 0;
              var previousIsBatchingUpdates = isBatchingUpdates;
              isBatchingUpdates = true;

              try {
                return syncUpdates(fn, a);
              } finally {
                isBatchingUpdates = previousIsBatchingUpdates;
                performSyncWork();
              }
            }

            function interactiveUpdates$1(fn, a, b) {
              if (isBatchingInteractiveUpdates) {
                return fn(a, b);
              } // If there are any pending interactive updates, synchronously flush them.
              // This needs to happen before we read any handlers, because the effect of
              // the previous event may influence which handlers are called during
              // this event.

              if (
                !isBatchingUpdates &&
                !isRendering &&
                lowestPriorityPendingInteractiveExpirationTime !== NoWork
              ) {
                // Synchronously flush pending interactive updates.
                performWork(
                  lowestPriorityPendingInteractiveExpirationTime,
                  false
                );
                lowestPriorityPendingInteractiveExpirationTime = NoWork;
              }

              var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
              var previousIsBatchingUpdates = isBatchingUpdates;
              isBatchingInteractiveUpdates = true;
              isBatchingUpdates = true;

              try {
                return fn(a, b);
              } finally {
                isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
                isBatchingUpdates = previousIsBatchingUpdates;

                if (!isBatchingUpdates && !isRendering) {
                  performSyncWork();
                }
              }
            }

            function flushInteractiveUpdates$1() {
              if (
                !isRendering &&
                lowestPriorityPendingInteractiveExpirationTime !== NoWork
              ) {
                // Synchronously flush pending interactive updates.
                performWork(
                  lowestPriorityPendingInteractiveExpirationTime,
                  false
                );
                lowestPriorityPendingInteractiveExpirationTime = NoWork;
              }
            }

            function flushControlled(fn) {
              var previousIsBatchingUpdates = isBatchingUpdates;
              isBatchingUpdates = true;

              try {
                syncUpdates(fn);
              } finally {
                isBatchingUpdates = previousIsBatchingUpdates;

                if (!isBatchingUpdates && !isRendering) {
                  performSyncWork();
                }
              }
            } // 0 is PROD, 1 is DEV.
            // Might add PROFILE later.

            var didWarnAboutNestedUpdates = void 0;
            var didWarnAboutFindNodeInStrictMode = void 0;
            {
              didWarnAboutNestedUpdates = false;
              didWarnAboutFindNodeInStrictMode = {};
            }

            function getContextForSubtree(parentComponent) {
              if (!parentComponent) {
                return emptyContextObject;
              }

              var fiber = get(parentComponent);
              var parentContext = findCurrentUnmaskedContext(fiber);

              if (fiber.tag === ClassComponent) {
                var Component = fiber.type;

                if (isContextProvider(Component)) {
                  return processChildContext(fiber, Component, parentContext);
                }
              }

              return parentContext;
            }

            function scheduleRootUpdate(
              current$$1,
              element,
              expirationTime,
              callback
            ) {
              {
                if (
                  phase === "render" &&
                  current !== null &&
                  !didWarnAboutNestedUpdates
                ) {
                  didWarnAboutNestedUpdates = true;
                  warningWithoutStack$1(
                    false,
                    "Render methods should be a pure function of props and state; " +
                      "triggering nested component updates from render is not allowed. " +
                      "If necessary, trigger nested updates in componentDidUpdate.\n\n" +
                      "Check the render method of %s.",
                    getComponentName(current.type) || "Unknown"
                  );
                }
              }
              var update = createUpdate(expirationTime); // Caution: React DevTools currently depends on this property
              // being called "element".

              update.payload = {
                element: element
              };
              callback = callback === undefined ? null : callback;

              if (callback !== null) {
                !(typeof callback === "function")
                  ? warningWithoutStack$1(
                      false,
                      "render(...): Expected the last optional `callback` argument to be a " +
                        "function. Instead received: %s.",
                      callback
                    )
                  : void 0;
                update.callback = callback;
              }

              flushPassiveEffects();
              enqueueUpdate(current$$1, update);
              scheduleWork(current$$1, expirationTime);
              return expirationTime;
            }

            function updateContainerAtExpirationTime(
              element,
              container,
              parentComponent,
              expirationTime,
              callback
            ) {
              // TODO: If this is a nested container, this won't be the root.
              var current$$1 = container.current;
              {
                if (ReactFiberInstrumentation_1.debugTool) {
                  if (current$$1.alternate === null) {
                    ReactFiberInstrumentation_1.debugTool.onMountContainer(
                      container
                    );
                  } else if (element === null) {
                    ReactFiberInstrumentation_1.debugTool.onUnmountContainer(
                      container
                    );
                  } else {
                    ReactFiberInstrumentation_1.debugTool.onUpdateContainer(
                      container
                    );
                  }
                }
              }
              var context = getContextForSubtree(parentComponent);

              if (container.context === null) {
                container.context = context;
              } else {
                container.pendingContext = context;
              }

              return scheduleRootUpdate(
                current$$1,
                element,
                expirationTime,
                callback
              );
            }

            function findHostInstance(component) {
              var fiber = get(component);

              if (fiber === undefined) {
                if (typeof component.render === "function") {
                  invariant(
                    false,
                    "Unable to find node on an unmounted component."
                  );
                } else {
                  invariant(
                    false,
                    "Argument appears to not be a ReactComponent. Keys: %s",
                    Object.keys(component)
                  );
                }
              }

              var hostFiber = findCurrentHostFiber(fiber);

              if (hostFiber === null) {
                return null;
              }

              return hostFiber.stateNode;
            }

            function findHostInstanceWithWarning(component, methodName) {
              {
                var fiber = get(component);

                if (fiber === undefined) {
                  if (typeof component.render === "function") {
                    invariant(
                      false,
                      "Unable to find node on an unmounted component."
                    );
                  } else {
                    invariant(
                      false,
                      "Argument appears to not be a ReactComponent. Keys: %s",
                      Object.keys(component)
                    );
                  }
                }

                var hostFiber = findCurrentHostFiber(fiber);

                if (hostFiber === null) {
                  return null;
                }

                if (hostFiber.mode & StrictMode) {
                  var componentName =
                    getComponentName(fiber.type) || "Component";

                  if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                    didWarnAboutFindNodeInStrictMode[componentName] = true;

                    if (fiber.mode & StrictMode) {
                      warningWithoutStack$1(
                        false,
                        "%s is deprecated in StrictMode. " +
                          "%s was passed an instance of %s which is inside StrictMode. " +
                          "Instead, add a ref directly to the element you want to reference." +
                          "\n%s" +
                          "\n\nLearn more about using refs safely here:" +
                          "\nhttps://fb.me/react-strict-mode-find-node",
                        methodName,
                        methodName,
                        componentName,
                        getStackByFiberInDevAndProd(hostFiber)
                      );
                    } else {
                      warningWithoutStack$1(
                        false,
                        "%s is deprecated in StrictMode. " +
                          "%s was passed an instance of %s which renders StrictMode children. " +
                          "Instead, add a ref directly to the element you want to reference." +
                          "\n%s" +
                          "\n\nLearn more about using refs safely here:" +
                          "\nhttps://fb.me/react-strict-mode-find-node",
                        methodName,
                        methodName,
                        componentName,
                        getStackByFiberInDevAndProd(hostFiber)
                      );
                    }
                  }
                }

                return hostFiber.stateNode;
              }
              return findHostInstance(component);
            }

            function createContainer(containerInfo, isConcurrent, hydrate) {
              return createFiberRoot(containerInfo, isConcurrent, hydrate);
            }

            function updateContainer(
              element,
              container,
              parentComponent,
              callback
            ) {
              var current$$1 = container.current;
              var currentTime = requestCurrentTime();
              var expirationTime = computeExpirationForFiber(
                currentTime,
                current$$1
              );
              return updateContainerAtExpirationTime(
                element,
                container,
                parentComponent,
                expirationTime,
                callback
              );
            }

            function getPublicRootInstance(container) {
              var containerFiber = container.current;

              if (!containerFiber.child) {
                return null;
              }

              switch (containerFiber.child.tag) {
                case HostComponent:
                  return getPublicInstance(containerFiber.child.stateNode);

                default:
                  return containerFiber.child.stateNode;
              }
            }

            function findHostInstanceWithNoPortals(fiber) {
              var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

              if (hostFiber === null) {
                return null;
              }

              return hostFiber.stateNode;
            }

            function injectIntoDevTools(devToolsConfig) {
              var findFiberByHostInstance =
                devToolsConfig.findFiberByHostInstance;
              return injectInternals(
                _assign({}, devToolsConfig, {
                  findHostInstanceByFiber: function(fiber) {
                    var hostFiber = findCurrentHostFiber(fiber);

                    if (hostFiber === null) {
                      return null;
                    }

                    return hostFiber.stateNode;
                  },
                  findFiberByHostInstance: function(instance) {
                    if (!findFiberByHostInstance) {
                      // Might not be implemented by the renderer.
                      return null;
                    }

                    return findFiberByHostInstance(instance);
                  }
                })
              );
            } // This file intentionally does *not* have the Flow annotation.
            // Don't add it. See `./inline-typed.js` for an explanation.

            function createPortal$1(
              children,
              containerInfo, // TODO: figure out the API for cross-renderer implementation.
              implementation
            ) {
              var key =
                arguments.length > 3 && arguments[3] !== undefined
                  ? arguments[3]
                  : null;
              return {
                // This tag allow us to uniquely identify this as a React Portal
                $$typeof: REACT_PORTAL_TYPE,
                key: key == null ? null : "" + key,
                children: children,
                containerInfo: containerInfo,
                implementation: implementation
              };
            } // TODO: this is special because it gets imported during build.

            var ReactVersion = "16.6.3"; // TODO: This type is shared between the reconciler and ReactDOM, but will
            // eventually be lifted out to the renderer.

            var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
            var topLevelUpdateWarnings = void 0;
            var warnOnInvalidCallback = void 0;
            var didWarnAboutUnstableCreatePortal = false;
            {
              if (
                typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
                Map.prototype == null ||
                typeof Map.prototype.forEach !== "function" ||
                typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
                Set.prototype == null ||
                typeof Set.prototype.clear !== "function" ||
                typeof Set.prototype.forEach !== "function"
              ) {
                warningWithoutStack$1(
                  false,
                  "React depends on Map and Set built-in types. Make sure that you load a " +
                    "polyfill in older browsers. https://fb.me/react-polyfills"
                );
              }

              topLevelUpdateWarnings = function(container) {
                if (
                  container._reactRootContainer &&
                  container.nodeType !== COMMENT_NODE
                ) {
                  var hostInstance = findHostInstanceWithNoPortals(
                    container._reactRootContainer._internalRoot.current
                  );

                  if (hostInstance) {
                    !(hostInstance.parentNode === container)
                      ? warningWithoutStack$1(
                          false,
                          "render(...): It looks like the React-rendered content of this " +
                            "container was removed without using React. This is not " +
                            "supported and will cause errors. Instead, call " +
                            "ReactDOM.unmountComponentAtNode to empty a container."
                        )
                      : void 0;
                  }
                }

                var isRootRenderedBySomeReact = !!container._reactRootContainer;
                var rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(
                  rootEl && getInstanceFromNode$1(rootEl)
                );
                !(!hasNonRootReactChild || isRootRenderedBySomeReact)
                  ? warningWithoutStack$1(
                      false,
                      "render(...): Replacing React-rendered children with a new root " +
                        "component. If you intended to update the children of this node, " +
                        "you should instead have the existing children update their state " +
                        "and render the new components instead of calling ReactDOM.render."
                    )
                  : void 0;
                !(
                  container.nodeType !== ELEMENT_NODE ||
                  !container.tagName ||
                  container.tagName.toUpperCase() !== "BODY"
                )
                  ? warningWithoutStack$1(
                      false,
                      "render(): Rendering components directly into document.body is " +
                        "discouraged, since its children are often manipulated by third-party " +
                        "scripts and browser extensions. This may lead to subtle " +
                        "reconciliation issues. Try rendering into a container element created " +
                        "for your app."
                    )
                  : void 0;
              };

              warnOnInvalidCallback = function(callback, callerName) {
                !(callback === null || typeof callback === "function")
                  ? warningWithoutStack$1(
                      false,
                      "%s(...): Expected the last optional `callback` argument to be a " +
                        "function. Instead received: %s.",
                      callerName,
                      callback
                    )
                  : void 0;
              };
            }
            setRestoreImplementation(restoreControlledState$1);

            function ReactBatch(root) {
              var expirationTime = computeUniqueAsyncExpiration();
              this._expirationTime = expirationTime;
              this._root = root;
              this._next = null;
              this._callbacks = null;
              this._didComplete = false;
              this._hasChildren = false;
              this._children = null;
              this._defer = true;
            }

            ReactBatch.prototype.render = function(children) {
              !this._defer
                ? invariant(
                    false,
                    "batch.render: Cannot render a batch that already committed."
                  )
                : void 0;
              this._hasChildren = true;
              this._children = children;
              var internalRoot = this._root._internalRoot;
              var expirationTime = this._expirationTime;
              var work = new ReactWork();
              updateContainerAtExpirationTime(
                children,
                internalRoot,
                null,
                expirationTime,
                work._onCommit
              );
              return work;
            };

            ReactBatch.prototype.then = function(onComplete) {
              if (this._didComplete) {
                onComplete();
                return;
              }

              var callbacks = this._callbacks;

              if (callbacks === null) {
                callbacks = this._callbacks = [];
              }

              callbacks.push(onComplete);
            };

            ReactBatch.prototype.commit = function() {
              var internalRoot = this._root._internalRoot;
              var firstBatch = internalRoot.firstBatch;
              !(this._defer && firstBatch !== null)
                ? invariant(
                    false,
                    "batch.commit: Cannot commit a batch multiple times."
                  )
                : void 0;

              if (!this._hasChildren) {
                // This batch is empty. Return.
                this._next = null;
                this._defer = false;
                return;
              }

              var expirationTime = this._expirationTime; // Ensure this is the first batch in the list.

              if (firstBatch !== this) {
                // This batch is not the earliest batch. We need to move it to the front.
                // Update its expiration time to be the expiration time of the earliest
                // batch, so that we can flush it without flushing the other batches.
                if (this._hasChildren) {
                  expirationTime = this._expirationTime =
                    firstBatch._expirationTime; // Rendering this batch again ensures its children will be the final state
                  // when we flush (updates are processed in insertion order: last
                  // update wins).
                  // TODO: This forces a restart. Should we print a warning?

                  this.render(this._children);
                } // Remove the batch from the list.

                var previous = null;
                var batch = firstBatch;

                while (batch !== this) {
                  previous = batch;
                  batch = batch._next;
                }

                !(previous !== null)
                  ? invariant(
                      false,
                      "batch.commit: Cannot commit a batch multiple times."
                    )
                  : void 0;
                previous._next = batch._next; // Add it to the front.

                this._next = firstBatch;
                firstBatch = internalRoot.firstBatch = this;
              } // Synchronously flush all the work up to this batch's expiration time.

              this._defer = false;
              flushRoot(internalRoot, expirationTime); // Pop the batch from the list.

              var next = this._next;
              this._next = null;
              firstBatch = internalRoot.firstBatch = next; // Append the next earliest batch's children to the update queue.

              if (firstBatch !== null && firstBatch._hasChildren) {
                firstBatch.render(firstBatch._children);
              }
            };

            ReactBatch.prototype._onComplete = function() {
              if (this._didComplete) {
                return;
              }

              this._didComplete = true;
              var callbacks = this._callbacks;

              if (callbacks === null) {
                return;
              } // TODO: Error handling.

              for (var i = 0; i < callbacks.length; i++) {
                var _callback = callbacks[i];

                _callback();
              }
            };

            function ReactWork() {
              this._callbacks = null;
              this._didCommit = false; // TODO: Avoid need to bind by replacing callbacks in the update queue with
              // list of Work objects.

              this._onCommit = this._onCommit.bind(this);
            }

            ReactWork.prototype.then = function(onCommit) {
              if (this._didCommit) {
                onCommit();
                return;
              }

              var callbacks = this._callbacks;

              if (callbacks === null) {
                callbacks = this._callbacks = [];
              }

              callbacks.push(onCommit);
            };

            ReactWork.prototype._onCommit = function() {
              if (this._didCommit) {
                return;
              }

              this._didCommit = true;
              var callbacks = this._callbacks;

              if (callbacks === null) {
                return;
              } // TODO: Error handling.

              for (var i = 0; i < callbacks.length; i++) {
                var _callback2 = callbacks[i];
                !(typeof _callback2 === "function")
                  ? invariant(
                      false,
                      "Invalid argument passed as callback. Expected a function. Instead received: %s",
                      _callback2
                    )
                  : void 0;

                _callback2();
              }
            };

            function ReactRoot(container, isConcurrent, hydrate) {
              var root = createContainer(container, isConcurrent, hydrate);
              this._internalRoot = root;
            }

            ReactRoot.prototype.render = function(children, callback) {
              var root = this._internalRoot;
              var work = new ReactWork();
              callback = callback === undefined ? null : callback;
              {
                warnOnInvalidCallback(callback, "render");
              }

              if (callback !== null) {
                work.then(callback);
              }

              updateContainer(children, root, null, work._onCommit);
              return work;
            };

            ReactRoot.prototype.unmount = function(callback) {
              var root = this._internalRoot;
              var work = new ReactWork();
              callback = callback === undefined ? null : callback;
              {
                warnOnInvalidCallback(callback, "render");
              }

              if (callback !== null) {
                work.then(callback);
              }

              updateContainer(null, root, null, work._onCommit);
              return work;
            };

            ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function(
              parentComponent,
              children,
              callback
            ) {
              var root = this._internalRoot;
              var work = new ReactWork();
              callback = callback === undefined ? null : callback;
              {
                warnOnInvalidCallback(callback, "render");
              }

              if (callback !== null) {
                work.then(callback);
              }

              updateContainer(children, root, parentComponent, work._onCommit);
              return work;
            };

            ReactRoot.prototype.createBatch = function() {
              var batch = new ReactBatch(this);
              var expirationTime = batch._expirationTime;
              var internalRoot = this._internalRoot;
              var firstBatch = internalRoot.firstBatch;

              if (firstBatch === null) {
                internalRoot.firstBatch = batch;
                batch._next = null;
              } else {
                // Insert sorted by expiration time then insertion order
                var insertAfter = null;
                var insertBefore = firstBatch;

                while (
                  insertBefore !== null &&
                  insertBefore._expirationTime >= expirationTime
                ) {
                  insertAfter = insertBefore;
                  insertBefore = insertBefore._next;
                }

                batch._next = insertBefore;

                if (insertAfter !== null) {
                  insertAfter._next = batch;
                }
              }

              return batch;
            };
            /**
             * True if the supplied DOM node is a valid node element.
             *
             * @param {?DOMElement} node The candidate DOM node.
             * @return {boolean} True if the DOM is a valid DOM node.
             * @internal
             */

            function isValidContainer(node) {
              return !!(
                node &&
                (node.nodeType === ELEMENT_NODE ||
                  node.nodeType === DOCUMENT_NODE ||
                  node.nodeType === DOCUMENT_FRAGMENT_NODE ||
                  (node.nodeType === COMMENT_NODE &&
                    node.nodeValue === " react-mount-point-unstable "))
              );
            }

            function getReactRootElementInContainer(container) {
              if (!container) {
                return null;
              }

              if (container.nodeType === DOCUMENT_NODE) {
                return container.documentElement;
              } else {
                return container.firstChild;
              }
            }

            function shouldHydrateDueToLegacyHeuristic(container) {
              var rootElement = getReactRootElementInContainer(container);
              return !!(
                rootElement &&
                rootElement.nodeType === ELEMENT_NODE &&
                rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
              );
            }

            setBatchingImplementation(
              batchedUpdates$1,
              interactiveUpdates$1,
              flushInteractiveUpdates$1
            );
            var warnedAboutHydrateAPI = false;

            function legacyCreateRootFromDOMContainer(container, forceHydrate) {
              var shouldHydrate =
                forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

              if (!shouldHydrate) {
                var warned = false;
                var rootSibling = void 0;

                while ((rootSibling = container.lastChild)) {
                  {
                    if (
                      !warned &&
                      rootSibling.nodeType === ELEMENT_NODE &&
                      rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)
                    ) {
                      warned = true;
                      warningWithoutStack$1(
                        false,
                        "render(): Target node has markup rendered by React, but there " +
                          "are unrelated nodes as well. This is most commonly caused by " +
                          "white-space inserted around server-rendered markup."
                      );
                    }
                  }
                  container.removeChild(rootSibling);
                }
              }

              {
                if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                  warnedAboutHydrateAPI = true;
                  lowPriorityWarning$1(
                    false,
                    "render(): Calling ReactDOM.render() to hydrate server-rendered markup " +
                      "will stop working in React v17. Replace the ReactDOM.render() call " +
                      "with ReactDOM.hydrate() if you want React to attach to the server HTML."
                  );
                }
              } // Legacy roots are not async by default.

              var isConcurrent = false;
              return new ReactRoot(container, isConcurrent, shouldHydrate);
            }

            function legacyRenderSubtreeIntoContainer(
              parentComponent,
              children,
              container,
              forceHydrate,
              callback
            ) {
              // TODO: Ensure all entry points contain this check
              !isValidContainer(container)
                ? invariant(false, "Target container is not a DOM element.")
                : void 0;
              {
                topLevelUpdateWarnings(container);
              } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
              // member of intersection type." Whyyyyyy.

              var root = container._reactRootContainer;

              if (!root) {
                // Initial mount
                root = container._reactRootContainer = legacyCreateRootFromDOMContainer(
                  container,
                  forceHydrate
                );

                if (typeof callback === "function") {
                  var originalCallback = callback;

                  callback = function() {
                    var instance = getPublicRootInstance(root._internalRoot);
                    originalCallback.call(instance);
                  };
                } // Initial mount should not be batched.

                unbatchedUpdates(function() {
                  if (parentComponent != null) {
                    root.legacy_renderSubtreeIntoContainer(
                      parentComponent,
                      children,
                      callback
                    );
                  } else {
                    root.render(children, callback);
                  }
                });
              } else {
                if (typeof callback === "function") {
                  var _originalCallback = callback;

                  callback = function() {
                    var instance = getPublicRootInstance(root._internalRoot);

                    _originalCallback.call(instance);
                  };
                } // Update

                if (parentComponent != null) {
                  root.legacy_renderSubtreeIntoContainer(
                    parentComponent,
                    children,
                    callback
                  );
                } else {
                  root.render(children, callback);
                }
              }

              return getPublicRootInstance(root._internalRoot);
            }

            function createPortal(children, container) {
              var key =
                arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : null;
              !isValidContainer(container)
                ? invariant(false, "Target container is not a DOM element.")
                : void 0; // TODO: pass ReactDOM portal implementation as third argument

              return createPortal$1(children, container, null, key);
            }

            var ReactDOM = {
              createPortal: createPortal,
              findDOMNode: function(componentOrElement) {
                {
                  var owner = ReactCurrentOwner.current;

                  if (owner !== null && owner.stateNode !== null) {
                    var warnedAboutRefsInRender =
                      owner.stateNode._warnedAboutRefsInRender;
                    !warnedAboutRefsInRender
                      ? warningWithoutStack$1(
                          false,
                          "%s is accessing findDOMNode inside its render(). " +
                            "render() should be a pure function of props and state. It should " +
                            "never access something that requires stale data from the previous " +
                            "render, such as refs. Move this logic to componentDidMount and " +
                            "componentDidUpdate instead.",
                          getComponentName(owner.type) || "A component"
                        )
                      : void 0;
                    owner.stateNode._warnedAboutRefsInRender = true;
                  }
                }

                if (componentOrElement == null) {
                  return null;
                }

                if (componentOrElement.nodeType === ELEMENT_NODE) {
                  return componentOrElement;
                }

                {
                  return findHostInstanceWithWarning(
                    componentOrElement,
                    "findDOMNode"
                  );
                }
                return findHostInstance(componentOrElement);
              },
              hydrate: function(element, container, callback) {
                // TODO: throw or warn if we couldn't hydrate?
                return legacyRenderSubtreeIntoContainer(
                  null,
                  element,
                  container,
                  true,
                  callback
                );
              },
              render: function(element, container, callback) {
                return legacyRenderSubtreeIntoContainer(
                  null,
                  element,
                  container,
                  false,
                  callback
                );
              },
              unstable_renderSubtreeIntoContainer: function(
                parentComponent,
                element,
                containerNode,
                callback
              ) {
                !(parentComponent != null && has(parentComponent))
                  ? invariant(
                      false,
                      "parentComponent must be a valid React Component"
                    )
                  : void 0;
                return legacyRenderSubtreeIntoContainer(
                  parentComponent,
                  element,
                  containerNode,
                  false,
                  callback
                );
              },
              unmountComponentAtNode: function(container) {
                !isValidContainer(container)
                  ? invariant(
                      false,
                      "unmountComponentAtNode(...): Target container is not a DOM element."
                    )
                  : void 0;

                if (container._reactRootContainer) {
                  {
                    var rootEl = getReactRootElementInContainer(container);
                    var renderedByDifferentReact =
                      rootEl && !getInstanceFromNode$1(rootEl);
                    !!renderedByDifferentReact
                      ? warningWithoutStack$1(
                          false,
                          "unmountComponentAtNode(): The node you're attempting to unmount " +
                            "was rendered by another copy of React."
                        )
                      : void 0;
                  } // Unmount should not be batched.

                  unbatchedUpdates(function() {
                    legacyRenderSubtreeIntoContainer(
                      null,
                      null,
                      container,
                      false,
                      function() {
                        container._reactRootContainer = null;
                      }
                    );
                  }); // If you call unmountComponentAtNode twice in quick succession, you'll
                  // get `true` twice. That's probably fine?

                  return true;
                } else {
                  {
                    var _rootEl = getReactRootElementInContainer(container);

                    var hasNonRootReactChild = !!(
                      _rootEl && getInstanceFromNode$1(_rootEl)
                    ); // Check if the container itself is a React root node.

                    var isContainerReactRoot =
                      container.nodeType === ELEMENT_NODE &&
                      isValidContainer(container.parentNode) &&
                      !!container.parentNode._reactRootContainer;
                    !!hasNonRootReactChild
                      ? warningWithoutStack$1(
                          false,
                          "unmountComponentAtNode(): The node you're attempting to unmount " +
                            "was rendered by React and is not a top-level container. %s",
                          isContainerReactRoot
                            ? "You may have accidentally passed in a React root node instead " +
                                "of its container."
                            : "Instead, have the parent component update its state and " +
                                "rerender in order to remove this component."
                        )
                      : void 0;
                  }
                  return false;
                }
              },
              // Temporary alias since we already shipped React 16 RC with it.
              // TODO: remove in React 17.
              unstable_createPortal: function() {
                if (!didWarnAboutUnstableCreatePortal) {
                  didWarnAboutUnstableCreatePortal = true;
                  lowPriorityWarning$1(
                    false,
                    "The ReactDOM.unstable_createPortal() alias has been deprecated, " +
                      "and will be removed in React 17+. Update your code to use " +
                      "ReactDOM.createPortal() instead. It has the exact same API, " +
                      'but without the "unstable_" prefix.'
                  );
                }

                return createPortal.apply(undefined, arguments);
              },
              unstable_batchedUpdates: batchedUpdates$1,
              unstable_interactiveUpdates: interactiveUpdates$1,
              flushSync: flushSync,
              unstable_flushControlled: flushControlled,
              __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
                // Keep in sync with ReactDOMUnstableNativeDependencies.js
                // and ReactTestUtils.js. This is an array for better minification.
                Events: [
                  getInstanceFromNode$1,
                  getNodeFromInstance$1,
                  getFiberCurrentPropsFromNode$1,
                  injection.injectEventPluginsByName,
                  eventNameDispatchConfigs,
                  accumulateTwoPhaseDispatches,
                  accumulateDirectDispatches,
                  enqueueStateRestore,
                  restoreStateIfNeeded,
                  dispatchEvent,
                  runEventsInBatch
                ]
              }
            };

            function createRoot(container, options) {
              var functionName = enableStableConcurrentModeAPIs
                ? "createRoot"
                : "unstable_createRoot";
              !isValidContainer(container)
                ? invariant(
                    false,
                    "%s(...): Target container is not a DOM element.",
                    functionName
                  )
                : void 0;
              var hydrate = options != null && options.hydrate === true;
              return new ReactRoot(container, true, hydrate);
            }

            if (enableStableConcurrentModeAPIs) {
              ReactDOM.createRoot = createRoot;
            } else {
              ReactDOM.unstable_createRoot = createRoot;
            }

            var foundDevTools = injectIntoDevTools({
              findFiberByHostInstance: getClosestInstanceFromNode,
              bundleType: 1,
              version: ReactVersion,
              rendererPackageName: "react-dom"
            });
            {
              if (!foundDevTools && canUseDOM && window.top === window.self) {
                // If we're in Chrome or Firefox, provide a download link if not installed.
                if (
                  (navigator.userAgent.indexOf("Chrome") > -1 &&
                    navigator.userAgent.indexOf("Edge") === -1) ||
                  navigator.userAgent.indexOf("Firefox") > -1
                ) {
                  var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

                  if (/^(https?|file):$/.test(protocol)) {
                    console.info(
                      "%cDownload the React DevTools " +
                        "for a better development experience: " +
                        "https://fb.me/react-devtools" +
                        (protocol === "file:"
                          ? "\nYou might need to use a local HTTP server (instead of file://): " +
                            "https://fb.me/react-devtools-faq"
                          : ""),
                      "font-weight:bold"
                    );
                  }
                }
              }
            }
            var ReactDOM$2 = Object.freeze({
              default: ReactDOM
            });
            var ReactDOM$3 = (ReactDOM$2 && ReactDOM) || ReactDOM$2; // TODO: decide on the top-level export form.
            // This is hacky but makes it work with both Rollup and Jest.

            var reactDom = ReactDOM$3.default || ReactDOM$3;
            module.exports = reactDom;
          })();
        }
      },
      {
        react: "../node_modules/react/index.js",
        "object-assign": "../node_modules/object-assign/index.js",
        "prop-types/checkPropTypes":
          "../node_modules/prop-types/checkPropTypes.js",
        scheduler: "../node_modules/scheduler/index.js",
        "scheduler/tracing": "../node_modules/scheduler/tracing.js"
      }
    ],
    "../node_modules/react-dom/index.js": [
      function(require, module, exports) {
        "use strict";

        function checkDCE() {
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
          if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ||
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function"
          ) {
            return;
          }

          if ("development" !== "production") {
            // This branch is unreachable because this function is only called
            // in production, but the condition is true only in development.
            // Therefore if the branch is still here, dead code elimination wasn't
            // properly applied.
            // Don't change the message. React DevTools relies on it. Also make sure
            // this message doesn't occur elsewhere in this function, or it will cause
            // a false positive.
            throw new Error("^_^");
          }

          try {
            // Verify that the code above has been dead code eliminated (DCE'd).
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
          } catch (err) {
            // DevTools shouldn't crash React, no matter what.
            // We should still report in case we break this code.
            console.error(err);
          }
        }

        if ("development" === "production") {
          // DCE check should happen before ReactDOM bundle executes so that
          // DevTools can report bad minification during injection.
          checkDCE();
          module.exports = require("./cjs/react-dom.production.min.js");
        } else {
          module.exports = require("./cjs/react-dom.development.js");
        }
      },
      {
        "./cjs/react-dom.development.js":
          "../node_modules/react-dom/cjs/react-dom.development.js"
      }
    ],
    "../node_modules/react-ga/dist/esm/utils/mightBeEmail.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = mightBeEmail;

        // See if s could be an email address. We don't want to send personal data like email.
        // https://support.google.com/analytics/answer/2795983?hl=en
        function mightBeEmail(s) {
          // There's no point trying to validate rfc822 fully, just look for ...@...
          return /[^@]+@[^@]+/.test(s);
        }
      },
      {}
    ],
    "../node_modules/react-ga/dist/esm/utils/trim.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = trim;

        // GA strings need to have leading/trailing whitespace trimmed, and not all
        // browsers have String.prototoype.trim().
        function trim(s) {
          return s.replace(/^\s+|\s+$/g, "");
        }
      },
      {}
    ],
    "../node_modules/react-ga/dist/esm/utils/toTitleCase.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toTitleCase;

        var _trim = _interopRequireDefault(require("./trim"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        /**
         * To Title Case 2.1 - http://individed.com/code/to-title-case/
         * Copyright 2008-2013 David Gouch. Licensed under the MIT License.
         * https://github.com/gouch/to-title-case
         */
        var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;

        function toTitleCase(string) {
          return (0, _trim.default)(string).replace(
            /[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,
            function(match, index, title) {
              if (
                index > 0 &&
                index + match.length !== title.length &&
                match.search(smallWords) > -1 &&
                title.charAt(index - 2) !== ":" &&
                (title.charAt(index + match.length) !== "-" ||
                  title.charAt(index - 1) === "-") &&
                title.charAt(index - 1).search(/[^\s-]/) < 0
              ) {
                return match.toLowerCase();
              }

              if (match.substr(1).search(/[A-Z]|\../) > -1) {
                return match;
              }

              return match.charAt(0).toUpperCase() + match.substr(1);
            }
          );
        }
      },
      { "./trim": "../node_modules/react-ga/dist/esm/utils/trim.js" }
    ],
    "../node_modules/react-ga/dist/esm/utils/console/warn.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = warn;

        function warn(s) {
          console.warn("[react-ga]", s);
        }
      },
      {}
    ],
    "../node_modules/react-ga/dist/esm/utils/format.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = format;

        var _mightBeEmail = _interopRequireDefault(require("./mightBeEmail"));

        var _toTitleCase = _interopRequireDefault(require("./toTitleCase"));

        var _warn = _interopRequireDefault(require("./console/warn"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var redacted = "REDACTED (Potential Email Address)";

        function format(s, titleCase) {
          if ((0, _mightBeEmail.default)(s)) {
            (0, _warn.default)(
              "This arg looks like an email address, redacting."
            );
            return redacted;
          }

          if (titleCase) {
            return (0, _toTitleCase.default)(s);
          }

          return s;
        }
      },
      {
        "./mightBeEmail":
          "../node_modules/react-ga/dist/esm/utils/mightBeEmail.js",
        "./toTitleCase":
          "../node_modules/react-ga/dist/esm/utils/toTitleCase.js",
        "./console/warn":
          "../node_modules/react-ga/dist/esm/utils/console/warn.js"
      }
    ],
    "../node_modules/react-ga/dist/esm/utils/removeLeadingSlash.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = removeLeadingSlash;

        function removeLeadingSlash(string) {
          if (string.substring(0, 1) === "/") {
            return string.substring(1);
          }

          return string;
        }
      },
      {}
    ],
    "../node_modules/react-ga/dist/esm/utils/loadGA.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function _default(options) {
          var gaAddress = "https://www.google-analytics.com/analytics.js";

          if (options && options.gaAddress) {
            gaAddress = options.gaAddress;
          } else if (options && options.debug) {
            gaAddress = "https://www.google-analytics.com/analytics_debug.js";
          } // https://developers.google.com/analytics/devguides/collection/analyticsjs/

          /* eslint-disable */

          (function(i, s, o, g, r, a, m) {
            i["GoogleAnalyticsObject"] = r;
            (i[r] =
              i[r] ||
              function() {
                (i[r].q = i[r].q || []).push(arguments);
              }),
              (i[r].l = 1 * new Date());
            (a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);
            a.async = 1;
            a.src = g;
            m.parentNode.insertBefore(a, m);
          })(window, document, "script", gaAddress, "ga");
          /* eslint-enable */
        }
      },
      {}
    ],
    "../node_modules/react-ga/dist/esm/utils/console/log.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = log;

        function log(s) {
          console.info("[react-ga]", s);
        }
      },
      {}
    ],
    "../node_modules/react-ga/dist/esm/utils/testModeAPI.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.gaCalls = void 0;
        var gaCalls = [];
        exports.gaCalls = gaCalls;
        var _default = {
          calls: gaCalls,
          ga: function ga() {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            gaCalls.push(args.concat());
          }
        };
        exports.default = _default;
      },
      {}
    ],
    "../node_modules/prop-types/factoryWithTypeCheckers.js": [
      function(require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        "use strict";

        var assign = require("object-assign");

        var ReactPropTypesSecret = require("./lib/ReactPropTypesSecret");

        var checkPropTypes = require("./checkPropTypes");

        var printWarning = function() {};

        if ("development" !== "production") {
          printWarning = function(text) {
            var message = "Warning: " + text;

            if (typeof console !== "undefined") {
              console.error(message);
            }

            try {
              // --- Welcome to debugging React ---
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              throw new Error(message);
            } catch (x) {}
          };
        }

        function emptyFunctionThatReturnsNull() {
          return null;
        }

        module.exports = function(isValidElement, throwOnDirectAccess) {
          /* global Symbol */
          var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator"; // Before Symbol spec.

          /**
           * Returns the iterator method function contained on the iterable object.
           *
           * Be sure to invoke the function with the iterable as context:
           *
           *     var iteratorFn = getIteratorFn(myIterable);
           *     if (iteratorFn) {
           *       var iterator = iteratorFn.call(myIterable);
           *       ...
           *     }
           *
           * @param {?object} maybeIterable
           * @return {?function}
           */

          function getIteratorFn(maybeIterable) {
            var iteratorFn =
              maybeIterable &&
              ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
                maybeIterable[FAUX_ITERATOR_SYMBOL]);

            if (typeof iteratorFn === "function") {
              return iteratorFn;
            }
          }
          /**
           * Collection of methods that allow declaration and validation of props that are
           * supplied to React components. Example usage:
           *
           *   var Props = require('ReactPropTypes');
           *   var MyArticle = React.createClass({
           *     propTypes: {
           *       // An optional string prop named "description".
           *       description: Props.string,
           *
           *       // A required enum prop named "category".
           *       category: Props.oneOf(['News','Photos']).isRequired,
           *
           *       // A prop named "dialog" that requires an instance of Dialog.
           *       dialog: Props.instanceOf(Dialog).isRequired
           *     },
           *     render: function() { ... }
           *   });
           *
           * A more formal specification of how these methods are used:
           *
           *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
           *   decl := ReactPropTypes.{type}(.isRequired)?
           *
           * Each and every declaration produces a function with the same signature. This
           * allows the creation of custom validation functions. For example:
           *
           *  var MyLink = React.createClass({
           *    propTypes: {
           *      // An optional string or URI prop named "href".
           *      href: function(props, propName, componentName) {
           *        var propValue = props[propName];
           *        if (propValue != null && typeof propValue !== 'string' &&
           *            !(propValue instanceof URI)) {
           *          return new Error(
           *            'Expected a string or an URI for ' + propName + ' in ' +
           *            componentName
           *          );
           *        }
           *      }
           *    },
           *    render: function() {...}
           *  });
           *
           * @internal
           */

          var ANONYMOUS = "<<anonymous>>"; // Important!
          // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

          var ReactPropTypes = {
            array: createPrimitiveTypeChecker("array"),
            bool: createPrimitiveTypeChecker("boolean"),
            func: createPrimitiveTypeChecker("function"),
            number: createPrimitiveTypeChecker("number"),
            object: createPrimitiveTypeChecker("object"),
            string: createPrimitiveTypeChecker("string"),
            symbol: createPrimitiveTypeChecker("symbol"),
            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker
          };
          /**
           * inlined Object.is polyfill to avoid requiring consumers ship their own
           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
           */

          /*eslint-disable no-self-compare*/

          function is(x, y) {
            // SameValue algorithm
            if (x === y) {
              // Steps 1-5, 7-10
              // Steps 6.b-6.e: +0 != -0
              return x !== 0 || 1 / x === 1 / y;
            } else {
              // Step 6.a: NaN == NaN
              return x !== x && y !== y;
            }
          }
          /*eslint-enable no-self-compare*/

          /**
           * We use an Error-like object for backward compatibility as people may call
           * PropTypes directly and inspect their output. However, we don't use real
           * Errors anymore. We don't inspect their stack anyway, and creating them
           * is prohibitively expensive if they are created too often, such as what
           * happens in oneOfType() for any type before the one that matched.
           */

          function PropTypeError(message) {
            this.message = message;
            this.stack = "";
          } // Make `instanceof Error` still work for returned errors.

          PropTypeError.prototype = Error.prototype;

          function createChainableTypeChecker(validate) {
            if ("development" !== "production") {
              var manualPropTypeCallCache = {};
              var manualPropTypeWarningCount = 0;
            }

            function checkType(
              isRequired,
              props,
              propName,
              componentName,
              location,
              propFullName,
              secret
            ) {
              componentName = componentName || ANONYMOUS;
              propFullName = propFullName || propName;

              if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                  // New behavior only for users of `prop-types` package
                  var err = new Error(
                    "Calling PropTypes validators directly is not supported by the `prop-types` package. " +
                      "Use `PropTypes.checkPropTypes()` to call them. " +
                      "Read more at http://fb.me/use-check-prop-types"
                  );
                  err.name = "Invariant Violation";
                  throw err;
                } else if (
                  "development" !== "production" &&
                  typeof console !== "undefined"
                ) {
                  // Old behavior for people using React.PropTypes
                  var cacheKey = componentName + ":" + propName;

                  if (
                    !manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3
                  ) {
                    printWarning(
                      "You are manually calling a React.PropTypes validation " +
                        "function for the `" +
                        propFullName +
                        "` prop on `" +
                        componentName +
                        "`. This is deprecated " +
                        "and will throw in the standalone `prop-types` package. " +
                        "You may be seeing this warning due to a third-party PropTypes " +
                        "library. See https://fb.me/react-warning-dont-call-proptypes " +
                        "for details."
                    );
                    manualPropTypeCallCache[cacheKey] = true;
                    manualPropTypeWarningCount++;
                  }
                }
              }

              if (props[propName] == null) {
                if (isRequired) {
                  if (props[propName] === null) {
                    return new PropTypeError(
                      "The " +
                        location +
                        " `" +
                        propFullName +
                        "` is marked as required " +
                        ("in `" + componentName + "`, but its value is `null`.")
                    );
                  }

                  return new PropTypeError(
                    "The " +
                      location +
                      " `" +
                      propFullName +
                      "` is marked as required in " +
                      ("`" + componentName + "`, but its value is `undefined`.")
                  );
                }

                return null;
              } else {
                return validate(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName
                );
              }
            }

            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);
            return chainedCheckType;
          }

          function createPrimitiveTypeChecker(expectedType) {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName,
              secret
            ) {
              var propValue = props[propName];
              var propType = getPropType(propValue);

              if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" +
                      preciseType +
                      "` supplied to `" +
                      componentName +
                      "`, expected ") +
                    ("`" + expectedType + "`.")
                );
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull);
          }

          function createArrayOfTypeChecker(typeChecker) {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              if (typeof typeChecker !== "function") {
                return new PropTypeError(
                  "Property `" +
                    propFullName +
                    "` of component `" +
                    componentName +
                    "` has invalid PropType notation inside arrayOf."
                );
              }

              var propValue = props[propName];

              if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" +
                      propType +
                      "` supplied to `" +
                      componentName +
                      "`, expected an array.")
                );
              }

              for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(
                  propValue,
                  i,
                  componentName,
                  location,
                  propFullName + "[" + i + "]",
                  ReactPropTypesSecret
                );

                if (error instanceof Error) {
                  return error;
                }
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function createElementTypeChecker() {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              var propValue = props[propName];

              if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" +
                      propType +
                      "` supplied to `" +
                      componentName +
                      "`, expected a single ReactElement.")
                );
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function createInstanceTypeChecker(expectedClass) {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" +
                      actualClassName +
                      "` supplied to `" +
                      componentName +
                      "`, expected ") +
                    ("instance of `" + expectedClassName + "`.")
                );
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
              "development" !== "production"
                ? printWarning(
                    "Invalid argument supplied to oneOf, expected an instance of array."
                  )
                : void 0;
              return emptyFunctionThatReturnsNull;
            }

            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              var propValue = props[propName];

              for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) {
                  return null;
                }
              }

              var valuesString = JSON.stringify(expectedValues);
              return new PropTypeError(
                "Invalid " +
                  location +
                  " `" +
                  propFullName +
                  "` of value `" +
                  propValue +
                  "` " +
                  ("supplied to `" +
                    componentName +
                    "`, expected one of " +
                    valuesString +
                    ".")
              );
            }

            return createChainableTypeChecker(validate);
          }

          function createObjectOfTypeChecker(typeChecker) {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              if (typeof typeChecker !== "function") {
                return new PropTypeError(
                  "Property `" +
                    propFullName +
                    "` of component `" +
                    componentName +
                    "` has invalid PropType notation inside objectOf."
                );
              }

              var propValue = props[propName];
              var propType = getPropType(propValue);

              if (propType !== "object") {
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" +
                      propType +
                      "` supplied to `" +
                      componentName +
                      "`, expected an object.")
                );
              }

              for (var key in propValue) {
                if (propValue.hasOwnProperty(key)) {
                  var error = typeChecker(
                    propValue,
                    key,
                    componentName,
                    location,
                    propFullName + "." + key,
                    ReactPropTypesSecret
                  );

                  if (error instanceof Error) {
                    return error;
                  }
                }
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
              "development" !== "production"
                ? printWarning(
                    "Invalid argument supplied to oneOfType, expected an instance of array."
                  )
                : void 0;
              return emptyFunctionThatReturnsNull;
            }

            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
              var checker = arrayOfTypeCheckers[i];

              if (typeof checker !== "function") {
                printWarning(
                  "Invalid argument supplied to oneOfType. Expected an array of check functions, but " +
                    "received " +
                    getPostfixForTypeWarning(checker) +
                    " at index " +
                    i +
                    "."
                );
                return emptyFunctionThatReturnsNull;
              }
            }

            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];

                if (
                  checker(
                    props,
                    propName,
                    componentName,
                    location,
                    propFullName,
                    ReactPropTypesSecret
                  ) == null
                ) {
                  return null;
                }
              }

              return new PropTypeError(
                "Invalid " +
                  location +
                  " `" +
                  propFullName +
                  "` supplied to " +
                  ("`" + componentName + "`.")
              );
            }

            return createChainableTypeChecker(validate);
          }

          function createNodeChecker() {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              if (!isNode(props[propName])) {
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` supplied to " +
                    ("`" + componentName + "`, expected a ReactNode.")
                );
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function createShapeTypeChecker(shapeTypes) {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              var propValue = props[propName];
              var propType = getPropType(propValue);

              if (propType !== "object") {
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type `" +
                    propType +
                    "` " +
                    ("supplied to `" + componentName + "`, expected `object`.")
                );
              }

              for (var key in shapeTypes) {
                var checker = shapeTypes[key];

                if (!checker) {
                  continue;
                }

                var error = checker(
                  propValue,
                  key,
                  componentName,
                  location,
                  propFullName + "." + key,
                  ReactPropTypesSecret
                );

                if (error) {
                  return error;
                }
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function createStrictShapeTypeChecker(shapeTypes) {
            function validate(
              props,
              propName,
              componentName,
              location,
              propFullName
            ) {
              var propValue = props[propName];
              var propType = getPropType(propValue);

              if (propType !== "object") {
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type `" +
                    propType +
                    "` " +
                    ("supplied to `" + componentName + "`, expected `object`.")
                );
              } // We need to check all keys in case some are required but missing from
              // props.

              var allKeys = assign({}, props[propName], shapeTypes);

              for (var key in allKeys) {
                var checker = shapeTypes[key];

                if (!checker) {
                  return new PropTypeError(
                    "Invalid " +
                      location +
                      " `" +
                      propFullName +
                      "` key `" +
                      key +
                      "` supplied to `" +
                      componentName +
                      "`." +
                      "\nBad object: " +
                      JSON.stringify(props[propName], null, "  ") +
                      "\nValid keys: " +
                      JSON.stringify(Object.keys(shapeTypes), null, "  ")
                  );
                }

                var error = checker(
                  propValue,
                  key,
                  componentName,
                  location,
                  propFullName + "." + key,
                  ReactPropTypesSecret
                );

                if (error) {
                  return error;
                }
              }

              return null;
            }

            return createChainableTypeChecker(validate);
          }

          function isNode(propValue) {
            switch (typeof propValue) {
              case "number":
              case "string":
              case "undefined":
                return true;

              case "boolean":
                return !propValue;

              case "object":
                if (Array.isArray(propValue)) {
                  return propValue.every(isNode);
                }

                if (propValue === null || isValidElement(propValue)) {
                  return true;
                }

                var iteratorFn = getIteratorFn(propValue);

                if (iteratorFn) {
                  var iterator = iteratorFn.call(propValue);
                  var step;

                  if (iteratorFn !== propValue.entries) {
                    while (!(step = iterator.next()).done) {
                      if (!isNode(step.value)) {
                        return false;
                      }
                    }
                  } else {
                    // Iterator will provide entry [k,v] tuples rather than values.
                    while (!(step = iterator.next()).done) {
                      var entry = step.value;

                      if (entry) {
                        if (!isNode(entry[1])) {
                          return false;
                        }
                      }
                    }
                  }
                } else {
                  return false;
                }

                return true;

              default:
                return false;
            }
          }

          function isSymbol(propType, propValue) {
            // Native Symbol.
            if (propType === "symbol") {
              return true;
            } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

            if (propValue["@@toStringTag"] === "Symbol") {
              return true;
            } // Fallback for non-spec compliant Symbols which are polyfilled.

            if (typeof Symbol === "function" && propValue instanceof Symbol) {
              return true;
            }

            return false;
          } // Equivalent of `typeof` but with special handling for array and regexp.

          function getPropType(propValue) {
            var propType = typeof propValue;

            if (Array.isArray(propValue)) {
              return "array";
            }

            if (propValue instanceof RegExp) {
              // Old webkits (at least until Android 4.0) return 'function' rather than
              // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
              // passes PropTypes.object.
              return "object";
            }

            if (isSymbol(propType, propValue)) {
              return "symbol";
            }

            return propType;
          } // This handles more types than `getPropType`. Only used for error messages.
          // See `createPrimitiveTypeChecker`.

          function getPreciseType(propValue) {
            if (typeof propValue === "undefined" || propValue === null) {
              return "" + propValue;
            }

            var propType = getPropType(propValue);

            if (propType === "object") {
              if (propValue instanceof Date) {
                return "date";
              } else if (propValue instanceof RegExp) {
                return "regexp";
              }
            }

            return propType;
          } // Returns a string that is postfixed to a warning about an invalid type.
          // For example, "undefined" or "of type array"

          function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);

            switch (type) {
              case "array":
              case "object":
                return "an " + type;

              case "boolean":
              case "date":
              case "regexp":
                return "a " + type;

              default:
                return type;
            }
          } // Returns class name of the object, if any.

          function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
              return ANONYMOUS;
            }

            return propValue.constructor.name;
          }

          ReactPropTypes.checkPropTypes = checkPropTypes;
          ReactPropTypes.PropTypes = ReactPropTypes;
          return ReactPropTypes;
        };
      },
      {
        "object-assign": "../node_modules/object-assign/index.js",
        "./lib/ReactPropTypesSecret":
          "../node_modules/prop-types/lib/ReactPropTypesSecret.js",
        "./checkPropTypes": "../node_modules/prop-types/checkPropTypes.js"
      }
    ],
    "../node_modules/prop-types/index.js": [
      function(require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        if ("development" !== "production") {
          var REACT_ELEMENT_TYPE =
            (typeof Symbol === "function" &&
              Symbol.for &&
              Symbol.for("react.element")) ||
            0xeac7;

          var isValidElement = function(object) {
            return (
              typeof object === "object" &&
              object !== null &&
              object.$$typeof === REACT_ELEMENT_TYPE
            );
          }; // By explicitly using `prop-types` you are opting into new development behavior.
          // http://fb.me/prop-types-in-prod

          var throwOnDirectAccess = true;
          module.exports = require("./factoryWithTypeCheckers")(
            isValidElement,
            throwOnDirectAccess
          );
        } else {
          // By explicitly using `prop-types` you are opting into new production behavior.
          // http://fb.me/prop-types-in-prod
          module.exports = require("./factoryWithThrowingShims")();
        }
      },
      {
        "./factoryWithTypeCheckers":
          "../node_modules/prop-types/factoryWithTypeCheckers.js"
      }
    ],
    "../node_modules/react-ga/dist/esm/components/OutboundLink.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireWildcard(require("react"));

        var _propTypes = _interopRequireDefault(require("prop-types"));

        var _warn = _interopRequireDefault(require("../utils/console/warn"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }

            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _objectWithoutProperties(source, excluded) {
          if (source == null) return {};

          var target = _objectWithoutPropertiesLoose(source, excluded);

          var key, i;

          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }

          return target;
        }

        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;

          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }

          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }

          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }

          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };

          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return self;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        var NEWTAB = "_blank";
        var MIDDLECLICK = 1;

        var OutboundLink =
          /*#__PURE__*/
          (function(_Component) {
            _inherits(OutboundLink, _Component);

            function OutboundLink() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, OutboundLink);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(OutboundLink)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args)
                )
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "handleClick",
                function(event) {
                  var _this$props = _this.props,
                    target = _this$props.target,
                    eventLabel = _this$props.eventLabel,
                    to = _this$props.to,
                    onClick = _this$props.onClick;
                  var eventMeta = {
                    label: eventLabel
                  };
                  var sameTarget = target !== NEWTAB;
                  var normalClick = !(
                    event.ctrlKey ||
                    event.shiftKey ||
                    event.metaKey ||
                    event.button === MIDDLECLICK
                  );

                  if (sameTarget && normalClick) {
                    event.preventDefault();
                    OutboundLink.trackLink(eventMeta, function() {
                      window.location.href = to;
                    });
                  } else {
                    OutboundLink.trackLink(eventMeta, function() {});
                  }

                  if (onClick) {
                    onClick(event);
                  }
                }
              );

              return _this;
            }

            _createClass(OutboundLink, [
              {
                key: "render",
                value: function render() {
                  var _this$props2 = this.props,
                    href = _this$props2.to,
                    oldProps = _objectWithoutProperties(_this$props2, ["to"]);

                  var props = _objectSpread({}, oldProps, {
                    href: href,
                    onClick: this.handleClick
                  });

                  if (this.props.target === NEWTAB) {
                    props.rel = "noopener noreferrer";
                  }

                  delete props.eventLabel;
                  return _react.default.createElement("a", props);
                }
              }
            ]);

            return OutboundLink;
          })(_react.Component);

        exports.default = OutboundLink;

        _defineProperty(OutboundLink, "trackLink", function() {
          (0, _warn.default)("ga tracking not enabled");
        });

        _defineProperty(OutboundLink, "propTypes", {
          eventLabel: _propTypes.default.string.isRequired,
          target: _propTypes.default.string,
          to: _propTypes.default.string,
          onClick: _propTypes.default.func
        });

        _defineProperty(OutboundLink, "defaultProps", {
          target: null,
          to: null,
          onClick: null
        });
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "../utils/console/warn":
          "../node_modules/react-ga/dist/esm/utils/console/warn.js"
      }
    ],
    "../node_modules/react-ga/dist/esm/index.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.initialize = initialize;
        exports.ga = ga;
        exports.set = set;
        exports.send = send;
        exports.pageview = pageview;
        exports.modalview = modalview;
        exports.timing = timing;
        exports.event = event;
        exports.exception = exception;
        exports.outboundLink = outboundLink;
        exports.default = exports.testModeAPI = exports.OutboundLink = exports.plugin = void 0;

        var _format2 = _interopRequireDefault(require("./utils/format"));

        var _removeLeadingSlash = _interopRequireDefault(
          require("./utils/removeLeadingSlash")
        );

        var _trim = _interopRequireDefault(require("./utils/trim"));

        var _loadGA = _interopRequireDefault(require("./utils/loadGA"));

        var _warn = _interopRequireDefault(require("./utils/console/warn"));

        var _log = _interopRequireDefault(require("./utils/console/log"));

        var _testModeAPI = _interopRequireDefault(
          require("./utils/testModeAPI")
        );

        var _OutboundLink = _interopRequireDefault(
          require("./components/OutboundLink")
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _objectWithoutProperties(source, excluded) {
          if (source == null) return {};

          var target = _objectWithoutPropertiesLoose(source, excluded);

          var key, i;

          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }

          return target;
        }

        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;

          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }

          return target;
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }

            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _toConsumableArray(arr) {
          return (
            _arrayWithoutHoles(arr) ||
            _iterableToArray(arr) ||
            _nonIterableSpread()
          );
        }

        function _nonIterableSpread() {
          throw new TypeError(
            "Invalid attempt to spread non-iterable instance"
          );
        }

        function _iterableToArray(iter) {
          if (
            Symbol.iterator in Object(iter) ||
            Object.prototype.toString.call(iter) === "[object Arguments]"
          )
            return Array.from(iter);
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        }
        /**
         * React Google Analytics Module
         *
         * @package react-ga
         * @author  Adam Lofting <adam@mozillafoundation.org>
         *          Atul Varma <atul@mozillafoundation.org>
         */

        /**
         * Utilities
         */

        var _debug = false;
        var _titleCase = true;
        var _testMode = false;
        var _alwaysSendToDefaultTracker = true;

        var internalGa = function internalGa() {
          var _window;

          if (_testMode)
            return _testModeAPI.default.ga.apply(
              _testModeAPI.default,
              arguments
            );
          if (typeof window === "undefined") return false;
          if (!window.ga)
            return (0, _warn.default)(
              "ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually"
            );
          return (_window = window).ga.apply(_window, arguments);
        };

        function _format(s) {
          return (0, _format2.default)(s, _titleCase);
        }

        function _gaCommand(trackerNames) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }

          var command = args[0];

          if (typeof internalGa === "function") {
            if (typeof command !== "string") {
              (0, _warn.default)("ga command must be a string");
              return;
            }

            if (_alwaysSendToDefaultTracker || !Array.isArray(trackerNames))
              internalGa.apply(void 0, args);

            if (Array.isArray(trackerNames)) {
              trackerNames.forEach(function(name) {
                internalGa.apply(
                  void 0,
                  _toConsumableArray(
                    ["".concat(name, ".").concat(command)].concat(args.slice(1))
                  )
                );
              });
            }
          }
        }

        function _initialize(gaTrackingID, options) {
          if (!gaTrackingID) {
            (0, _warn.default)("gaTrackingID is required in initialize()");
            return;
          }

          if (options) {
            if (options.debug && options.debug === true) {
              _debug = true;
            }

            if (options.titleCase === false) {
              _titleCase = false;
            }
          }

          if (options && options.gaOptions) {
            internalGa("create", gaTrackingID, options.gaOptions);
          } else {
            internalGa("create", gaTrackingID, "auto");
          }
        }

        function initialize(configsOrTrackingId, options) {
          if (options && options.testMode === true) {
            _testMode = true;
          } else {
            if (typeof window === "undefined") {
              return false;
            }

            (0, _loadGA.default)(options);
          }

          _alwaysSendToDefaultTracker =
            options && typeof options.alwaysSendToDefaultTracker === "boolean"
              ? options.alwaysSendToDefaultTracker
              : true;

          if (Array.isArray(configsOrTrackingId)) {
            configsOrTrackingId.forEach(function(config) {
              if (_typeof(config) !== "object") {
                (0, _warn.default)("All configs must be an object");
                return;
              }

              _initialize(config.trackingId, config);
            });
          } else {
            _initialize(configsOrTrackingId, options);
          }

          return true;
        }
        /**
         * ga:
         * Returns the original GA object.
         */

        function ga() {
          for (
            var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
            _key2 < _len2;
            _key2++
          ) {
            args[_key2] = arguments[_key2];
          }

          if (args.length > 0) {
            internalGa.apply(void 0, args);

            if (_debug) {
              (0, _log.default)("called ga('arguments');");
              (0, _log.default)(
                "with arguments: ".concat(JSON.stringify(args))
              );
            }
          }

          return window.ga;
        }
        /**
         * set:
         * GA tracker set method
         * @param {Object} fieldsObject - a field/value pair or a group of field/value pairs on the tracker
         * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
         */

        function set(fieldsObject, trackerNames) {
          if (!fieldsObject) {
            (0, _warn.default)("`fieldsObject` is required in .set()");
            return;
          }

          if (_typeof(fieldsObject) !== "object") {
            (0, _warn.default)("Expected `fieldsObject` arg to be an Object");
            return;
          }

          if (Object.keys(fieldsObject).length === 0) {
            (0, _warn.default)("empty `fieldsObject` given to .set()");
          }

          _gaCommand(trackerNames, "set", fieldsObject);

          if (_debug) {
            (0, _log.default)("called ga('set', fieldsObject);");
            (0, _log.default)(
              "with fieldsObject: ".concat(JSON.stringify(fieldsObject))
            );
          }
        }
        /**
         * send:
         * Clone of the low level `ga.send` method
         * WARNING: No validations will be applied to this
         * @param  {Object} fieldObject - field object for tracking different analytics
         * @param  {Array} trackerNames - trackers to send the command to
         * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
         */

        function send(fieldObject, trackerNames) {
          _gaCommand(trackerNames, "send", fieldObject);

          if (_debug) {
            (0, _log.default)("called ga('send', fieldObject);");
            (0, _log.default)(
              "with fieldObject: ".concat(JSON.stringify(fieldObject))
            );
            (0, _log.default)(
              "with trackers: ".concat(JSON.stringify(trackerNames))
            );
          }
        }
        /**
         * pageview:
         * Basic GA pageview tracking
         * @param  {String} path - the current page page e.g. '/about'
         * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
         * @param {String} title - (optional) the page title e. g. 'My Website'
         */

        function pageview(rawPath, trackerNames, title) {
          if (!rawPath) {
            (0, _warn.default)("path is required in .pageview()");
            return;
          }

          var path = (0, _trim.default)(rawPath);

          if (path === "") {
            (0, _warn.default)("path cannot be an empty string in .pageview()");
            return;
          }

          var extraFields = {};

          if (title) {
            extraFields.title = title;
          }

          if (typeof ga === "function") {
            _gaCommand(
              trackerNames,
              "send",
              _objectSpread(
                {
                  hitType: "pageview",
                  page: path
                },
                extraFields
              )
            );

            if (_debug) {
              (0, _log.default)("called ga('send', 'pageview', path);");
              var extraLog = "";

              if (title) {
                extraLog = " and title: ".concat(title);
              }

              (0, _log.default)("with path: ".concat(path).concat(extraLog));
            }
          }
        }
        /**
         * modalview:
         * a proxy to basic GA pageview tracking to consistently track
         * modal views that are an equivalent UX to a traditional pageview
         * @param  {String} modalName e.g. 'add-or-edit-club'
         * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
         */

        function modalview(rawModalName, trackerNames) {
          if (!rawModalName) {
            (0, _warn.default)(
              "modalName is required in .modalview(modalName)"
            );
            return;
          }

          var modalName = (0, _removeLeadingSlash.default)(
            (0, _trim.default)(rawModalName)
          );

          if (modalName === "") {
            (0, _warn.default)(
              "modalName cannot be an empty string or a single / in .modalview()"
            );
            return;
          }

          if (typeof ga === "function") {
            var path = "/modal/".concat(modalName);

            _gaCommand(trackerNames, "send", "pageview", path);

            if (_debug) {
              (0, _log.default)("called ga('send', 'pageview', path);");
              (0, _log.default)("with path: ".concat(path));
            }
          }
        }
        /**
         * timing:
         * GA timing
         * @param args.category {String} required
         * @param args.variable {String} required
         * @param args.value  {Int}  required
         * @param args.label  {String} required
         * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
         */

        function timing() {
          var _ref =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {},
            category = _ref.category,
            variable = _ref.variable,
            value = _ref.value,
            label = _ref.label;

          var trackerNames = arguments.length > 1 ? arguments[1] : undefined;

          if (typeof ga === "function") {
            if (!category || !variable || !value || typeof value !== "number") {
              (0, _warn.default)(
                "args.category, args.variable " +
                  "AND args.value are required in timing() " +
                  "AND args.value has to be a number"
              );
              return;
            } // Required Fields

            var fieldObject = {
              hitType: "timing",
              timingCategory: _format(category),
              timingVar: _format(variable),
              timingValue: value
            };

            if (label) {
              fieldObject.timingLabel = _format(label);
            }

            send(fieldObject, trackerNames);
          }
        }
        /**
         * event:
         * GA event tracking
         * @param args.category {String} required
         * @param args.action {String} required
         * @param args.label {String} optional
         * @param args.value {Int} optional
         * @param args.nonInteraction {boolean} optional
         * @param args.transport {string} optional
         * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
         */

        function event() {
          var _ref2 =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {},
            category = _ref2.category,
            action = _ref2.action,
            label = _ref2.label,
            value = _ref2.value,
            nonInteraction = _ref2.nonInteraction,
            transport = _ref2.transport,
            args = _objectWithoutProperties(_ref2, [
              "category",
              "action",
              "label",
              "value",
              "nonInteraction",
              "transport"
            ]);

          var trackerNames = arguments.length > 1 ? arguments[1] : undefined;

          if (typeof ga === "function") {
            // Simple Validation
            if (!category || !action) {
              (0, _warn.default)(
                "args.category AND args.action are required in event()"
              );
              return;
            } // Required Fields

            var fieldObject = {
              hitType: "event",
              eventCategory: _format(category),
              eventAction: _format(action)
            }; // Optional Fields

            if (label) {
              fieldObject.eventLabel = _format(label);
            }

            if (typeof value !== "undefined") {
              if (typeof value !== "number") {
                (0, _warn.default)("Expected `args.value` arg to be a Number.");
              } else {
                fieldObject.eventValue = value;
              }
            }

            if (typeof nonInteraction !== "undefined") {
              if (typeof nonInteraction !== "boolean") {
                (0, _warn.default)("`args.nonInteraction` must be a boolean.");
              } else {
                fieldObject.nonInteraction = nonInteraction;
              }
            }

            if (typeof transport !== "undefined") {
              if (typeof transport !== "string") {
                (0, _warn.default)("`args.transport` must be a string.");
              } else {
                if (["beacon", "xhr", "image"].indexOf(transport) === -1) {
                  (0, _warn.default)(
                    "`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"
                  );
                }

                fieldObject.transport = transport;
              }
            }

            Object.keys(args)
              .filter(function(key) {
                return key.substr(0, "dimension".length) === "dimension";
              })
              .forEach(function(key) {
                fieldObject[key] = args[key];
              });
            Object.keys(args)
              .filter(function(key) {
                return key.substr(0, "metric".length) === "metric";
              })
              .forEach(function(key) {
                fieldObject[key] = args[key];
              }); // Send to GA

            send(fieldObject, trackerNames);
          }
        }
        /**
         * exception:
         * GA exception tracking
         * @param args.description {String} optional
         * @param args.fatal {boolean} optional
         * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
         */

        function exception(_ref3, trackerNames) {
          var description = _ref3.description,
            fatal = _ref3.fatal;

          if (typeof ga === "function") {
            // Required Fields
            var fieldObject = {
              hitType: "exception"
            }; // Optional Fields

            if (description) {
              fieldObject.exDescription = _format(description);
            }

            if (typeof fatal !== "undefined") {
              if (typeof fatal !== "boolean") {
                (0, _warn.default)("`args.fatal` must be a boolean.");
              } else {
                fieldObject.exFatal = fatal;
              }
            } // Send to GA

            send(fieldObject, trackerNames);
          }
        }

        var plugin = {
          /**
           * require:
           * GA requires a plugin
           * @param name {String} e.g. 'ecommerce' or 'myplugin'
           * @param options {Object} optional e.g {path: '/log', debug: true}
           */
          require: function require(rawName, options) {
            if (typeof ga === "function") {
              // Required Fields
              if (!rawName) {
                (0, _warn.default)("`name` is required in .require()");
                return;
              }

              var name = (0, _trim.default)(rawName);

              if (name === "") {
                (0, _warn.default)(
                  "`name` cannot be an empty string in .require()"
                );
                return;
              } // Optional Fields

              if (options) {
                if (_typeof(options) !== "object") {
                  (0, _warn.default)("Expected `options` arg to be an Object");
                  return;
                }

                if (Object.keys(options).length === 0) {
                  (0, _warn.default)("Empty `options` given to .require()");
                }

                ga("require", name, options);

                if (_debug) {
                  (0, _log.default)(
                    "called ga('require', '"
                      .concat(name, "', ")
                      .concat(JSON.stringify(options))
                  );
                }
              } else {
                ga("require", name);

                if (_debug) {
                  (0, _log.default)(
                    "called ga('require', '".concat(name, "');")
                  );
                }
              }
            }
          },

          /**
           * execute:
           * GA execute action for plugin
           * Takes variable number of arguments
           * @param pluginName {String} e.g. 'ecommerce' or 'myplugin'
           * @param action {String} e.g. 'addItem' or 'myCustomAction'
           * @param actionType {String} optional e.g. 'detail'
           * @param payload {Object} optional e.g { id: '1x5e', name : 'My product to track' }
           */
          execute: function execute(pluginName, action) {
            var payload;
            var actionType;

            if ((arguments.length <= 2 ? 0 : arguments.length - 2) === 1) {
              payload = arguments.length <= 2 ? undefined : arguments[2];
            } else {
              actionType = arguments.length <= 2 ? undefined : arguments[2];
              payload = arguments.length <= 3 ? undefined : arguments[3];
            }

            if (typeof ga === "function") {
              if (typeof pluginName !== "string") {
                (0, _warn.default)("Expected `pluginName` arg to be a String.");
              } else if (typeof action !== "string") {
                (0, _warn.default)("Expected `action` arg to be a String.");
              } else {
                var command = "".concat(pluginName, ":").concat(action);
                payload = payload || null;

                if (actionType && payload) {
                  ga(command, actionType, payload);

                  if (_debug) {
                    (0, _log.default)("called ga('".concat(command, "');"));
                    (0, _log.default)(
                      'actionType: "'
                        .concat(actionType, '" with payload: ')
                        .concat(JSON.stringify(payload))
                    );
                  }
                } else if (payload) {
                  ga(command, payload);

                  if (_debug) {
                    (0, _log.default)("called ga('".concat(command, "');"));
                    (0, _log.default)(
                      "with payload: ".concat(JSON.stringify(payload))
                    );
                  }
                } else {
                  ga(command);

                  if (_debug) {
                    (0, _log.default)("called ga('".concat(command, "');"));
                  }
                }
              }
            }
          }
        };
        /**
         * outboundLink:
         * GA outboundLink tracking
         * @param args.label {String} e.g. url, or 'Create an Account'
         * @param {function} hitCallback - Called after processing a hit.
         */

        exports.plugin = plugin;

        function outboundLink(args, hitCallback, trackerNames) {
          if (typeof hitCallback !== "function") {
            (0, _warn.default)("hitCallback function is required");
            return;
          }

          if (typeof ga === "function") {
            // Simple Validation
            if (!args || !args.label) {
              (0, _warn.default)("args.label is required in outboundLink()");
              return;
            } // Required Fields

            var fieldObject = {
              hitType: "event",
              eventCategory: "Outbound",
              eventAction: "Click",
              eventLabel: _format(args.label)
            };
            var safetyCallbackCalled = false;

            var safetyCallback = function safetyCallback() {
              // This prevents a delayed response from GA
              // causing hitCallback from being fired twice
              safetyCallbackCalled = true;
              hitCallback();
            }; // Using a timeout to ensure the execution of critical application code
            // in the case when the GA server might be down
            // or an ad blocker prevents sending the data
            // register safety net timeout:

            var t = setTimeout(safetyCallback, 250);

            var clearableCallbackForGA = function clearableCallbackForGA() {
              clearTimeout(t);

              if (!safetyCallbackCalled) {
                hitCallback();
              }
            };

            fieldObject.hitCallback = clearableCallbackForGA; // Send to GA

            send(fieldObject, trackerNames);
          } else {
            // if ga is not defined, return the callback so the application
            // continues to work as expected
            setTimeout(hitCallback, 0);
          }
        }

        _OutboundLink.default.origTrackLink = _OutboundLink.default.trackLink;
        _OutboundLink.default.trackLink = outboundLink;
        var OutboundLink = _OutboundLink.default;
        exports.OutboundLink = OutboundLink;
        var testModeAPI = _testModeAPI.default;
        exports.testModeAPI = testModeAPI;
        var _default = {
          initialize: initialize,
          ga: ga,
          set: set,
          send: send,
          pageview: pageview,
          modalview: modalview,
          timing: timing,
          event: event,
          exception: exception,
          plugin: plugin,
          outboundLink: outboundLink,
          OutboundLink: OutboundLink,
          testModeAPI: _testModeAPI.default
        };
        exports.default = _default;
      },
      {
        "./utils/format": "../node_modules/react-ga/dist/esm/utils/format.js",
        "./utils/removeLeadingSlash":
          "../node_modules/react-ga/dist/esm/utils/removeLeadingSlash.js",
        "./utils/trim": "../node_modules/react-ga/dist/esm/utils/trim.js",
        "./utils/loadGA": "../node_modules/react-ga/dist/esm/utils/loadGA.js",
        "./utils/console/warn":
          "../node_modules/react-ga/dist/esm/utils/console/warn.js",
        "./utils/console/log":
          "../node_modules/react-ga/dist/esm/utils/console/log.js",
        "./utils/testModeAPI":
          "../node_modules/react-ga/dist/esm/utils/testModeAPI.js",
        "./components/OutboundLink":
          "../node_modules/react-ga/dist/esm/components/OutboundLink.js"
      }
    ],
    "../node_modules/parcel-bundler/src/builtins/bundle-url.js": [
      function(require, module, exports) {
        var bundleURL = null;

        function getBundleURLCached() {
          if (!bundleURL) {
            bundleURL = getBundleURL();
          }

          return bundleURL;
        }

        function getBundleURL() {
          // Attempt to find the URL of the current script and use that as the base URL
          try {
            throw new Error();
          } catch (err) {
            var matches = ("" + err.stack).match(
              /(https?|file|ftp):\/\/[^)\n]+/g
            );

            if (matches) {
              return getBaseURL(matches[0]);
            }
          }

          return "/";
        }

        function getBaseURL(url) {
          return (
            ("" + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, "$1") +
            "/"
          );
        }

        exports.getBundleURL = getBundleURLCached;
        exports.getBaseURL = getBaseURL;
      },
      {}
    ],
    "../node_modules/parcel-bundler/src/builtins/css-loader.js": [
      function(require, module, exports) {
        var bundle = require("./bundle-url");

        function updateLink(link) {
          var newLink = link.cloneNode();

          newLink.onload = function() {
            link.remove();
          };

          newLink.href = link.href.split("?")[0] + "?" + Date.now();
          link.parentNode.insertBefore(newLink, link.nextSibling);
        }

        var cssTimeout = null;

        function reloadCSS() {
          if (cssTimeout) {
            return;
          }

          cssTimeout = setTimeout(function() {
            var links = document.querySelectorAll('link[rel="stylesheet"]');

            for (var i = 0; i < links.length; i++) {
              if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
                updateLink(links[i]);
              }
            }

            cssTimeout = null;
          }, 50);
        }

        module.exports = reloadCSS;
      },
      {
        "./bundle-url":
          "../node_modules/parcel-bundler/src/builtins/bundle-url.js"
      }
    ],
    "scss/style.scss": [
      function(require, module, exports) {
        var reloadCSS = require("_css_loader");

        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      },
      {
        "./../images/background-image.jpg": [
          ["background-image.1f89f820.jpg", "images/background-image.jpg"],
          "images/background-image.jpg"
        ],
        "./../fonts/hinted-CharlevoixPro-Regular.eot": [
          [
            "hinted-CharlevoixPro-Regular.b1be5bc3.eot",
            "fonts/hinted-CharlevoixPro-Regular.eot"
          ],
          "fonts/hinted-CharlevoixPro-Regular.eot"
        ],
        "./../fonts/hinted-CharlevoixPro-Regular.woff2": [
          [
            "hinted-CharlevoixPro-Regular.8acaaacb.woff2",
            "fonts/hinted-CharlevoixPro-Regular.woff2"
          ],
          "fonts/hinted-CharlevoixPro-Regular.woff2"
        ],
        "./../fonts/hinted-CharlevoixPro-Regular.woff": [
          [
            "hinted-CharlevoixPro-Regular.9f076675.woff",
            "fonts/hinted-CharlevoixPro-Regular.woff"
          ],
          "fonts/hinted-CharlevoixPro-Regular.woff"
        ],
        "./../fonts/hinted-CharlevoixPro-Regular.ttf": [
          [
            "hinted-CharlevoixPro-Regular.947dfa60.ttf",
            "fonts/hinted-CharlevoixPro-Regular.ttf"
          ],
          "fonts/hinted-CharlevoixPro-Regular.ttf"
        ],
        "./../fonts/hinted-CharlevoixPro-Regular.svg": [
          [
            "hinted-CharlevoixPro-Regular.81bf486d.svg",
            "fonts/hinted-CharlevoixPro-Regular.svg"
          ],
          "fonts/hinted-CharlevoixPro-Regular.svg"
        ],
        "./../fonts/hinted-CharlevoixPro-ExtraBold.eot": [
          [
            "hinted-CharlevoixPro-ExtraBold.29df20be.eot",
            "fonts/hinted-CharlevoixPro-ExtraBold.eot"
          ],
          "fonts/hinted-CharlevoixPro-ExtraBold.eot"
        ],
        "./../fonts/hinted-CharlevoixPro-ExtraBold.woff2": [
          [
            "hinted-CharlevoixPro-ExtraBold.034e37ad.woff2",
            "fonts/hinted-CharlevoixPro-ExtraBold.woff2"
          ],
          "fonts/hinted-CharlevoixPro-ExtraBold.woff2"
        ],
        "./../fonts/hinted-CharlevoixPro-ExtraBold.woff": [
          [
            "hinted-CharlevoixPro-ExtraBold.2835e5c9.woff",
            "fonts/hinted-CharlevoixPro-ExtraBold.woff"
          ],
          "fonts/hinted-CharlevoixPro-ExtraBold.woff"
        ],
        "./../fonts/hinted-CharlevoixPro-ExtraBold.ttf": [
          [
            "hinted-CharlevoixPro-ExtraBold.30516ffb.ttf",
            "fonts/hinted-CharlevoixPro-ExtraBold.ttf"
          ],
          "fonts/hinted-CharlevoixPro-ExtraBold.ttf"
        ],
        "./../fonts/hinted-CharlevoixPro-ExtraBold.svg": [
          [
            "hinted-CharlevoixPro-ExtraBold.32b4eb35.svg",
            "fonts/hinted-CharlevoixPro-ExtraBold.svg"
          ],
          "fonts/hinted-CharlevoixPro-ExtraBold.svg"
        ],
        "./../fonts/hinted-CharlevoixPro-Bold.eot": [
          [
            "hinted-CharlevoixPro-Bold.93f9e060.eot",
            "fonts/hinted-CharlevoixPro-Bold.eot"
          ],
          "fonts/hinted-CharlevoixPro-Bold.eot"
        ],
        "./../fonts/hinted-CharlevoixPro-Bold.woff2": [
          [
            "hinted-CharlevoixPro-Bold.2090c484.woff2",
            "fonts/hinted-CharlevoixPro-Bold.woff2"
          ],
          "fonts/hinted-CharlevoixPro-Bold.woff2"
        ],
        "./../fonts/hinted-CharlevoixPro-Bold.woff": [
          [
            "hinted-CharlevoixPro-Bold.6fbea5c6.woff",
            "fonts/hinted-CharlevoixPro-Bold.woff"
          ],
          "fonts/hinted-CharlevoixPro-Bold.woff"
        ],
        "./../fonts/hinted-CharlevoixPro-Bold.ttf": [
          [
            "hinted-CharlevoixPro-Bold.c567e011.ttf",
            "fonts/hinted-CharlevoixPro-Bold.ttf"
          ],
          "fonts/hinted-CharlevoixPro-Bold.ttf"
        ],
        "./../fonts/hinted-CharlevoixPro-Bold.svg": [
          [
            "hinted-CharlevoixPro-Bold.61268f54.svg",
            "fonts/hinted-CharlevoixPro-Bold.svg"
          ],
          "fonts/hinted-CharlevoixPro-Bold.svg"
        ],
        "./../fonts/charlevoixpro-thin.eot": [
          ["charlevoixpro-thin.2b936de0.eot", "fonts/charlevoixpro-thin.eot"],
          "fonts/charlevoixpro-thin.eot"
        ],
        "./../fonts/charlevoixpro-thin.woff2": [
          [
            "charlevoixpro-thin.d5a4e731.woff2",
            "fonts/charlevoixpro-thin.woff2"
          ],
          "fonts/charlevoixpro-thin.woff2"
        ],
        "./../fonts/charlevoixpro-thin.woff": [
          ["charlevoixpro-thin.5f2afd0f.woff", "fonts/charlevoixpro-thin.woff"],
          "fonts/charlevoixpro-thin.woff"
        ],
        "./../fonts/charlevoixpro-thin.ttf": [
          ["charlevoixpro-thin.67672e66.ttf", "fonts/charlevoixpro-thin.ttf"],
          "fonts/charlevoixpro-thin.ttf"
        ],
        "./../fonts/charlevoixpro-thin.svg": [
          ["charlevoixpro-thin.ac4a13cd.svg", "fonts/charlevoixpro-thin.svg"],
          "fonts/charlevoixpro-thin.svg"
        ],
        "./../fonts/hinted-CharlevoixPro-Light.eot": [
          [
            "hinted-CharlevoixPro-Light.4aeef010.eot",
            "fonts/hinted-CharlevoixPro-Light.eot"
          ],
          "fonts/hinted-CharlevoixPro-Light.eot"
        ],
        "./../fonts/hinted-CharlevoixPro-Light.woff2": [
          [
            "hinted-CharlevoixPro-Light.12fa4fc6.woff2",
            "fonts/hinted-CharlevoixPro-Light.woff2"
          ],
          "fonts/hinted-CharlevoixPro-Light.woff2"
        ],
        "./../fonts/hinted-CharlevoixPro-Light.woff": [
          [
            "hinted-CharlevoixPro-Light.d7fabe0e.woff",
            "fonts/hinted-CharlevoixPro-Light.woff"
          ],
          "fonts/hinted-CharlevoixPro-Light.woff"
        ],
        "./../fonts/hinted-CharlevoixPro-Light.ttf": [
          [
            "hinted-CharlevoixPro-Light.7a9c0dc3.ttf",
            "fonts/hinted-CharlevoixPro-Light.ttf"
          ],
          "fonts/hinted-CharlevoixPro-Light.ttf"
        ],
        "./../fonts/hinted-CharlevoixPro-Light.svg": [
          [
            "hinted-CharlevoixPro-Light.c8443f5e.svg",
            "fonts/hinted-CharlevoixPro-Light.svg"
          ],
          "fonts/hinted-CharlevoixPro-Light.svg"
        ],
        "./../fonts/hinted-CharlevoixPro-Medium.eot": [
          [
            "hinted-CharlevoixPro-Medium.17e79ff4.eot",
            "fonts/hinted-CharlevoixPro-Medium.eot"
          ],
          "fonts/hinted-CharlevoixPro-Medium.eot"
        ],
        "./../fonts/hinted-CharlevoixPro-Medium.woff2": [
          [
            "hinted-CharlevoixPro-Medium.9f5af792.woff2",
            "fonts/hinted-CharlevoixPro-Medium.woff2"
          ],
          "fonts/hinted-CharlevoixPro-Medium.woff2"
        ],
        "./../fonts/hinted-CharlevoixPro-Medium.woff": [
          [
            "hinted-CharlevoixPro-Medium.c14d21a7.woff",
            "fonts/hinted-CharlevoixPro-Medium.woff"
          ],
          "fonts/hinted-CharlevoixPro-Medium.woff"
        ],
        "./../fonts/hinted-CharlevoixPro-Medium.ttf": [
          [
            "hinted-CharlevoixPro-Medium.f77ac822.ttf",
            "fonts/hinted-CharlevoixPro-Medium.ttf"
          ],
          "fonts/hinted-CharlevoixPro-Medium.ttf"
        ],
        "./../fonts/hinted-CharlevoixPro-Medium.svg": [
          [
            "hinted-CharlevoixPro-Medium.4a0a1fcc.svg",
            "fonts/hinted-CharlevoixPro-Medium.svg"
          ],
          "fonts/hinted-CharlevoixPro-Medium.svg"
        ],
        "./../fonts/SourceSansPro-Regular.ttf": [
          [
            "SourceSansPro-Regular.8fdb045b.ttf",
            "fonts/SourceSansPro-Regular.ttf"
          ],
          "fonts/SourceSansPro-Regular.ttf"
        ],
        "./../fonts/SourceSansPro-Bold.ttf": [
          ["SourceSansPro-Bold.da21c9a3.ttf", "fonts/SourceSansPro-Bold.ttf"],
          "fonts/SourceSansPro-Bold.ttf"
        ],
        "./../fonts/SourceSansPro-SemiBold.ttf": [
          [
            "SourceSansPro-SemiBold.9c5a5f83.ttf",
            "fonts/SourceSansPro-SemiBold.ttf"
          ],
          "fonts/SourceSansPro-SemiBold.ttf"
        ],
        "./../fonts/SourceSansPro-Light.ttf": [
          ["SourceSansPro-Light.d9915181.ttf", "fonts/SourceSansPro-Light.ttf"],
          "fonts/SourceSansPro-Light.ttf"
        ],
        "./../fonts/arabic/ge-flow-regular-webfont.woff2": [
          [
            "ge-flow-regular-webfont.b0fa1d3b.woff2",
            "fonts/arabic/ge-flow-regular-webfont.woff2"
          ],
          "fonts/arabic/ge-flow-regular-webfont.woff2"
        ],
        "./../fonts/arabic/ge-flow-regular-webfont.woff": [
          [
            "ge-flow-regular-webfont.5205f2da.woff",
            "fonts/arabic/ge-flow-regular-webfont.woff"
          ],
          "fonts/arabic/ge-flow-regular-webfont.woff"
        ],
        "./../images/previous.png": [
          ["previous.646f0d53.png", "images/previous.png"],
          "images/previous.png"
        ],
        "./../images/next.png": [
          ["next.22eb4ca8.png", "images/next.png"],
          "images/next.png"
        ],
        "./../images/bundles.jpg": [
          ["bundles.c8b35822.jpg", "images/bundles.jpg"],
          "images/bundles.jpg"
        ],
        "./../images/wash-fold.jpg": [
          ["wash-fold.cb60fc92.jpg", "images/wash-fold.jpg"],
          "images/wash-fold.jpg"
        ],
        "./../images/wash-landscape.jpg": [
          ["wash-landscape.9b9ed4a4.jpg", "images/wash-landscape.jpg"],
          "images/wash-landscape.jpg"
        ],
        "./../images/wash-mobile.jpg": [
          ["wash-mobile.b332ea7f.jpg", "images/wash-mobile.jpg"],
          "images/wash-mobile.jpg"
        ],
        "./../images/general-1.jpg": [
          ["general-1.29a166ac.jpg", "images/general-1.jpg"],
          "images/general-1.jpg"
        ],
        "./../images/general-2.jpg": [
          ["general-2.7cc50ab3.jpg", "images/general-2.jpg"],
          "images/general-2.jpg"
        ],
        "./../images/pricelist.jpg": [
          ["pricelist.f06d1b4e.jpg", "images/pricelist.jpg"],
          "images/pricelist.jpg"
        ],
        "./../images/general-3.jpg": [
          ["general-3.196f5515.jpg", "images/general-3.jpg"],
          "images/general-3.jpg"
        ],
        _css_loader: "../node_modules/parcel-bundler/src/builtins/css-loader.js"
      }
    ],
    "../node_modules/warning/browser.js": [
      function(require, module, exports) {
        /**
         * Copyright 2014-2015, Facebook, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the BSD-style license found in the
         * LICENSE file in the root directory of this source tree. An additional grant
         * of patent rights can be found in the PATENTS file in the same directory.
         */
        "use strict";
        /**
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */

        var warning = function() {};

        if ("development" !== "production") {
          warning = function(condition, format, args) {
            var len = arguments.length;
            args = new Array(len > 2 ? len - 2 : 0);

            for (var key = 2; key < len; key++) {
              args[key - 2] = arguments[key];
            }

            if (format === undefined) {
              throw new Error(
                "`warning(condition, format, ...args)` requires a warning " +
                  "message argument"
              );
            }

            if (format.length < 10 || /^[s\W]*$/.test(format)) {
              throw new Error(
                "The warning format should be able to uniquely identify this " +
                  "warning. Please, use a more descriptive format than: " +
                  format
              );
            }

            if (!condition) {
              var argIndex = 0;
              var message =
                "Warning: " +
                format.replace(/%s/g, function() {
                  return args[argIndex++];
                });

              if (typeof console !== "undefined") {
                console.error(message);
              }

              try {
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
              } catch (x) {}
            }
          };
        }

        module.exports = warning;
      },
      {}
    ],
    "../node_modules/invariant/browser.js": [
      function(require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        "use strict";
        /**
         * Use invariant() to assert state which your program assumes to be true.
         *
         * Provide sprintf-style format (only %s is supported) and arguments
         * to provide information about what broke and what you were
         * expecting.
         *
         * The invariant message will be stripped in production, but the invariant
         * will remain to ensure logic does not differ in production.
         */

        var invariant = function(condition, format, a, b, c, d, e, f) {
          if ("development" !== "production") {
            if (format === undefined) {
              throw new Error("invariant requires an error message argument");
            }
          }

          if (!condition) {
            var error;

            if (format === undefined) {
              error = new Error(
                "Minified exception occurred; use the non-minified dev environment " +
                  "for the full error message and additional helpful warnings."
              );
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(
                format.replace(/%s/g, function() {
                  return args[argIndex++];
                })
              );
              error.name = "Invariant Violation";
            }

            error.framesToPop = 1; // we don't care about invariant's own frame

            throw error;
          }
        };

        module.exports = invariant;
      },
      {}
    ],
    "../node_modules/gud/index.js": [
      function(require, module, exports) {
        var global = arguments[3];
        ("use strict");

        var key = "__global_unique_id__";

        module.exports = function() {
          return (global[key] = (global[key] || 0) + 1);
        };
      },
      {}
    ],
    "../node_modules/fbjs/lib/emptyFunction.js": [
      function(require, module, exports) {
        "use strict";

        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         */

        function makeEmptyFunction(arg) {
          return function() {
            return arg;
          };
        }

        /**
         * This function accepts and discards inputs; it has no side effects. This is
         * primarily useful idiomatically for overridable function endpoints which
         * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
         */
        var emptyFunction = function emptyFunction() {};

        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function() {
          return this;
        };
        emptyFunction.thatReturnsArgument = function(arg) {
          return arg;
        };

        module.exports = emptyFunction;
      },
      {}
    ],
    "../node_modules/fbjs/lib/warning.js": [
      function(require, module, exports) {
        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */
        "use strict";

        var emptyFunction = require("./emptyFunction");
        /**
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */

        var warning = emptyFunction;

        if ("development" !== "production") {
          var printWarning = function printWarning(format) {
            for (
              var _len = arguments.length,
                args = Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key];
            }

            var argIndex = 0;
            var message =
              "Warning: " +
              format.replace(/%s/g, function() {
                return args[argIndex++];
              });

            if (typeof console !== "undefined") {
              console.error(message);
            }

            try {
              // --- Welcome to debugging React ---
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              throw new Error(message);
            } catch (x) {}
          };

          warning = function warning(condition, format) {
            if (format === undefined) {
              throw new Error(
                "`warning(condition, format, ...args)` requires a warning " +
                  "message argument"
              );
            }

            if (format.indexOf("Failed Composite propType: ") === 0) {
              return; // Ignore CompositeComponent proptype check.
            }

            if (!condition) {
              for (
                var _len2 = arguments.length,
                  args = Array(_len2 > 2 ? _len2 - 2 : 0),
                  _key2 = 2;
                _key2 < _len2;
                _key2++
              ) {
                args[_key2 - 2] = arguments[_key2];
              }

              printWarning.apply(undefined, [format].concat(args));
            }
          };
        }

        module.exports = warning;
      },
      { "./emptyFunction": "../node_modules/fbjs/lib/emptyFunction.js" }
    ],
    "../node_modules/create-react-context/lib/implementation.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _react = require("react");

        var _react2 = _interopRequireDefault(_react);

        var _propTypes = require("prop-types");

        var _propTypes2 = _interopRequireDefault(_propTypes);

        var _gud = require("gud");

        var _gud2 = _interopRequireDefault(_gud);

        var _warning = require("fbjs/lib/warning");

        var _warning2 = _interopRequireDefault(_warning);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return call &&
            (typeof call === "object" || typeof call === "function")
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                typeof superClass
            );
          }

          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var MAX_SIGNED_31_BIT_INT = 1073741823; // Inlined Object.is polyfill.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is

        function objectIs(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }

        function createEventEmitter(value) {
          var handlers = [];
          return {
            on: function on(handler) {
              handlers.push(handler);
            },
            off: function off(handler) {
              handlers = handlers.filter(function(h) {
                return h !== handler;
              });
            },
            get: function get() {
              return value;
            },
            set: function set(newValue, changedBits) {
              value = newValue;
              handlers.forEach(function(handler) {
                return handler(value, changedBits);
              });
            }
          };
        }

        function onlyChild(children) {
          return Array.isArray(children) ? children[0] : children;
        }

        function createReactContext(defaultValue, calculateChangedBits) {
          var _Provider$childContex, _Consumer$contextType;

          var contextProp =
            "__create-react-context-" + (0, _gud2.default)() + "__";

          var Provider = (function(_Component) {
            _inherits(Provider, _Component);

            function Provider() {
              var _temp, _this, _ret;

              _classCallCheck(this, Provider);

              for (
                var _len = arguments.length, args = Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              return (
                (_ret = ((_temp = ((_this = _possibleConstructorReturn(
                  this,
                  _Component.call.apply(_Component, [this].concat(args))
                )),
                _this)),
                (_this.emitter = createEventEmitter(_this.props.value)),
                _temp)),
                _possibleConstructorReturn(_this, _ret)
              );
            }

            Provider.prototype.getChildContext = function getChildContext() {
              var _ref;

              return (_ref = {}), (_ref[contextProp] = this.emitter), _ref;
            };

            Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(
              nextProps
            ) {
              if (this.props.value !== nextProps.value) {
                var oldValue = this.props.value;
                var newValue = nextProps.value;
                var changedBits = void 0;

                if (objectIs(oldValue, newValue)) {
                  changedBits = 0; // No change
                } else {
                  changedBits =
                    typeof calculateChangedBits === "function"
                      ? calculateChangedBits(oldValue, newValue)
                      : MAX_SIGNED_31_BIT_INT;

                  if ("development" !== "production") {
                    (0, _warning2.default)(
                      (changedBits & MAX_SIGNED_31_BIT_INT) === changedBits,
                      "calculateChangedBits: Expected the return value to be a " +
                        "31-bit integer. Instead received: %s",
                      changedBits
                    );
                  }

                  changedBits |= 0;

                  if (changedBits !== 0) {
                    this.emitter.set(nextProps.value, changedBits);
                  }
                }
              }
            };

            Provider.prototype.render = function render() {
              return this.props.children;
            };

            return Provider;
          })(_react.Component);

          Provider.childContextTypes = ((_Provider$childContex = {}),
          (_Provider$childContex[contextProp] =
            _propTypes2.default.object.isRequired),
          _Provider$childContex);

          var Consumer = (function(_Component2) {
            _inherits(Consumer, _Component2);

            function Consumer() {
              var _temp2, _this2, _ret2;

              _classCallCheck(this, Consumer);

              for (
                var _len2 = arguments.length, args = Array(_len2), _key2 = 0;
                _key2 < _len2;
                _key2++
              ) {
                args[_key2] = arguments[_key2];
              }

              return (
                (_ret2 = ((_temp2 = ((_this2 = _possibleConstructorReturn(
                  this,
                  _Component2.call.apply(_Component2, [this].concat(args))
                )),
                _this2)),
                (_this2.state = {
                  value: _this2.getValue()
                }),
                (_this2.onUpdate = function(newValue, changedBits) {
                  var observedBits = _this2.observedBits | 0;

                  if ((observedBits & changedBits) !== 0) {
                    _this2.setState({
                      value: _this2.getValue()
                    });
                  }
                }),
                _temp2)),
                _possibleConstructorReturn(_this2, _ret2)
              );
            }

            Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(
              nextProps
            ) {
              var observedBits = nextProps.observedBits;
              this.observedBits =
                observedBits === undefined || observedBits === null
                  ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
                  : observedBits;
            };

            Consumer.prototype.componentDidMount = function componentDidMount() {
              if (this.context[contextProp]) {
                this.context[contextProp].on(this.onUpdate);
              }

              var observedBits = this.props.observedBits;
              this.observedBits =
                observedBits === undefined || observedBits === null
                  ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
                  : observedBits;
            };

            Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
              if (this.context[contextProp]) {
                this.context[contextProp].off(this.onUpdate);
              }
            };

            Consumer.prototype.getValue = function getValue() {
              if (this.context[contextProp]) {
                return this.context[contextProp].get();
              } else {
                return defaultValue;
              }
            };

            Consumer.prototype.render = function render() {
              return onlyChild(this.props.children)(this.state.value);
            };

            return Consumer;
          })(_react.Component);

          Consumer.contextTypes = ((_Consumer$contextType = {}),
          (_Consumer$contextType[contextProp] = _propTypes2.default.object),
          _Consumer$contextType);
          return {
            Provider: Provider,
            Consumer: Consumer
          };
        }

        exports.default = createReactContext;
        module.exports = exports["default"];
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        gud: "../node_modules/gud/index.js",
        "fbjs/lib/warning": "../node_modules/fbjs/lib/warning.js"
      }
    ],
    "../node_modules/create-react-context/lib/index.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _react = require("react");

        var _react2 = _interopRequireDefault(_react);

        var _implementation = require("./implementation");

        var _implementation2 = _interopRequireDefault(_implementation);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default =
          _react2.default.createContext || _implementation2.default;
        module.exports = exports["default"];
      },
      {
        react: "../node_modules/react/index.js",
        "./implementation":
          "../node_modules/create-react-context/lib/implementation.js"
      }
    ],
    "../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.polyfill = polyfill;

        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        function componentWillMount() {
          // Call this.constructor.gDSFP to support sub-classes.
          var state = this.constructor.getDerivedStateFromProps(
            this.props,
            this.state
          );

          if (state !== null && state !== undefined) {
            this.setState(state);
          }
        }

        function componentWillReceiveProps(nextProps) {
          // Call this.constructor.gDSFP to support sub-classes.
          // Use the setState() updater to ensure state isn't stale in certain edge cases.
          function updater(prevState) {
            var state = this.constructor.getDerivedStateFromProps(
              nextProps,
              prevState
            );
            return state !== null && state !== undefined ? state : null;
          } // Binding "this" is important for shallow renderer support.

          this.setState(updater.bind(this));
        }

        function componentWillUpdate(nextProps, nextState) {
          try {
            var prevProps = this.props;
            var prevState = this.state;
            this.props = nextProps;
            this.state = nextState;
            this.__reactInternalSnapshotFlag = true;
            this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
              prevProps,
              prevState
            );
          } finally {
            this.props = prevProps;
            this.state = prevState;
          }
        } // React may warn about cWM/cWRP/cWU methods being deprecated.
        // Add a flag to suppress these warnings for this special case.

        componentWillMount.__suppressDeprecationWarning = true;
        componentWillReceiveProps.__suppressDeprecationWarning = true;
        componentWillUpdate.__suppressDeprecationWarning = true;

        function polyfill(Component) {
          var prototype = Component.prototype;

          if (!prototype || !prototype.isReactComponent) {
            throw new Error("Can only polyfill class components");
          }

          if (
            typeof Component.getDerivedStateFromProps !== "function" &&
            typeof prototype.getSnapshotBeforeUpdate !== "function"
          ) {
            return Component;
          } // If new component APIs are defined, "unsafe" lifecycles won't be called.
          // Error if any of these lifecycles are present,
          // Because they would work differently between older and newer (16.3+) versions of React.

          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;

          if (typeof prototype.componentWillMount === "function") {
            foundWillMountName = "componentWillMount";
          } else if (
            typeof prototype.UNSAFE_componentWillMount === "function"
          ) {
            foundWillMountName = "UNSAFE_componentWillMount";
          }

          if (typeof prototype.componentWillReceiveProps === "function") {
            foundWillReceivePropsName = "componentWillReceiveProps";
          } else if (
            typeof prototype.UNSAFE_componentWillReceiveProps === "function"
          ) {
            foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
          }

          if (typeof prototype.componentWillUpdate === "function") {
            foundWillUpdateName = "componentWillUpdate";
          } else if (
            typeof prototype.UNSAFE_componentWillUpdate === "function"
          ) {
            foundWillUpdateName = "UNSAFE_componentWillUpdate";
          }

          if (
            foundWillMountName !== null ||
            foundWillReceivePropsName !== null ||
            foundWillUpdateName !== null
          ) {
            var componentName = Component.displayName || Component.name;
            var newApiName =
              typeof Component.getDerivedStateFromProps === "function"
                ? "getDerivedStateFromProps()"
                : "getSnapshotBeforeUpdate()";
            throw Error(
              "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" +
                componentName +
                " uses " +
                newApiName +
                " but also contains the following legacy lifecycles:" +
                (foundWillMountName !== null
                  ? "\n  " + foundWillMountName
                  : "") +
                (foundWillReceivePropsName !== null
                  ? "\n  " + foundWillReceivePropsName
                  : "") +
                (foundWillUpdateName !== null
                  ? "\n  " + foundWillUpdateName
                  : "") +
                "\n\nThe above lifecycles should be removed. Learn more about this warning here:\n" +
                "https://fb.me/react-async-component-lifecycle-hooks"
            );
          } // React <= 16.2 does not support static getDerivedStateFromProps.
          // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
          // Newer versions of React will ignore these lifecycles if gDSFP exists.

          if (typeof Component.getDerivedStateFromProps === "function") {
            prototype.componentWillMount = componentWillMount;
            prototype.componentWillReceiveProps = componentWillReceiveProps;
          } // React <= 16.2 does not support getSnapshotBeforeUpdate.
          // As a workaround, use cWU to invoke the new lifecycle.
          // Newer versions of React will ignore that lifecycle if gSBU exists.

          if (typeof prototype.getSnapshotBeforeUpdate === "function") {
            if (typeof prototype.componentDidUpdate !== "function") {
              throw new Error(
                "Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype"
              );
            }

            prototype.componentWillUpdate = componentWillUpdate;
            var componentDidUpdate = prototype.componentDidUpdate;

            prototype.componentDidUpdate = function componentDidUpdatePolyfill(
              prevProps,
              prevState,
              maybeSnapshot
            ) {
              // 16.3+ will not execute our will-update method;
              // It will pass a snapshot value to did-update though.
              // Older versions will require our polyfilled will-update value.
              // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
              // Because for <= 15.x versions this might be a "prevContext" object.
              // We also can't just check "__reactInternalSnapshot",
              // Because get-snapshot might return a falsy value.
              // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
              var snapshot = this.__reactInternalSnapshotFlag
                ? this.__reactInternalSnapshot
                : maybeSnapshot;
              componentDidUpdate.call(this, prevProps, prevState, snapshot);
            };
          }

          return Component;
        }
      },
      {}
    ],
    "../node_modules/@reach/router/es/lib/utils.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.validateRedirect = exports.insertParams = exports.resolve = exports.match = exports.pick = exports.startsWith = void 0;

        var _invariant = _interopRequireDefault(require("invariant"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        ////////////////////////////////////////////////////////////////////////////////
        // startsWith(string, search) - Check if `string` starts with `search`
        var startsWith = function startsWith(string, search) {
          return string.substr(0, search.length) === search;
        }; ////////////////////////////////////////////////////////////////////////////////
        // pick(routes, uri)
        //
        // Ranks and picks the best route to match. Each segment gets the highest
        // amount of points, then the type of segment gets an additional amount of
        // points where
        //
        //     static > dynamic > splat > root
        //
        // This way we don't have to worry about the order of our routes, let the
        // computers do it.
        //
        // A route looks like this
        //
        //     { path, default, value }
        //
        // And a returned match looks like:
        //
        //     { route, params, uri }
        //
        // I know, I should use TypeScript not comments for these types.

        exports.startsWith = startsWith;

        var pick = function pick(routes, uri) {
          var match = void 0;
          var default_ = void 0;

          var _uri$split = uri.split("?"),
            uriPathname = _uri$split[0];

          var uriSegments = segmentize(uriPathname);
          var isRootUri = uriSegments[0] === "";
          var ranked = rankRoutes(routes);

          for (var i = 0, l = ranked.length; i < l; i++) {
            var missed = false;
            var route = ranked[i].route;

            if (route.default) {
              default_ = {
                route: route,
                params: {},
                uri: uri
              };
              continue;
            }

            var routeSegments = segmentize(route.path);
            var params = {};
            var max = Math.max(uriSegments.length, routeSegments.length);
            var index = 0;

            for (; index < max; index++) {
              var routeSegment = routeSegments[index];
              var uriSegment = uriSegments[index];

              var _isSplat = routeSegment === "*";

              if (_isSplat) {
                // Hit a splat, just grab the rest, and return a match
                // uri:   /files/documents/work
                // route: /files/*
                params["*"] = uriSegments
                  .slice(index)
                  .map(decodeURIComponent)
                  .join("/");
                break;
              }

              if (uriSegment === undefined) {
                // URI is shorter than the route, no match
                // uri:   /users
                // route: /users/:userId
                missed = true;
                break;
              }

              var dynamicMatch = paramRe.exec(routeSegment);

              if (dynamicMatch && !isRootUri) {
                var matchIsNotReserved =
                  reservedNames.indexOf(dynamicMatch[1]) === -1;
                !matchIsNotReserved
                  ? "development" !== "production"
                    ? (0, _invariant.default)(
                        false,
                        '<Router> dynamic segment "' +
                          dynamicMatch[1] +
                          '" is a reserved name. Please use a different name in path "' +
                          route.path +
                          '".'
                      )
                    : (0, _invariant.default)(false)
                  : void 0;
                var value = decodeURIComponent(uriSegment);
                params[dynamicMatch[1]] = value;
              } else if (routeSegment !== uriSegment) {
                // Current segments don't match, not dynamic, not splat, so no match
                // uri:   /users/123/settings
                // route: /users/:id/profile
                missed = true;
                break;
              }
            }

            if (!missed) {
              match = {
                route: route,
                params: params,
                uri: "/" + uriSegments.slice(0, index).join("/")
              };
              break;
            }
          }

          return match || default_ || null;
        }; ////////////////////////////////////////////////////////////////////////////////
        // match(path, uri) - Matches just one path to a uri, also lol

        exports.pick = pick;

        var match = function match(path, uri) {
          return pick(
            [
              {
                path: path
              }
            ],
            uri
          );
        }; ////////////////////////////////////////////////////////////////////////////////
        // resolve(to, basepath)
        //
        // Resolves URIs as though every path is a directory, no files.  Relative URIs
        // in the browser can feel awkward because not only can you be "in a directory"
        // you can be "at a file", too. For example
        //
        //     browserSpecResolve('foo', '/bar/') => /bar/foo
        //     browserSpecResolve('foo', '/bar') => /foo
        //
        // But on the command line of a file system, it's not as complicated, you can't
        // `cd` from a file, only directories.  This way, links have to know less about
        // their current path. To go deeper you can do this:
        //
        //     <Link to="deeper"/>
        //     // instead of
        //     <Link to=`{${props.uri}/deeper}`/>
        //
        // Just like `cd`, if you want to go deeper from the command line, you do this:
        //
        //     cd deeper
        //     # not
        //     cd $(pwd)/deeper
        //
        // By treating every path as a directory, linking to relative paths should
        // require less contextual information and (fingers crossed) be more intuitive.

        exports.match = match;

        var resolve = function resolve(to, base) {
          // /foo/bar, /baz/qux => /foo/bar
          if (startsWith(to, "/")) {
            return to;
          }

          var _to$split = to.split("?"),
            toPathname = _to$split[0],
            toQuery = _to$split[1];

          var _base$split = base.split("?"),
            basePathname = _base$split[0];

          var toSegments = segmentize(toPathname);
          var baseSegments = segmentize(basePathname); // ?a=b, /users?b=c => /users?a=b

          if (toSegments[0] === "") {
            return addQuery(basePathname, toQuery);
          } // profile, /users/789 => /users/789/profile

          if (!startsWith(toSegments[0], ".")) {
            var pathname = baseSegments.concat(toSegments).join("/");
            return addQuery(
              (basePathname === "/" ? "" : "/") + pathname,
              toQuery
            );
          } // ./         /users/123  =>  /users/123
          // ../        /users/123  =>  /users
          // ../..      /users/123  =>  /
          // ../../one  /a/b/c/d    =>  /a/b/one
          // .././one   /a/b/c/d    =>  /a/b/c/one

          var allSegments = baseSegments.concat(toSegments);
          var segments = [];

          for (var i = 0, l = allSegments.length; i < l; i++) {
            var segment = allSegments[i];
            if (segment === "..") segments.pop();
            else if (segment !== ".") segments.push(segment);
          }

          return addQuery("/" + segments.join("/"), toQuery);
        }; ////////////////////////////////////////////////////////////////////////////////
        // insertParams(path, params)

        exports.resolve = resolve;

        var insertParams = function insertParams(path, params) {
          var segments = segmentize(path);
          return (
            "/" +
            segments
              .map(function(segment) {
                var match = paramRe.exec(segment);
                return match ? params[match[1]] : segment;
              })
              .join("/")
          );
        };

        exports.insertParams = insertParams;

        var validateRedirect = function validateRedirect(from, to) {
          var filter = function filter(segment) {
            return isDynamic(segment);
          };

          var fromString = segmentize(from)
            .filter(filter)
            .sort()
            .join("/");
          var toString = segmentize(to)
            .filter(filter)
            .sort()
            .join("/");
          return fromString === toString;
        }; ////////////////////////////////////////////////////////////////////////////////
        // Junk

        exports.validateRedirect = validateRedirect;
        var paramRe = /^:(.+)/;
        var SEGMENT_POINTS = 4;
        var STATIC_POINTS = 3;
        var DYNAMIC_POINTS = 2;
        var SPLAT_PENALTY = 1;
        var ROOT_POINTS = 1;

        var isRootSegment = function isRootSegment(segment) {
          return segment === "";
        };

        var isDynamic = function isDynamic(segment) {
          return paramRe.test(segment);
        };

        var isSplat = function isSplat(segment) {
          return segment === "*";
        };

        var rankRoute = function rankRoute(route, index) {
          var score = route.default
            ? 0
            : segmentize(route.path).reduce(function(score, segment) {
                score += SEGMENT_POINTS;
                if (isRootSegment(segment)) score += ROOT_POINTS;
                else if (isDynamic(segment)) score += DYNAMIC_POINTS;
                else if (isSplat(segment))
                  score -= SEGMENT_POINTS + SPLAT_PENALTY;
                else score += STATIC_POINTS;
                return score;
              }, 0);
          return {
            route: route,
            score: score,
            index: index
          };
        };

        var rankRoutes = function rankRoutes(routes) {
          return routes.map(rankRoute).sort(function(a, b) {
            return a.score < b.score
              ? 1
              : a.score > b.score
              ? -1
              : a.index - b.index;
          });
        };

        var segmentize = function segmentize(uri) {
          return uri // strip starting/ending slashes
            .replace(/(^\/+|\/+$)/g, "")
            .split("/");
        };

        var addQuery = function addQuery(pathname, query) {
          return pathname + (query ? "?" + query : "");
        };

        var reservedNames = ["uri", "path"]; ////////////////////////////////////////////////////////////////////////////////
      },
      { invariant: "../node_modules/invariant/browser.js" }
    ],
    "../node_modules/@reach/router/es/lib/history.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createMemorySource = exports.createHistory = exports.navigate = exports.globalHistory = void 0;

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        var getLocation = function getLocation(source) {
          return _extends({}, source.location, {
            state: source.history.state,
            key: (source.history.state && source.history.state.key) || "initial"
          });
        };

        var createHistory = function createHistory(source, options) {
          var listeners = [];
          var location = getLocation(source);
          var transitioning = false;

          var resolveTransition = function resolveTransition() {};

          return {
            get location() {
              return location;
            },

            get transitioning() {
              return transitioning;
            },

            _onTransitionComplete: function _onTransitionComplete() {
              transitioning = false;
              resolveTransition();
            },
            listen: function listen(listener) {
              listeners.push(listener);

              var popstateListener = function popstateListener() {
                location = getLocation(source);
                listener({
                  location: location,
                  action: "POP"
                });
              };

              source.addEventListener("popstate", popstateListener);
              return function() {
                source.removeEventListener("popstate", popstateListener);
                listeners = listeners.filter(function(fn) {
                  return fn !== listener;
                });
              };
            },
            navigate: function navigate(to) {
              var _ref =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : {},
                state = _ref.state,
                _ref$replace = _ref.replace,
                replace = _ref$replace === undefined ? false : _ref$replace;

              state = _extends({}, state, {
                key: Date.now() + ""
              }); // try...catch iOS Safari limits to 100 pushState calls

              try {
                if (transitioning || replace) {
                  source.history.replaceState(state, null, to);
                } else {
                  source.history.pushState(state, null, to);
                }
              } catch (e) {
                source.location[replace ? "replace" : "assign"](to);
              }

              location = getLocation(source);
              transitioning = true;
              var transition = new Promise(function(res) {
                return (resolveTransition = res);
              });
              listeners.forEach(function(listener) {
                return listener({
                  location: location,
                  action: "PUSH"
                });
              });
              return transition;
            }
          };
        }; ////////////////////////////////////////////////////////////////////////////////
        // Stores history entries in memory for testing or other platforms like Native

        exports.createHistory = createHistory;

        var createMemorySource = function createMemorySource() {
          var initialPathname =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : "/";
          var index = 0;
          var stack = [
            {
              pathname: initialPathname,
              search: ""
            }
          ];
          var states = [];
          return {
            get location() {
              return stack[index];
            },

            addEventListener: function addEventListener(name, fn) {},
            removeEventListener: function removeEventListener(name, fn) {},
            history: {
              get entries() {
                return stack;
              },

              get index() {
                return index;
              },

              get state() {
                return states[index];
              },

              pushState: function pushState(state, _, uri) {
                var _uri$split = uri.split("?"),
                  pathname = _uri$split[0],
                  _uri$split$ = _uri$split[1],
                  search = _uri$split$ === undefined ? "" : _uri$split$;

                index++;
                stack.push({
                  pathname: pathname,
                  search: search
                });
                states.push(state);
              },
              replaceState: function replaceState(state, _, uri) {
                var _uri$split2 = uri.split("?"),
                  pathname = _uri$split2[0],
                  _uri$split2$ = _uri$split2[1],
                  search = _uri$split2$ === undefined ? "" : _uri$split2$;

                stack[index] = {
                  pathname: pathname,
                  search: search
                };
                states[index] = state;
              }
            }
          };
        }; ////////////////////////////////////////////////////////////////////////////////
        // global history - uses window.history as the source if available, otherwise a
        // memory history

        exports.createMemorySource = createMemorySource;
        var canUseDOM = !!(
          typeof window !== "undefined" &&
          window.document &&
          window.document.createElement
        );

        var getSource = function getSource() {
          return canUseDOM ? window : createMemorySource();
        };

        var globalHistory = createHistory(getSource());
        exports.globalHistory = globalHistory;
        var navigate = globalHistory.navigate; ////////////////////////////////////////////////////////////////////////////////

        exports.navigate = navigate;
      },
      {}
    ],
    "../node_modules/@reach/router/es/index.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "globalHistory", {
          enumerable: true,
          get: function() {
            return _history.globalHistory;
          }
        });
        Object.defineProperty(exports, "navigate", {
          enumerable: true,
          get: function() {
            return _history.navigate;
          }
        });
        Object.defineProperty(exports, "createHistory", {
          enumerable: true,
          get: function() {
            return _history.createHistory;
          }
        });
        Object.defineProperty(exports, "createMemorySource", {
          enumerable: true,
          get: function() {
            return _history.createMemorySource;
          }
        });
        exports.redirectTo = exports.isRedirect = exports.ServerLocation = exports.Router = exports.Redirect = exports.Match = exports.LocationProvider = exports.Location = exports.Link = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _warning = _interopRequireDefault(require("warning"));

        var _propTypes = _interopRequireDefault(require("prop-types"));

        var _invariant = _interopRequireDefault(require("invariant"));

        var _createReactContext = _interopRequireDefault(
          require("create-react-context")
        );

        var _reactLifecyclesCompat = require("react-lifecycles-compat");

        var _utils = require("./lib/utils");

        var _history = require("./lib/history");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        function _objectWithoutProperties(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return call &&
            (typeof call === "object" || typeof call === "function")
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                typeof superClass
            );
          }

          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }
        /* eslint-disable jsx-a11y/anchor-has-content */

        ////////////////////////////////////////////////////////////////////////////////
        var createNamedContext = function createNamedContext(
          name,
          defaultValue
        ) {
          var Ctx = (0, _createReactContext.default)(defaultValue);
          Ctx.Consumer.displayName = name + ".Consumer";
          Ctx.Provider.displayName = name + ".Provider";
          return Ctx;
        }; ////////////////////////////////////////////////////////////////////////////////
        // Location Context/Provider

        var LocationContext = createNamedContext("Location"); // sets up a listener if there isn't one already so apps don't need to be
        // wrapped in some top level provider

        var Location = function Location(_ref) {
          var children = _ref.children;
          return _react.default.createElement(
            LocationContext.Consumer,
            null,
            function(context) {
              return context
                ? children(context)
                : _react.default.createElement(
                    LocationProvider,
                    null,
                    children
                  );
            }
          );
        };

        exports.Location = Location;

        var LocationProvider = (function(_React$Component) {
          _inherits(LocationProvider, _React$Component);

          function LocationProvider() {
            var _temp, _this, _ret;

            _classCallCheck(this, LocationProvider);

            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            return (
              (_ret = ((_temp = ((_this = _possibleConstructorReturn(
                this,
                _React$Component.call.apply(
                  _React$Component,
                  [this].concat(args)
                )
              )),
              _this)),
              (_this.state = {
                context: _this.getContext(),
                refs: {
                  unlisten: null
                }
              }),
              _temp)),
              _possibleConstructorReturn(_this, _ret)
            );
          }

          LocationProvider.prototype.getContext = function getContext() {
            var _props$history = this.props.history,
              navigate = _props$history.navigate,
              location = _props$history.location;
            return {
              navigate: navigate,
              location: location
            };
          };

          LocationProvider.prototype.componentDidCatch = function componentDidCatch(
            error,
            info
          ) {
            if (isRedirect(error)) {
              var _navigate = this.props.history.navigate;

              _navigate(error.uri, {
                replace: true
              });
            } else {
              throw error;
            }
          };

          LocationProvider.prototype.componentDidUpdate = function componentDidUpdate(
            prevProps,
            prevState
          ) {
            if (prevState.context.location !== this.state.context.location) {
              this.props.history._onTransitionComplete();
            }
          };

          LocationProvider.prototype.componentDidMount = function componentDidMount() {
            var _this2 = this;

            var refs = this.state.refs,
              history = this.props.history;
            refs.unlisten = history.listen(function() {
              Promise.resolve().then(function() {
                // TODO: replace rAF with react deferred update API when it's ready https://github.com/facebook/react/issues/13306
                requestAnimationFrame(function() {
                  if (!_this2.unmounted) {
                    _this2.setState(function() {
                      return {
                        context: _this2.getContext()
                      };
                    });
                  }
                });
              });
            });
          };

          LocationProvider.prototype.componentWillUnmount = function componentWillUnmount() {
            var refs = this.state.refs;
            this.unmounted = true;
            refs.unlisten();
          };

          LocationProvider.prototype.render = function render() {
            var context = this.state.context,
              children = this.props.children;
            return _react.default.createElement(
              LocationContext.Provider,
              {
                value: context
              },
              typeof children === "function"
                ? children(context)
                : children || null
            );
          };

          return LocationProvider;
        })(_react.default.Component); ////////////////////////////////////////////////////////////////////////////////

        exports.LocationProvider = LocationProvider;
        LocationProvider.defaultProps = {
          history: _history.globalHistory
        };
        "development" !== "production"
          ? (LocationProvider.propTypes = {
              history: _propTypes.default.object.isRequired
            })
          : void 0;

        var ServerLocation = function ServerLocation(_ref2) {
          var url = _ref2.url,
            children = _ref2.children;
          return _react.default.createElement(
            LocationContext.Provider,
            {
              value: {
                location: {
                  pathname: url,
                  search: "",
                  hash: ""
                },
                navigate: function navigate() {
                  throw new Error("You can't call navigate on the server.");
                }
              }
            },
            children
          );
        }; ////////////////////////////////////////////////////////////////////////////////
        // Sets baseuri and basepath for nested routers and links

        exports.ServerLocation = ServerLocation;
        var BaseContext = createNamedContext("Base", {
          baseuri: "/",
          basepath: "/"
        }); ////////////////////////////////////////////////////////////////////////////////
        // The main event, welcome to the show everybody.

        var Router = function Router(props) {
          return _react.default.createElement(
            BaseContext.Consumer,
            null,
            function(baseContext) {
              return _react.default.createElement(Location, null, function(
                locationContext
              ) {
                return _react.default.createElement(
                  RouterImpl,
                  _extends({}, baseContext, locationContext, props)
                );
              });
            }
          );
        };

        exports.Router = Router;

        var RouterImpl = (function(_React$PureComponent) {
          _inherits(RouterImpl, _React$PureComponent);

          function RouterImpl() {
            _classCallCheck(this, RouterImpl);

            return _possibleConstructorReturn(
              this,
              _React$PureComponent.apply(this, arguments)
            );
          }

          RouterImpl.prototype.render = function render() {
            var _props = this.props,
              location = _props.location,
              _navigate2 = _props.navigate,
              basepath = _props.basepath,
              primary = _props.primary,
              children = _props.children,
              baseuri = _props.baseuri,
              _props$component = _props.component,
              component =
                _props$component === undefined ? "div" : _props$component,
              domProps = _objectWithoutProperties(_props, [
                "location",
                "navigate",
                "basepath",
                "primary",
                "children",
                "baseuri",
                "component"
              ]);

            var routes = _react.default.Children.map(
              children,
              createRoute(basepath)
            );

            var pathname = location.pathname;
            var match = (0, _utils.pick)(routes, pathname);

            if (match) {
              var params = match.params,
                uri = match.uri,
                route = match.route,
                element = match.route.value; // remove the /* from the end for child routes relative paths

              basepath = route.default
                ? basepath
                : route.path.replace(/\*$/, "");

              var props = _extends({}, params, {
                uri: uri,
                location: location,
                navigate: function navigate(to, options) {
                  return _navigate2((0, _utils.resolve)(to, uri), options);
                }
              });

              var clone = _react.default.cloneElement(
                element,
                props,
                element.props.children
                  ? _react.default.createElement(
                      Router,
                      {
                        primary: primary
                      },
                      element.props.children
                    )
                  : undefined
              ); // using 'div' for < 16.3 support

              var FocusWrapper = primary ? FocusHandler : component; // don't pass any props to 'div'

              var wrapperProps = primary
                ? _extends(
                    {
                      uri: uri,
                      location: location,
                      component: component
                    },
                    domProps
                  )
                : domProps;
              return _react.default.createElement(
                BaseContext.Provider,
                {
                  value: {
                    baseuri: uri,
                    basepath: basepath
                  }
                },
                _react.default.createElement(FocusWrapper, wrapperProps, clone)
              );
            } else {
              // Not sure if we want this, would require index routes at every level
              // warning(
              //   false,
              //   `<Router basepath="${basepath}">\n\nNothing matched:\n\t${
              //     location.pathname
              //   }\n\nPaths checked: \n\t${routes
              //     .map(route => route.path)
              //     .join(
              //       "\n\t"
              //     )}\n\nTo get rid of this warning, add a default NotFound component as child of Router:
              //   \n\tlet NotFound = () => <div>Not Found!</div>
              //   \n\t<Router>\n\t  <NotFound default/>\n\t  {/* ... */}\n\t</Router>`
              // );
              return null;
            }
          };

          return RouterImpl;
        })(_react.default.PureComponent);

        RouterImpl.defaultProps = {
          primary: true
        };
        var FocusContext = createNamedContext("Focus");

        var FocusHandler = function FocusHandler(_ref3) {
          var uri = _ref3.uri,
            location = _ref3.location,
            component = _ref3.component,
            domProps = _objectWithoutProperties(_ref3, [
              "uri",
              "location",
              "component"
            ]);

          return _react.default.createElement(
            FocusContext.Consumer,
            null,
            function(requestFocus) {
              return _react.default.createElement(
                FocusHandlerImpl,
                _extends({}, domProps, {
                  component: component,
                  requestFocus: requestFocus,
                  uri: uri,
                  location: location
                })
              );
            }
          );
        }; // don't focus on initial render

        var initialRender = true;
        var focusHandlerCount = 0;

        var FocusHandlerImpl = (function(_React$Component2) {
          _inherits(FocusHandlerImpl, _React$Component2);

          function FocusHandlerImpl() {
            var _temp2, _this4, _ret2;

            _classCallCheck(this, FocusHandlerImpl);

            for (
              var _len2 = arguments.length, args = Array(_len2), _key2 = 0;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2] = arguments[_key2];
            }

            return (
              (_ret2 = ((_temp2 = ((_this4 = _possibleConstructorReturn(
                this,
                _React$Component2.call.apply(
                  _React$Component2,
                  [this].concat(args)
                )
              )),
              _this4)),
              (_this4.state = {}),
              (_this4.requestFocus = function(node) {
                if (!_this4.state.shouldFocus) {
                  node.focus();
                }
              }),
              _temp2)),
              _possibleConstructorReturn(_this4, _ret2)
            );
          }

          FocusHandlerImpl.getDerivedStateFromProps = function getDerivedStateFromProps(
            nextProps,
            prevState
          ) {
            var initial = prevState.uri == null;

            if (initial) {
              return _extends(
                {
                  shouldFocus: true
                },
                nextProps
              );
            } else {
              var myURIChanged = nextProps.uri !== prevState.uri;
              var navigatedUpToMe =
                prevState.location.pathname !== nextProps.location.pathname &&
                nextProps.location.pathname === nextProps.uri;
              return _extends(
                {
                  shouldFocus: myURIChanged || navigatedUpToMe
                },
                nextProps
              );
            }
          };

          FocusHandlerImpl.prototype.componentDidMount = function componentDidMount() {
            focusHandlerCount++;
            this.focus();
          };

          FocusHandlerImpl.prototype.componentWillUnmount = function componentWillUnmount() {
            focusHandlerCount--;

            if (focusHandlerCount === 0) {
              initialRender = true;
            }
          };

          FocusHandlerImpl.prototype.componentDidUpdate = function componentDidUpdate(
            prevProps,
            prevState
          ) {
            if (
              prevProps.location !== this.props.location &&
              this.state.shouldFocus
            ) {
              this.focus();
            }
          };

          FocusHandlerImpl.prototype.focus = function focus() {
            if ("development" === "test") {
              // getting cannot read property focus of null in the tests
              // and that bit of global `initialRender` state causes problems
              // should probably figure it out!
              return;
            }

            var requestFocus = this.props.requestFocus;

            if (requestFocus) {
              requestFocus(this.node);
            } else {
              if (initialRender) {
                initialRender = false;
              } else {
                // React polyfills [autofocus] and it fires earlier than cDM,
                // so we were stealing focus away, this line prevents that.
                if (!this.node.contains(document.activeElement)) {
                  this.node.focus();
                }
              }
            }
          };

          FocusHandlerImpl.prototype.render = function render() {
            var _this5 = this;

            var _props2 = this.props,
              children = _props2.children,
              style = _props2.style,
              requestFocus = _props2.requestFocus,
              _props2$role = _props2.role,
              role = _props2$role === undefined ? "group" : _props2$role,
              _props2$component = _props2.component,
              Comp =
                _props2$component === undefined ? "div" : _props2$component,
              uri = _props2.uri,
              location = _props2.location,
              domProps = _objectWithoutProperties(_props2, [
                "children",
                "style",
                "requestFocus",
                "role",
                "component",
                "uri",
                "location"
              ]);

            return _react.default.createElement(
              Comp,
              _extends(
                {
                  style: _extends(
                    {
                      outline: "none"
                    },
                    style
                  ),
                  tabIndex: "-1",
                  role: role,
                  ref: function ref(n) {
                    return (_this5.node = n);
                  }
                },
                domProps
              ),
              _react.default.createElement(
                FocusContext.Provider,
                {
                  value: this.requestFocus
                },
                this.props.children
              )
            );
          };

          return FocusHandlerImpl;
        })(_react.default.Component);

        (0, _reactLifecyclesCompat.polyfill)(FocusHandlerImpl);

        var k = function k() {}; ////////////////////////////////////////////////////////////////////////////////

        var forwardRef = _react.default.forwardRef;

        if (typeof forwardRef === "undefined") {
          forwardRef = function forwardRef(C) {
            return C;
          };
        }

        var Link = forwardRef(function(_ref4, ref) {
          var innerRef = _ref4.innerRef,
            props = _objectWithoutProperties(_ref4, ["innerRef"]);

          return _react.default.createElement(
            BaseContext.Consumer,
            null,
            function(_ref5) {
              var basepath = _ref5.basepath,
                baseuri = _ref5.baseuri;
              return _react.default.createElement(Location, null, function(
                _ref6
              ) {
                var location = _ref6.location,
                  navigate = _ref6.navigate;

                var to = props.to,
                  state = props.state,
                  replace = props.replace,
                  _props$getProps = props.getProps,
                  getProps =
                    _props$getProps === undefined ? k : _props$getProps,
                  anchorProps = _objectWithoutProperties(props, [
                    "to",
                    "state",
                    "replace",
                    "getProps"
                  ]);

                var href = (0, _utils.resolve)(to, baseuri);
                var isCurrent = location.pathname === href;
                var isPartiallyCurrent = (0, _utils.startsWith)(
                  location.pathname,
                  href
                );
                return _react.default.createElement(
                  "a",
                  _extends(
                    {
                      ref: ref || innerRef,
                      "aria-current": isCurrent ? "page" : undefined
                    },
                    anchorProps,
                    getProps({
                      isCurrent: isCurrent,
                      isPartiallyCurrent: isPartiallyCurrent,
                      href: href,
                      location: location
                    }),
                    {
                      href: href,
                      onClick: function onClick(event) {
                        if (anchorProps.onClick) anchorProps.onClick(event);

                        if (shouldNavigate(event)) {
                          event.preventDefault();
                          navigate(href, {
                            state: state,
                            replace: replace
                          });
                        }
                      }
                    }
                  )
                );
              });
            }
          );
        }); ////////////////////////////////////////////////////////////////////////////////

        exports.Link = Link;

        function RedirectRequest(uri) {
          this.uri = uri;
        }

        var isRedirect = function isRedirect(o) {
          return o instanceof RedirectRequest;
        };

        exports.isRedirect = isRedirect;

        var redirectTo = function redirectTo(to) {
          throw new RedirectRequest(to);
        };

        exports.redirectTo = redirectTo;

        var RedirectImpl = (function(_React$Component3) {
          _inherits(RedirectImpl, _React$Component3);

          function RedirectImpl() {
            _classCallCheck(this, RedirectImpl);

            return _possibleConstructorReturn(
              this,
              _React$Component3.apply(this, arguments)
            );
          } // Support React < 16 with this hook

          RedirectImpl.prototype.componentDidMount = function componentDidMount() {
            var _props3 = this.props,
              navigate = _props3.navigate,
              to = _props3.to,
              from = _props3.from,
              _props3$replace = _props3.replace,
              replace = _props3$replace === undefined ? true : _props3$replace,
              state = _props3.state,
              noThrow = _props3.noThrow,
              props = _objectWithoutProperties(_props3, [
                "navigate",
                "to",
                "from",
                "replace",
                "state",
                "noThrow"
              ]);

            Promise.resolve().then(function() {
              navigate((0, _utils.insertParams)(to, props), {
                replace: replace,
                state: state
              });
            });
          };

          RedirectImpl.prototype.render = function render() {
            var _props4 = this.props,
              navigate = _props4.navigate,
              to = _props4.to,
              from = _props4.from,
              replace = _props4.replace,
              state = _props4.state,
              noThrow = _props4.noThrow,
              props = _objectWithoutProperties(_props4, [
                "navigate",
                "to",
                "from",
                "replace",
                "state",
                "noThrow"
              ]);

            if (!noThrow) redirectTo((0, _utils.insertParams)(to, props));
            return null;
          };

          return RedirectImpl;
        })(_react.default.Component);

        var Redirect = function Redirect(props) {
          return _react.default.createElement(Location, null, function(
            locationContext
          ) {
            return _react.default.createElement(
              RedirectImpl,
              _extends({}, locationContext, props)
            );
          });
        };

        exports.Redirect = Redirect;
        "development" !== "production"
          ? (Redirect.propTypes = {
              from: _propTypes.default.string,
              to: _propTypes.default.string.isRequired
            })
          : void 0; ////////////////////////////////////////////////////////////////////////////////

        var Match = function Match(_ref7) {
          var path = _ref7.path,
            children = _ref7.children;
          return _react.default.createElement(
            BaseContext.Consumer,
            null,
            function(_ref8) {
              var baseuri = _ref8.baseuri;
              return _react.default.createElement(Location, null, function(
                _ref9
              ) {
                var navigate = _ref9.navigate,
                  location = _ref9.location;
                var resolvedPath = (0, _utils.resolve)(path, baseuri);
                var result = (0, _utils.match)(resolvedPath, location.pathname);
                return children({
                  navigate: navigate,
                  location: location,
                  match: result
                    ? _extends({}, result.params, {
                        uri: result.uri,
                        path: path
                      })
                    : null
                });
              });
            }
          );
        }; ////////////////////////////////////////////////////////////////////////////////
        // Junk

        exports.Match = Match;

        var stripSlashes = function stripSlashes(str) {
          return str.replace(/(^\/+|\/+$)/g, "");
        };

        var createRoute = function createRoute(basepath) {
          return function(element) {
            if (!element) {
              return null;
            }

            !(
              element.props.path ||
              element.props.default ||
              element.type === Redirect
            )
              ? "development" !== "production"
                ? (0, _invariant.default)(
                    false,
                    "<Router>: Children of <Router> must have a `path` or `default` prop, or be a `<Redirect>`. None found on element type `" +
                      element.type +
                      "`"
                  )
                : (0, _invariant.default)(false)
              : void 0;
            !!(
              element.type === Redirect &&
              (!element.props.from || !element.props.to)
            )
              ? "development" !== "production"
                ? (0, _invariant.default)(
                    false,
                    '<Redirect from="' +
                      element.props.from +
                      ' to="' +
                      element.props.to +
                      '"/> requires both "from" and "to" props when inside a <Router>.'
                  )
                : (0, _invariant.default)(false)
              : void 0;
            !!(
              element.type === Redirect &&
              !(0, _utils.validateRedirect)(
                element.props.from,
                element.props.to
              )
            )
              ? "development" !== "production"
                ? (0, _invariant.default)(
                    false,
                    '<Redirect from="' +
                      element.props.from +
                      ' to="' +
                      element.props.to +
                      '"/> has mismatched dynamic segments, ensure both paths have the exact same dynamic segments.'
                  )
                : (0, _invariant.default)(false)
              : void 0;

            if (element.props.default) {
              return {
                value: element,
                default: true
              };
            }

            var elementPath =
              element.type === Redirect
                ? element.props.from
                : element.props.path;
            var path =
              elementPath === "/"
                ? basepath
                : stripSlashes(basepath) + "/" + stripSlashes(elementPath);
            return {
              value: element,
              default: element.props.default,
              path: element.props.children ? stripSlashes(path) + "/*" : path
            };
          };
        };

        var shouldNavigate = function shouldNavigate(event) {
          return (
            !event.defaultPrevented &&
            event.button === 0 &&
            !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
          );
        }; ////////////////////////////////////////////////////////////////////////
      },
      {
        react: "../node_modules/react/index.js",
        warning: "../node_modules/warning/browser.js",
        "prop-types": "../node_modules/prop-types/index.js",
        invariant: "../node_modules/invariant/browser.js",
        "create-react-context":
          "../node_modules/create-react-context/lib/index.js",
        "react-lifecycles-compat":
          "../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js",
        "./lib/utils": "../node_modules/@reach/router/es/lib/utils.js",
        "./lib/history": "../node_modules/@reach/router/es/lib/history.js"
      }
    ],
    "images/whites-logo.png": [
      function(require, module, exports) {
        module.exports = "/whites-logo.ab31bf13.png";
      },
      {}
    ],
    "images/whites-mobile-logo.png": [
      function(require, module, exports) {
        module.exports = "/whites-mobile-logo.c8083b0b.png";
      },
      {}
    ],
    "images/call-button.png": [
      function(require, module, exports) {
        module.exports = "/call-button.a0099496.png";
      },
      {}
    ],
    "images/login-icon.png": [
      function(require, module, exports) {
        module.exports = "/login-icon.ffba45a4.png";
      },
      {}
    ],
    "components/Navigation.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _router = require("@reach/router");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var Navigation =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Navigation, _React$Component);

            function Navigation() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, Navigation);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(Navigation)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args)
                )
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "state",
                {
                  mobileCollapse: false
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "handleClick",
                function(e) {
                  if (_this.mobileMenu && _this.mobileMenu.contains(e.target)) {
                    return;
                  }

                  if (_this.state.mobileCollapse === true) {
                    _this.setState({
                      mobileCollapse: false
                    });
                  }
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "closeMenu",
                function() {
                  _this.setState({
                    mobileCollapse: false
                  });
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "toggleMobileMenu",
                function() {
                  if (_this.state.mobileCollapse) {
                    _this.closeMenu();
                  } else {
                    _this.setState({
                      mobileCollapse: true
                    });
                  }
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "isActive",
                function(_ref) {
                  var isCurrent = _ref.isCurrent;
                  return isCurrent
                    ? {
                        className: "nav-item nav-link whites-nav mr-3 active"
                      }
                    : {
                        className: "nav-item nav-link whites-nav mr-3"
                      };
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "isActiveMobile",
                function(_ref2) {
                  var isCurrent = _ref2.isCurrent;
                  return isCurrent
                    ? {
                        className:
                          "nav-item nav-link whites-nav-mobile mobile-nav-txt mr-3 active"
                      }
                    : {
                        className:
                          "nav-item nav-link whites-nav-mobile mobile-nav-txt mr-3"
                      };
                }
              );

              return _this;
            }

            _createClass(Navigation, [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  document.addEventListener(
                    "mousedown",
                    this.handleClick,
                    false
                  );
                }
              },
              {
                key: "componentDidUnMount",
                value: function componentDidUnMount() {
                  document.removeEventListener(
                    "mousedown",
                    this.handleClick,
                    false
                  );
                }
              },
              {
                key: "render",
                value: function render() {
                  var _this2 = this;

                  var mobileCollapse = this.state.mobileCollapse;
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row whites-logo-section"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-lg-4 d-none d-lg-inline-block "
                          },
                          _react.default.createElement(
                            _router.Link,
                            {
                              to: "./"
                            },
                            _react.default.createElement("img", {
                              src: require("../images/whites-logo.png"),
                              className:
                                "d-inline-block align-top mt-2 whites-logo",
                              alt: "whites logo"
                            })
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className:
                              "col-12 d-inline-block d-lg-none my-5 text-center "
                          },
                          _react.default.createElement(
                            _router.Link,
                            {
                              to: "./"
                            },
                            _react.default.createElement("img", {
                              src: require("../images/whites-mobile-logo.png"),
                              className:
                                "d-inline-block align-top mt-2 whites-mobile-logo",
                              alt: "whites logo"
                            })
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-lg-4 d-lg-inline d-none offset-lg-4"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className:
                                "d-inline float-right  whites-logo-section-text"
                            },
                            "FINEST GARMENT CARE"
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-lg-8 d-none d-lg-block "
                          },
                          _react.default.createElement(
                            "nav",
                            {
                              className:
                                "navbar navbar-dark navbar-expand-lg bg-transparent whites-nav"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className:
                                  "collapse navbar-collapse white-mobile-menu"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "navbar-nav text-uppercase"
                                },
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    getProps: this.isActive,
                                    to: "/bundles",
                                    className:
                                      "nav-item nav-link whites-nav mr-5 ml-0 pl-0 "
                                  },
                                  "Bundles"
                                ),
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    getProps: this.isActive,
                                    className:
                                      "nav-item nav-link whites-nav mr-5",
                                    to: "/wash-fold"
                                  },
                                  "Wash+Fold"
                                ),
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    getProps: this.isActive,
                                    to: "/bridal",
                                    className:
                                      "nav-item nav-link whites-nav mr-5"
                                  },
                                  "Bridal"
                                ),
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    getProps: this.isActive,
                                    to: "/couture",
                                    className:
                                      "nav-item nav-link whites-nav mr-5"
                                  },
                                  "Couture"
                                ),
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    getProps: this.isActive,
                                    to: "/pricelist",
                                    className:
                                      "nav-item nav-link whites-nav mr-5"
                                  },
                                  "Prices"
                                )
                              )
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className:
                              "col-lg-4 d-lg-inline-block d-none whites-nav-login py-2 remove-underline "
                          },
                          _react.default.createElement(
                            "span",
                            {
                              className: "d-inline-block float-right"
                            },
                            _react.default.createElement(
                              "a",
                              {
                                href: "tel:800944837"
                              },
                              _react.default.createElement(
                                "button",
                                {
                                  className:
                                    "btn btn-sm mr-3 mt-0 px-2 whites-pill-button text-uppercase",
                                  type: "button"
                                },
                                _react.default.createElement("img", {
                                  src: require("../images/call-button.png"),
                                  className: "mr-2 callButton"
                                }),
                                "800 WHITES"
                              )
                            ),
                            _react.default.createElement(
                              "span",
                              {
                                className: "mt-2 align-bottom"
                              },
                              _react.default.createElement(
                                _router.Link,
                                {
                                  to: "/contactUs"
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "text-right d-inline-block whites-nav-login mr-3 align-middle mb-0"
                                  },
                                  "Customer",
                                  _react.default.createElement("br", null),
                                  " Login"
                                ),
                                _react.default.createElement("img", {
                                  className:
                                    "d-md-inline-block d-none loginIcon",
                                  src: require("../images/login-icon.png")
                                })
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row d-lg-none d-flex mt-3 mb-3"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-2 text-left"
                          },
                          _react.default.createElement(
                            _router.Link,
                            {
                              to: "/contactUs"
                            },
                            _react.default.createElement("img", {
                              className: "loginIcon",
                              src: require("../images/login-icon.png")
                            })
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-8 text-center"
                          },
                          _react.default.createElement(
                            "a",
                            {
                              href: "tel:800944837"
                            },
                            _react.default.createElement(
                              "button",
                              {
                                className:
                                  "btn btn-sm mt-0  whites-pill-button text-uppercase",
                                type: "button"
                              },
                              _react.default.createElement("img", {
                                src: require("../images/call-button.png"),
                                className: "mr-2 callButton"
                              }),
                              "800 WHITES"
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "menubar col-2 text-right",
                            ref: function ref(node) {
                              return (_this2.mobileMenu = node);
                            }
                          },
                          _react.default.createElement("div", {
                            className: "hambclicker",
                            onClick: this.toggleMobileMenu
                          }),
                          _react.default.createElement(
                            "div",
                            {
                              id: "hambmenu",
                              className: mobileCollapse ? "isopen" : ""
                            },
                            _react.default.createElement("span", null),
                            _react.default.createElement("span", null),
                            _react.default.createElement("span", null),
                            _react.default.createElement("span", null)
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: mobileCollapse ? "isopen" : "",
                            id: "menu"
                          },
                          _react.default.createElement(
                            "ul",
                            null,
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu,
                                  to: "/bundles",
                                  className:
                                    "nav-item nav-link whites-nav-mobile "
                                },
                                "Bundles ",
                                _react.default.createElement(
                                  "span",
                                  {
                                    className: "sr-only"
                                  },
                                  "(current)"
                                )
                              )
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  className:
                                    "nav-item nav-link whites-nav-mobile",
                                  to: "/wash-fold",
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu
                                },
                                "Wash+Fold"
                              )
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  to: "/bridal",
                                  className:
                                    "nav-item nav-link whites-nav-mobile",
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu
                                },
                                "Bridal"
                              )
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  to: "/couture",
                                  className:
                                    "nav-item nav-link whites-nav-mobile",
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu
                                },
                                "Couture"
                              )
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  to: "/pricelist",
                                  className:
                                    "nav-item nav-link whites-nav-mobile",
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu
                                },
                                "Prices"
                              )
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  className:
                                    "nav-item nav-link whites-nav-mobile",
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu,
                                  to: "/about"
                                },
                                "About Us"
                              )
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  className:
                                    "nav-item nav-link whites-nav-mobile",
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu,
                                  to: "/locations"
                                },
                                "Locations"
                              )
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              _react.default.createElement(
                                _router.Link,
                                {
                                  className:
                                    "nav-item nav-link whites-nav-mobile",
                                  getProps: this.isActiveMobile,
                                  onClick: this.closeMenu,
                                  to: "/contactUs"
                                },
                                "Contact"
                              )
                            )
                          )
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return Navigation;
          })(_react.default.Component);

        var _default = Navigation;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "@reach/router": "../node_modules/@reach/router/es/index.js",
        "../images/whites-logo.png": "images/whites-logo.png",
        "../images/whites-mobile-logo.png": "images/whites-mobile-logo.png",
        "../images/call-button.png": "images/call-button.png",
        "../images/login-icon.png": "images/login-icon.png"
      }
    ],
    "images/slide-1.jpg": [
      function(require, module, exports) {
        module.exports = "/slide-1.76083b87.jpg";
      },
      {}
    ],
    "images/slide-2.jpg": [
      function(require, module, exports) {
        module.exports = "/slide-2.4812d6e5.jpg";
      },
      {}
    ],
    "images/slide-3.jpg": [
      function(require, module, exports) {
        module.exports = "/slide-3.2e0c2132.jpg";
      },
      {}
    ],
    "images/slide-4.jpg": [
      function(require, module, exports) {
        module.exports = "/slide-4.9cac4ad0.jpg";
      },
      {}
    ],
    "images/slide-5.jpg": [
      function(require, module, exports) {
        module.exports = "/slide-5.cb536071.jpg";
      },
      {}
    ],
    "../node_modules/google-maps-react/dist/lib/windowOrGlobal.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define(["module"], factory);
          } else if (typeof exports !== "undefined") {
            factory(module);
          } else {
            var mod = {
              exports: {}
            };
            factory(mod);
            global.windowOrGlobal = mod.exports;
          }
        })(this, function(module) {
          "use strict";

          var _typeof =
            typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
              ? function(obj) {
                  return typeof obj;
                }
              : function(obj) {
                  return obj &&
                    typeof Symbol === "function" &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                };

          module.exports =
            ((typeof self === "undefined" ? "undefined" : _typeof(self)) ===
              "object" &&
              self.self === self &&
              self) ||
            ((typeof global === "undefined" ? "undefined" : _typeof(global)) ===
              "object" &&
              global.global === global &&
              global) ||
            undefined;
        });
      },
      {}
    ],
    "../node_modules/google-maps-react/dist/lib/ScriptCache.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define(["exports", "./windowOrGlobal"], factory);
          } else if (typeof exports !== "undefined") {
            factory(exports, require("./windowOrGlobal"));
          } else {
            var mod = {
              exports: {}
            };
            factory(mod.exports, global.windowOrGlobal);
            global.ScriptCache = mod.exports;
          }
        })(this, function(exports, window) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          var counter = 0;
          var scriptMap =
            (typeof window !== "undefined" && window._scriptMap) || new Map();
          var ScriptCache = (exports.ScriptCache = (function(global) {
            global._scriptMap = global._scriptMap || scriptMap;
            return function ScriptCache(scripts) {
              var Cache = {};

              Cache._onLoad = function(key) {
                return function(cb) {
                  var registered = true;

                  function unregister() {
                    registered = false;
                  }

                  var stored = scriptMap.get(key);

                  if (stored) {
                    stored.promise.then(function() {
                      if (registered) {
                        stored.error ? cb(stored.error) : cb(null, stored);
                      }

                      return stored;
                    });
                  } else {
                    // TODO:
                  }

                  return unregister;
                };
              };

              Cache._scriptTag = function(key, src) {
                if (!scriptMap.has(key)) {
                  // Server side rendering environments don't always have access to the `document` global.
                  // In these cases, we're not going to be able to return a script tag, so just return null.
                  if (typeof document === "undefined") return null;

                  var tag = document.createElement("script");
                  var promise = new Promise(function(resolve, reject) {
                    var resolved = false,
                      errored = false,
                      body = document.getElementsByTagName("body")[0];

                    tag.type = "text/javascript";
                    tag.async = false; // Load in order

                    var cbName = "loaderCB" + counter++ + Date.now();
                    var cb = void 0;

                    var handleResult = function handleResult(state) {
                      return function(evt) {
                        var stored = scriptMap.get(key);
                        if (state === "loaded") {
                          stored.resolved = true;
                          resolve(src);
                          // stored.handlers.forEach(h => h.call(null, stored))
                          // stored.handlers = []
                        } else if (state === "error") {
                          stored.errored = true;
                          // stored.handlers.forEach(h => h.call(null, stored))
                          // stored.handlers = [];
                          reject(evt);
                        }
                        stored.loaded = true;

                        cleanup();
                      };
                    };

                    var cleanup = function cleanup() {
                      if (
                        global[cbName] &&
                        typeof global[cbName] === "function"
                      ) {
                        global[cbName] = null;
                        delete global[cbName];
                      }
                    };

                    tag.onload = handleResult("loaded");
                    tag.onerror = handleResult("error");
                    tag.onreadystatechange = function() {
                      handleResult(tag.readyState);
                    };

                    // Pick off callback, if there is one
                    if (src.match(/callback=CALLBACK_NAME/)) {
                      src = src.replace(/(callback=)[^\&]+/, "$1" + cbName);
                      cb = window[cbName] = tag.onload;
                    } else {
                      tag.addEventListener("load", tag.onload);
                    }
                    tag.addEventListener("error", tag.onerror);

                    tag.src = src;
                    body.appendChild(tag);

                    return tag;
                  });
                  var initialState = {
                    loaded: false,
                    error: false,
                    promise: promise,
                    tag: tag
                  };
                  scriptMap.set(key, initialState);
                }
                return scriptMap.get(key);
              };

              // let scriptTags = document.querySelectorAll('script')
              //
              // NodeList.prototype.filter = Array.prototype.filter;
              // NodeList.prototype.map = Array.prototype.map;
              // const initialScripts = scriptTags
              //   .filter(s => !!s.src)
              //   .map(s => s.src.split('?')[0])
              //   .reduce((memo, script) => {
              //     memo[script] = script;
              //     return memo;
              //   }, {});

              Object.keys(scripts).forEach(function(key) {
                var script = scripts[key];

                var tag = window._scriptMap.has(key)
                  ? window._scriptMap.get(key).tag
                  : Cache._scriptTag(key, script);

                Cache[key] = {
                  tag: tag,
                  onLoad: Cache._onLoad(key)
                };
              });

              return Cache;
            };
          })(window));

          exports.default = ScriptCache;
        });
      },
      {
        "./windowOrGlobal":
          "../node_modules/google-maps-react/dist/lib/windowOrGlobal.js"
      }
    ],
    "../node_modules/google-maps-react/dist/lib/GoogleApi.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define(["exports"], factory);
          } else if (typeof exports !== "undefined") {
            factory(exports);
          } else {
            var mod = {
              exports: {}
            };
            factory(mod.exports);
            global.GoogleApi = mod.exports;
          }
        })(this, function(exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          var GoogleApi = (exports.GoogleApi = function GoogleApi(opts) {
            opts = opts || {};

            if (!opts.hasOwnProperty("apiKey")) {
              throw new Error("You must pass an apiKey to use GoogleApi");
            }

            var apiKey = opts.apiKey;
            var libraries = opts.libraries || ["places"];
            var client = opts.client;
            var URL = opts.url || "https://maps.googleapis.com/maps/api/js";

            var googleVersion = opts.version || "3.31";

            var script = null;
            var google =
              (typeof window !== "undefined" && window.google) || null;
            var loading = false;
            var channel = null;
            var language = opts.language;
            var region = opts.region || null;

            var onLoadEvents = [];

            var url = function url() {
              var url = URL;
              var params = {
                key: apiKey,
                callback: "CALLBACK_NAME",
                libraries: libraries.join(","),
                client: client,
                v: googleVersion,
                channel: channel,
                language: language,
                region: region
              };

              var paramStr = Object.keys(params)
                .filter(function(k) {
                  return !!params[k];
                })
                .map(function(k) {
                  return k + "=" + params[k];
                })
                .join("&");

              return url + "?" + paramStr;
            };

            return url();
          });

          exports.default = GoogleApi;
        });
      },
      {}
    ],
    "../node_modules/google-maps-react/dist/GoogleApiComponent.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define([
              "exports",
              "react",
              "react-dom",
              "./lib/ScriptCache",
              "./lib/GoogleApi"
            ], factory);
          } else if (typeof exports !== "undefined") {
            factory(
              exports,
              require("react"),
              require("react-dom"),
              require("./lib/ScriptCache"),
              require("./lib/GoogleApi")
            );
          } else {
            var mod = {
              exports: {}
            };
            factory(
              mod.exports,
              global.react,
              global.reactDom,
              global.ScriptCache,
              global.GoogleApi
            );
            global.GoogleApiComponent = mod.exports;
          }
        })(this, function(
          exports,
          _react,
          _reactDom,
          _ScriptCache,
          _GoogleApi
        ) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.wrapper = undefined;

          var _react2 = _interopRequireDefault(_react);

          var _reactDom2 = _interopRequireDefault(_reactDom);

          var _GoogleApi2 = _interopRequireDefault(_GoogleApi);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              (typeof call === "object" || typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  typeof superClass
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var defaultMapConfig = {};

          var serialize = function serialize(obj) {
            return JSON.stringify(obj);
          };
          var isSame = function isSame(obj1, obj2) {
            return obj1 === obj2 || serialize(obj1) === serialize(obj2);
          };

          var defaultCreateCache = function defaultCreateCache(options) {
            options = options || {};
            var apiKey = options.apiKey;
            var libraries = options.libraries || ["places"];
            var version = options.version || "3";
            var language = options.language || "en";
            var url = options.url;
            var client = options.client;

            return (0, _ScriptCache.ScriptCache)({
              google: (0, _GoogleApi2.default)({
                apiKey: apiKey,
                language: language,
                libraries: libraries,
                version: version,
                url: url,
                client: client
              })
            });
          };

          var DefaultLoadingContainer = function DefaultLoadingContainer(
            props
          ) {
            return _react2.default.createElement("div", null, "Loading...");
          };

          var wrapper = (exports.wrapper = function wrapper(input) {
            return function(WrappedComponent) {
              var Wrapper = (function(_React$Component) {
                _inherits(Wrapper, _React$Component);

                function Wrapper(props, context) {
                  _classCallCheck(this, Wrapper);

                  // Build options from input
                  var _this = _possibleConstructorReturn(
                    this,
                    (Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).call(
                      this,
                      props,
                      context
                    )
                  );

                  var options =
                    typeof input === "function" ? input(props) : input;

                  // Initialize required Google scripts and other configured options
                  _this.initialize(options);

                  _this.state = {
                    loaded: false,
                    map: null,
                    google: null,
                    options: options
                  };
                  return _this;
                }

                _createClass(Wrapper, [
                  {
                    key: "componentWillReceiveProps",
                    value: function componentWillReceiveProps(props) {
                      // Do not update input if it's not dynamic
                      if (typeof input !== "function") {
                        return;
                      }

                      // Get options to compare
                      var prevOptions = this.state.options;
                      var options =
                        typeof input === "function" ? input(props) : input;

                      // Ignore when options are not changed
                      if (isSame(options, prevOptions)) {
                        return;
                      }

                      // Initialize with new options
                      this.initialize(options);

                      // Save new options in component state,
                      // and remove information about previous API handlers
                      this.setState({
                        options: options,
                        loaded: false,
                        google: null
                      });
                    }
                  },
                  {
                    key: "initialize",
                    value: function initialize(options) {
                      // Avoid race condition: remove previous 'load' listener
                      if (this.unregisterLoadHandler) {
                        this.unregisterLoadHandler();
                        this.unregisterLoadHandler = null;
                      }

                      // Load cache factory
                      var createCache =
                        options.createCache || defaultCreateCache;

                      // Build script
                      this.scriptCache = createCache(options);
                      this.unregisterLoadHandler = this.scriptCache.google.onLoad(
                        this.onLoad.bind(this)
                      );

                      // Store information about loading container
                      this.LoadingContainer =
                        options.LoadingContainer || DefaultLoadingContainer;
                    }
                  },
                  {
                    key: "onLoad",
                    value: function onLoad(err, tag) {
                      this._gapi = window.google;

                      this.setState({ loaded: true, google: this._gapi });
                    }
                  },
                  {
                    key: "render",
                    value: function render() {
                      var LoadingContainer = this.LoadingContainer;

                      if (!this.state.loaded) {
                        return _react2.default.createElement(
                          LoadingContainer,
                          null
                        );
                      }

                      var props = Object.assign({}, this.props, {
                        loaded: this.state.loaded,
                        google: window.google
                      });

                      return _react2.default.createElement(
                        "div",
                        null,
                        _react2.default.createElement(WrappedComponent, props),
                        _react2.default.createElement("div", { ref: "map" })
                      );
                    }
                  }
                ]);

                return Wrapper;
              })(_react2.default.Component);

              return Wrapper;
            };
          });

          exports.default = wrapper;
        });
      },
      {
        react: "../node_modules/react/index.js",
        "react-dom": "../node_modules/react-dom/index.js",
        "./lib/ScriptCache":
          "../node_modules/google-maps-react/dist/lib/ScriptCache.js",
        "./lib/GoogleApi":
          "../node_modules/google-maps-react/dist/lib/GoogleApi.js"
      }
    ],
    "../node_modules/google-maps-react/dist/lib/String.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define(["exports"], factory);
          } else if (typeof exports !== "undefined") {
            factory(exports);
          } else {
            var mod = {
              exports: {}
            };
            factory(mod.exports);
            global.String = mod.exports;
          }
        })(this, function(exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          var camelize = (exports.camelize = function camelize(str) {
            return str
              .split(" ")
              .map(function(word) {
                return word.charAt(0).toUpperCase() + word.slice(1);
              })
              .join("");
          });
        });
      },
      {}
    ],
    "../node_modules/google-maps-react/dist/components/Marker.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define([
              "exports",
              "react",
              "prop-types",
              "../lib/String"
            ], factory);
          } else if (typeof exports !== "undefined") {
            factory(
              exports,
              require("react"),
              require("prop-types"),
              require("../lib/String")
            );
          } else {
            var mod = {
              exports: {}
            };
            factory(mod.exports, global.react, global.propTypes, global.String);
            global.Marker = mod.exports;
          }
        })(this, function(exports, _react, _propTypes, _String) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Marker = undefined;

          var _react2 = _interopRequireDefault(_react);

          var _propTypes2 = _interopRequireDefault(_propTypes);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          var _extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          function _objectWithoutProperties(obj, keys) {
            var target = {};

            for (var i in obj) {
              if (keys.indexOf(i) >= 0) continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
              target[i] = obj[i];
            }

            return target;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              (typeof call === "object" || typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  typeof superClass
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var evtNames = [
            "click",
            "dblclick",
            "dragend",
            "mousedown",
            "mouseout",
            "mouseover",
            "mouseup",
            "recenter"
          ];

          var wrappedPromise = function wrappedPromise() {
            var wrappedPromise = {},
              promise = new Promise(function(resolve, reject) {
                wrappedPromise.resolve = resolve;
                wrappedPromise.reject = reject;
              });
            wrappedPromise.then = promise.then.bind(promise);
            wrappedPromise.catch = promise.catch.bind(promise);
            wrappedPromise.promise = promise;

            return wrappedPromise;
          };

          var Marker = (exports.Marker = (function(_React$Component) {
            _inherits(Marker, _React$Component);

            function Marker() {
              _classCallCheck(this, Marker);

              return _possibleConstructorReturn(
                this,
                (Marker.__proto__ || Object.getPrototypeOf(Marker)).apply(
                  this,
                  arguments
                )
              );
            }

            _createClass(Marker, [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this.markerPromise = wrappedPromise();
                  this.renderMarker();
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                  if (
                    this.props.map !== prevProps.map ||
                    this.props.position !== prevProps.position ||
                    this.props.icon !== prevProps.icon
                  ) {
                    if (this.marker) {
                      this.marker.setMap(null);
                    }
                    this.renderMarker();
                  }
                }
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this.marker) {
                    this.marker.setMap(null);
                  }
                }
              },
              {
                key: "renderMarker",
                value: function renderMarker() {
                  var _this2 = this;

                  var _props = this.props,
                    map = _props.map,
                    google = _props.google,
                    position = _props.position,
                    mapCenter = _props.mapCenter,
                    icon = _props.icon,
                    label = _props.label,
                    draggable = _props.draggable,
                    title = _props.title,
                    props = _objectWithoutProperties(_props, [
                      "map",
                      "google",
                      "position",
                      "mapCenter",
                      "icon",
                      "label",
                      "draggable",
                      "title"
                    ]);

                  if (!google) {
                    return null;
                  }

                  var pos = position || mapCenter;
                  if (!(pos instanceof google.maps.LatLng)) {
                    pos = new google.maps.LatLng(pos.lat, pos.lng);
                  }

                  var pref = _extends(
                    {
                      map: map,
                      position: pos,
                      icon: icon,
                      label: label,
                      title: title,
                      draggable: draggable
                    },
                    props
                  );
                  this.marker = new google.maps.Marker(pref);

                  evtNames.forEach(function(e) {
                    _this2.marker.addListener(e, _this2.handleEvent(e));
                  });

                  this.markerPromise.resolve(this.marker);
                }
              },
              {
                key: "getMarker",
                value: function getMarker() {
                  return this.markerPromise;
                }
              },
              {
                key: "handleEvent",
                value: function handleEvent(evt) {
                  var _this3 = this;

                  return function(e) {
                    var evtName = "on" + (0, _String.camelize)(evt);
                    if (_this3.props[evtName]) {
                      _this3.props[evtName](_this3.props, _this3.marker, e);
                    }
                  };
                }
              },
              {
                key: "render",
                value: function render() {
                  return null;
                }
              }
            ]);

            return Marker;
          })(_react2.default.Component));

          Marker.propTypes = {
            position: _propTypes2.default.object,
            map: _propTypes2.default.object
          };

          evtNames.forEach(function(e) {
            return (Marker.propTypes[e] = _propTypes2.default.func);
          });

          Marker.defaultProps = {
            name: "Marker"
          };

          exports.default = Marker;
        });
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "../lib/String": "../node_modules/google-maps-react/dist/lib/String.js"
      }
    ],
    "../node_modules/react-dom/cjs/react-dom-server.browser.development.js": [
      function(require, module, exports) {
        /** @license React v16.6.1
         * react-dom-server.browser.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        "use strict";

        if ("development" !== "production") {
          (function() {
            "use strict";

            var _assign = require("object-assign");

            var React = require("react");

            var checkPropTypes = require("prop-types/checkPropTypes");
            /**
             * Use invariant() to assert state which your program assumes to be true.
             *
             * Provide sprintf-style format (only %s is supported) and arguments
             * to provide information about what broke and what you were
             * expecting.
             *
             * The invariant message will be stripped in production, but the invariant
             * will remain to ensure logic does not differ in production.
             */

            var validateFormat = function() {};

            {
              validateFormat = function(format) {
                if (format === undefined) {
                  throw new Error(
                    "invariant requires an error message argument"
                  );
                }
              };
            }

            function invariant(condition, format, a, b, c, d, e, f) {
              validateFormat(format);

              if (!condition) {
                var error = void 0;

                if (format === undefined) {
                  error = new Error(
                    "Minified exception occurred; use the non-minified dev environment " +
                      "for the full error message and additional helpful warnings."
                  );
                } else {
                  var args = [a, b, c, d, e, f];
                  var argIndex = 0;
                  error = new Error(
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    })
                  );
                  error.name = "Invariant Violation";
                }

                error.framesToPop = 1; // we don't care about invariant's own frame

                throw error;
              }
            } // Relying on the `invariant()` implementation lets us
            // preserve the format and params in the www builds.
            // TODO: this is special because it gets imported during build.

            var ReactVersion = "16.6.3";
            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warningWithoutStack = function() {};

            {
              warningWithoutStack = function(condition, format) {
                for (
                  var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                if (format === undefined) {
                  throw new Error(
                    "`warningWithoutStack(condition, format, ...args)` requires a warning " +
                      "message argument"
                  );
                }

                if (args.length > 8) {
                  // Check before the condition to catch violations early.
                  throw new Error(
                    "warningWithoutStack() currently supports at most 8 arguments."
                  );
                }

                if (condition) {
                  return;
                }

                if (typeof console !== "undefined") {
                  var argsWithFormat = args.map(function(item) {
                    return "" + item;
                  });
                  argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
                  // breaks IE9: https://github.com/facebook/react/issues/13610

                  Function.prototype.apply.call(
                    console.error,
                    console,
                    argsWithFormat
                  );
                }

                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  var argIndex = 0;
                  var message =
                    "Warning: " +
                    format.replace(/%s/g, function() {
                      return args[argIndex++];
                    });
                  throw new Error(message);
                } catch (x) {}
              };
            }
            var warningWithoutStack$1 = warningWithoutStack; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.

            var hasSymbol = typeof Symbol === "function" && Symbol.for;
            var REACT_PORTAL_TYPE = hasSymbol
              ? Symbol.for("react.portal")
              : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol
              ? Symbol.for("react.fragment")
              : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol
              ? Symbol.for("react.strict_mode")
              : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol
              ? Symbol.for("react.profiler")
              : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol
              ? Symbol.for("react.provider")
              : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol
              ? Symbol.for("react.context")
              : 0xeace;
            var REACT_CONCURRENT_MODE_TYPE = hasSymbol
              ? Symbol.for("react.concurrent_mode")
              : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol
              ? Symbol.for("react.forward_ref")
              : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol
              ? Symbol.for("react.suspense")
              : 0xead1;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
            var Resolved = 1;

            function refineResolvedLazyComponent(lazyComponent) {
              return lazyComponent._status === Resolved
                ? lazyComponent._result
                : null;
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || "";
              return (
                outerType.displayName ||
                (functionName !== ""
                  ? wrapperName + "(" + functionName + ")"
                  : wrapperName)
              );
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }

              {
                if (typeof type.tag === "number") {
                  warningWithoutStack$1(
                    false,
                    "Received an unexpected object in getComponentName(). " +
                      "This is likely a bug in React. Please file an issue."
                  );
                }
              }

              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }

              if (typeof type === "string") {
                return type;
              }

              switch (type) {
                case REACT_CONCURRENT_MODE_TYPE:
                  return "ConcurrentMode";

                case REACT_FRAGMENT_TYPE:
                  return "Fragment";

                case REACT_PORTAL_TYPE:
                  return "Portal";

                case REACT_PROFILER_TYPE:
                  return "Profiler";

                case REACT_STRICT_MODE_TYPE:
                  return "StrictMode";

                case REACT_SUSPENSE_TYPE:
                  return "Suspense";
              }

              if (typeof type === "object") {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    return "Context.Consumer";

                  case REACT_PROVIDER_TYPE:
                    return "Context.Provider";

                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, "ForwardRef");

                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);

                  case REACT_LAZY_TYPE: {
                    var thenable = type;
                    var resolvedThenable = refineResolvedLazyComponent(
                      thenable
                    );

                    if (resolvedThenable) {
                      return getComponentName(resolvedThenable);
                    }
                  }
                }
              }

              return null;
            }
            /**
             * Forked from fbjs/warning:
             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
             *
             * Only change is we use console.warn instead of console.error,
             * and do nothing when 'console' is not supported.
             * This really simplifies the code.
             * ---
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var lowPriorityWarning = function() {};

            {
              var printWarning = function(format) {
                for (
                  var _len = arguments.length,
                    args = Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }

                var argIndex = 0;
                var message =
                  "Warning: " +
                  format.replace(/%s/g, function() {
                    return args[argIndex++];
                  });

                if (typeof console !== "undefined") {
                  console.warn(message);
                }

                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };

              lowPriorityWarning = function(condition, format) {
                if (format === undefined) {
                  throw new Error(
                    "`lowPriorityWarning(condition, format, ...args)` requires a warning " +
                      "message argument"
                  );
                }

                if (!condition) {
                  for (
                    var _len2 = arguments.length,
                      args = Array(_len2 > 2 ? _len2 - 2 : 0),
                      _key2 = 2;
                    _key2 < _len2;
                    _key2++
                  ) {
                    args[_key2 - 2] = arguments[_key2];
                  }

                  printWarning.apply(undefined, [format].concat(args));
                }
              };
            }
            var lowPriorityWarning$1 = lowPriorityWarning;
            var ReactSharedInternals =
              React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            /**
             * Similar to invariant but only logs a warning if the condition is not met.
             * This can be used to log issues in development environments in critical
             * paths. Removing the logging code for production environments will keep the
             * same logic and follow the same code paths.
             */

            var warning = warningWithoutStack$1;
            {
              warning = function(condition, format) {
                if (condition) {
                  return;
                }

                var ReactDebugCurrentFrame =
                  ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

                for (
                  var _len = arguments.length,
                    args = Array(_len > 2 ? _len - 2 : 0),
                    _key = 2;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 2] = arguments[_key];
                }

                warningWithoutStack$1.apply(
                  undefined,
                  [false, format + "%s"].concat(args, [stack])
                );
              };
            }
            var warning$1 = warning;
            var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

            var describeComponentFrame = function(name, source, ownerName) {
              var sourceInfo = "";

              if (source) {
                var path = source.fileName;
                var fileName = path.replace(BEFORE_SLASH_RE, "");
                {
                  // In DEV, include code for a common special case:
                  // prefer "folder/index.js" instead of just "index.js".
                  if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);

                    if (match) {
                      var pathBeforeSlash = match[1];

                      if (pathBeforeSlash) {
                        var folderName = pathBeforeSlash.replace(
                          BEFORE_SLASH_RE,
                          ""
                        );
                        fileName = folderName + "/" + fileName;
                      }
                    }
                  }
                }
                sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
              } else if (ownerName) {
                sourceInfo = " (created by " + ownerName + ")";
              }

              return "\n    in " + (name || "Unknown") + sourceInfo;
            };

            var enableHooks = false; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
            // In some cases, StrictMode should also double-render lifecycles.
            // This can be confusing for tests though,
            // And it can be bad for performance in production.
            // This feature flag can be used to control the behavior:
            // To preserve the "Pause on caught exceptions" behavior of the debugger, we
            // replay the begin phase of a failed component inside invokeGuardedCallback.
            // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

            var warnAboutDeprecatedLifecycles = false; // Gather advanced timing metrics for Profiler subtrees.
            // Trace which interactions trigger each commit.
            // Only used in www builds.

            var enableSuspenseServerRenderer = false; // Only used in www builds.
            // React Fire: prevent the value and checked attributes from syncing
            // with their related DOM properties
            // These APIs will no longer be "unstable" in the upcoming 16.7 release,
            // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

            var ReactDebugCurrentFrame$1 = void 0;
            {
              ReactDebugCurrentFrame$1 =
                ReactSharedInternals.ReactDebugCurrentFrame;
            }
            var didWarnAboutInvalidateContextType = {};
            var emptyObject = {};
            {
              Object.freeze(emptyObject);
            }

            function maskContext(type, context) {
              var contextTypes = type.contextTypes;

              if (!contextTypes) {
                return emptyObject;
              }

              var maskedContext = {};

              for (var contextName in contextTypes) {
                maskedContext[contextName] = context[contextName];
              }

              return maskedContext;
            }

            function checkContextTypes(typeSpecs, values, location) {
              {
                checkPropTypes(
                  typeSpecs,
                  values,
                  location,
                  "Component",
                  ReactDebugCurrentFrame$1.getCurrentStack
                );
              }
            }

            function validateContextBounds(context, threadID) {
              // If we don't have enough slots in this context to store this threadID,
              // fill it in without leaving any holes to ensure that the VM optimizes
              // this as non-holey index properties.
              for (var i = context._threadCount; i <= threadID; i++) {
                // We assume that this is the same as the defaultValue which might not be
                // true if we're rendering inside a secondary renderer but they are
                // secondary because these use cases are very rare.
                context[i] = context._currentValue2;
                context._threadCount = i + 1;
              }
            }

            function processContext(type, context, threadID) {
              var contextType = type.contextType;

              if (typeof contextType === "object" && contextType !== null) {
                {
                  if (contextType.$$typeof !== REACT_CONTEXT_TYPE) {
                    var name = getComponentName(type) || "Component";

                    if (!didWarnAboutInvalidateContextType[name]) {
                      didWarnAboutInvalidateContextType[name] = true;
                      warningWithoutStack$1(
                        false,
                        "%s defines an invalid contextType. " +
                          "contextType should point to the Context object returned by React.createContext(). " +
                          "Did you accidentally pass the Context.Provider instead?",
                        name
                      );
                    }
                  }
                }
                validateContextBounds(contextType, threadID);
                return contextType[threadID];
              } else {
                var maskedContext = maskContext(type, context);
                {
                  if (type.contextTypes) {
                    checkContextTypes(
                      type.contextTypes,
                      maskedContext,
                      "context"
                    );
                  }
                }
                return maskedContext;
              }
            } // Allocates a new index for each request. Tries to stay as compact as possible so that these
            // indices can be used to reference a tightly packaged array. As opposed to being used in a Map.
            // The first allocated index is 1.

            var nextAvailableThreadIDs = new Uint16Array(16);

            for (var i = 0; i < 15; i++) {
              nextAvailableThreadIDs[i] = i + 1;
            }

            nextAvailableThreadIDs[15] = 0;

            function growThreadCountAndReturnNextAvailable() {
              var oldArray = nextAvailableThreadIDs;
              var oldSize = oldArray.length;
              var newSize = oldSize * 2;
              !(newSize <= 0x10000)
                ? invariant(
                    false,
                    "Maximum number of concurrent React renderers exceeded. This can happen if you are not properly destroying the Readable provided by React. Ensure that you call .destroy() on it if you no longer want to read from it, and did not read to the end. If you use .pipe() this should be automatic."
                  )
                : void 0;
              var newArray = new Uint16Array(newSize);
              newArray.set(oldArray);
              nextAvailableThreadIDs = newArray;
              nextAvailableThreadIDs[0] = oldSize + 1;

              for (var _i = oldSize; _i < newSize - 1; _i++) {
                nextAvailableThreadIDs[_i] = _i + 1;
              }

              nextAvailableThreadIDs[newSize - 1] = 0;
              return oldSize;
            }

            function allocThreadID() {
              var nextID = nextAvailableThreadIDs[0];

              if (nextID === 0) {
                return growThreadCountAndReturnNextAvailable();
              }

              nextAvailableThreadIDs[0] = nextAvailableThreadIDs[nextID];
              return nextID;
            }

            function freeThreadID(id) {
              nextAvailableThreadIDs[id] = nextAvailableThreadIDs[0];
              nextAvailableThreadIDs[0] = id;
            } // A reserved attribute.
            // It is handled by React separately and shouldn't be written to the DOM.

            var RESERVED = 0; // A simple string attribute.
            // Attributes that aren't in the whitelist are presumed to have this type.

            var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
            // "enumerated" attributes with "true" and "false" as possible values.
            // When true, it should be set to a "true" string.
            // When false, it should be set to a "false" string.

            var BOOLEANISH_STRING = 2; // A real boolean attribute.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.

            var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.
            // For any other value, should be present with that value.

            var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
            // When falsy, it should be removed.

            var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
            // When falsy, it should be removed.

            var POSITIVE_NUMERIC = 6;
            /* eslint-disable max-len */

            var ATTRIBUTE_NAME_START_CHAR =
              ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
            /* eslint-enable max-len */

            var ATTRIBUTE_NAME_CHAR =
              ATTRIBUTE_NAME_START_CHAR +
              "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
            var ROOT_ATTRIBUTE_NAME = "data-reactroot";
            var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
              "^[" +
                ATTRIBUTE_NAME_START_CHAR +
                "][" +
                ATTRIBUTE_NAME_CHAR +
                "]*$"
            );
            var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
            var illegalAttributeNameCache = {};
            var validatedAttributeNameCache = {};

            function isAttributeNameSafe(attributeName) {
              if (
                hasOwnProperty$1.call(
                  validatedAttributeNameCache,
                  attributeName
                )
              ) {
                return true;
              }

              if (
                hasOwnProperty$1.call(illegalAttributeNameCache, attributeName)
              ) {
                return false;
              }

              if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                validatedAttributeNameCache[attributeName] = true;
                return true;
              }

              illegalAttributeNameCache[attributeName] = true;
              {
                warning$1(false, "Invalid attribute name: `%s`", attributeName);
              }
              return false;
            }

            function shouldIgnoreAttribute(
              name,
              propertyInfo,
              isCustomComponentTag
            ) {
              if (propertyInfo !== null) {
                return propertyInfo.type === RESERVED;
              }

              if (isCustomComponentTag) {
                return false;
              }

              if (
                name.length > 2 &&
                (name[0] === "o" || name[0] === "O") &&
                (name[1] === "n" || name[1] === "N")
              ) {
                return true;
              }

              return false;
            }

            function shouldRemoveAttributeWithWarning(
              name,
              value,
              propertyInfo,
              isCustomComponentTag
            ) {
              if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                return false;
              }

              switch (typeof value) {
                case "function": // $FlowIssue symbol is perfectly valid here

                case "symbol":
                  // eslint-disable-line
                  return true;

                case "boolean": {
                  if (isCustomComponentTag) {
                    return false;
                  }

                  if (propertyInfo !== null) {
                    return !propertyInfo.acceptsBooleans;
                  } else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== "data-" && prefix !== "aria-";
                  }
                }

                default:
                  return false;
              }
            }

            function shouldRemoveAttribute(
              name,
              value,
              propertyInfo,
              isCustomComponentTag
            ) {
              if (value === null || typeof value === "undefined") {
                return true;
              }

              if (
                shouldRemoveAttributeWithWarning(
                  name,
                  value,
                  propertyInfo,
                  isCustomComponentTag
                )
              ) {
                return true;
              }

              if (isCustomComponentTag) {
                return false;
              }

              if (propertyInfo !== null) {
                switch (propertyInfo.type) {
                  case BOOLEAN:
                    return !value;

                  case OVERLOADED_BOOLEAN:
                    return value === false;

                  case NUMERIC:
                    return isNaN(value);

                  case POSITIVE_NUMERIC:
                    return isNaN(value) || value < 1;
                }
              }

              return false;
            }

            function getPropertyInfo(name) {
              return properties.hasOwnProperty(name) ? properties[name] : null;
            }

            function PropertyInfoRecord(
              name,
              type,
              mustUseProperty,
              attributeName,
              attributeNamespace
            ) {
              this.acceptsBooleans =
                type === BOOLEANISH_STRING ||
                type === BOOLEAN ||
                type === OVERLOADED_BOOLEAN;
              this.attributeName = attributeName;
              this.attributeNamespace = attributeNamespace;
              this.mustUseProperty = mustUseProperty;
              this.propertyName = name;
              this.type = type;
            } // When adding attributes to this list, be sure to also add them to
            // the `possibleStandardNames` module to ensure casing and incorrect
            // name warnings.

            var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

            [
              "children",
              "dangerouslySetInnerHTML", // TODO: This prevents the assignment of defaultValue to regular
              // elements (not just inputs). Now that ReactDOMInput assigns to the
              // defaultValue property -- do we need this?
              "defaultValue",
              "defaultChecked",
              "innerHTML",
              "suppressContentEditableWarning",
              "suppressHydrationWarning",
              "style"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  RESERVED,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // A few React string attributes have a different name.
            // This is a mapping from React prop names to the attribute names.

            [
              ["acceptCharset", "accept-charset"],
              ["className", "class"],
              ["htmlFor", "for"],
              ["httpEquiv", "http-equiv"]
            ].forEach(
              function(_ref) {
                var name = _ref[0],
                  attributeName = _ref[1];
                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are "enumerated" HTML attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).

            ["contentEditable", "draggable", "spellCheck", "value"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEANISH_STRING,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are "enumerated" SVG attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).
            // Since these are SVG attributes, their attribute names are case-sensitive.

            [
              "autoReverse",
              "externalResourcesRequired",
              "focusable",
              "preserveAlpha"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEANISH_STRING,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML boolean attributes.

            [
              "allowFullScreen",
              "async", // Note: there is a special case that prevents it from being written to the DOM
              // on the client side because the browsers are inconsistent. Instead we call focus().
              "autoFocus",
              "autoPlay",
              "controls",
              "default",
              "defer",
              "disabled",
              "formNoValidate",
              "hidden",
              "loop",
              "noModule",
              "noValidate",
              "open",
              "playsInline",
              "readOnly",
              "required",
              "reversed",
              "scoped",
              "seamless", // Microdata
              "itemScope"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEAN,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are the few React props that we set as DOM properties
            // rather than attributes. These are all booleans.

            [
              "checked", // Note: `option.selected` is not updated if `select.multiple` is
              // disabled with `removeAttribute`. We have special logic for handling this.
              "multiple",
              "muted",
              "selected"
            ].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  BOOLEAN,
                  true, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML attributes that are "overloaded booleans": they behave like
            // booleans, but can also accept a string value.

            ["capture", "download"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  OVERLOADED_BOOLEAN,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML attributes that must be positive numbers.

            ["cols", "rows", "size", "span"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  POSITIVE_NUMERIC,
                  false, // mustUseProperty
                  name, // attributeName
                  null
                );
              } // attributeNamespace
            ); // These are HTML attributes that must be numbers.

            ["rowSpan", "start"].forEach(
              function(name) {
                properties[name] = new PropertyInfoRecord(
                  name,
                  NUMERIC,
                  false, // mustUseProperty
                  name.toLowerCase(), // attributeName
                  null
                );
              } // attributeNamespace
            );
            var CAMELIZE = /[\-\:]([a-z])/g;

            var capitalize = function(token) {
              return token[1].toUpperCase();
            }; // This is a list of all SVG attributes that need special casing, namespacing,
            // or boolean value assignment. Regular attributes that just accept strings
            // and have the same names are omitted, just like in the HTML whitelist.
            // Some of these attributes can be hard to find. This list was created by
            // scrapping the MDN documentation.

            [
              "accent-height",
              "alignment-baseline",
              "arabic-form",
              "baseline-shift",
              "cap-height",
              "clip-path",
              "clip-rule",
              "color-interpolation",
              "color-interpolation-filters",
              "color-profile",
              "color-rendering",
              "dominant-baseline",
              "enable-background",
              "fill-opacity",
              "fill-rule",
              "flood-color",
              "flood-opacity",
              "font-family",
              "font-size",
              "font-size-adjust",
              "font-stretch",
              "font-style",
              "font-variant",
              "font-weight",
              "glyph-name",
              "glyph-orientation-horizontal",
              "glyph-orientation-vertical",
              "horiz-adv-x",
              "horiz-origin-x",
              "image-rendering",
              "letter-spacing",
              "lighting-color",
              "marker-end",
              "marker-mid",
              "marker-start",
              "overline-position",
              "overline-thickness",
              "paint-order",
              "panose-1",
              "pointer-events",
              "rendering-intent",
              "shape-rendering",
              "stop-color",
              "stop-opacity",
              "strikethrough-position",
              "strikethrough-thickness",
              "stroke-dasharray",
              "stroke-dashoffset",
              "stroke-linecap",
              "stroke-linejoin",
              "stroke-miterlimit",
              "stroke-opacity",
              "stroke-width",
              "text-anchor",
              "text-decoration",
              "text-rendering",
              "underline-position",
              "underline-thickness",
              "unicode-bidi",
              "unicode-range",
              "units-per-em",
              "v-alphabetic",
              "v-hanging",
              "v-ideographic",
              "v-mathematical",
              "vector-effect",
              "vert-adv-y",
              "vert-origin-x",
              "vert-origin-y",
              "word-spacing",
              "writing-mode",
              "xmlns:xlink",
              "x-height"
            ].forEach(
              function(attributeName) {
                var name = attributeName.replace(CAMELIZE, capitalize);
                properties[name] = new PropertyInfoRecord(
                  name,
                  STRING,
                  false, // mustUseProperty
                  attributeName,
                  null
                );
              } // attributeNamespace
            ); // String SVG attributes with the xlink namespace.

            [
              "xlink:actuate",
              "xlink:arcrole",
              "xlink:href",
              "xlink:role",
              "xlink:show",
              "xlink:title",
              "xlink:type"
            ].forEach(function(attributeName) {
              var name = attributeName.replace(CAMELIZE, capitalize);
              properties[name] = new PropertyInfoRecord(
                name,
                STRING,
                false, // mustUseProperty
                attributeName,
                "http://www.w3.org/1999/xlink"
              );
            }); // String SVG attributes with the xml namespace.

            ["xml:base", "xml:lang", "xml:space"].forEach(function(
              attributeName
            ) {
              var name = attributeName.replace(CAMELIZE, capitalize);
              properties[name] = new PropertyInfoRecord(
                name,
                STRING,
                false, // mustUseProperty
                attributeName,
                "http://www.w3.org/XML/1998/namespace"
              );
            }); // Special case: this attribute exists both in HTML and SVG.
            // Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
            // its React `tabIndex` name, like we do for attributes that exist only in HTML.

            properties.tabIndex = new PropertyInfoRecord(
              "tabIndex",
              STRING,
              false, // mustUseProperty
              "tabindex", // attributeName
              null
            ); // code copied and modified from escape-html

            /**
             * Module variables.
             * @private
             */

            var matchHtmlRegExp = /["'&<>]/;
            /**
             * Escapes special characters and HTML entities in a given html string.
             *
             * @param  {string} string HTML string to escape for later insertion
             * @return {string}
             * @public
             */

            function escapeHtml(string) {
              var str = "" + string;
              var match = matchHtmlRegExp.exec(str);

              if (!match) {
                return str;
              }

              var escape = void 0;
              var html = "";
              var index = void 0;
              var lastIndex = 0;

              for (index = match.index; index < str.length; index++) {
                switch (str.charCodeAt(index)) {
                  case 34:
                    // "
                    escape = "&quot;";
                    break;

                  case 38:
                    // &
                    escape = "&amp;";
                    break;

                  case 39:
                    // '
                    escape = "&#x27;"; // modified from escape-html; used to be '&#39'

                    break;

                  case 60:
                    // <
                    escape = "&lt;";
                    break;

                  case 62:
                    // >
                    escape = "&gt;";
                    break;

                  default:
                    continue;
                }

                if (lastIndex !== index) {
                  html += str.substring(lastIndex, index);
                }

                lastIndex = index + 1;
                html += escape;
              }

              return lastIndex !== index
                ? html + str.substring(lastIndex, index)
                : html;
            } // end code copied and modified from escape-html

            /**
             * Escapes text to prevent scripting attacks.
             *
             * @param {*} text Text value to escape.
             * @return {string} An escaped string.
             */

            function escapeTextForBrowser(text) {
              if (typeof text === "boolean" || typeof text === "number") {
                // this shortcircuit helps perf for types that we know will never have
                // special characters, especially given that this function is used often
                // for numeric dom ids.
                return "" + text;
              }

              return escapeHtml(text);
            }
            /**
             * Escapes attribute value to prevent scripting attacks.
             *
             * @param {*} value Value to escape.
             * @return {string} An escaped string.
             */

            function quoteAttributeValueForBrowser(value) {
              return '"' + escapeTextForBrowser(value) + '"';
            }
            /**
             * Operations for dealing with DOM properties.
             */

            /**
             * Creates markup for the ID property.
             *
             * @param {string} id Unescaped ID.
             * @return {string} Markup string.
             */

            function createMarkupForRoot() {
              return ROOT_ATTRIBUTE_NAME + '=""';
            }
            /**
             * Creates markup for a property.
             *
             * @param {string} name
             * @param {*} value
             * @return {?string} Markup string, or null if the property was invalid.
             */

            function createMarkupForProperty(name, value) {
              var propertyInfo = getPropertyInfo(name);

              if (
                name !== "style" &&
                shouldIgnoreAttribute(name, propertyInfo, false)
              ) {
                return "";
              }

              if (shouldRemoveAttribute(name, value, propertyInfo, false)) {
                return "";
              }

              if (propertyInfo !== null) {
                var attributeName = propertyInfo.attributeName;
                var type = propertyInfo.type;

                if (
                  type === BOOLEAN ||
                  (type === OVERLOADED_BOOLEAN && value === true)
                ) {
                  return attributeName + '=""';
                } else {
                  return (
                    attributeName + "=" + quoteAttributeValueForBrowser(value)
                  );
                }
              } else if (isAttributeNameSafe(name)) {
                return name + "=" + quoteAttributeValueForBrowser(value);
              }

              return "";
            }
            /**
             * Creates markup for a custom property.
             *
             * @param {string} name
             * @param {*} value
             * @return {string} Markup string, or empty string if the property was invalid.
             */

            function createMarkupForCustomAttribute(name, value) {
              if (!isAttributeNameSafe(name) || value == null) {
                return "";
              }

              return name + "=" + quoteAttributeValueForBrowser(value);
            }

            function areHookInputsEqual(arr1, arr2) {
              // Don't bother comparing lengths in prod because these arrays should be
              // passed inline.
              {
                !(arr1.length === arr2.length)
                  ? warning$1(
                      false,
                      "Detected a variable number of hook dependencies. The length of the " +
                        "dependencies array should be constant between renders.\n\n" +
                        "Previous: %s\n" +
                        "Incoming: %s",
                      arr1.join(", "),
                      arr2.join(", ")
                    )
                  : void 0;
              }

              for (var i = 0; i < arr1.length; i++) {
                // Inlined Object.is polyfill.
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
                var val1 = arr1[i];
                var val2 = arr2[i];

                if (
                  (val1 === val2 && (val1 !== 0 || 1 / val1 === 1 / val2)) ||
                  (val1 !== val1 && val2 !== val2) // eslint-disable-line no-self-compare
                ) {
                  continue;
                }

                return false;
              }

              return true;
            }

            var currentlyRenderingComponent = null;
            var firstWorkInProgressHook = null;
            var workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook

            var isReRender = false; // Whether an update was scheduled during the currently executing render pass.

            var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

            var renderPhaseUpdates = null; // Counter to prevent infinite loops.

            var numberOfReRenders = 0;
            var RE_RENDER_LIMIT = 25;

            function resolveCurrentlyRenderingComponent() {
              !(currentlyRenderingComponent !== null)
                ? invariant(
                    false,
                    "Hooks can only be called inside the body of a function component."
                  )
                : void 0;
              return currentlyRenderingComponent;
            }

            function createHook() {
              return {
                memoizedState: null,
                queue: null,
                next: null
              };
            }

            function createWorkInProgressHook() {
              if (workInProgressHook === null) {
                // This is the first hook in the list
                if (firstWorkInProgressHook === null) {
                  isReRender = false;
                  firstWorkInProgressHook = workInProgressHook = createHook();
                } else {
                  // There's already a work-in-progress. Reuse it.
                  isReRender = true;
                  workInProgressHook = firstWorkInProgressHook;
                }
              } else {
                if (workInProgressHook.next === null) {
                  isReRender = false; // Append to the end of the list

                  workInProgressHook = workInProgressHook.next = createHook();
                } else {
                  // There's already a work-in-progress. Reuse it.
                  isReRender = true;
                  workInProgressHook = workInProgressHook.next;
                }
              }

              return workInProgressHook;
            }

            function prepareToUseHooks(componentIdentity) {
              currentlyRenderingComponent = componentIdentity; // The following should have already been reset
              // didScheduleRenderPhaseUpdate = false;
              // firstWorkInProgressHook = null;
              // numberOfReRenders = 0;
              // renderPhaseUpdates = null;
              // workInProgressHook = null;
            }

            function finishHooks(Component, props, children, refOrContext) {
              // This must be called after every function component to prevent hooks from
              // being used in classes.
              while (didScheduleRenderPhaseUpdate) {
                // Updates were scheduled during the render phase. They are stored in
                // the `renderPhaseUpdates` map. Call the component again, reusing the
                // work-in-progress hooks and applying the additional updates on top. Keep
                // restarting until no more updates are scheduled.
                didScheduleRenderPhaseUpdate = false;
                numberOfReRenders += 1; // Start over from the beginning of the list

                workInProgressHook = null;
                children = Component(props, refOrContext);
              }

              currentlyRenderingComponent = null;
              firstWorkInProgressHook = null;
              numberOfReRenders = 0;
              renderPhaseUpdates = null;
              workInProgressHook = null; // These were reset above
              // currentlyRenderingComponent = null;
              // didScheduleRenderPhaseUpdate = false;
              // firstWorkInProgressHook = null;
              // numberOfReRenders = 0;
              // renderPhaseUpdates = null;
              // workInProgressHook = null;

              return children;
            }

            function readContext(context, observedBits) {
              var threadID = currentThreadID;
              validateContextBounds(context, threadID);
              return context[threadID];
            }

            function useContext(context, observedBits) {
              resolveCurrentlyRenderingComponent();
              var threadID = currentThreadID;
              validateContextBounds(context, threadID);
              return context[threadID];
            }

            function basicStateReducer(state, action) {
              return typeof action === "function" ? action(state) : action;
            }

            function useState(initialState) {
              return useReducer(
                basicStateReducer, // useReducer has a special case to support lazy useState initializers
                initialState
              );
            }

            function useReducer(reducer, initialState, initialAction) {
              currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
              workInProgressHook = createWorkInProgressHook();

              if (isReRender) {
                // This is a re-render. Apply the new render phase updates to the previous
                var _queue = workInProgressHook.queue;
                var _dispatch = _queue.dispatch;

                if (renderPhaseUpdates !== null) {
                  // Render phase updates are stored in a map of queue -> linked list
                  var firstRenderPhaseUpdate = renderPhaseUpdates.get(_queue);

                  if (firstRenderPhaseUpdate !== undefined) {
                    renderPhaseUpdates.delete(_queue);
                    var newState = workInProgressHook.memoizedState;
                    var update = firstRenderPhaseUpdate;

                    do {
                      // Process this render phase update. We don't have to check the
                      // priority because it will always be the same as the current
                      // render's.
                      var _action = update.action;
                      newState = reducer(newState, _action);
                      update = update.next;
                    } while (update !== null);

                    workInProgressHook.memoizedState = newState;
                    return [newState, _dispatch];
                  }
                }

                return [workInProgressHook.memoizedState, _dispatch];
              } else {
                if (reducer === basicStateReducer) {
                  // Special case for `useState`.
                  if (typeof initialState === "function") {
                    initialState = initialState();
                  }
                } else if (
                  initialAction !== undefined &&
                  initialAction !== null
                ) {
                  initialState = reducer(initialState, initialAction);
                }

                workInProgressHook.memoizedState = initialState;

                var _queue2 = (workInProgressHook.queue = {
                  last: null,
                  dispatch: null
                });

                var _dispatch2 = (_queue2.dispatch = dispatchAction.bind(
                  null,
                  currentlyRenderingComponent,
                  _queue2
                ));

                return [workInProgressHook.memoizedState, _dispatch2];
              }
            }

            function useMemo(nextCreate, inputs) {
              currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
              workInProgressHook = createWorkInProgressHook();
              var nextInputs =
                inputs !== undefined && inputs !== null ? inputs : [nextCreate];

              if (
                workInProgressHook !== null &&
                workInProgressHook.memoizedState !== null
              ) {
                var prevState = workInProgressHook.memoizedState;
                var prevInputs = prevState[1];

                if (areHookInputsEqual(nextInputs, prevInputs)) {
                  return prevState[0];
                }
              }

              var nextValue = nextCreate();
              workInProgressHook.memoizedState = [nextValue, nextInputs];
              return nextValue;
            }

            function useRef(initialValue) {
              currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
              workInProgressHook = createWorkInProgressHook();
              var previousRef = workInProgressHook.memoizedState;

              if (previousRef === null) {
                var ref = {
                  current: initialValue
                };
                {
                  Object.seal(ref);
                }
                workInProgressHook.memoizedState = ref;
                return ref;
              } else {
                return previousRef;
              }
            }

            function useMutationEffect(create, inputs) {
              warning$1(
                false,
                "useMutationEffect does nothing on the server, because its effect cannot " +
                  "be encoded into the server renderer's output format. This will lead " +
                  "to a mismatch between the initial, non-hydrated UI and the intended " +
                  "UI. To avoid this, useMutationEffect should only be used in " +
                  "components that render exclusively on the client."
              );
            }

            function useLayoutEffect(create, inputs) {
              warning$1(
                false,
                "useLayoutEffect does nothing on the server, because its effect cannot " +
                  "be encoded into the server renderer's output format. This will lead " +
                  "to a mismatch between the initial, non-hydrated UI and the intended " +
                  "UI. To avoid this, useLayoutEffect should only be used in " +
                  "components that render exclusively on the client."
              );
            }

            function dispatchAction(componentIdentity, queue, action) {
              !(numberOfReRenders < RE_RENDER_LIMIT)
                ? invariant(
                    false,
                    "Too many re-renders. React limits the number of renders to prevent an infinite loop."
                  )
                : void 0;

              if (componentIdentity === currentlyRenderingComponent) {
                // This is a render phase update. Stash it in a lazily-created map of
                // queue -> linked list of updates. After this render pass, we'll restart
                // and apply the stashed updates on top of the work-in-progress hook.
                didScheduleRenderPhaseUpdate = true;
                var update = {
                  action: action,
                  next: null
                };

                if (renderPhaseUpdates === null) {
                  renderPhaseUpdates = new Map();
                }

                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

                if (firstRenderPhaseUpdate === undefined) {
                  renderPhaseUpdates.set(queue, update);
                } else {
                  // Append the update to the end of the list.
                  var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

                  while (lastRenderPhaseUpdate.next !== null) {
                    lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                  }

                  lastRenderPhaseUpdate.next = update;
                }
              } else {
                // This means an update has happened after the function component has
                // returned. On the server this is a no-op. In React Fiber, the update
                // would be scheduled for a future render.
              }
            }

            function noop() {}

            var currentThreadID = 0;

            function setCurrentThreadID(threadID) {
              currentThreadID = threadID;
            }

            var Dispatcher = {
              readContext: readContext,
              useContext: useContext,
              useMemo: useMemo,
              useReducer: useReducer,
              useRef: useRef,
              useState: useState,
              useMutationEffect: useMutationEffect,
              useLayoutEffect: useLayoutEffect,
              // useImperativeMethods is not run in the server environment
              useImperativeMethods: noop,
              // Callbacks are not run in the server environment.
              useCallback: noop,
              // Effects are not run in the server environment.
              useEffect: noop
            };
            var DispatcherWithoutHooks = {
              readContext: readContext
            };
            var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
            var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
            var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
            var Namespaces = {
              html: HTML_NAMESPACE,
              mathml: MATH_NAMESPACE,
              svg: SVG_NAMESPACE
            }; // Assumes there is no parent namespace.

            function getIntrinsicNamespace(type) {
              switch (type) {
                case "svg":
                  return SVG_NAMESPACE;

                case "math":
                  return MATH_NAMESPACE;

                default:
                  return HTML_NAMESPACE;
              }
            }

            function getChildNamespace(parentNamespace, type) {
              if (
                parentNamespace == null ||
                parentNamespace === HTML_NAMESPACE
              ) {
                // No (or default) parent namespace: potential entry point.
                return getIntrinsicNamespace(type);
              }

              if (
                parentNamespace === SVG_NAMESPACE &&
                type === "foreignObject"
              ) {
                // We're leaving SVG.
                return HTML_NAMESPACE;
              } // By default, pass namespace below.

              return parentNamespace;
            }

            var ReactDebugCurrentFrame$2 = null;
            var ReactControlledValuePropTypes = {
              checkPropTypes: null
            };
            {
              ReactDebugCurrentFrame$2 =
                ReactSharedInternals.ReactDebugCurrentFrame;
              var hasReadOnlyValue = {
                button: true,
                checkbox: true,
                image: true,
                hidden: true,
                radio: true,
                reset: true,
                submit: true
              };
              var propTypes = {
                value: function(props, propName, componentName) {
                  if (
                    hasReadOnlyValue[props.type] ||
                    props.onChange ||
                    props.readOnly ||
                    props.disabled ||
                    props[propName] == null
                  ) {
                    return null;
                  }

                  return new Error(
                    "You provided a `value` prop to a form field without an " +
                      "`onChange` handler. This will render a read-only field. If " +
                      "the field should be mutable use `defaultValue`. Otherwise, " +
                      "set either `onChange` or `readOnly`."
                  );
                },
                checked: function(props, propName, componentName) {
                  if (
                    props.onChange ||
                    props.readOnly ||
                    props.disabled ||
                    props[propName] == null
                  ) {
                    return null;
                  }

                  return new Error(
                    "You provided a `checked` prop to a form field without an " +
                      "`onChange` handler. This will render a read-only field. If " +
                      "the field should be mutable use `defaultChecked`. Otherwise, " +
                      "set either `onChange` or `readOnly`."
                  );
                }
              };
              /**
               * Provide a linked `value` attribute for controlled forms. You should not use
               * this outside of the ReactDOM controlled form components.
               */

              ReactControlledValuePropTypes.checkPropTypes = function(
                tagName,
                props
              ) {
                checkPropTypes(
                  propTypes,
                  props,
                  "prop",
                  tagName,
                  ReactDebugCurrentFrame$2.getStackAddendum
                );
              };
            } // For HTML, certain tags should omit their close tag. We keep a whitelist for
            // those special-case tags.

            var omittedCloseTags = {
              area: true,
              base: true,
              br: true,
              col: true,
              embed: true,
              hr: true,
              img: true,
              input: true,
              keygen: true,
              link: true,
              meta: true,
              param: true,
              source: true,
              track: true,
              wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
            }; // For HTML, certain tags cannot have children. This has the same purpose as
            // `omittedCloseTags` except that `menuitem` should still have its closing tag.

            var voidElementTags = _assign(
              {
                menuitem: true
              },
              omittedCloseTags
            ); // TODO: We can remove this if we add invariantWithStack()
            // or add stack by default to invariants where possible.

            var HTML = "__html";
            var ReactDebugCurrentFrame$3 = null;
            {
              ReactDebugCurrentFrame$3 =
                ReactSharedInternals.ReactDebugCurrentFrame;
            }

            function assertValidProps(tag, props) {
              if (!props) {
                return;
              } // Note the use of `==` which checks for null or undefined.

              if (voidElementTags[tag]) {
                !(
                  props.children == null &&
                  props.dangerouslySetInnerHTML == null
                )
                  ? invariant(
                      false,
                      "%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s",
                      tag,
                      ReactDebugCurrentFrame$3.getStackAddendum()
                    )
                  : void 0;
              }

              if (props.dangerouslySetInnerHTML != null) {
                !(props.children == null)
                  ? invariant(
                      false,
                      "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                    )
                  : void 0;
                !(
                  typeof props.dangerouslySetInnerHTML === "object" &&
                  HTML in props.dangerouslySetInnerHTML
                )
                  ? invariant(
                      false,
                      "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."
                    )
                  : void 0;
              }

              {
                !(
                  props.suppressContentEditableWarning ||
                  !props.contentEditable ||
                  props.children == null
                )
                  ? warning$1(
                      false,
                      "A component is `contentEditable` and contains `children` managed by " +
                        "React. It is now your responsibility to guarantee that none of " +
                        "those nodes are unexpectedly modified or duplicated. This is " +
                        "probably not intentional."
                    )
                  : void 0;
              }
              !(props.style == null || typeof props.style === "object")
                ? invariant(
                    false,
                    "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",
                    ReactDebugCurrentFrame$3.getStackAddendum()
                  )
                : void 0;
            }
            /**
             * CSS properties which accept numbers but are not in units of "px".
             */

            var isUnitlessNumber = {
              animationIterationCount: true,
              borderImageOutset: true,
              borderImageSlice: true,
              borderImageWidth: true,
              boxFlex: true,
              boxFlexGroup: true,
              boxOrdinalGroup: true,
              columnCount: true,
              columns: true,
              flex: true,
              flexGrow: true,
              flexPositive: true,
              flexShrink: true,
              flexNegative: true,
              flexOrder: true,
              gridArea: true,
              gridRow: true,
              gridRowEnd: true,
              gridRowSpan: true,
              gridRowStart: true,
              gridColumn: true,
              gridColumnEnd: true,
              gridColumnSpan: true,
              gridColumnStart: true,
              fontWeight: true,
              lineClamp: true,
              lineHeight: true,
              opacity: true,
              order: true,
              orphans: true,
              tabSize: true,
              widows: true,
              zIndex: true,
              zoom: true,
              // SVG-related properties
              fillOpacity: true,
              floodOpacity: true,
              stopOpacity: true,
              strokeDasharray: true,
              strokeDashoffset: true,
              strokeMiterlimit: true,
              strokeOpacity: true,
              strokeWidth: true
            };
            /**
             * @param {string} prefix vendor-specific prefix, eg: Webkit
             * @param {string} key style name, eg: transitionDuration
             * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
             * WebkitTransitionDuration
             */

            function prefixKey(prefix, key) {
              return prefix + key.charAt(0).toUpperCase() + key.substring(1);
            }
            /**
             * Support style names that may come passed in prefixed by adding permutations
             * of vendor prefixes.
             */

            var prefixes = ["Webkit", "ms", "Moz", "O"]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
            // infinite loop, because it iterates over the newly added props too.

            Object.keys(isUnitlessNumber).forEach(function(prop) {
              prefixes.forEach(function(prefix) {
                isUnitlessNumber[prefixKey(prefix, prop)] =
                  isUnitlessNumber[prop];
              });
            });
            /**
             * Convert a value into the proper css writable value. The style name `name`
             * should be logical (no hyphens), as specified
             * in `CSSProperty.isUnitlessNumber`.
             *
             * @param {string} name CSS property name such as `topMargin`.
             * @param {*} value CSS property value such as `10px`.
             * @return {string} Normalized style value with dimensions applied.
             */

            function dangerousStyleValue(name, value, isCustomProperty) {
              // Note that we've removed escapeTextForBrowser() calls here since the
              // whole string will be escaped when the attribute is injected into
              // the markup. If you provide unsafe user data here they can inject
              // arbitrary CSS which may be problematic (I couldn't repro this):
              // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
              // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
              // This is not an XSS hole but instead a potential CSS injection issue
              // which has lead to a greater discussion about how we're going to
              // trust URLs moving forward. See #2115901
              var isEmpty =
                value == null || typeof value === "boolean" || value === "";

              if (isEmpty) {
                return "";
              }

              if (
                !isCustomProperty &&
                typeof value === "number" &&
                value !== 0 &&
                !(
                  isUnitlessNumber.hasOwnProperty(name) &&
                  isUnitlessNumber[name]
                )
              ) {
                return value + "px"; // Presumes implicit 'px' suffix for unitless numbers
              }

              return ("" + value).trim();
            }

            var uppercasePattern = /([A-Z])/g;
            var msPattern = /^ms-/;
            /**
             * Hyphenates a camelcased CSS property name, for example:
             *
             *   > hyphenateStyleName('backgroundColor')
             *   < "background-color"
             *   > hyphenateStyleName('MozTransition')
             *   < "-moz-transition"
             *   > hyphenateStyleName('msTransition')
             *   < "-ms-transition"
             *
             * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
             * is converted to `-ms-`.
             */

            function hyphenateStyleName(name) {
              return name
                .replace(uppercasePattern, "-$1")
                .toLowerCase()
                .replace(msPattern, "-ms-");
            }

            function isCustomComponent(tagName, props) {
              if (tagName.indexOf("-") === -1) {
                return typeof props.is === "string";
              }

              switch (tagName) {
                // These are reserved SVG and MathML elements.
                // We don't mind this whitelist too much because we expect it to never grow.
                // The alternative is to track the namespace in a few places which is convoluted.
                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                case "annotation-xml":
                case "color-profile":
                case "font-face":
                case "font-face-src":
                case "font-face-uri":
                case "font-face-format":
                case "font-face-name":
                case "missing-glyph":
                  return false;

                default:
                  return true;
              }
            }

            var warnValidStyle = function() {};

            {
              // 'msTransform' is correct, but the other prefixes should be capitalized
              var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
              var msPattern$1 = /^-ms-/;
              var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

              var badStyleValueWithSemicolonPattern = /;\s*$/;
              var warnedStyleNames = {};
              var warnedStyleValues = {};
              var warnedForNaNValue = false;
              var warnedForInfinityValue = false;

              var camelize = function(string) {
                return string.replace(hyphenPattern, function(_, character) {
                  return character.toUpperCase();
                });
              };

              var warnHyphenatedStyleName = function(name) {
                if (
                  warnedStyleNames.hasOwnProperty(name) &&
                  warnedStyleNames[name]
                ) {
                  return;
                }

                warnedStyleNames[name] = true;
                warning$1(
                  false,
                  "Unsupported style property %s. Did you mean %s?",
                  name, // As Andi Smith suggests
                  // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                  // is converted to lowercase `ms`.
                  camelize(name.replace(msPattern$1, "ms-"))
                );
              };

              var warnBadVendoredStyleName = function(name) {
                if (
                  warnedStyleNames.hasOwnProperty(name) &&
                  warnedStyleNames[name]
                ) {
                  return;
                }

                warnedStyleNames[name] = true;
                warning$1(
                  false,
                  "Unsupported vendor-prefixed style property %s. Did you mean %s?",
                  name,
                  name.charAt(0).toUpperCase() + name.slice(1)
                );
              };

              var warnStyleValueWithSemicolon = function(name, value) {
                if (
                  warnedStyleValues.hasOwnProperty(value) &&
                  warnedStyleValues[value]
                ) {
                  return;
                }

                warnedStyleValues[value] = true;
                warning$1(
                  false,
                  "Style property values shouldn't contain a semicolon. " +
                    'Try "%s: %s" instead.',
                  name,
                  value.replace(badStyleValueWithSemicolonPattern, "")
                );
              };

              var warnStyleValueIsNaN = function(name, value) {
                if (warnedForNaNValue) {
                  return;
                }

                warnedForNaNValue = true;
                warning$1(
                  false,
                  "`NaN` is an invalid value for the `%s` css style property.",
                  name
                );
              };

              var warnStyleValueIsInfinity = function(name, value) {
                if (warnedForInfinityValue) {
                  return;
                }

                warnedForInfinityValue = true;
                warning$1(
                  false,
                  "`Infinity` is an invalid value for the `%s` css style property.",
                  name
                );
              };

              warnValidStyle = function(name, value) {
                if (name.indexOf("-") > -1) {
                  warnHyphenatedStyleName(name);
                } else if (badVendoredStyleNamePattern.test(name)) {
                  warnBadVendoredStyleName(name);
                } else if (badStyleValueWithSemicolonPattern.test(value)) {
                  warnStyleValueWithSemicolon(name, value);
                }

                if (typeof value === "number") {
                  if (isNaN(value)) {
                    warnStyleValueIsNaN(name, value);
                  } else if (!isFinite(value)) {
                    warnStyleValueIsInfinity(name, value);
                  }
                }
              };
            }
            var warnValidStyle$1 = warnValidStyle;
            var ariaProperties = {
              "aria-current": 0,
              // state
              "aria-details": 0,
              "aria-disabled": 0,
              // state
              "aria-hidden": 0,
              // state
              "aria-invalid": 0,
              // state
              "aria-keyshortcuts": 0,
              "aria-label": 0,
              "aria-roledescription": 0,
              // Widget Attributes
              "aria-autocomplete": 0,
              "aria-checked": 0,
              "aria-expanded": 0,
              "aria-haspopup": 0,
              "aria-level": 0,
              "aria-modal": 0,
              "aria-multiline": 0,
              "aria-multiselectable": 0,
              "aria-orientation": 0,
              "aria-placeholder": 0,
              "aria-pressed": 0,
              "aria-readonly": 0,
              "aria-required": 0,
              "aria-selected": 0,
              "aria-sort": 0,
              "aria-valuemax": 0,
              "aria-valuemin": 0,
              "aria-valuenow": 0,
              "aria-valuetext": 0,
              // Live Region Attributes
              "aria-atomic": 0,
              "aria-busy": 0,
              "aria-live": 0,
              "aria-relevant": 0,
              // Drag-and-Drop Attributes
              "aria-dropeffect": 0,
              "aria-grabbed": 0,
              // Relationship Attributes
              "aria-activedescendant": 0,
              "aria-colcount": 0,
              "aria-colindex": 0,
              "aria-colspan": 0,
              "aria-controls": 0,
              "aria-describedby": 0,
              "aria-errormessage": 0,
              "aria-flowto": 0,
              "aria-labelledby": 0,
              "aria-owns": 0,
              "aria-posinset": 0,
              "aria-rowcount": 0,
              "aria-rowindex": 0,
              "aria-rowspan": 0,
              "aria-setsize": 0
            };
            var warnedProperties = {};
            var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel = new RegExp(
              "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
            );
            var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

            function validateProperty(tagName, name) {
              if (
                hasOwnProperty$2.call(warnedProperties, name) &&
                warnedProperties[name]
              ) {
                return true;
              }

              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName)
                  ? ariaName
                  : null; // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.

                if (correctName == null) {
                  warning$1(
                    false,
                    "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                    name
                  );
                  warnedProperties[name] = true;
                  return true;
                } // aria-* attributes should be lowercase; suggest the lowercase version.

                if (name !== correctName) {
                  warning$1(
                    false,
                    "Invalid ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    correctName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }

              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                  ? lowerCasedName
                  : null; // If this is an aria-* attribute, but is not listed in the known DOM
                // DOM properties, then it is an invalid aria-* attribute.

                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                } // aria-* attributes should be lowercase; suggest the lowercase version.

                if (name !== standardName) {
                  warning$1(
                    false,
                    "Unknown ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    standardName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }

              return true;
            }

            function warnInvalidARIAProps(type, props) {
              var invalidProps = [];

              for (var key in props) {
                var isValid = validateProperty(type, key);

                if (!isValid) {
                  invalidProps.push(key);
                }
              }

              var unknownPropString = invalidProps
                .map(function(prop) {
                  return "`" + prop + "`";
                })
                .join(", ");

              if (invalidProps.length === 1) {
                warning$1(
                  false,
                  "Invalid aria prop %s on <%s> tag. " +
                    "For details, see https://fb.me/invalid-aria-prop",
                  unknownPropString,
                  type
                );
              } else if (invalidProps.length > 1) {
                warning$1(
                  false,
                  "Invalid aria props %s on <%s> tag. " +
                    "For details, see https://fb.me/invalid-aria-prop",
                  unknownPropString,
                  type
                );
              }
            }

            function validateProperties(type, props) {
              if (isCustomComponent(type, props)) {
                return;
              }

              warnInvalidARIAProps(type, props);
            }

            var didWarnValueNull = false;

            function validateProperties$1(type, props) {
              if (
                type !== "input" &&
                type !== "textarea" &&
                type !== "select"
              ) {
                return;
              }

              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;

                if (type === "select" && props.multiple) {
                  warning$1(
                    false,
                    "`value` prop on `%s` should not be null. " +
                      "Consider using an empty array when `multiple` is set to `true` " +
                      "to clear the component or `undefined` for uncontrolled components.",
                    type
                  );
                } else {
                  warning$1(
                    false,
                    "`value` prop on `%s` should not be null. " +
                      "Consider using an empty string to clear the component or `undefined` " +
                      "for uncontrolled components.",
                    type
                  );
                }
              }
            }
            /**
             * Registers plugins so that they can extract and dispatch events.
             *
             * @see {EventPluginHub}
             */

            /**
             * Ordered list of injected plugins.
             */

            /**
             * Mapping from event name to dispatch config
             */

            /**
             * Mapping from registration name to plugin module
             */

            var registrationNameModules = {};
            /**
             * Mapping from registration name to event name
             */

            /**
             * Mapping from lowercase registration names to the properly cased version,
             * used to warn in the case of missing event handlers. Available
             * only in true.
             * @type {Object}
             */

            var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

            /**
             * Injects an ordering of plugins (by plugin name). This allows the ordering
             * to be decoupled from injection of the actual plugins so that ordering is
             * always deterministic regardless of packaging, on-the-fly injection, etc.
             *
             * @param {array} InjectedEventPluginOrder
             * @internal
             * @see {EventPluginHub.injection.injectEventPluginOrder}
             */

            /**
             * Injects plugins to be used by `EventPluginHub`. The plugin names must be
             * in the ordering injected by `injectEventPluginOrder`.
             *
             * Plugins can be injected as part of page initialization or on-the-fly.
             *
             * @param {object} injectedNamesToPlugins Map from names to plugin modules.
             * @internal
             * @see {EventPluginHub.injection.injectEventPluginsByName}
             */
            // When adding attributes to the HTML or SVG whitelist, be sure to
            // also add them to this module to ensure casing and incorrect name
            // warnings.

            var possibleStandardNames = {
              // HTML
              accept: "accept",
              acceptcharset: "acceptCharset",
              "accept-charset": "acceptCharset",
              accesskey: "accessKey",
              action: "action",
              allowfullscreen: "allowFullScreen",
              alt: "alt",
              as: "as",
              async: "async",
              autocapitalize: "autoCapitalize",
              autocomplete: "autoComplete",
              autocorrect: "autoCorrect",
              autofocus: "autoFocus",
              autoplay: "autoPlay",
              autosave: "autoSave",
              capture: "capture",
              cellpadding: "cellPadding",
              cellspacing: "cellSpacing",
              challenge: "challenge",
              charset: "charSet",
              checked: "checked",
              children: "children",
              cite: "cite",
              class: "className",
              classid: "classID",
              classname: "className",
              cols: "cols",
              colspan: "colSpan",
              content: "content",
              contenteditable: "contentEditable",
              contextmenu: "contextMenu",
              controls: "controls",
              controlslist: "controlsList",
              coords: "coords",
              crossorigin: "crossOrigin",
              dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
              data: "data",
              datetime: "dateTime",
              default: "default",
              defaultchecked: "defaultChecked",
              defaultvalue: "defaultValue",
              defer: "defer",
              dir: "dir",
              disabled: "disabled",
              download: "download",
              draggable: "draggable",
              enctype: "encType",
              for: "htmlFor",
              form: "form",
              formmethod: "formMethod",
              formaction: "formAction",
              formenctype: "formEncType",
              formnovalidate: "formNoValidate",
              formtarget: "formTarget",
              frameborder: "frameBorder",
              headers: "headers",
              height: "height",
              hidden: "hidden",
              high: "high",
              href: "href",
              hreflang: "hrefLang",
              htmlfor: "htmlFor",
              httpequiv: "httpEquiv",
              "http-equiv": "httpEquiv",
              icon: "icon",
              id: "id",
              innerhtml: "innerHTML",
              inputmode: "inputMode",
              integrity: "integrity",
              is: "is",
              itemid: "itemID",
              itemprop: "itemProp",
              itemref: "itemRef",
              itemscope: "itemScope",
              itemtype: "itemType",
              keyparams: "keyParams",
              keytype: "keyType",
              kind: "kind",
              label: "label",
              lang: "lang",
              list: "list",
              loop: "loop",
              low: "low",
              manifest: "manifest",
              marginwidth: "marginWidth",
              marginheight: "marginHeight",
              max: "max",
              maxlength: "maxLength",
              media: "media",
              mediagroup: "mediaGroup",
              method: "method",
              min: "min",
              minlength: "minLength",
              multiple: "multiple",
              muted: "muted",
              name: "name",
              nomodule: "noModule",
              nonce: "nonce",
              novalidate: "noValidate",
              open: "open",
              optimum: "optimum",
              pattern: "pattern",
              placeholder: "placeholder",
              playsinline: "playsInline",
              poster: "poster",
              preload: "preload",
              profile: "profile",
              radiogroup: "radioGroup",
              readonly: "readOnly",
              referrerpolicy: "referrerPolicy",
              rel: "rel",
              required: "required",
              reversed: "reversed",
              role: "role",
              rows: "rows",
              rowspan: "rowSpan",
              sandbox: "sandbox",
              scope: "scope",
              scoped: "scoped",
              scrolling: "scrolling",
              seamless: "seamless",
              selected: "selected",
              shape: "shape",
              size: "size",
              sizes: "sizes",
              span: "span",
              spellcheck: "spellCheck",
              src: "src",
              srcdoc: "srcDoc",
              srclang: "srcLang",
              srcset: "srcSet",
              start: "start",
              step: "step",
              style: "style",
              summary: "summary",
              tabindex: "tabIndex",
              target: "target",
              title: "title",
              type: "type",
              usemap: "useMap",
              value: "value",
              width: "width",
              wmode: "wmode",
              wrap: "wrap",
              // SVG
              about: "about",
              accentheight: "accentHeight",
              "accent-height": "accentHeight",
              accumulate: "accumulate",
              additive: "additive",
              alignmentbaseline: "alignmentBaseline",
              "alignment-baseline": "alignmentBaseline",
              allowreorder: "allowReorder",
              alphabetic: "alphabetic",
              amplitude: "amplitude",
              arabicform: "arabicForm",
              "arabic-form": "arabicForm",
              ascent: "ascent",
              attributename: "attributeName",
              attributetype: "attributeType",
              autoreverse: "autoReverse",
              azimuth: "azimuth",
              basefrequency: "baseFrequency",
              baselineshift: "baselineShift",
              "baseline-shift": "baselineShift",
              baseprofile: "baseProfile",
              bbox: "bbox",
              begin: "begin",
              bias: "bias",
              by: "by",
              calcmode: "calcMode",
              capheight: "capHeight",
              "cap-height": "capHeight",
              clip: "clip",
              clippath: "clipPath",
              "clip-path": "clipPath",
              clippathunits: "clipPathUnits",
              cliprule: "clipRule",
              "clip-rule": "clipRule",
              color: "color",
              colorinterpolation: "colorInterpolation",
              "color-interpolation": "colorInterpolation",
              colorinterpolationfilters: "colorInterpolationFilters",
              "color-interpolation-filters": "colorInterpolationFilters",
              colorprofile: "colorProfile",
              "color-profile": "colorProfile",
              colorrendering: "colorRendering",
              "color-rendering": "colorRendering",
              contentscripttype: "contentScriptType",
              contentstyletype: "contentStyleType",
              cursor: "cursor",
              cx: "cx",
              cy: "cy",
              d: "d",
              datatype: "datatype",
              decelerate: "decelerate",
              descent: "descent",
              diffuseconstant: "diffuseConstant",
              direction: "direction",
              display: "display",
              divisor: "divisor",
              dominantbaseline: "dominantBaseline",
              "dominant-baseline": "dominantBaseline",
              dur: "dur",
              dx: "dx",
              dy: "dy",
              edgemode: "edgeMode",
              elevation: "elevation",
              enablebackground: "enableBackground",
              "enable-background": "enableBackground",
              end: "end",
              exponent: "exponent",
              externalresourcesrequired: "externalResourcesRequired",
              fill: "fill",
              fillopacity: "fillOpacity",
              "fill-opacity": "fillOpacity",
              fillrule: "fillRule",
              "fill-rule": "fillRule",
              filter: "filter",
              filterres: "filterRes",
              filterunits: "filterUnits",
              floodopacity: "floodOpacity",
              "flood-opacity": "floodOpacity",
              floodcolor: "floodColor",
              "flood-color": "floodColor",
              focusable: "focusable",
              fontfamily: "fontFamily",
              "font-family": "fontFamily",
              fontsize: "fontSize",
              "font-size": "fontSize",
              fontsizeadjust: "fontSizeAdjust",
              "font-size-adjust": "fontSizeAdjust",
              fontstretch: "fontStretch",
              "font-stretch": "fontStretch",
              fontstyle: "fontStyle",
              "font-style": "fontStyle",
              fontvariant: "fontVariant",
              "font-variant": "fontVariant",
              fontweight: "fontWeight",
              "font-weight": "fontWeight",
              format: "format",
              from: "from",
              fx: "fx",
              fy: "fy",
              g1: "g1",
              g2: "g2",
              glyphname: "glyphName",
              "glyph-name": "glyphName",
              glyphorientationhorizontal: "glyphOrientationHorizontal",
              "glyph-orientation-horizontal": "glyphOrientationHorizontal",
              glyphorientationvertical: "glyphOrientationVertical",
              "glyph-orientation-vertical": "glyphOrientationVertical",
              glyphref: "glyphRef",
              gradienttransform: "gradientTransform",
              gradientunits: "gradientUnits",
              hanging: "hanging",
              horizadvx: "horizAdvX",
              "horiz-adv-x": "horizAdvX",
              horizoriginx: "horizOriginX",
              "horiz-origin-x": "horizOriginX",
              ideographic: "ideographic",
              imagerendering: "imageRendering",
              "image-rendering": "imageRendering",
              in2: "in2",
              in: "in",
              inlist: "inlist",
              intercept: "intercept",
              k1: "k1",
              k2: "k2",
              k3: "k3",
              k4: "k4",
              k: "k",
              kernelmatrix: "kernelMatrix",
              kernelunitlength: "kernelUnitLength",
              kerning: "kerning",
              keypoints: "keyPoints",
              keysplines: "keySplines",
              keytimes: "keyTimes",
              lengthadjust: "lengthAdjust",
              letterspacing: "letterSpacing",
              "letter-spacing": "letterSpacing",
              lightingcolor: "lightingColor",
              "lighting-color": "lightingColor",
              limitingconeangle: "limitingConeAngle",
              local: "local",
              markerend: "markerEnd",
              "marker-end": "markerEnd",
              markerheight: "markerHeight",
              markermid: "markerMid",
              "marker-mid": "markerMid",
              markerstart: "markerStart",
              "marker-start": "markerStart",
              markerunits: "markerUnits",
              markerwidth: "markerWidth",
              mask: "mask",
              maskcontentunits: "maskContentUnits",
              maskunits: "maskUnits",
              mathematical: "mathematical",
              mode: "mode",
              numoctaves: "numOctaves",
              offset: "offset",
              opacity: "opacity",
              operator: "operator",
              order: "order",
              orient: "orient",
              orientation: "orientation",
              origin: "origin",
              overflow: "overflow",
              overlineposition: "overlinePosition",
              "overline-position": "overlinePosition",
              overlinethickness: "overlineThickness",
              "overline-thickness": "overlineThickness",
              paintorder: "paintOrder",
              "paint-order": "paintOrder",
              panose1: "panose1",
              "panose-1": "panose1",
              pathlength: "pathLength",
              patterncontentunits: "patternContentUnits",
              patterntransform: "patternTransform",
              patternunits: "patternUnits",
              pointerevents: "pointerEvents",
              "pointer-events": "pointerEvents",
              points: "points",
              pointsatx: "pointsAtX",
              pointsaty: "pointsAtY",
              pointsatz: "pointsAtZ",
              prefix: "prefix",
              preservealpha: "preserveAlpha",
              preserveaspectratio: "preserveAspectRatio",
              primitiveunits: "primitiveUnits",
              property: "property",
              r: "r",
              radius: "radius",
              refx: "refX",
              refy: "refY",
              renderingintent: "renderingIntent",
              "rendering-intent": "renderingIntent",
              repeatcount: "repeatCount",
              repeatdur: "repeatDur",
              requiredextensions: "requiredExtensions",
              requiredfeatures: "requiredFeatures",
              resource: "resource",
              restart: "restart",
              result: "result",
              results: "results",
              rotate: "rotate",
              rx: "rx",
              ry: "ry",
              scale: "scale",
              security: "security",
              seed: "seed",
              shaperendering: "shapeRendering",
              "shape-rendering": "shapeRendering",
              slope: "slope",
              spacing: "spacing",
              specularconstant: "specularConstant",
              specularexponent: "specularExponent",
              speed: "speed",
              spreadmethod: "spreadMethod",
              startoffset: "startOffset",
              stddeviation: "stdDeviation",
              stemh: "stemh",
              stemv: "stemv",
              stitchtiles: "stitchTiles",
              stopcolor: "stopColor",
              "stop-color": "stopColor",
              stopopacity: "stopOpacity",
              "stop-opacity": "stopOpacity",
              strikethroughposition: "strikethroughPosition",
              "strikethrough-position": "strikethroughPosition",
              strikethroughthickness: "strikethroughThickness",
              "strikethrough-thickness": "strikethroughThickness",
              string: "string",
              stroke: "stroke",
              strokedasharray: "strokeDasharray",
              "stroke-dasharray": "strokeDasharray",
              strokedashoffset: "strokeDashoffset",
              "stroke-dashoffset": "strokeDashoffset",
              strokelinecap: "strokeLinecap",
              "stroke-linecap": "strokeLinecap",
              strokelinejoin: "strokeLinejoin",
              "stroke-linejoin": "strokeLinejoin",
              strokemiterlimit: "strokeMiterlimit",
              "stroke-miterlimit": "strokeMiterlimit",
              strokewidth: "strokeWidth",
              "stroke-width": "strokeWidth",
              strokeopacity: "strokeOpacity",
              "stroke-opacity": "strokeOpacity",
              suppresscontenteditablewarning: "suppressContentEditableWarning",
              suppresshydrationwarning: "suppressHydrationWarning",
              surfacescale: "surfaceScale",
              systemlanguage: "systemLanguage",
              tablevalues: "tableValues",
              targetx: "targetX",
              targety: "targetY",
              textanchor: "textAnchor",
              "text-anchor": "textAnchor",
              textdecoration: "textDecoration",
              "text-decoration": "textDecoration",
              textlength: "textLength",
              textrendering: "textRendering",
              "text-rendering": "textRendering",
              to: "to",
              transform: "transform",
              typeof: "typeof",
              u1: "u1",
              u2: "u2",
              underlineposition: "underlinePosition",
              "underline-position": "underlinePosition",
              underlinethickness: "underlineThickness",
              "underline-thickness": "underlineThickness",
              unicode: "unicode",
              unicodebidi: "unicodeBidi",
              "unicode-bidi": "unicodeBidi",
              unicoderange: "unicodeRange",
              "unicode-range": "unicodeRange",
              unitsperem: "unitsPerEm",
              "units-per-em": "unitsPerEm",
              unselectable: "unselectable",
              valphabetic: "vAlphabetic",
              "v-alphabetic": "vAlphabetic",
              values: "values",
              vectoreffect: "vectorEffect",
              "vector-effect": "vectorEffect",
              version: "version",
              vertadvy: "vertAdvY",
              "vert-adv-y": "vertAdvY",
              vertoriginx: "vertOriginX",
              "vert-origin-x": "vertOriginX",
              vertoriginy: "vertOriginY",
              "vert-origin-y": "vertOriginY",
              vhanging: "vHanging",
              "v-hanging": "vHanging",
              videographic: "vIdeographic",
              "v-ideographic": "vIdeographic",
              viewbox: "viewBox",
              viewtarget: "viewTarget",
              visibility: "visibility",
              vmathematical: "vMathematical",
              "v-mathematical": "vMathematical",
              vocab: "vocab",
              widths: "widths",
              wordspacing: "wordSpacing",
              "word-spacing": "wordSpacing",
              writingmode: "writingMode",
              "writing-mode": "writingMode",
              x1: "x1",
              x2: "x2",
              x: "x",
              xchannelselector: "xChannelSelector",
              xheight: "xHeight",
              "x-height": "xHeight",
              xlinkactuate: "xlinkActuate",
              "xlink:actuate": "xlinkActuate",
              xlinkarcrole: "xlinkArcrole",
              "xlink:arcrole": "xlinkArcrole",
              xlinkhref: "xlinkHref",
              "xlink:href": "xlinkHref",
              xlinkrole: "xlinkRole",
              "xlink:role": "xlinkRole",
              xlinkshow: "xlinkShow",
              "xlink:show": "xlinkShow",
              xlinktitle: "xlinkTitle",
              "xlink:title": "xlinkTitle",
              xlinktype: "xlinkType",
              "xlink:type": "xlinkType",
              xmlbase: "xmlBase",
              "xml:base": "xmlBase",
              xmllang: "xmlLang",
              "xml:lang": "xmlLang",
              xmlns: "xmlns",
              "xml:space": "xmlSpace",
              xmlnsxlink: "xmlnsXlink",
              "xmlns:xlink": "xmlnsXlink",
              xmlspace: "xmlSpace",
              y1: "y1",
              y2: "y2",
              y: "y",
              ychannelselector: "yChannelSelector",
              z: "z",
              zoomandpan: "zoomAndPan"
            };

            var validateProperty$1 = function() {};

            {
              var warnedProperties$1 = {};
              var _hasOwnProperty = Object.prototype.hasOwnProperty;
              var EVENT_NAME_REGEX = /^on./;
              var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
              var rARIA$1 = new RegExp(
                "^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"
              );
              var rARIACamel$1 = new RegExp(
                "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
              );

              validateProperty$1 = function(
                tagName,
                name,
                value,
                canUseEventSystem
              ) {
                if (
                  _hasOwnProperty.call(warnedProperties$1, name) &&
                  warnedProperties$1[name]
                ) {
                  return true;
                }

                var lowerCasedName = name.toLowerCase();

                if (
                  lowerCasedName === "onfocusin" ||
                  lowerCasedName === "onfocusout"
                ) {
                  warning$1(
                    false,
                    "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. " +
                      "All React events are normalized to bubble, so onFocusIn and onFocusOut " +
                      "are not needed/supported by React."
                  );
                  warnedProperties$1[name] = true;
                  return true;
                } // We can't rely on the event system being injected on the server.

                if (canUseEventSystem) {
                  if (registrationNameModules.hasOwnProperty(name)) {
                    return true;
                  }

                  var registrationName = possibleRegistrationNames.hasOwnProperty(
                    lowerCasedName
                  )
                    ? possibleRegistrationNames[lowerCasedName]
                    : null;

                  if (registrationName != null) {
                    warning$1(
                      false,
                      "Invalid event handler property `%s`. Did you mean `%s`?",
                      name,
                      registrationName
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }

                  if (EVENT_NAME_REGEX.test(name)) {
                    warning$1(
                      false,
                      "Unknown event handler property `%s`. It will be ignored.",
                      name
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (EVENT_NAME_REGEX.test(name)) {
                  // If no event plugins have been injected, we are in a server environment.
                  // So we can't tell if the event name is correct for sure, but we can filter
                  // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                  if (INVALID_EVENT_NAME_REGEX.test(name)) {
                    warning$1(
                      false,
                      "Invalid event handler property `%s`. " +
                        "React events use the camelCase naming convention, for example `onClick`.",
                      name
                    );
                  }

                  warnedProperties$1[name] = true;
                  return true;
                } // Let the ARIA attribute hook validate ARIA attributes

                if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                  return true;
                }

                if (lowerCasedName === "innerhtml") {
                  warning$1(
                    false,
                    "Directly setting property `innerHTML` is not permitted. " +
                      "For more information, lookup documentation on `dangerouslySetInnerHTML`."
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (lowerCasedName === "aria") {
                  warning$1(
                    false,
                    "The `aria` attribute is reserved for future use in React. " +
                      "Pass individual `aria-` attributes instead."
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (
                  lowerCasedName === "is" &&
                  value !== null &&
                  value !== undefined &&
                  typeof value !== "string"
                ) {
                  warning$1(
                    false,
                    "Received a `%s` for a string attribute `is`. If this is expected, cast " +
                      "the value to a string.",
                    typeof value
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (typeof value === "number" && isNaN(value)) {
                  warning$1(
                    false,
                    "Received NaN for the `%s` attribute. If this is expected, cast " +
                      "the value to a string.",
                    name
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                var propertyInfo = getPropertyInfo(name);
                var isReserved =
                  propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                  var standardName = possibleStandardNames[lowerCasedName];

                  if (standardName !== name) {
                    warning$1(
                      false,
                      "Invalid DOM property `%s`. Did you mean `%s`?",
                      name,
                      standardName
                    );
                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (!isReserved && name !== lowerCasedName) {
                  // Unknown attributes should have lowercase casing since that's how they
                  // will be cased anyway with server rendering.
                  warning$1(
                    false,
                    "React does not recognize the `%s` prop on a DOM element. If you " +
                      "intentionally want it to appear in the DOM as a custom " +
                      "attribute, spell it as lowercase `%s` instead. " +
                      "If you accidentally passed it from a parent component, remove " +
                      "it from the DOM element.",
                    name,
                    lowerCasedName
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                if (
                  typeof value === "boolean" &&
                  shouldRemoveAttributeWithWarning(
                    name,
                    value,
                    propertyInfo,
                    false
                  )
                ) {
                  if (value) {
                    warning$1(
                      false,
                      "Received `%s` for a non-boolean attribute `%s`.\n\n" +
                        "If you want to write it to the DOM, pass a string instead: " +
                        '%s="%s" or %s={value.toString()}.',
                      value,
                      name,
                      name,
                      value,
                      name
                    );
                  } else {
                    warning$1(
                      false,
                      "Received `%s` for a non-boolean attribute `%s`.\n\n" +
                        "If you want to write it to the DOM, pass a string instead: " +
                        '%s="%s" or %s={value.toString()}.\n\n' +
                        "If you used to conditionally omit it with %s={condition && value}, " +
                        "pass %s={condition ? value : undefined} instead.",
                      value,
                      name,
                      name,
                      value,
                      name,
                      name,
                      name
                    );
                  }

                  warnedProperties$1[name] = true;
                  return true;
                } // Now that we've validated casing, do not validate
                // data types for reserved props

                if (isReserved) {
                  return true;
                } // Warn when a known attribute is a bad type

                if (
                  shouldRemoveAttributeWithWarning(
                    name,
                    value,
                    propertyInfo,
                    false
                  )
                ) {
                  warnedProperties$1[name] = true;
                  return false;
                } // Warn when passing the strings 'false' or 'true' into a boolean prop

                if (
                  (value === "false" || value === "true") &&
                  propertyInfo !== null &&
                  propertyInfo.type === BOOLEAN
                ) {
                  warning$1(
                    false,
                    "Received the string `%s` for the boolean attribute `%s`. " +
                      "%s " +
                      "Did you mean %s={%s}?",
                    value,
                    name,
                    value === "false"
                      ? "The browser will interpret it as a truthy value."
                      : 'Although this works, it will not work as expected if you pass the string "false".',
                    name,
                    value
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }

                return true;
              };
            }

            var warnUnknownProperties = function(
              type,
              props,
              canUseEventSystem
            ) {
              var unknownProps = [];

              for (var key in props) {
                var isValid = validateProperty$1(
                  type,
                  key,
                  props[key],
                  canUseEventSystem
                );

                if (!isValid) {
                  unknownProps.push(key);
                }
              }

              var unknownPropString = unknownProps
                .map(function(prop) {
                  return "`" + prop + "`";
                })
                .join(", ");

              if (unknownProps.length === 1) {
                warning$1(
                  false,
                  "Invalid value for prop %s on <%s> tag. Either remove it from the element, " +
                    "or pass a string or number value to keep it in the DOM. " +
                    "For details, see https://fb.me/react-attribute-behavior",
                  unknownPropString,
                  type
                );
              } else if (unknownProps.length > 1) {
                warning$1(
                  false,
                  "Invalid values for props %s on <%s> tag. Either remove them from the element, " +
                    "or pass a string or number value to keep them in the DOM. " +
                    "For details, see https://fb.me/react-attribute-behavior",
                  unknownPropString,
                  type
                );
              }
            };

            function validateProperties$2(type, props, canUseEventSystem) {
              if (isCustomComponent(type, props)) {
                return;
              }

              warnUnknownProperties(type, props, canUseEventSystem);
            }

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            } // Based on reading the React.Children implementation. TODO: type this somewhere?

            var toArray = React.Children.toArray; // This is only used in DEV.
            // Each entry is `this.stack` from a currently executing renderer instance.
            // (There may be more than one because ReactDOMServer is reentrant).
            // Each stack is an array of frames which may contain nested stacks of elements.

            var currentDebugStacks = [];
            var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
            var ReactDebugCurrentFrame = void 0;
            var prevGetCurrentStackImpl = null;

            var getCurrentServerStackImpl = function() {
              return "";
            };

            var describeStackFrame = function(element) {
              return "";
            };

            var validatePropertiesInDevelopment = function(type, props) {};

            var pushCurrentDebugStack = function(stack) {};

            var pushElementToDebugStack = function(element) {};

            var popCurrentDebugStack = function() {};

            var hasWarnedAboutUsingContextAsConsumer = false;
            {
              ReactDebugCurrentFrame =
                ReactSharedInternals.ReactDebugCurrentFrame;

              validatePropertiesInDevelopment = function(type, props) {
                validateProperties(type, props);
                validateProperties$1(type, props);
                validateProperties$2(
                  type,
                  props,
                  /* canUseEventSystem */
                  false
                );
              };

              describeStackFrame = function(element) {
                var source = element._source;
                var type = element.type;
                var name = getComponentName(type);
                var ownerName = null;
                return describeComponentFrame(name, source, ownerName);
              };

              pushCurrentDebugStack = function(stack) {
                currentDebugStacks.push(stack);

                if (currentDebugStacks.length === 1) {
                  // We are entering a server renderer.
                  // Remember the previous (e.g. client) global stack implementation.
                  prevGetCurrentStackImpl =
                    ReactDebugCurrentFrame.getCurrentStack;
                  ReactDebugCurrentFrame.getCurrentStack = getCurrentServerStackImpl;
                }
              };

              pushElementToDebugStack = function(element) {
                // For the innermost executing ReactDOMServer call,
                var stack = currentDebugStacks[currentDebugStacks.length - 1]; // Take the innermost executing frame (e.g. <Foo>),

                var frame = stack[stack.length - 1]; // and record that it has one more element associated with it.

                frame.debugElementStack.push(element); // We only need this because we tail-optimize single-element
                // children and directly handle them in an inner loop instead of
                // creating separate frames for them.
              };

              popCurrentDebugStack = function() {
                currentDebugStacks.pop();

                if (currentDebugStacks.length === 0) {
                  // We are exiting the server renderer.
                  // Restore the previous (e.g. client) global stack implementation.
                  ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;
                  prevGetCurrentStackImpl = null;
                }
              };

              getCurrentServerStackImpl = function() {
                if (currentDebugStacks.length === 0) {
                  // Nothing is currently rendering.
                  return "";
                } // ReactDOMServer is reentrant so there may be multiple calls at the same time.
                // Take the frames from the innermost call which is the last in the array.

                var frames = currentDebugStacks[currentDebugStacks.length - 1];
                var stack = ""; // Go through every frame in the stack from the innermost one.

                for (var i = frames.length - 1; i >= 0; i--) {
                  var frame = frames[i]; // Every frame might have more than one debug element stack entry associated with it.
                  // This is because single-child nesting doesn't create materialized frames.
                  // Instead it would push them through `pushElementToDebugStack()`.

                  var _debugElementStack = frame.debugElementStack;

                  for (var ii = _debugElementStack.length - 1; ii >= 0; ii--) {
                    stack += describeStackFrame(_debugElementStack[ii]);
                  }
                }

                return stack;
              };
            }
            var didWarnDefaultInputValue = false;
            var didWarnDefaultChecked = false;
            var didWarnDefaultSelectValue = false;
            var didWarnDefaultTextareaValue = false;
            var didWarnInvalidOptionChildren = false;
            var didWarnAboutNoopUpdateForComponent = {};
            var didWarnAboutBadClass = {};
            var didWarnAboutDeprecatedWillMount = {};
            var didWarnAboutUndefinedDerivedState = {};
            var didWarnAboutUninitializedState = {};
            var valuePropNames = ["value", "defaultValue"];
            var newlineEatingTags = {
              listing: true,
              pre: true,
              textarea: true
            }; // We accept any tag to be rendered but since this gets injected into arbitrary
            // HTML, we want to make sure that it's a safe tag.
            // http://www.w3.org/TR/REC-xml/#NT-Name

            var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset

            var validatedTagCache = {};

            function validateDangerousTag(tag) {
              if (!validatedTagCache.hasOwnProperty(tag)) {
                !VALID_TAG_REGEX.test(tag)
                  ? invariant(false, "Invalid tag: %s", tag)
                  : void 0;
                validatedTagCache[tag] = true;
              }
            }

            var styleNameCache = {};

            var processStyleName = function(styleName) {
              if (styleNameCache.hasOwnProperty(styleName)) {
                return styleNameCache[styleName];
              }

              var result = hyphenateStyleName(styleName);
              styleNameCache[styleName] = result;
              return result;
            };

            function createMarkupForStyles(styles) {
              var serialized = "";
              var delimiter = "";

              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }

                var isCustomProperty = styleName.indexOf("--") === 0;
                var styleValue = styles[styleName];
                {
                  if (!isCustomProperty) {
                    warnValidStyle$1(styleName, styleValue);
                  }
                }

                if (styleValue != null) {
                  serialized += delimiter + processStyleName(styleName) + ":";
                  serialized += dangerousStyleValue(
                    styleName,
                    styleValue,
                    isCustomProperty
                  );
                  delimiter = ";";
                }
              }

              return serialized || null;
            }

            function warnNoop(publicInstance, callerName) {
              {
                var _constructor = publicInstance.constructor;
                var componentName =
                  (_constructor && getComponentName(_constructor)) ||
                  "ReactClass";
                var warningKey = componentName + "." + callerName;

                if (didWarnAboutNoopUpdateForComponent[warningKey]) {
                  return;
                }

                warningWithoutStack$1(
                  false,
                  "%s(...): Can only update a mounting component. " +
                    "This usually means you called %s() outside componentWillMount() on the server. " +
                    "This is a no-op.\n\nPlease check the code for the %s component.",
                  callerName,
                  callerName,
                  componentName
                );
                didWarnAboutNoopUpdateForComponent[warningKey] = true;
              }
            }

            function shouldConstruct(Component) {
              return (
                Component.prototype && Component.prototype.isReactComponent
              );
            }

            function getNonChildrenInnerMarkup(props) {
              var innerHTML = props.dangerouslySetInnerHTML;

              if (innerHTML != null) {
                if (innerHTML.__html != null) {
                  return innerHTML.__html;
                }
              } else {
                var content = props.children;

                if (
                  typeof content === "string" ||
                  typeof content === "number"
                ) {
                  return escapeTextForBrowser(content);
                }
              }

              return null;
            }

            function flattenTopLevelChildren(children) {
              if (!React.isValidElement(children)) {
                return toArray(children);
              }

              var element = children;

              if (element.type !== REACT_FRAGMENT_TYPE) {
                return [element];
              }

              var fragmentChildren = element.props.children;

              if (!React.isValidElement(fragmentChildren)) {
                return toArray(fragmentChildren);
              }

              var fragmentChildElement = fragmentChildren;
              return [fragmentChildElement];
            }

            function flattenOptionChildren(children) {
              if (children === undefined || children === null) {
                return children;
              }

              var content = ""; // Flatten children and warn if they aren't strings or numbers;
              // invalid types are ignored.

              React.Children.forEach(children, function(child) {
                if (child == null) {
                  return;
                }

                content += child;
                {
                  if (
                    !didWarnInvalidOptionChildren &&
                    typeof child !== "string" &&
                    typeof child !== "number"
                  ) {
                    didWarnInvalidOptionChildren = true;
                    warning$1(
                      false,
                      "Only strings and numbers are supported as <option> children."
                    );
                  }
                }
              });
              return content;
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var STYLE = "style";
            var RESERVED_PROPS = {
              children: null,
              dangerouslySetInnerHTML: null,
              suppressContentEditableWarning: null,
              suppressHydrationWarning: null
            };

            function createOpenTagMarkup(
              tagVerbatim,
              tagLowercase,
              props,
              namespace,
              makeStaticMarkup,
              isRootElement
            ) {
              var ret = "<" + tagVerbatim;

              for (var propKey in props) {
                if (!hasOwnProperty.call(props, propKey)) {
                  continue;
                }

                var propValue = props[propKey];

                if (propValue == null) {
                  continue;
                }

                if (propKey === STYLE) {
                  propValue = createMarkupForStyles(propValue);
                }

                var markup = null;

                if (isCustomComponent(tagLowercase, props)) {
                  if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
                    markup = createMarkupForCustomAttribute(propKey, propValue);
                  }
                } else {
                  markup = createMarkupForProperty(propKey, propValue);
                }

                if (markup) {
                  ret += " " + markup;
                }
              } // For static pages, no need to put React ID and checksum. Saves lots of
              // bytes.

              if (makeStaticMarkup) {
                return ret;
              }

              if (isRootElement) {
                ret += " " + createMarkupForRoot();
              }

              return ret;
            }

            function validateRenderResult(child, type) {
              if (child === undefined) {
                invariant(
                  false,
                  "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.",
                  getComponentName(type) || "Component"
                );
              }
            }

            function resolve(child, context, threadID) {
              while (React.isValidElement(child)) {
                // Safe because we just checked it's an element.
                var element = child;
                var Component = element.type;
                {
                  pushElementToDebugStack(element);
                }

                if (typeof Component !== "function") {
                  break;
                }

                processChild(element, Component);
              } // Extra closure so queue and replace can be captured properly

              function processChild(element, Component) {
                var publicContext = processContext(
                  Component,
                  context,
                  threadID
                );
                var queue = [];
                var replace = false;
                var updater = {
                  isMounted: function(publicInstance) {
                    return false;
                  },
                  enqueueForceUpdate: function(publicInstance) {
                    if (queue === null) {
                      warnNoop(publicInstance, "forceUpdate");
                      return null;
                    }
                  },
                  enqueueReplaceState: function(publicInstance, completeState) {
                    replace = true;
                    queue = [completeState];
                  },
                  enqueueSetState: function(
                    publicInstance,
                    currentPartialState
                  ) {
                    if (queue === null) {
                      warnNoop(publicInstance, "setState");
                      return null;
                    }

                    queue.push(currentPartialState);
                  }
                };
                var inst = void 0;

                if (shouldConstruct(Component)) {
                  inst = new Component(element.props, publicContext, updater);

                  if (
                    typeof Component.getDerivedStateFromProps === "function"
                  ) {
                    {
                      if (inst.state === null || inst.state === undefined) {
                        var componentName =
                          getComponentName(Component) || "Unknown";

                        if (!didWarnAboutUninitializedState[componentName]) {
                          warningWithoutStack$1(
                            false,
                            "`%s` uses `getDerivedStateFromProps` but its initial state is " +
                              "%s. This is not recommended. Instead, define the initial state by " +
                              "assigning an object to `this.state` in the constructor of `%s`. " +
                              "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
                            componentName,
                            inst.state === null ? "null" : "undefined",
                            componentName
                          );
                          didWarnAboutUninitializedState[componentName] = true;
                        }
                      }
                    }
                    var partialState = Component.getDerivedStateFromProps.call(
                      null,
                      element.props,
                      inst.state
                    );
                    {
                      if (partialState === undefined) {
                        var _componentName =
                          getComponentName(Component) || "Unknown";

                        if (
                          !didWarnAboutUndefinedDerivedState[_componentName]
                        ) {
                          warningWithoutStack$1(
                            false,
                            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " +
                              "You have returned undefined.",
                            _componentName
                          );
                          didWarnAboutUndefinedDerivedState[
                            _componentName
                          ] = true;
                        }
                      }
                    }

                    if (partialState != null) {
                      inst.state = _assign({}, inst.state, partialState);
                    }
                  }
                } else {
                  {
                    if (
                      Component.prototype &&
                      typeof Component.prototype.render === "function"
                    ) {
                      var _componentName2 =
                        getComponentName(Component) || "Unknown";

                      if (!didWarnAboutBadClass[_componentName2]) {
                        warningWithoutStack$1(
                          false,
                          "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                            "This is likely to cause errors. Change %s to extend React.Component instead.",
                          _componentName2,
                          _componentName2
                        );
                        didWarnAboutBadClass[_componentName2] = true;
                      }
                    }
                  }
                  var componentIdentity = {};
                  prepareToUseHooks(componentIdentity);
                  inst = Component(element.props, publicContext, updater);
                  inst = finishHooks(
                    Component,
                    element.props,
                    inst,
                    publicContext
                  );

                  if (inst == null || inst.render == null) {
                    child = inst;
                    validateRenderResult(child, Component);
                    return;
                  }
                }

                inst.props = element.props;
                inst.context = publicContext;
                inst.updater = updater;
                var initialState = inst.state;

                if (initialState === undefined) {
                  inst.state = initialState = null;
                }

                if (
                  typeof inst.UNSAFE_componentWillMount === "function" ||
                  typeof inst.componentWillMount === "function"
                ) {
                  if (typeof inst.componentWillMount === "function") {
                    {
                      if (
                        warnAboutDeprecatedLifecycles &&
                        inst.componentWillMount.__suppressDeprecationWarning !==
                          true
                      ) {
                        var _componentName3 =
                          getComponentName(Component) || "Unknown";

                        if (!didWarnAboutDeprecatedWillMount[_componentName3]) {
                          lowPriorityWarning$1(
                            false,
                            "%s: componentWillMount() is deprecated and will be " +
                              "removed in the next major version. Read about the motivations " +
                              "behind this change: " +
                              "https://fb.me/react-async-component-lifecycle-hooks" +
                              "\n\n" +
                              "As a temporary workaround, you can rename to " +
                              "UNSAFE_componentWillMount instead.",
                            _componentName3
                          );
                          didWarnAboutDeprecatedWillMount[
                            _componentName3
                          ] = true;
                        }
                      }
                    } // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for any component with the new gDSFP.

                    if (
                      typeof Component.getDerivedStateFromProps !== "function"
                    ) {
                      inst.componentWillMount();
                    }
                  }

                  if (
                    typeof inst.UNSAFE_componentWillMount === "function" &&
                    typeof Component.getDerivedStateFromProps !== "function"
                  ) {
                    // In order to support react-lifecycles-compat polyfilled components,
                    // Unsafe lifecycles should not be invoked for any component with the new gDSFP.
                    inst.UNSAFE_componentWillMount();
                  }

                  if (queue.length) {
                    var oldQueue = queue;
                    var oldReplace = replace;
                    queue = null;
                    replace = false;

                    if (oldReplace && oldQueue.length === 1) {
                      inst.state = oldQueue[0];
                    } else {
                      var nextState = oldReplace ? oldQueue[0] : inst.state;
                      var dontMutate = true;

                      for (
                        var i = oldReplace ? 1 : 0;
                        i < oldQueue.length;
                        i++
                      ) {
                        var partial = oldQueue[i];

                        var _partialState =
                          typeof partial === "function"
                            ? partial.call(
                                inst,
                                nextState,
                                element.props,
                                publicContext
                              )
                            : partial;

                        if (_partialState != null) {
                          if (dontMutate) {
                            dontMutate = false;
                            nextState = _assign({}, nextState, _partialState);
                          } else {
                            _assign(nextState, _partialState);
                          }
                        }
                      }

                      inst.state = nextState;
                    }
                  } else {
                    queue = null;
                  }
                }

                child = inst.render();
                {
                  if (child === undefined && inst.render._isMockFunction) {
                    // This is probably bad practice. Consider warning here and
                    // deprecating this convenience.
                    child = null;
                  }
                }
                validateRenderResult(child, Component);
                var childContext = void 0;

                if (typeof inst.getChildContext === "function") {
                  var childContextTypes = Component.childContextTypes;

                  if (typeof childContextTypes === "object") {
                    childContext = inst.getChildContext();

                    for (var contextKey in childContext) {
                      !(contextKey in childContextTypes)
                        ? invariant(
                            false,
                            '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
                            getComponentName(Component) || "Unknown",
                            contextKey
                          )
                        : void 0;
                    }
                  } else {
                    warningWithoutStack$1(
                      false,
                      "%s.getChildContext(): childContextTypes must be defined in order to " +
                        "use getChildContext().",
                      getComponentName(Component) || "Unknown"
                    );
                  }
                }

                if (childContext) {
                  context = _assign({}, context, childContext);
                }
              }

              return {
                child: child,
                context: context
              };
            }

            var ReactDOMServerRenderer = (function() {
              // DEV-only
              // TODO: type this more strictly:
              function ReactDOMServerRenderer(children, makeStaticMarkup) {
                _classCallCheck(this, ReactDOMServerRenderer);

                var flatChildren = flattenTopLevelChildren(children);
                var topFrame = {
                  type: null,
                  // Assume all trees start in the HTML namespace (not totally true, but
                  // this is what we did historically)
                  domNamespace: Namespaces.html,
                  children: flatChildren,
                  childIndex: 0,
                  context: emptyObject,
                  footer: ""
                };
                {
                  topFrame.debugElementStack = [];
                }
                this.threadID = allocThreadID();
                this.stack = [topFrame];
                this.exhausted = false;
                this.currentSelectValue = null;
                this.previousWasTextNode = false;
                this.makeStaticMarkup = makeStaticMarkup;
                this.suspenseDepth = 0; // Context (new API)

                this.contextIndex = -1;
                this.contextStack = [];
                this.contextValueStack = [];
                {
                  this.contextProviderStack = [];
                }
              }

              ReactDOMServerRenderer.prototype.destroy = function destroy() {
                if (!this.exhausted) {
                  this.exhausted = true;
                  freeThreadID(this.threadID);
                }
              };
              /**
               * Note: We use just two stacks regardless of how many context providers you have.
               * Providers are always popped in the reverse order to how they were pushed
               * so we always know on the way down which provider you'll encounter next on the way up.
               * On the way down, we push the current provider, and its context value *before*
               * we mutated it, onto the stacks. Therefore, on the way up, we always know which
               * provider needs to be "restored" to which value.
               * https://github.com/facebook/react/pull/12985#issuecomment-396301248
               */

              ReactDOMServerRenderer.prototype.pushProvider = function pushProvider(
                provider
              ) {
                var index = ++this.contextIndex;
                var context = provider.type._context;
                var threadID = this.threadID;
                validateContextBounds(context, threadID);
                var previousValue = context[threadID]; // Remember which value to restore this context to on our way up.

                this.contextStack[index] = context;
                this.contextValueStack[index] = previousValue;
                {
                  // Only used for push/pop mismatch warnings.
                  this.contextProviderStack[index] = provider;
                } // Mutate the current value.

                context[threadID] = provider.props.value;
              };

              ReactDOMServerRenderer.prototype.popProvider = function popProvider(
                provider
              ) {
                var index = this.contextIndex;
                {
                  !(index > -1 && provider === this.contextProviderStack[index])
                    ? warningWithoutStack$1(false, "Unexpected pop.")
                    : void 0;
                }
                var context = this.contextStack[index];
                var previousValue = this.contextValueStack[index]; // "Hide" these null assignments from Flow by using `any`
                // because conceptually they are deletions--as long as we
                // promise to never access values beyond `this.contextIndex`.

                this.contextStack[index] = null;
                this.contextValueStack[index] = null;
                {
                  this.contextProviderStack[index] = null;
                }
                this.contextIndex--; // Restore to the previous value we stored as we were walking down.
                // We've already verified that this context has been expanded to accommodate
                // this thread id, so we don't need to do it again.

                context[this.threadID] = previousValue;
              };

              ReactDOMServerRenderer.prototype.read = function read(bytes) {
                if (this.exhausted) {
                  return null;
                }

                var prevThreadID = currentThreadID;
                setCurrentThreadID(this.threadID);
                var prevDispatcher = ReactCurrentOwner.currentDispatcher;

                if (enableHooks) {
                  ReactCurrentOwner.currentDispatcher = Dispatcher;
                } else {
                  ReactCurrentOwner.currentDispatcher = DispatcherWithoutHooks;
                }

                try {
                  // Markup generated within <Suspense> ends up buffered until we know
                  // nothing in that boundary suspended
                  var out = [""];
                  var suspended = false;

                  while (out[0].length < bytes) {
                    if (this.stack.length === 0) {
                      this.exhausted = true;
                      freeThreadID(this.threadID);
                      break;
                    }

                    var frame = this.stack[this.stack.length - 1];

                    if (
                      suspended ||
                      frame.childIndex >= frame.children.length
                    ) {
                      var _footer = frame.footer;

                      if (_footer !== "") {
                        this.previousWasTextNode = false;
                      }

                      this.stack.pop();

                      if (frame.type === "select") {
                        this.currentSelectValue = null;
                      } else if (
                        frame.type != null &&
                        frame.type.type != null &&
                        frame.type.type.$$typeof === REACT_PROVIDER_TYPE
                      ) {
                        var provider = frame.type;
                        this.popProvider(provider);
                      } else if (frame.type === REACT_SUSPENSE_TYPE) {
                        this.suspenseDepth--;
                        var buffered = out.pop();

                        if (suspended) {
                          suspended = false; // If rendering was suspended at this boundary, render the fallbackFrame

                          var _fallbackFrame = frame.fallbackFrame;
                          !_fallbackFrame
                            ? invariant(
                                false,
                                "suspense fallback not found, something is broken"
                              )
                            : void 0;
                          this.stack.push(_fallbackFrame); // Skip flushing output since we're switching to the fallback

                          continue;
                        } else {
                          out[this.suspenseDepth] += buffered;
                        }
                      } // Flush output

                      out[this.suspenseDepth] += _footer;
                      continue;
                    }

                    var child = frame.children[frame.childIndex++];
                    var outBuffer = "";
                    {
                      pushCurrentDebugStack(this.stack); // We're starting work on this frame, so reset its inner stack.

                      frame.debugElementStack.length = 0;
                    }

                    try {
                      outBuffer += this.render(
                        child,
                        frame.context,
                        frame.domNamespace
                      );
                    } catch (err) {
                      if (
                        enableSuspenseServerRenderer &&
                        typeof err.then === "function"
                      ) {
                        suspended = true;
                      } else {
                        throw err;
                      }
                    } finally {
                      {
                        popCurrentDebugStack();
                      }
                    }

                    if (out.length <= this.suspenseDepth) {
                      out.push("");
                    }

                    out[this.suspenseDepth] += outBuffer;
                  }

                  return out[0];
                } finally {
                  ReactCurrentOwner.currentDispatcher = prevDispatcher;
                  setCurrentThreadID(prevThreadID);
                }
              };

              ReactDOMServerRenderer.prototype.render = function render(
                child,
                context,
                parentNamespace
              ) {
                if (typeof child === "string" || typeof child === "number") {
                  var text = "" + child;

                  if (text === "") {
                    return "";
                  }

                  if (this.makeStaticMarkup) {
                    return escapeTextForBrowser(text);
                  }

                  if (this.previousWasTextNode) {
                    return "<!-- -->" + escapeTextForBrowser(text);
                  }

                  this.previousWasTextNode = true;
                  return escapeTextForBrowser(text);
                } else {
                  var nextChild = void 0;

                  var _resolve = resolve(child, context, this.threadID);

                  nextChild = _resolve.child;
                  context = _resolve.context;

                  if (nextChild === null || nextChild === false) {
                    return "";
                  } else if (!React.isValidElement(nextChild)) {
                    if (nextChild != null && nextChild.$$typeof != null) {
                      // Catch unexpected special types early.
                      var $$typeof = nextChild.$$typeof;
                      !($$typeof !== REACT_PORTAL_TYPE)
                        ? invariant(
                            false,
                            "Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render."
                          )
                        : void 0; // Catch-all to prevent an infinite loop if React.Children.toArray() supports some new type.

                      invariant(
                        false,
                        "Unknown element-like object type: %s. This is likely a bug in React. Please file an issue.",
                        $$typeof.toString()
                      );
                    }

                    var nextChildren = toArray(nextChild);
                    var frame = {
                      type: null,
                      domNamespace: parentNamespace,
                      children: nextChildren,
                      childIndex: 0,
                      context: context,
                      footer: ""
                    };
                    {
                      frame.debugElementStack = [];
                    }
                    this.stack.push(frame);
                    return "";
                  } // Safe because we just checked it's an element.

                  var nextElement = nextChild;
                  var elementType = nextElement.type;

                  if (typeof elementType === "string") {
                    return this.renderDOM(
                      nextElement,
                      context,
                      parentNamespace
                    );
                  }

                  switch (elementType) {
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_FRAGMENT_TYPE: {
                      var _nextChildren = toArray(nextChild.props.children);

                      var _frame = {
                        type: null,
                        domNamespace: parentNamespace,
                        children: _nextChildren,
                        childIndex: 0,
                        context: context,
                        footer: ""
                      };
                      {
                        _frame.debugElementStack = [];
                      }
                      this.stack.push(_frame);
                      return "";
                    }

                    case REACT_SUSPENSE_TYPE: {
                      if (enableSuspenseServerRenderer) {
                        var fallbackChildren = toArray(
                          nextChild.props.fallback
                        );

                        var _nextChildren2 = toArray(nextChild.props.children);

                        var _fallbackFrame2 = {
                          type: null,
                          domNamespace: parentNamespace,
                          children: fallbackChildren,
                          childIndex: 0,
                          context: context,
                          footer: "",
                          out: ""
                        };
                        var _frame2 = {
                          fallbackFrame: _fallbackFrame2,
                          type: REACT_SUSPENSE_TYPE,
                          domNamespace: parentNamespace,
                          children: _nextChildren2,
                          childIndex: 0,
                          context: context,
                          footer: ""
                        };
                        {
                          _frame2.debugElementStack = [];
                          _fallbackFrame2.debugElementStack = [];
                        }
                        this.stack.push(_frame2);
                        this.suspenseDepth++;
                        return "";
                      } else {
                        invariant(
                          false,
                          "ReactDOMServer does not yet support Suspense."
                        );
                      }
                    }
                    // eslint-disable-next-line-no-fallthrough

                    default:
                      break;
                  }

                  if (typeof elementType === "object" && elementType !== null) {
                    switch (elementType.$$typeof) {
                      case REACT_FORWARD_REF_TYPE: {
                        var element = nextChild;

                        var _nextChildren3 = void 0;

                        var componentIdentity = {};
                        prepareToUseHooks(componentIdentity);
                        _nextChildren3 = elementType.render(
                          element.props,
                          element.ref
                        );
                        _nextChildren3 = finishHooks(
                          elementType.render,
                          element.props,
                          _nextChildren3,
                          element.ref
                        );
                        _nextChildren3 = toArray(_nextChildren3);
                        var _frame3 = {
                          type: null,
                          domNamespace: parentNamespace,
                          children: _nextChildren3,
                          childIndex: 0,
                          context: context,
                          footer: ""
                        };
                        {
                          _frame3.debugElementStack = [];
                        }
                        this.stack.push(_frame3);
                        return "";
                      }

                      case REACT_MEMO_TYPE: {
                        var _element = nextChild;
                        var _nextChildren4 = [
                          React.createElement(
                            elementType.type,
                            _assign(
                              {
                                ref: _element.ref
                              },
                              _element.props
                            )
                          )
                        ];
                        var _frame4 = {
                          type: null,
                          domNamespace: parentNamespace,
                          children: _nextChildren4,
                          childIndex: 0,
                          context: context,
                          footer: ""
                        };
                        {
                          _frame4.debugElementStack = [];
                        }
                        this.stack.push(_frame4);
                        return "";
                      }

                      case REACT_PROVIDER_TYPE: {
                        var provider = nextChild;
                        var nextProps = provider.props;

                        var _nextChildren5 = toArray(nextProps.children);

                        var _frame5 = {
                          type: provider,
                          domNamespace: parentNamespace,
                          children: _nextChildren5,
                          childIndex: 0,
                          context: context,
                          footer: ""
                        };
                        {
                          _frame5.debugElementStack = [];
                        }
                        this.pushProvider(provider);
                        this.stack.push(_frame5);
                        return "";
                      }

                      case REACT_CONTEXT_TYPE: {
                        var reactContext = nextChild.type; // The logic below for Context differs depending on PROD or DEV mode. In
                        // DEV mode, we create a separate object for Context.Consumer that acts
                        // like a proxy to Context. This proxy object adds unnecessary code in PROD
                        // so we use the old behaviour (Context.Consumer references Context) to
                        // reduce size and overhead. The separate object references context via
                        // a property called "_context", which also gives us the ability to check
                        // in DEV mode if this property exists or not and warn if it does not.

                        {
                          if (reactContext._context === undefined) {
                            // This may be because it's a Context (rather than a Consumer).
                            // Or it may be because it's older React where they're the same thing.
                            // We only want to warn if we're sure it's a new React.
                            if (reactContext !== reactContext.Consumer) {
                              if (!hasWarnedAboutUsingContextAsConsumer) {
                                hasWarnedAboutUsingContextAsConsumer = true;
                                warning$1(
                                  false,
                                  "Rendering <Context> directly is not supported and will be removed in " +
                                    "a future major release. Did you mean to render <Context.Consumer> instead?"
                                );
                              }
                            }
                          } else {
                            reactContext = reactContext._context;
                          }
                        }
                        var _nextProps = nextChild.props;
                        var threadID = this.threadID;
                        validateContextBounds(reactContext, threadID);
                        var nextValue = reactContext[threadID];

                        var _nextChildren6 = toArray(
                          _nextProps.children(nextValue)
                        );

                        var _frame6 = {
                          type: nextChild,
                          domNamespace: parentNamespace,
                          children: _nextChildren6,
                          childIndex: 0,
                          context: context,
                          footer: ""
                        };
                        {
                          _frame6.debugElementStack = [];
                        }
                        this.stack.push(_frame6);
                        return "";
                      }

                      case REACT_LAZY_TYPE:
                        invariant(
                          false,
                          "ReactDOMServer does not yet support lazy-loaded components."
                        );
                    }
                  }

                  var info = "";
                  {
                    var owner = nextElement._owner;

                    if (
                      elementType === undefined ||
                      (typeof elementType === "object" &&
                        elementType !== null &&
                        Object.keys(elementType).length === 0)
                    ) {
                      info +=
                        " You likely forgot to export your component from the file " +
                        "it's defined in, or you might have mixed up default and " +
                        "named imports.";
                    }

                    var ownerName = owner ? getComponentName(owner) : null;

                    if (ownerName) {
                      info +=
                        "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  invariant(
                    false,
                    "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
                    elementType == null ? elementType : typeof elementType,
                    info
                  );
                }
              };

              ReactDOMServerRenderer.prototype.renderDOM = function renderDOM(
                element,
                context,
                parentNamespace
              ) {
                var tag = element.type.toLowerCase();
                var namespace = parentNamespace;

                if (parentNamespace === Namespaces.html) {
                  namespace = getIntrinsicNamespace(tag);
                }

                {
                  if (namespace === Namespaces.html) {
                    // Should this check be gated by parent namespace? Not sure we want to
                    // allow <SVG> or <mATH>.
                    !(tag === element.type)
                      ? warning$1(
                          false,
                          "<%s /> is using incorrect casing. " +
                            "Use PascalCase for React components, " +
                            "or lowercase for HTML elements.",
                          element.type
                        )
                      : void 0;
                  }
                }
                validateDangerousTag(tag);
                var props = element.props;

                if (tag === "input") {
                  {
                    ReactControlledValuePropTypes.checkPropTypes(
                      "input",
                      props
                    );

                    if (
                      props.checked !== undefined &&
                      props.defaultChecked !== undefined &&
                      !didWarnDefaultChecked
                    ) {
                      warning$1(
                        false,
                        "%s contains an input of type %s with both checked and defaultChecked props. " +
                          "Input elements must be either controlled or uncontrolled " +
                          "(specify either the checked prop, or the defaultChecked prop, but not " +
                          "both). Decide between using a controlled or uncontrolled input " +
                          "element and remove one of these props. More info: " +
                          "https://fb.me/react-controlled-components",
                        "A component",
                        props.type
                      );
                      didWarnDefaultChecked = true;
                    }

                    if (
                      props.value !== undefined &&
                      props.defaultValue !== undefined &&
                      !didWarnDefaultInputValue
                    ) {
                      warning$1(
                        false,
                        "%s contains an input of type %s with both value and defaultValue props. " +
                          "Input elements must be either controlled or uncontrolled " +
                          "(specify either the value prop, or the defaultValue prop, but not " +
                          "both). Decide between using a controlled or uncontrolled input " +
                          "element and remove one of these props. More info: " +
                          "https://fb.me/react-controlled-components",
                        "A component",
                        props.type
                      );
                      didWarnDefaultInputValue = true;
                    }
                  }
                  props = _assign(
                    {
                      type: undefined
                    },
                    props,
                    {
                      defaultChecked: undefined,
                      defaultValue: undefined,
                      value:
                        props.value != null ? props.value : props.defaultValue,
                      checked:
                        props.checked != null
                          ? props.checked
                          : props.defaultChecked
                    }
                  );
                } else if (tag === "textarea") {
                  {
                    ReactControlledValuePropTypes.checkPropTypes(
                      "textarea",
                      props
                    );

                    if (
                      props.value !== undefined &&
                      props.defaultValue !== undefined &&
                      !didWarnDefaultTextareaValue
                    ) {
                      warning$1(
                        false,
                        "Textarea elements must be either controlled or uncontrolled " +
                          "(specify either the value prop, or the defaultValue prop, but not " +
                          "both). Decide between using a controlled or uncontrolled textarea " +
                          "and remove one of these props. More info: " +
                          "https://fb.me/react-controlled-components"
                      );
                      didWarnDefaultTextareaValue = true;
                    }
                  }
                  var initialValue = props.value;

                  if (initialValue == null) {
                    var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

                    var textareaChildren = props.children;

                    if (textareaChildren != null) {
                      {
                        warning$1(
                          false,
                          "Use the `defaultValue` or `value` props instead of setting " +
                            "children on <textarea>."
                        );
                      }
                      !(defaultValue == null)
                        ? invariant(
                            false,
                            "If you supply `defaultValue` on a <textarea>, do not pass children."
                          )
                        : void 0;

                      if (Array.isArray(textareaChildren)) {
                        !(textareaChildren.length <= 1)
                          ? invariant(
                              false,
                              "<textarea> can only have at most one child."
                            )
                          : void 0;
                        textareaChildren = textareaChildren[0];
                      }

                      defaultValue = "" + textareaChildren;
                    }

                    if (defaultValue == null) {
                      defaultValue = "";
                    }

                    initialValue = defaultValue;
                  }

                  props = _assign({}, props, {
                    value: undefined,
                    children: "" + initialValue
                  });
                } else if (tag === "select") {
                  {
                    ReactControlledValuePropTypes.checkPropTypes(
                      "select",
                      props
                    );

                    for (var i = 0; i < valuePropNames.length; i++) {
                      var propName = valuePropNames[i];

                      if (props[propName] == null) {
                        continue;
                      }

                      var isArray = Array.isArray(props[propName]);

                      if (props.multiple && !isArray) {
                        warning$1(
                          false,
                          "The `%s` prop supplied to <select> must be an array if " +
                            "`multiple` is true.",
                          propName
                        );
                      } else if (!props.multiple && isArray) {
                        warning$1(
                          false,
                          "The `%s` prop supplied to <select> must be a scalar " +
                            "value if `multiple` is false.",
                          propName
                        );
                      }
                    }

                    if (
                      props.value !== undefined &&
                      props.defaultValue !== undefined &&
                      !didWarnDefaultSelectValue
                    ) {
                      warning$1(
                        false,
                        "Select elements must be either controlled or uncontrolled " +
                          "(specify either the value prop, or the defaultValue prop, but not " +
                          "both). Decide between using a controlled or uncontrolled select " +
                          "element and remove one of these props. More info: " +
                          "https://fb.me/react-controlled-components"
                      );
                      didWarnDefaultSelectValue = true;
                    }
                  }
                  this.currentSelectValue =
                    props.value != null ? props.value : props.defaultValue;
                  props = _assign({}, props, {
                    value: undefined
                  });
                } else if (tag === "option") {
                  var selected = null;
                  var selectValue = this.currentSelectValue;
                  var optionChildren = flattenOptionChildren(props.children);

                  if (selectValue != null) {
                    var value = void 0;

                    if (props.value != null) {
                      value = props.value + "";
                    } else {
                      value = optionChildren;
                    }

                    selected = false;

                    if (Array.isArray(selectValue)) {
                      // multiple
                      for (var j = 0; j < selectValue.length; j++) {
                        if ("" + selectValue[j] === value) {
                          selected = true;
                          break;
                        }
                      }
                    } else {
                      selected = "" + selectValue === value;
                    }

                    props = _assign(
                      {
                        selected: undefined,
                        children: undefined
                      },
                      props,
                      {
                        selected: selected,
                        children: optionChildren
                      }
                    );
                  }
                }

                {
                  validatePropertiesInDevelopment(tag, props);
                }
                assertValidProps(tag, props);
                var out = createOpenTagMarkup(
                  element.type,
                  tag,
                  props,
                  namespace,
                  this.makeStaticMarkup,
                  this.stack.length === 1
                );
                var footer = "";

                if (omittedCloseTags.hasOwnProperty(tag)) {
                  out += "/>";
                } else {
                  out += ">";
                  footer = "</" + element.type + ">";
                }

                var children = void 0;
                var innerMarkup = getNonChildrenInnerMarkup(props);

                if (innerMarkup != null) {
                  children = [];

                  if (
                    newlineEatingTags[tag] &&
                    innerMarkup.charAt(0) === "\n"
                  ) {
                    // text/html ignores the first character in these tags if it's a newline
                    // Prefer to break application/xml over text/html (for now) by adding
                    // a newline specifically to get eaten by the parser. (Alternately for
                    // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
                    // \r is normalized out by HTMLTextAreaElement#value.)
                    // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
                    // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
                    // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
                    // See: Parsing of "textarea" "listing" and "pre" elements
                    //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
                    out += "\n";
                  }

                  out += innerMarkup;
                } else {
                  children = toArray(props.children);
                }

                var frame = {
                  domNamespace: getChildNamespace(
                    parentNamespace,
                    element.type
                  ),
                  type: tag,
                  children: children,
                  childIndex: 0,
                  context: context,
                  footer: footer
                };
                {
                  frame.debugElementStack = [];
                }
                this.stack.push(frame);
                this.previousWasTextNode = false;
                return out;
              };

              return ReactDOMServerRenderer;
            })();
            /**
             * Render a ReactElement to its initial HTML. This should only be used on the
             * server.
             * See https://reactjs.org/docs/react-dom-server.html#rendertostring
             */

            function renderToString(element) {
              var renderer = new ReactDOMServerRenderer(element, false);

              try {
                var markup = renderer.read(Infinity);
                return markup;
              } finally {
                renderer.destroy();
              }
            }
            /**
             * Similar to renderToString, except this doesn't create extra DOM attributes
             * such as data-react-id that React uses internally.
             * See https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup
             */

            function renderToStaticMarkup(element) {
              var renderer = new ReactDOMServerRenderer(element, true);

              try {
                var markup = renderer.read(Infinity);
                return markup;
              } finally {
                renderer.destroy();
              }
            }

            function renderToNodeStream() {
              invariant(
                false,
                "ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead."
              );
            }

            function renderToStaticNodeStream() {
              invariant(
                false,
                "ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead."
              );
            } // Note: when changing this, also consider https://github.com/facebook/react/issues/11526

            var ReactDOMServerBrowser = {
              renderToString: renderToString,
              renderToStaticMarkup: renderToStaticMarkup,
              renderToNodeStream: renderToNodeStream,
              renderToStaticNodeStream: renderToStaticNodeStream,
              version: ReactVersion
            };
            var ReactDOMServerBrowser$1 = Object.freeze({
              default: ReactDOMServerBrowser
            });
            var ReactDOMServer =
              (ReactDOMServerBrowser$1 && ReactDOMServerBrowser) ||
              ReactDOMServerBrowser$1; // TODO: decide on the top-level export form.
            // This is hacky but makes it work with both Rollup and Jest

            var server_browser = ReactDOMServer.default || ReactDOMServer;
            module.exports = server_browser;
          })();
        }
      },
      {
        "object-assign": "../node_modules/object-assign/index.js",
        react: "../node_modules/react/index.js",
        "prop-types/checkPropTypes":
          "../node_modules/prop-types/checkPropTypes.js"
      }
    ],
    "../node_modules/react-dom/server.browser.js": [
      function(require, module, exports) {
        "use strict";

        if ("development" === "production") {
          module.exports = require("./cjs/react-dom-server.browser.production.min.js");
        } else {
          module.exports = require("./cjs/react-dom-server.browser.development.js");
        }
      },
      {
        "./cjs/react-dom-server.browser.development.js":
          "../node_modules/react-dom/cjs/react-dom-server.browser.development.js"
      }
    ],
    "../node_modules/google-maps-react/dist/components/InfoWindow.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define([
              "exports",
              "react",
              "prop-types",
              "react-dom",
              "react-dom/server"
            ], factory);
          } else if (typeof exports !== "undefined") {
            factory(
              exports,
              require("react"),
              require("prop-types"),
              require("react-dom"),
              require("react-dom/server")
            );
          } else {
            var mod = {
              exports: {}
            };
            factory(
              mod.exports,
              global.react,
              global.propTypes,
              global.reactDom,
              global.server
            );
            global.InfoWindow = mod.exports;
          }
        })(this, function(exports, _react, _propTypes, _reactDom, _server) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.InfoWindow = undefined;

          var _react2 = _interopRequireDefault(_react);

          var _propTypes2 = _interopRequireDefault(_propTypes);

          var _reactDom2 = _interopRequireDefault(_reactDom);

          var _server2 = _interopRequireDefault(_server);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          var _extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          function _objectWithoutProperties(obj, keys) {
            var target = {};

            for (var i in obj) {
              if (keys.indexOf(i) >= 0) continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
              target[i] = obj[i];
            }

            return target;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              (typeof call === "object" || typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  typeof superClass
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var InfoWindow = (exports.InfoWindow = (function(_React$Component) {
            _inherits(InfoWindow, _React$Component);

            function InfoWindow() {
              _classCallCheck(this, InfoWindow);

              return _possibleConstructorReturn(
                this,
                (
                  InfoWindow.__proto__ || Object.getPrototypeOf(InfoWindow)
                ).apply(this, arguments)
              );
            }

            _createClass(InfoWindow, [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this.renderInfoWindow();
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                  var _props = this.props,
                    google = _props.google,
                    map = _props.map;

                  if (!google || !map) {
                    return;
                  }

                  if (map !== prevProps.map) {
                    this.renderInfoWindow();
                  }

                  if (this.props.position !== prevProps.position) {
                    this.updatePosition();
                  }

                  if (this.props.children !== prevProps.children) {
                    this.updateContent();
                  }

                  if (
                    this.props.visible !== prevProps.visible ||
                    this.props.marker !== prevProps.marker ||
                    this.props.position !== prevProps.position
                  ) {
                    this.props.visible ? this.openWindow() : this.closeWindow();
                  }
                }
              },
              {
                key: "renderInfoWindow",
                value: function renderInfoWindow() {
                  var _props2 = this.props,
                    map = _props2.map,
                    google = _props2.google,
                    mapCenter = _props2.mapCenter,
                    props = _objectWithoutProperties(_props2, [
                      "map",
                      "google",
                      "mapCenter"
                    ]);

                  if (!google || !google.maps) {
                    return;
                  }

                  var iw = (this.infowindow = new google.maps.InfoWindow(
                    _extends(
                      {
                        content: ""
                      },
                      props
                    )
                  ));

                  google.maps.event.addListener(
                    iw,
                    "closeclick",
                    this.onClose.bind(this)
                  );
                  google.maps.event.addListener(
                    iw,
                    "domready",
                    this.onOpen.bind(this)
                  );
                }
              },
              {
                key: "onOpen",
                value: function onOpen() {
                  if (this.props.onOpen) {
                    this.props.onOpen();
                  }
                }
              },
              {
                key: "onClose",
                value: function onClose() {
                  if (this.props.onClose) {
                    this.props.onClose();
                  }
                }
              },
              {
                key: "openWindow",
                value: function openWindow() {
                  this.infowindow.open(this.props.map, this.props.marker);
                }
              },
              {
                key: "updatePosition",
                value: function updatePosition() {
                  var pos = this.props.position;
                  if (!(pos instanceof google.maps.LatLng)) {
                    pos = pos && new google.maps.LatLng(pos.lat, pos.lng);
                  }
                  this.infowindow.setPosition(pos);
                }
              },
              {
                key: "updateContent",
                value: function updateContent() {
                  var content = this.renderChildren();
                  this.infowindow.setContent(content);
                }
              },
              {
                key: "closeWindow",
                value: function closeWindow() {
                  this.infowindow.close();
                }
              },
              {
                key: "renderChildren",
                value: function renderChildren() {
                  var children = this.props.children;

                  return _server2.default.renderToString(children);
                }
              },
              {
                key: "render",
                value: function render() {
                  return null;
                }
              }
            ]);

            return InfoWindow;
          })(_react2.default.Component));

          InfoWindow.propTypes = {
            children: _propTypes2.default.element.isRequired,
            map: _propTypes2.default.object,
            marker: _propTypes2.default.object,
            position: _propTypes2.default.object,
            visible: _propTypes2.default.bool,

            // callbacks
            onClose: _propTypes2.default.func,
            onOpen: _propTypes2.default.func
          };

          InfoWindow.defaultProps = {
            visible: false
          };

          exports.default = InfoWindow;
        });
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "react-dom": "../node_modules/react-dom/index.js",
        "react-dom/server": "../node_modules/react-dom/server.browser.js"
      }
    ],
    "../node_modules/google-maps-react/dist/components/HeatMap.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define([
              "exports",
              "react",
              "prop-types",
              "../lib/String"
            ], factory);
          } else if (typeof exports !== "undefined") {
            factory(
              exports,
              require("react"),
              require("prop-types"),
              require("../lib/String")
            );
          } else {
            var mod = {
              exports: {}
            };
            factory(mod.exports, global.react, global.propTypes, global.String);
            global.HeatMap = mod.exports;
          }
        })(this, function(exports, _react, _propTypes, _String) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.HeatMap = undefined;

          var _react2 = _interopRequireDefault(_react);

          var _propTypes2 = _interopRequireDefault(_propTypes);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          var _extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          function _objectWithoutProperties(obj, keys) {
            var target = {};

            for (var i in obj) {
              if (keys.indexOf(i) >= 0) continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
              target[i] = obj[i];
            }

            return target;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              (typeof call === "object" || typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  typeof superClass
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var evtNames = ["click", "mouseover", "recenter"];

          var wrappedPromise = function wrappedPromise() {
            var wrappedPromise = {},
              promise = new Promise(function(resolve, reject) {
                wrappedPromise.resolve = resolve;
                wrappedPromise.reject = reject;
              });
            wrappedPromise.then = promise.then.bind(promise);
            wrappedPromise.catch = promise.catch.bind(promise);
            wrappedPromise.promise = promise;

            return wrappedPromise;
          };

          var HeatMap = (exports.HeatMap = (function(_React$Component) {
            _inherits(HeatMap, _React$Component);

            function HeatMap() {
              _classCallCheck(this, HeatMap);

              return _possibleConstructorReturn(
                this,
                (HeatMap.__proto__ || Object.getPrototypeOf(HeatMap)).apply(
                  this,
                  arguments
                )
              );
            }

            _createClass(HeatMap, [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this.heatMapPromise = wrappedPromise();
                  this.renderHeatMap();
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                  if (
                    this.props.map !== prevProps.map ||
                    this.props.position !== prevProps.position
                  ) {
                    if (this.heatMap) {
                      this.heatMap.setMap(null);
                      this.renderHeatMap();
                    }
                  }
                }
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this.heatMap) {
                    this.heatMap.setMap(null);
                  }
                }
              },
              {
                key: "renderHeatMap",
                value: function renderHeatMap() {
                  var _this2 = this;

                  var _props = this.props,
                    map = _props.map,
                    google = _props.google,
                    positions = _props.positions,
                    mapCenter = _props.mapCenter,
                    icon = _props.icon,
                    gradient = _props.gradient,
                    _props$radius = _props.radius,
                    radius = _props$radius === undefined ? 20 : _props$radius,
                    _props$opacity = _props.opacity,
                    opacity =
                      _props$opacity === undefined ? 0.2 : _props$opacity,
                    props = _objectWithoutProperties(_props, [
                      "map",
                      "google",
                      "positions",
                      "mapCenter",
                      "icon",
                      "gradient",
                      "radius",
                      "opacity"
                    ]);

                  if (!google) {
                    return null;
                  }

                  var data = positions.map(function(pos) {
                    return new google.maps.LatLng(pos.lat, pos.lng);
                  });

                  var pref = _extends(
                    {
                      map: map,
                      gradient: gradient,
                      radius: radius,
                      opacity: opacity,
                      data: data
                    },
                    props
                  );

                  this.heatMap = new google.maps.visualization.HeatmapLayer(
                    pref
                  );

                  this.heatMap.set(
                    "radius",
                    radius === undefined ? 20 : radius
                  );

                  this.heatMap.set(
                    "opacity",
                    opacity === undefined ? 0.2 : opacity
                  );

                  evtNames.forEach(function(e) {
                    _this2.heatMap.addListener(e, _this2.handleEvent(e));
                  });

                  this.heatMapPromise.resolve(this.heatMap);
                }
              },
              {
                key: "getHeatMap",
                value: function getHeatMap() {
                  return this.heatMapPromise;
                }
              },
              {
                key: "handleEvent",
                value: function handleEvent(evt) {
                  var _this3 = this;

                  return function(e) {
                    var evtName = "on" + (0, _String.camelize)(evt);
                    if (_this3.props[evtName]) {
                      _this3.props[evtName](_this3.props, _this3.heatMap, e);
                    }
                  };
                }
              },
              {
                key: "render",
                value: function render() {
                  return null;
                }
              }
            ]);

            return HeatMap;
          })(_react2.default.Component));

          HeatMap.propTypes = {
            position: _propTypes2.default.object,
            map: _propTypes2.default.object,
            icon: _propTypes2.default.string
          };

          evtNames.forEach(function(e) {
            return (HeatMap.propTypes[e] = _propTypes2.default.func);
          });

          HeatMap.defaultProps = {
            name: "HeatMap"
          };

          exports.default = HeatMap;
        });
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "../lib/String": "../node_modules/google-maps-react/dist/lib/String.js"
      }
    ],
    "../node_modules/google-maps-react/dist/lib/arePathsEqual.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define(["exports"], factory);
          } else if (typeof exports !== "undefined") {
            factory(exports);
          } else {
            var mod = {
              exports: {}
            };
            factory(mod.exports);
            global.arePathsEqual = mod.exports;
          }
        })(this, function(exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _typeof =
            typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
              ? function(obj) {
                  return typeof obj;
                }
              : function(obj) {
                  return obj &&
                    typeof Symbol === "function" &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                };

          /**
           * Compares two path arrays of LatLng objects.
           */

          var arePathsEqual = (exports.arePathsEqual = function arePathsEqual(
            pathA,
            pathB
          ) {
            if (pathA === pathB) {
              return true;
            }
            if (!Array.isArray(pathA) || !Array.isArray(pathB)) {
              return false;
            }
            if (pathA.length !== pathB.length) {
              return false;
            }
            for (var i = 0; i < pathA.length; ++i) {
              if (pathA[i] === pathB[i]) {
                continue;
              }
              if (!isValidLatLng(pathA[i]) || !isValidLatLng(pathB[i])) {
                return false;
              }
              if (
                pathB[i].lat !== pathA[i].lat ||
                pathB[i].lng !== pathA[i].lng
              ) {
                return false;
              }
            }
            return true;
          });

          /**
           * Helper that checks whether an array consists of objects
           * with lat and lng properties
           * @param {object} elem the element to check
           * @returns {boolean} whether or not it's valid
           */
          var isValidLatLng = function isValidLatLng(elem) {
            return (
              elem !== null &&
              (typeof elem === "undefined" ? "undefined" : _typeof(elem)) ===
                "object" &&
              elem.hasOwnProperty("lat") &&
              elem.hasOwnProperty("lng")
            );
          };
        });
      },
      {}
    ],
    "../node_modules/google-maps-react/dist/components/Polygon.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define([
              "exports",
              "react",
              "prop-types",
              "../lib/arePathsEqual",
              "../lib/String"
            ], factory);
          } else if (typeof exports !== "undefined") {
            factory(
              exports,
              require("react"),
              require("prop-types"),
              require("../lib/arePathsEqual"),
              require("../lib/String")
            );
          } else {
            var mod = {
              exports: {}
            };
            factory(
              mod.exports,
              global.react,
              global.propTypes,
              global.arePathsEqual,
              global.String
            );
            global.Polygon = mod.exports;
          }
        })(this, function(
          exports,
          _react,
          _propTypes,
          _arePathsEqual,
          _String
        ) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Polygon = undefined;

          var _react2 = _interopRequireDefault(_react);

          var _propTypes2 = _interopRequireDefault(_propTypes);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          var _extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          function _objectWithoutProperties(obj, keys) {
            var target = {};

            for (var i in obj) {
              if (keys.indexOf(i) >= 0) continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
              target[i] = obj[i];
            }

            return target;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              (typeof call === "object" || typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  typeof superClass
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var evtNames = ["click", "mouseout", "mouseover"];

          var wrappedPromise = function wrappedPromise() {
            var wrappedPromise = {},
              promise = new Promise(function(resolve, reject) {
                wrappedPromise.resolve = resolve;
                wrappedPromise.reject = reject;
              });
            wrappedPromise.then = promise.then.bind(promise);
            wrappedPromise.catch = promise.catch.bind(promise);
            wrappedPromise.promise = promise;

            return wrappedPromise;
          };

          var Polygon = (exports.Polygon = (function(_React$Component) {
            _inherits(Polygon, _React$Component);

            function Polygon() {
              _classCallCheck(this, Polygon);

              return _possibleConstructorReturn(
                this,
                (Polygon.__proto__ || Object.getPrototypeOf(Polygon)).apply(
                  this,
                  arguments
                )
              );
            }

            _createClass(Polygon, [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this.polygonPromise = wrappedPromise();
                  this.renderPolygon();
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                  if (
                    this.props.map !== prevProps.map ||
                    !(0, _arePathsEqual.arePathsEqual)(
                      this.props.paths,
                      prevProps.paths
                    )
                  ) {
                    if (this.polygon) {
                      this.polygon.setMap(null);
                    }
                    this.renderPolygon();
                  }
                }
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this.polygon) {
                    this.polygon.setMap(null);
                  }
                }
              },
              {
                key: "renderPolygon",
                value: function renderPolygon() {
                  var _this2 = this;

                  var _props = this.props,
                    map = _props.map,
                    google = _props.google,
                    paths = _props.paths,
                    strokeColor = _props.strokeColor,
                    strokeOpacity = _props.strokeOpacity,
                    strokeWeight = _props.strokeWeight,
                    fillColor = _props.fillColor,
                    fillOpacity = _props.fillOpacity,
                    props = _objectWithoutProperties(_props, [
                      "map",
                      "google",
                      "paths",
                      "strokeColor",
                      "strokeOpacity",
                      "strokeWeight",
                      "fillColor",
                      "fillOpacity"
                    ]);

                  if (!google) {
                    return null;
                  }

                  var params = _extends(
                    {
                      map: map,
                      paths: paths,
                      strokeColor: strokeColor,
                      strokeOpacity: strokeOpacity,
                      strokeWeight: strokeWeight,
                      fillColor: fillColor,
                      fillOpacity: fillOpacity
                    },
                    props
                  );

                  this.polygon = new google.maps.Polygon(params);

                  evtNames.forEach(function(e) {
                    _this2.polygon.addListener(e, _this2.handleEvent(e));
                  });

                  this.polygonPromise.resolve(this.polygon);
                }
              },
              {
                key: "getPolygon",
                value: function getPolygon() {
                  return this.polygonPromise;
                }
              },
              {
                key: "handleEvent",
                value: function handleEvent(evt) {
                  var _this3 = this;

                  return function(e) {
                    var evtName = "on" + (0, _String.camelize)(evt);
                    if (_this3.props[evtName]) {
                      _this3.props[evtName](_this3.props, _this3.polygon, e);
                    }
                  };
                }
              },
              {
                key: "render",
                value: function render() {
                  return null;
                }
              }
            ]);

            return Polygon;
          })(_react2.default.Component));

          Polygon.propTypes = {
            paths: _propTypes2.default.array,
            strokeColor: _propTypes2.default.string,
            strokeOpacity: _propTypes2.default.number,
            strokeWeight: _propTypes2.default.number,
            fillColor: _propTypes2.default.string,
            fillOpacity: _propTypes2.default.number
          };

          evtNames.forEach(function(e) {
            return (Polygon.propTypes[e] = _propTypes2.default.func);
          });

          Polygon.defaultProps = {
            name: "Polygon"
          };

          exports.default = Polygon;
        });
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "../lib/arePathsEqual":
          "../node_modules/google-maps-react/dist/lib/arePathsEqual.js",
        "../lib/String": "../node_modules/google-maps-react/dist/lib/String.js"
      }
    ],
    "../node_modules/google-maps-react/dist/components/Polyline.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define([
              "exports",
              "react",
              "prop-types",
              "../lib/arePathsEqual",
              "../lib/String"
            ], factory);
          } else if (typeof exports !== "undefined") {
            factory(
              exports,
              require("react"),
              require("prop-types"),
              require("../lib/arePathsEqual"),
              require("../lib/String")
            );
          } else {
            var mod = {
              exports: {}
            };
            factory(
              mod.exports,
              global.react,
              global.propTypes,
              global.arePathsEqual,
              global.String
            );
            global.Polyline = mod.exports;
          }
        })(this, function(
          exports,
          _react,
          _propTypes,
          _arePathsEqual,
          _String
        ) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Polyline = undefined;

          var _react2 = _interopRequireDefault(_react);

          var _propTypes2 = _interopRequireDefault(_propTypes);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          var _extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          function _objectWithoutProperties(obj, keys) {
            var target = {};

            for (var i in obj) {
              if (keys.indexOf(i) >= 0) continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
              target[i] = obj[i];
            }

            return target;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              (typeof call === "object" || typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  typeof superClass
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var evtNames = ["click", "mouseout", "mouseover"];

          var wrappedPromise = function wrappedPromise() {
            var wrappedPromise = {},
              promise = new Promise(function(resolve, reject) {
                wrappedPromise.resolve = resolve;
                wrappedPromise.reject = reject;
              });
            wrappedPromise.then = promise.then.bind(promise);
            wrappedPromise.catch = promise.catch.bind(promise);
            wrappedPromise.promise = promise;

            return wrappedPromise;
          };

          var Polyline = (exports.Polyline = (function(_React$Component) {
            _inherits(Polyline, _React$Component);

            function Polyline() {
              _classCallCheck(this, Polyline);

              return _possibleConstructorReturn(
                this,
                (Polyline.__proto__ || Object.getPrototypeOf(Polyline)).apply(
                  this,
                  arguments
                )
              );
            }

            _createClass(Polyline, [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this.polylinePromise = wrappedPromise();
                  this.renderPolyline();
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                  if (
                    this.props.map !== prevProps.map ||
                    !(0, _arePathsEqual.arePathsEqual)(
                      this.props.path,
                      prevProps.path
                    )
                  ) {
                    if (this.polyline) {
                      this.polyline.setMap(null);
                    }
                    this.renderPolyline();
                  }
                }
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this.polyline) {
                    this.polyline.setMap(null);
                  }
                }
              },
              {
                key: "renderPolyline",
                value: function renderPolyline() {
                  var _this2 = this;

                  var _props = this.props,
                    map = _props.map,
                    google = _props.google,
                    path = _props.path,
                    strokeColor = _props.strokeColor,
                    strokeOpacity = _props.strokeOpacity,
                    strokeWeight = _props.strokeWeight,
                    props = _objectWithoutProperties(_props, [
                      "map",
                      "google",
                      "path",
                      "strokeColor",
                      "strokeOpacity",
                      "strokeWeight"
                    ]);

                  if (!google) {
                    return null;
                  }

                  var params = _extends(
                    {
                      map: map,
                      path: path,
                      strokeColor: strokeColor,
                      strokeOpacity: strokeOpacity,
                      strokeWeight: strokeWeight
                    },
                    props
                  );

                  this.polyline = new google.maps.Polyline(params);

                  evtNames.forEach(function(e) {
                    _this2.polyline.addListener(e, _this2.handleEvent(e));
                  });

                  this.polylinePromise.resolve(this.polyline);
                }
              },
              {
                key: "getPolyline",
                value: function getPolyline() {
                  return this.polylinePromise;
                }
              },
              {
                key: "handleEvent",
                value: function handleEvent(evt) {
                  var _this3 = this;

                  return function(e) {
                    var evtName = "on" + (0, _String.camelize)(evt);
                    if (_this3.props[evtName]) {
                      _this3.props[evtName](_this3.props, _this3.polyline, e);
                    }
                  };
                }
              },
              {
                key: "render",
                value: function render() {
                  return null;
                }
              }
            ]);

            return Polyline;
          })(_react2.default.Component));

          Polyline.propTypes = {
            path: _propTypes2.default.array,
            strokeColor: _propTypes2.default.string,
            strokeOpacity: _propTypes2.default.number,
            strokeWeight: _propTypes2.default.number
          };

          evtNames.forEach(function(e) {
            return (Polyline.propTypes[e] = _propTypes2.default.func);
          });

          Polyline.defaultProps = {
            name: "Polyline"
          };

          exports.default = Polyline;
        });
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "../lib/arePathsEqual":
          "../node_modules/google-maps-react/dist/lib/arePathsEqual.js",
        "../lib/String": "../node_modules/google-maps-react/dist/lib/String.js"
      }
    ],
    "../node_modules/google-maps-react/dist/lib/cancelablePromise.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define(["exports"], factory);
          } else if (typeof exports !== "undefined") {
            factory(exports);
          } else {
            var mod = {
              exports: {}
            };
            factory(mod.exports);
            global.cancelablePromise = mod.exports;
          }
        })(this, function(exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          // https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html

          var makeCancelable = (exports.makeCancelable = function makeCancelable(
            promise
          ) {
            var hasCanceled_ = false;

            var wrappedPromise = new Promise(function(resolve, reject) {
              promise.then(function(val) {
                return hasCanceled_
                  ? reject({ isCanceled: true })
                  : resolve(val);
              });
              promise.catch(function(error) {
                return hasCanceled_
                  ? reject({ isCanceled: true })
                  : reject(error);
              });
            });

            return {
              promise: wrappedPromise,
              cancel: function cancel() {
                hasCanceled_ = true;
              }
            };
          });
        });
      },
      {}
    ],
    "../node_modules/google-maps-react/dist/index.js": [
      function(require, module, exports) {
        var define;
        var global = arguments[3];
        (function(global, factory) {
          if (typeof define === "function" && define.amd) {
            define([
              "exports",
              "./GoogleApiComponent",
              "./components/Marker",
              "./components/InfoWindow",
              "./components/HeatMap",
              "./components/Polygon",
              "./components/Polyline",
              "react",
              "prop-types",
              "react-dom",
              "./lib/String",
              "./lib/cancelablePromise"
            ], factory);
          } else if (typeof exports !== "undefined") {
            factory(
              exports,
              require("./GoogleApiComponent"),
              require("./components/Marker"),
              require("./components/InfoWindow"),
              require("./components/HeatMap"),
              require("./components/Polygon"),
              require("./components/Polyline"),
              require("react"),
              require("prop-types"),
              require("react-dom"),
              require("./lib/String"),
              require("./lib/cancelablePromise")
            );
          } else {
            var mod = {
              exports: {}
            };
            factory(
              mod.exports,
              global.GoogleApiComponent,
              global.Marker,
              global.InfoWindow,
              global.HeatMap,
              global.Polygon,
              global.Polyline,
              global.react,
              global.propTypes,
              global.reactDom,
              global.String,
              global.cancelablePromise
            );
            global.index = mod.exports;
          }
        })(this, function(
          exports,
          _GoogleApiComponent,
          _Marker,
          _InfoWindow,
          _HeatMap,
          _Polygon,
          _Polyline,
          _react,
          _propTypes,
          _reactDom,
          _String,
          _cancelablePromise
        ) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.Map = exports.Polyline = exports.Polygon = exports.HeatMap = exports.InfoWindow = exports.Marker = exports.GoogleApiWrapper = undefined;
          Object.defineProperty(exports, "GoogleApiWrapper", {
            enumerable: true,
            get: function() {
              return _GoogleApiComponent.wrapper;
            }
          });
          Object.defineProperty(exports, "Marker", {
            enumerable: true,
            get: function() {
              return _Marker.Marker;
            }
          });
          Object.defineProperty(exports, "InfoWindow", {
            enumerable: true,
            get: function() {
              return _InfoWindow.InfoWindow;
            }
          });
          Object.defineProperty(exports, "HeatMap", {
            enumerable: true,
            get: function() {
              return _HeatMap.HeatMap;
            }
          });
          Object.defineProperty(exports, "Polygon", {
            enumerable: true,
            get: function() {
              return _Polygon.Polygon;
            }
          });
          Object.defineProperty(exports, "Polyline", {
            enumerable: true,
            get: function() {
              return _Polyline.Polyline;
            }
          });

          var _react2 = _interopRequireDefault(_react);

          var _propTypes2 = _interopRequireDefault(_propTypes);

          var _reactDom2 = _interopRequireDefault(_reactDom);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              (typeof call === "object" || typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  typeof superClass
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var mapStyles = {
            container: {
              position: "absolute",
              width: "100%",
              height: "100%"
            },
            map: {
              position: "absolute",
              left: 0,
              right: 0,
              bottom: 0,
              top: 0
            }
          };

          var evtNames = [
            "ready",
            "click",
            "dragend",
            "recenter",
            "bounds_changed",
            "center_changed",
            "dblclick",
            "dragstart",
            "heading_change",
            "idle",
            "maptypeid_changed",
            "mousemove",
            "mouseout",
            "mouseover",
            "projection_changed",
            "resize",
            "rightclick",
            "tilesloaded",
            "tilt_changed",
            "zoom_changed"
          ];

          var Map = (exports.Map = (function(_React$Component) {
            _inherits(Map, _React$Component);

            function Map(props) {
              _classCallCheck(this, Map);

              var _this = _possibleConstructorReturn(
                this,
                (Map.__proto__ || Object.getPrototypeOf(Map)).call(this, props)
              );

              if (!props.hasOwnProperty("google")) {
                throw new Error("You must include a `google` prop");
              }

              _this.listeners = {};
              _this.state = {
                currentLocation: {
                  lat: _this.props.initialCenter.lat,
                  lng: _this.props.initialCenter.lng
                }
              };
              return _this;
            }

            _createClass(Map, [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  var _this2 = this;

                  if (this.props.centerAroundCurrentLocation) {
                    if (navigator && navigator.geolocation) {
                      this.geoPromise = (0, _cancelablePromise.makeCancelable)(
                        new Promise(function(resolve, reject) {
                          navigator.geolocation.getCurrentPosition(
                            resolve,
                            reject
                          );
                        })
                      );

                      this.geoPromise.promise
                        .then(function(pos) {
                          var coords = pos.coords;
                          _this2.setState({
                            currentLocation: {
                              lat: coords.latitude,
                              lng: coords.longitude
                            }
                          });
                        })
                        .catch(function(e) {
                          return e;
                        });
                    }
                  }
                  this.loadMap();
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps, prevState) {
                  if (prevProps.google !== this.props.google) {
                    this.loadMap();
                  }
                  if (this.props.visible !== prevProps.visible) {
                    this.restyleMap();
                  }
                  if (this.props.zoom !== prevProps.zoom) {
                    this.map.setZoom(this.props.zoom);
                  }
                  if (this.props.center !== prevProps.center) {
                    this.setState({
                      currentLocation: this.props.center
                    });
                  }
                  if (
                    prevState.currentLocation !== this.state.currentLocation
                  ) {
                    this.recenterMap();
                  }
                  if (this.props.bounds !== prevProps.bounds) {
                    this.map.fitBounds(this.props.bounds);
                  }
                }
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  var _this3 = this;

                  var google = this.props.google;

                  if (this.geoPromise) {
                    this.geoPromise.cancel();
                  }
                  Object.keys(this.listeners).forEach(function(e) {
                    google.maps.event.removeListener(_this3.listeners[e]);
                  });
                }
              },
              {
                key: "loadMap",
                value: function loadMap() {
                  var _this4 = this;

                  if (this.props && this.props.google) {
                    var google = this.props.google;

                    var maps = google.maps;

                    var mapRef = this.refs.map;
                    var node = _reactDom2.default.findDOMNode(mapRef);
                    var curr = this.state.currentLocation;
                    var center = new maps.LatLng(curr.lat, curr.lng);

                    var mapTypeIds = this.props.google.maps.MapTypeId || {};
                    var mapTypeFromProps = String(
                      this.props.mapType
                    ).toUpperCase();

                    var mapConfig = Object.assign(
                      {},
                      {
                        mapTypeId: mapTypeIds[mapTypeFromProps],
                        center: center,
                        zoom: this.props.zoom,
                        maxZoom: this.props.maxZoom,
                        minZoom: this.props.minZoom,
                        clickableIcons: !!this.props.clickableIcons,
                        disableDefaultUI: this.props.disableDefaultUI,
                        zoomControl: this.props.zoomControl,
                        mapTypeControl: this.props.mapTypeControl,
                        scaleControl: this.props.scaleControl,
                        streetViewControl: this.props.streetViewControl,
                        panControl: this.props.panControl,
                        rotateControl: this.props.rotateControl,
                        fullscreenControl: this.props.fullscreenControl,
                        scrollwheel: this.props.scrollwheel,
                        draggable: this.props.draggable,
                        keyboardShortcuts: this.props.keyboardShortcuts,
                        disableDoubleClickZoom: this.props
                          .disableDoubleClickZoom,
                        noClear: this.props.noClear,
                        styles: this.props.styles,
                        gestureHandling: this.props.gestureHandling
                      }
                    );

                    Object.keys(mapConfig).forEach(function(key) {
                      // Allow to configure mapConfig with 'false'
                      if (mapConfig[key] === null) {
                        delete mapConfig[key];
                      }
                    });

                    this.map = new maps.Map(node, mapConfig);

                    evtNames.forEach(function(e) {
                      _this4.listeners[e] = _this4.map.addListener(
                        e,
                        _this4.handleEvent(e)
                      );
                    });
                    maps.event.trigger(this.map, "ready");
                    this.forceUpdate();
                  }
                }
              },
              {
                key: "handleEvent",
                value: function handleEvent(evtName) {
                  var _this5 = this;

                  var timeout = void 0;
                  var handlerName = "on" + (0, _String.camelize)(evtName);

                  return function(e) {
                    if (timeout) {
                      clearTimeout(timeout);
                      timeout = null;
                    }
                    timeout = setTimeout(function() {
                      if (_this5.props[handlerName]) {
                        _this5.props[handlerName](_this5.props, _this5.map, e);
                      }
                    }, 0);
                  };
                }
              },
              {
                key: "recenterMap",
                value: function recenterMap() {
                  var map = this.map;

                  var google = this.props.google;

                  if (!google) return;
                  var maps = google.maps;

                  if (map) {
                    var center = this.state.currentLocation;
                    if (!(center instanceof google.maps.LatLng)) {
                      center = new google.maps.LatLng(center.lat, center.lng);
                    }
                    // map.panTo(center)
                    map.setCenter(center);
                    maps.event.trigger(map, "recenter");
                  }
                }
              },
              {
                key: "restyleMap",
                value: function restyleMap() {
                  if (this.map) {
                    var google = this.props.google;

                    google.maps.event.trigger(this.map, "resize");
                  }
                }
              },
              {
                key: "renderChildren",
                value: function renderChildren() {
                  var _this6 = this;

                  var children = this.props.children;

                  if (!children) return;

                  return _react2.default.Children.map(children, function(c) {
                    if (!c) return;
                    return _react2.default.cloneElement(c, {
                      map: _this6.map,
                      google: _this6.props.google,
                      mapCenter: _this6.state.currentLocation
                    });
                  });
                }
              },
              {
                key: "render",
                value: function render() {
                  var style = Object.assign(
                    {},
                    mapStyles.map,
                    this.props.style,
                    {
                      display: this.props.visible ? "inherit" : "none"
                    }
                  );

                  var containerStyles = Object.assign(
                    {},
                    mapStyles.container,
                    this.props.containerStyle
                  );

                  return _react2.default.createElement(
                    "div",
                    { style: containerStyles, className: this.props.className },
                    _react2.default.createElement(
                      "div",
                      { style: style, ref: "map" },
                      "Loading map..."
                    ),
                    this.renderChildren()
                  );
                }
              }
            ]);

            return Map;
          })(_react2.default.Component));

          Map.propTypes = {
            google: _propTypes2.default.object,
            zoom: _propTypes2.default.number,
            centerAroundCurrentLocation: _propTypes2.default.bool,
            center: _propTypes2.default.object,
            initialCenter: _propTypes2.default.object,
            className: _propTypes2.default.string,
            style: _propTypes2.default.object,
            containerStyle: _propTypes2.default.object,
            visible: _propTypes2.default.bool,
            mapType: _propTypes2.default.string,
            maxZoom: _propTypes2.default.number,
            minZoom: _propTypes2.default.number,
            clickableIcons: _propTypes2.default.bool,
            disableDefaultUI: _propTypes2.default.bool,
            zoomControl: _propTypes2.default.bool,
            mapTypeControl: _propTypes2.default.bool,
            scaleControl: _propTypes2.default.bool,
            streetViewControl: _propTypes2.default.bool,
            panControl: _propTypes2.default.bool,
            rotateControl: _propTypes2.default.bool,
            fullscreenControl: _propTypes2.default.bool,
            scrollwheel: _propTypes2.default.bool,
            draggable: _propTypes2.default.bool,
            keyboardShortcuts: _propTypes2.default.bool,
            disableDoubleClickZoom: _propTypes2.default.bool,
            noClear: _propTypes2.default.bool,
            styles: _propTypes2.default.array,
            gestureHandling: _propTypes2.default.string,
            bounds: _propTypes2.default.object
          };

          evtNames.forEach(function(e) {
            return (Map.propTypes[(0, _String.camelize)(e)] =
              _propTypes2.default.func);
          });

          Map.defaultProps = {
            zoom: 14,
            initialCenter: {
              lat: 37.774929,
              lng: -122.419416
            },
            center: {},
            centerAroundCurrentLocation: false,
            style: {},
            containerStyle: {},
            visible: true
          };

          exports.default = Map;
        });
      },
      {
        "./GoogleApiComponent":
          "../node_modules/google-maps-react/dist/GoogleApiComponent.js",
        "./components/Marker":
          "../node_modules/google-maps-react/dist/components/Marker.js",
        "./components/InfoWindow":
          "../node_modules/google-maps-react/dist/components/InfoWindow.js",
        "./components/HeatMap":
          "../node_modules/google-maps-react/dist/components/HeatMap.js",
        "./components/Polygon":
          "../node_modules/google-maps-react/dist/components/Polygon.js",
        "./components/Polyline":
          "../node_modules/google-maps-react/dist/components/Polyline.js",
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "react-dom": "../node_modules/react-dom/index.js",
        "./lib/String": "../node_modules/google-maps-react/dist/lib/String.js",
        "./lib/cancelablePromise":
          "../node_modules/google-maps-react/dist/lib/cancelablePromise.js"
      }
    ],
    "components/MapContainer.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.MapContainer = void 0;

        var _react = _interopRequireWildcard(require("react"));

        var _googleMapsReact = require("google-maps-react");

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var mapStyles = {
          width: "100%",
          height: "100%"
        };

        var MapContainer =
          /*#__PURE__*/
          (function(_Component) {
            _inherits(MapContainer, _Component);

            function MapContainer(_props) {
              var _this;

              _classCallCheck(this, MapContainer);

              _this = _possibleConstructorReturn(
                this,
                _getPrototypeOf(MapContainer).call(this, _props)
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "onMarkerClick",
                function(props, marker, e) {
                  _this.setState({
                    selectedPlace: props,
                    activeMarker: marker,
                    showingInfoWindow: true
                  });
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "onMapClick",
                function(props) {
                  if (_this.state.showingInfoWindow) {
                    _this.setState({
                      showingInfoWindow: false,
                      activeMarker: null
                    });
                  }
                }
              );

              _this.state = {
                showingInfoWindow: false,
                activeMarker: {},
                selectedPlace: {}
              }; // binding this to event-handler functions

              _this.onMarkerClick = _this.onMarkerClick.bind(
                _assertThisInitialized(_assertThisInitialized(_this))
              );
              _this.onMapClick = _this.onMapClick.bind(
                _assertThisInitialized(_assertThisInitialized(_this))
              );
              return _this;
            }

            _createClass(MapContainer, [
              {
                key: "render",
                value: function render() {
                  var style = {
                    width: "100%",
                    height: "100%",
                    marginLeft: "auto",
                    marginRight: "auto"
                  };
                  var styles = [
                    {
                      featureType: "water",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          color: "#d3d3d3"
                        }
                      ]
                    },
                    {
                      featureType: "transit",
                      stylers: [
                        {
                          color: "#808080"
                        },
                        {
                          visibility: "off"
                        }
                      ]
                    },
                    {
                      featureType: "road.highway",
                      elementType: "geometry.stroke",
                      stylers: [
                        {
                          visibility: "on"
                        },
                        {
                          color: "#b3b3b3"
                        }
                      ]
                    },
                    {
                      featureType: "road.highway",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          color: "#ffffff"
                        }
                      ]
                    },
                    {
                      featureType: "road.local",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          visibility: "on"
                        },
                        {
                          color: "#ffffff"
                        },
                        {
                          weight: 1.8
                        }
                      ]
                    },
                    {
                      featureType: "road.local",
                      elementType: "geometry.stroke",
                      stylers: [
                        {
                          color: "#d7d7d7"
                        }
                      ]
                    },
                    {
                      featureType: "poi",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          visibility: "on"
                        },
                        {
                          color: "#ebebeb"
                        }
                      ]
                    },
                    {
                      featureType: "administrative",
                      elementType: "geometry",
                      stylers: [
                        {
                          color: "#a7a7a7"
                        }
                      ]
                    },
                    {
                      featureType: "road.arterial",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          color: "#ffffff"
                        }
                      ]
                    },
                    {
                      featureType: "road.arterial",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          color: "#ffffff"
                        }
                      ]
                    },
                    {
                      featureType: "landscape",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          visibility: "on"
                        },
                        {
                          color: "#efefef"
                        }
                      ]
                    },
                    {
                      featureType: "road",
                      elementType: "labels.text.fill",
                      stylers: [
                        {
                          color: "#696969"
                        }
                      ]
                    },
                    {
                      featureType: "administrative",
                      elementType: "labels.text.fill",
                      stylers: [
                        {
                          visibility: "on"
                        },
                        {
                          color: "#737373"
                        }
                      ]
                    },
                    {
                      featureType: "poi",
                      elementType: "labels.icon",
                      stylers: [
                        {
                          visibility: "off"
                        }
                      ]
                    },
                    {
                      featureType: "poi",
                      elementType: "labels",
                      stylers: [
                        {
                          visibility: "off"
                        }
                      ]
                    },
                    {
                      featureType: "road.arterial",
                      elementType: "geometry.stroke",
                      stylers: [
                        {
                          color: "#d6d6d6"
                        }
                      ]
                    },
                    {
                      featureType: "road",
                      elementType: "labels.icon",
                      stylers: [
                        {
                          visibility: "off"
                        }
                      ]
                    },
                    {},
                    {
                      featureType: "poi",
                      elementType: "geometry.fill",
                      stylers: [
                        {
                          color: "#dadada"
                        }
                      ]
                    }
                  ];
                  return _react.default.createElement(
                    _googleMapsReact.Map,
                    {
                      item: true,
                      xs: 12,
                      style: style,
                      google: this.props.google,
                      onClick: this.onMapClick,
                      zoom: 13,
                      initialCenter: {
                        lat: 25.0902873,
                        lng: 55.1487291
                      },
                      styles: styles
                    },
                    _react.default.createElement(_googleMapsReact.Marker, {
                      onClick: this.onMarkerClick,
                      title: "Address:",
                      position: {
                        lat: 25.09784,
                        lng: 55.156863
                      },
                      name: "3002 Concord Tower Media City, Dubai, UAE",
                      icon: {
                        url: "https://whites.ae/marker2.png",
                        anchor: new google.maps.Point(32, 32),
                        scaledSize: new google.maps.Size(64, 64)
                      }
                    }),
                    _react.default.createElement(_googleMapsReact.Marker, {
                      onClick: this.onMarkerClick,
                      title: "Address:",
                      position: {
                        lat: 25.076578,
                        lng: 55.13976
                      },
                      name: "Dubai Marina Mall, P Level",
                      icon: {
                        url: "https://whites.ae/marker.png",
                        anchor: new google.maps.Point(32, 32),
                        scaledSize: new google.maps.Size(64, 64)
                      }
                    }),
                    _react.default.createElement(_googleMapsReact.Marker, {
                      onClick: this.onMarkerClick,
                      title: "Address:",
                      position: {
                        lat: 25.086065,
                        lng: 55.148239
                      },
                      name: "Emaar Marina Walk, Ground Floor",
                      icon: {
                        url: "https://whites.ae/marker.png",
                        anchor: new google.maps.Point(32, 32),
                        scaledSize: new google.maps.Size(64, 64)
                      }
                    }),
                    _react.default.createElement(
                      _googleMapsReact.InfoWindow,
                      {
                        marker: this.state.activeMarker,
                        visible: this.state.showingInfoWindow
                      },
                      _react.default.createElement(
                        "div",
                        null,
                        _react.default.createElement(
                          "h6",
                          null,
                          this.state.selectedPlace.name
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return MapContainer;
          })(_react.Component);

        exports.MapContainer = MapContainer;

        var _default = (0, _googleMapsReact.GoogleApiWrapper)({
          apiKey: "AIzaSyDz4-T3SwGAaBX3X359lir7jnDU_bZHbEg"
        })(MapContainer);

        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "google-maps-react": "../node_modules/google-maps-react/dist/index.js"
      }
    ],
    "../node_modules/core-js/library/modules/_to-integer.js": [
      function(require, module, exports) {
        // 7.1.4 ToInteger
        var ceil = Math.ceil;
        var floor = Math.floor;
        module.exports = function(it) {
          return isNaN((it = +it)) ? 0 : (it > 0 ? floor : ceil)(it);
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_defined.js": [
      function(require, module, exports) {
        // 7.2.1 RequireObjectCoercible(argument)
        module.exports = function(it) {
          if (it == undefined) throw TypeError("Can't call method on  " + it);
          return it;
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_string-at.js": [
      function(require, module, exports) {
        var toInteger = require("./_to-integer");
        var defined = require("./_defined");
        // true  -> String#at
        // false -> String#codePointAt
        module.exports = function(TO_STRING) {
          return function(that, pos) {
            var s = String(defined(that));
            var i = toInteger(pos);
            var l = s.length;
            var a, b;
            if (i < 0 || i >= l) return TO_STRING ? "" : undefined;
            a = s.charCodeAt(i);
            return a < 0xd800 ||
              a > 0xdbff ||
              i + 1 === l ||
              (b = s.charCodeAt(i + 1)) < 0xdc00 ||
              b > 0xdfff
              ? TO_STRING
                ? s.charAt(i)
                : a
              : TO_STRING
              ? s.slice(i, i + 2)
              : ((a - 0xd800) << 10) + (b - 0xdc00) + 0x10000;
          };
        };
      },
      {
        "./_to-integer":
          "../node_modules/core-js/library/modules/_to-integer.js",
        "./_defined": "../node_modules/core-js/library/modules/_defined.js"
      }
    ],
    "../node_modules/core-js/library/modules/_library.js": [
      function(require, module, exports) {
        module.exports = true;
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_global.js": [
      function(require, module, exports) {
        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = (module.exports =
          typeof window != "undefined" && window.Math == Math
            ? window
            : typeof self != "undefined" && self.Math == Math
            ? self
            : // eslint-disable-next-line no-new-func
              Function("return this")());
        if (typeof __g == "number") __g = global; // eslint-disable-line no-undef
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_core.js": [
      function(require, module, exports) {
        var core = (module.exports = { version: "2.5.7" });
        if (typeof __e == "number") __e = core; // eslint-disable-line no-undef
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_a-function.js": [
      function(require, module, exports) {
        module.exports = function(it) {
          if (typeof it != "function")
            throw TypeError(it + " is not a function!");
          return it;
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_ctx.js": [
      function(require, module, exports) {
        // optional / simple context binding
        var aFunction = require("./_a-function");
        module.exports = function(fn, that, length) {
          aFunction(fn);
          if (that === undefined) return fn;
          switch (length) {
            case 1:
              return function(a) {
                return fn.call(that, a);
              };
            case 2:
              return function(a, b) {
                return fn.call(that, a, b);
              };
            case 3:
              return function(a, b, c) {
                return fn.call(that, a, b, c);
              };
          }
          return function(/* ...args */) {
            return fn.apply(that, arguments);
          };
        };
      },
      {
        "./_a-function":
          "../node_modules/core-js/library/modules/_a-function.js"
      }
    ],
    "../node_modules/core-js/library/modules/_is-object.js": [
      function(require, module, exports) {
        module.exports = function(it) {
          return typeof it === "object"
            ? it !== null
            : typeof it === "function";
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_an-object.js": [
      function(require, module, exports) {
        var isObject = require("./_is-object");
        module.exports = function(it) {
          if (!isObject(it)) throw TypeError(it + " is not an object!");
          return it;
        };
      },
      {
        "./_is-object": "../node_modules/core-js/library/modules/_is-object.js"
      }
    ],
    "../node_modules/core-js/library/modules/_fails.js": [
      function(require, module, exports) {
        module.exports = function(exec) {
          try {
            return !!exec();
          } catch (e) {
            return true;
          }
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_descriptors.js": [
      function(require, module, exports) {
        // Thank's IE8 for his funny defineProperty
        module.exports = !require("./_fails")(function() {
          return (
            Object.defineProperty({}, "a", {
              get: function() {
                return 7;
              }
            }).a != 7
          );
        });
      },
      { "./_fails": "../node_modules/core-js/library/modules/_fails.js" }
    ],
    "../node_modules/core-js/library/modules/_dom-create.js": [
      function(require, module, exports) {
        var isObject = require("./_is-object");
        var document = require("./_global").document;
        // typeof document.createElement is 'object' in old IE
        var is = isObject(document) && isObject(document.createElement);
        module.exports = function(it) {
          return is ? document.createElement(it) : {};
        };
      },
      {
        "./_is-object": "../node_modules/core-js/library/modules/_is-object.js",
        "./_global": "../node_modules/core-js/library/modules/_global.js"
      }
    ],
    "../node_modules/core-js/library/modules/_ie8-dom-define.js": [
      function(require, module, exports) {
        module.exports =
          !require("./_descriptors") &&
          !require("./_fails")(function() {
            return (
              Object.defineProperty(require("./_dom-create")("div"), "a", {
                get: function() {
                  return 7;
                }
              }).a != 7
            );
          });
      },
      {
        "./_descriptors":
          "../node_modules/core-js/library/modules/_descriptors.js",
        "./_fails": "../node_modules/core-js/library/modules/_fails.js",
        "./_dom-create":
          "../node_modules/core-js/library/modules/_dom-create.js"
      }
    ],
    "../node_modules/core-js/library/modules/_to-primitive.js": [
      function(require, module, exports) {
        // 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = require("./_is-object");
        // instead of the ES6 spec version, we didn't implement @@toPrimitive case
        // and the second argument - flag - preferred type is a string
        module.exports = function(it, S) {
          if (!isObject(it)) return it;
          var fn, val;
          if (
            S &&
            typeof (fn = it.toString) == "function" &&
            !isObject((val = fn.call(it)))
          )
            return val;
          if (
            typeof (fn = it.valueOf) == "function" &&
            !isObject((val = fn.call(it)))
          )
            return val;
          if (
            !S &&
            typeof (fn = it.toString) == "function" &&
            !isObject((val = fn.call(it)))
          )
            return val;
          throw TypeError("Can't convert object to primitive value");
        };
      },
      {
        "./_is-object": "../node_modules/core-js/library/modules/_is-object.js"
      }
    ],
    "../node_modules/core-js/library/modules/_object-dp.js": [
      function(require, module, exports) {
        var anObject = require("./_an-object");
        var IE8_DOM_DEFINE = require("./_ie8-dom-define");
        var toPrimitive = require("./_to-primitive");
        var dP = Object.defineProperty;

        exports.f = require("./_descriptors")
          ? Object.defineProperty
          : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPrimitive(P, true);
              anObject(Attributes);
              if (IE8_DOM_DEFINE)
                try {
                  return dP(O, P, Attributes);
                } catch (e) {
                  /* empty */
                }
              if ("get" in Attributes || "set" in Attributes)
                throw TypeError("Accessors not supported!");
              if ("value" in Attributes) O[P] = Attributes.value;
              return O;
            };
      },
      {
        "./_an-object": "../node_modules/core-js/library/modules/_an-object.js",
        "./_ie8-dom-define":
          "../node_modules/core-js/library/modules/_ie8-dom-define.js",
        "./_to-primitive":
          "../node_modules/core-js/library/modules/_to-primitive.js",
        "./_descriptors":
          "../node_modules/core-js/library/modules/_descriptors.js"
      }
    ],
    "../node_modules/core-js/library/modules/_property-desc.js": [
      function(require, module, exports) {
        module.exports = function(bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
          };
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_hide.js": [
      function(require, module, exports) {
        var dP = require("./_object-dp");
        var createDesc = require("./_property-desc");
        module.exports = require("./_descriptors")
          ? function(object, key, value) {
              return dP.f(object, key, createDesc(1, value));
            }
          : function(object, key, value) {
              object[key] = value;
              return object;
            };
      },
      {
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js",
        "./_property-desc":
          "../node_modules/core-js/library/modules/_property-desc.js",
        "./_descriptors":
          "../node_modules/core-js/library/modules/_descriptors.js"
      }
    ],
    "../node_modules/core-js/library/modules/_has.js": [
      function(require, module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function(it, key) {
          return hasOwnProperty.call(it, key);
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_export.js": [
      function(require, module, exports) {
        var global = require("./_global");
        var core = require("./_core");
        var ctx = require("./_ctx");
        var hide = require("./_hide");
        var has = require("./_has");
        var PROTOTYPE = "prototype";

        var $export = function(type, name, source) {
          var IS_FORCED = type & $export.F;
          var IS_GLOBAL = type & $export.G;
          var IS_STATIC = type & $export.S;
          var IS_PROTO = type & $export.P;
          var IS_BIND = type & $export.B;
          var IS_WRAP = type & $export.W;
          var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
          var expProto = exports[PROTOTYPE];
          var target = IS_GLOBAL
            ? global
            : IS_STATIC
            ? global[name]
            : (global[name] || {})[PROTOTYPE];
          var key, own, out;
          if (IS_GLOBAL) source = name;
          for (key in source) {
            // contains in native
            own = !IS_FORCED && target && target[key] !== undefined;
            if (own && has(exports, key)) continue;
            // export native or passed
            out = own ? target[key] : source[key];
            // prevent global pollution for namespaces
            exports[key] =
              IS_GLOBAL && typeof target[key] != "function"
                ? source[key]
                : // bind timers to global for call from export context
                IS_BIND && own
                ? ctx(out, global)
                : // wrap global constructors for prevent change them in library
                IS_WRAP && target[key] == out
                ? (function(C) {
                    var F = function(a, b, c) {
                      if (this instanceof C) {
                        switch (arguments.length) {
                          case 0:
                            return new C();
                          case 1:
                            return new C(a);
                          case 2:
                            return new C(a, b);
                        }
                        return new C(a, b, c);
                      }
                      return C.apply(this, arguments);
                    };
                    F[PROTOTYPE] = C[PROTOTYPE];
                    return F;
                    // make static versions for prototype methods
                  })(out)
                : IS_PROTO && typeof out == "function"
                ? ctx(Function.call, out)
                : out;
            // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
            if (IS_PROTO) {
              (exports.virtual || (exports.virtual = {}))[key] = out;
              // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
              if (type & $export.R && expProto && !expProto[key])
                hide(expProto, key, out);
            }
          }
        };
        // type bitmap
        $export.F = 1; // forced
        $export.G = 2; // global
        $export.S = 4; // static
        $export.P = 8; // proto
        $export.B = 16; // bind
        $export.W = 32; // wrap
        $export.U = 64; // safe
        $export.R = 128; // real proto method for `library`
        module.exports = $export;
      },
      {
        "./_global": "../node_modules/core-js/library/modules/_global.js",
        "./_core": "../node_modules/core-js/library/modules/_core.js",
        "./_ctx": "../node_modules/core-js/library/modules/_ctx.js",
        "./_hide": "../node_modules/core-js/library/modules/_hide.js",
        "./_has": "../node_modules/core-js/library/modules/_has.js"
      }
    ],
    "../node_modules/core-js/library/modules/_redefine.js": [
      function(require, module, exports) {
        module.exports = require("./_hide");
      },
      { "./_hide": "../node_modules/core-js/library/modules/_hide.js" }
    ],
    "../node_modules/core-js/library/modules/_iterators.js": [
      function(require, module, exports) {
        module.exports = {};
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_cof.js": [
      function(require, module, exports) {
        var toString = {}.toString;

        module.exports = function(it) {
          return toString.call(it).slice(8, -1);
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_iobject.js": [
      function(require, module, exports) {
        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = require("./_cof");
        // eslint-disable-next-line no-prototype-builtins
        module.exports = Object("z").propertyIsEnumerable(0)
          ? Object
          : function(it) {
              return cof(it) == "String" ? it.split("") : Object(it);
            };
      },
      { "./_cof": "../node_modules/core-js/library/modules/_cof.js" }
    ],
    "../node_modules/core-js/library/modules/_to-iobject.js": [
      function(require, module, exports) {
        // to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = require("./_iobject");
        var defined = require("./_defined");
        module.exports = function(it) {
          return IObject(defined(it));
        };
      },
      {
        "./_iobject": "../node_modules/core-js/library/modules/_iobject.js",
        "./_defined": "../node_modules/core-js/library/modules/_defined.js"
      }
    ],
    "../node_modules/core-js/library/modules/_to-length.js": [
      function(require, module, exports) {
        // 7.1.15 ToLength
        var toInteger = require("./_to-integer");
        var min = Math.min;
        module.exports = function(it) {
          return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };
      },
      {
        "./_to-integer":
          "../node_modules/core-js/library/modules/_to-integer.js"
      }
    ],
    "../node_modules/core-js/library/modules/_to-absolute-index.js": [
      function(require, module, exports) {
        var toInteger = require("./_to-integer");
        var max = Math.max;
        var min = Math.min;
        module.exports = function(index, length) {
          index = toInteger(index);
          return index < 0 ? max(index + length, 0) : min(index, length);
        };
      },
      {
        "./_to-integer":
          "../node_modules/core-js/library/modules/_to-integer.js"
      }
    ],
    "../node_modules/core-js/library/modules/_array-includes.js": [
      function(require, module, exports) {
        // false -> Array#indexOf
        // true  -> Array#includes
        var toIObject = require("./_to-iobject");
        var toLength = require("./_to-length");
        var toAbsoluteIndex = require("./_to-absolute-index");
        module.exports = function(IS_INCLUDES) {
          return function($this, el, fromIndex) {
            var O = toIObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare
            if (IS_INCLUDES && el != el)
              while (length > index) {
                value = O[index++];
                // eslint-disable-next-line no-self-compare
                if (value != value) return true;
                // Array#indexOf ignores holes, Array#includes - not
              }
            else
              for (; length > index; index++)
                if (IS_INCLUDES || index in O) {
                  if (O[index] === el) return IS_INCLUDES || index || 0;
                }
            return !IS_INCLUDES && -1;
          };
        };
      },
      {
        "./_to-iobject":
          "../node_modules/core-js/library/modules/_to-iobject.js",
        "./_to-length": "../node_modules/core-js/library/modules/_to-length.js",
        "./_to-absolute-index":
          "../node_modules/core-js/library/modules/_to-absolute-index.js"
      }
    ],
    "../node_modules/core-js/library/modules/_shared.js": [
      function(require, module, exports) {
        var core = require("./_core");
        var global = require("./_global");
        var SHARED = "__core-js_shared__";
        var store = global[SHARED] || (global[SHARED] = {});

        (module.exports = function(key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })("versions", []).push({
          version: core.version,
          mode: require("./_library") ? "pure" : "global",
          copyright: "© 2018 Denis Pushkarev (zloirock.ru)"
        });
      },
      {
        "./_core": "../node_modules/core-js/library/modules/_core.js",
        "./_global": "../node_modules/core-js/library/modules/_global.js",
        "./_library": "../node_modules/core-js/library/modules/_library.js"
      }
    ],
    "../node_modules/core-js/library/modules/_uid.js": [
      function(require, module, exports) {
        var id = 0;
        var px = Math.random();
        module.exports = function(key) {
          return "Symbol(".concat(
            key === undefined ? "" : key,
            ")_",
            (++id + px).toString(36)
          );
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_shared-key.js": [
      function(require, module, exports) {
        var shared = require("./_shared")("keys");
        var uid = require("./_uid");
        module.exports = function(key) {
          return shared[key] || (shared[key] = uid(key));
        };
      },
      {
        "./_shared": "../node_modules/core-js/library/modules/_shared.js",
        "./_uid": "../node_modules/core-js/library/modules/_uid.js"
      }
    ],
    "../node_modules/core-js/library/modules/_object-keys-internal.js": [
      function(require, module, exports) {
        var has = require("./_has");
        var toIObject = require("./_to-iobject");
        var arrayIndexOf = require("./_array-includes")(false);
        var IE_PROTO = require("./_shared-key")("IE_PROTO");

        module.exports = function(object, names) {
          var O = toIObject(object);
          var i = 0;
          var result = [];
          var key;
          for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
          // Don't enum bug & hidden keys
          while (names.length > i)
            if (has(O, (key = names[i++]))) {
              ~arrayIndexOf(result, key) || result.push(key);
            }
          return result;
        };
      },
      {
        "./_has": "../node_modules/core-js/library/modules/_has.js",
        "./_to-iobject":
          "../node_modules/core-js/library/modules/_to-iobject.js",
        "./_array-includes":
          "../node_modules/core-js/library/modules/_array-includes.js",
        "./_shared-key":
          "../node_modules/core-js/library/modules/_shared-key.js"
      }
    ],
    "../node_modules/core-js/library/modules/_enum-bug-keys.js": [
      function(require, module, exports) {
        // IE 8- don't enum bug keys
        module.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(
          ","
        );
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_object-keys.js": [
      function(require, module, exports) {
        // 19.1.2.14 / 15.2.3.14 Object.keys(O)
        var $keys = require("./_object-keys-internal");
        var enumBugKeys = require("./_enum-bug-keys");

        module.exports =
          Object.keys ||
          function keys(O) {
            return $keys(O, enumBugKeys);
          };
      },
      {
        "./_object-keys-internal":
          "../node_modules/core-js/library/modules/_object-keys-internal.js",
        "./_enum-bug-keys":
          "../node_modules/core-js/library/modules/_enum-bug-keys.js"
      }
    ],
    "../node_modules/core-js/library/modules/_object-dps.js": [
      function(require, module, exports) {
        var dP = require("./_object-dp");
        var anObject = require("./_an-object");
        var getKeys = require("./_object-keys");

        module.exports = require("./_descriptors")
          ? Object.defineProperties
          : function defineProperties(O, Properties) {
              anObject(O);
              var keys = getKeys(Properties);
              var length = keys.length;
              var i = 0;
              var P;
              while (length > i) dP.f(O, (P = keys[i++]), Properties[P]);
              return O;
            };
      },
      {
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js",
        "./_an-object": "../node_modules/core-js/library/modules/_an-object.js",
        "./_object-keys":
          "../node_modules/core-js/library/modules/_object-keys.js",
        "./_descriptors":
          "../node_modules/core-js/library/modules/_descriptors.js"
      }
    ],
    "../node_modules/core-js/library/modules/_html.js": [
      function(require, module, exports) {
        var document = require("./_global").document;
        module.exports = document && document.documentElement;
      },
      { "./_global": "../node_modules/core-js/library/modules/_global.js" }
    ],
    "../node_modules/core-js/library/modules/_object-create.js": [
      function(require, module, exports) {
        // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        var anObject = require("./_an-object");
        var dPs = require("./_object-dps");
        var enumBugKeys = require("./_enum-bug-keys");
        var IE_PROTO = require("./_shared-key")("IE_PROTO");
        var Empty = function() {
          /* empty */
        };
        var PROTOTYPE = "prototype";

        // Create object with fake `null` prototype: use iframe Object with cleared prototype
        var createDict = function() {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = require("./_dom-create")("iframe");
          var i = enumBugKeys.length;
          var lt = "<";
          var gt = ">";
          var iframeDocument;
          iframe.style.display = "none";
          require("./_html").appendChild(iframe);
          iframe.src = "javascript:"; // eslint-disable-line no-script-url
          // createDict = iframe.contentWindow.Object;
          // html.removeChild(iframe);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(
            lt + "script" + gt + "document.F=Object" + lt + "/script" + gt
          );
          iframeDocument.close();
          createDict = iframeDocument.F;
          while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
          return createDict();
        };

        module.exports =
          Object.create ||
          function create(O, Properties) {
            var result;
            if (O !== null) {
              Empty[PROTOTYPE] = anObject(O);
              result = new Empty();
              Empty[PROTOTYPE] = null;
              // add "__proto__" for Object.getPrototypeOf polyfill
              result[IE_PROTO] = O;
            } else result = createDict();
            return Properties === undefined ? result : dPs(result, Properties);
          };
      },
      {
        "./_an-object": "../node_modules/core-js/library/modules/_an-object.js",
        "./_object-dps":
          "../node_modules/core-js/library/modules/_object-dps.js",
        "./_enum-bug-keys":
          "../node_modules/core-js/library/modules/_enum-bug-keys.js",
        "./_shared-key":
          "../node_modules/core-js/library/modules/_shared-key.js",
        "./_dom-create":
          "../node_modules/core-js/library/modules/_dom-create.js",
        "./_html": "../node_modules/core-js/library/modules/_html.js"
      }
    ],
    "../node_modules/core-js/library/modules/_wks.js": [
      function(require, module, exports) {
        var store = require("./_shared")("wks");
        var uid = require("./_uid");
        var Symbol = require("./_global").Symbol;
        var USE_SYMBOL = typeof Symbol == "function";

        var $exports = (module.exports = function(name) {
          return (
            store[name] ||
            (store[name] =
              (USE_SYMBOL && Symbol[name]) ||
              (USE_SYMBOL ? Symbol : uid)("Symbol." + name))
          );
        });

        $exports.store = store;
      },
      {
        "./_shared": "../node_modules/core-js/library/modules/_shared.js",
        "./_uid": "../node_modules/core-js/library/modules/_uid.js",
        "./_global": "../node_modules/core-js/library/modules/_global.js"
      }
    ],
    "../node_modules/core-js/library/modules/_set-to-string-tag.js": [
      function(require, module, exports) {
        var def = require("./_object-dp").f;
        var has = require("./_has");
        var TAG = require("./_wks")("toStringTag");

        module.exports = function(it, tag, stat) {
          if (it && !has((it = stat ? it : it.prototype), TAG))
            def(it, TAG, { configurable: true, value: tag });
        };
      },
      {
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js",
        "./_has": "../node_modules/core-js/library/modules/_has.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js"
      }
    ],
    "../node_modules/core-js/library/modules/_iter-create.js": [
      function(require, module, exports) {
        "use strict";
        var create = require("./_object-create");
        var descriptor = require("./_property-desc");
        var setToStringTag = require("./_set-to-string-tag");
        var IteratorPrototype = {};

        // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
        require("./_hide")(
          IteratorPrototype,
          require("./_wks")("iterator"),
          function() {
            return this;
          }
        );

        module.exports = function(Constructor, NAME, next) {
          Constructor.prototype = create(IteratorPrototype, {
            next: descriptor(1, next)
          });
          setToStringTag(Constructor, NAME + " Iterator");
        };
      },
      {
        "./_object-create":
          "../node_modules/core-js/library/modules/_object-create.js",
        "./_property-desc":
          "../node_modules/core-js/library/modules/_property-desc.js",
        "./_set-to-string-tag":
          "../node_modules/core-js/library/modules/_set-to-string-tag.js",
        "./_hide": "../node_modules/core-js/library/modules/_hide.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js"
      }
    ],
    "../node_modules/core-js/library/modules/_to-object.js": [
      function(require, module, exports) {
        // 7.1.13 ToObject(argument)
        var defined = require("./_defined");
        module.exports = function(it) {
          return Object(defined(it));
        };
      },
      { "./_defined": "../node_modules/core-js/library/modules/_defined.js" }
    ],
    "../node_modules/core-js/library/modules/_object-gpo.js": [
      function(require, module, exports) {
        // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
        var has = require("./_has");
        var toObject = require("./_to-object");
        var IE_PROTO = require("./_shared-key")("IE_PROTO");
        var ObjectProto = Object.prototype;

        module.exports =
          Object.getPrototypeOf ||
          function(O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (
              typeof O.constructor == "function" &&
              O instanceof O.constructor
            ) {
              return O.constructor.prototype;
            }
            return O instanceof Object ? ObjectProto : null;
          };
      },
      {
        "./_has": "../node_modules/core-js/library/modules/_has.js",
        "./_to-object": "../node_modules/core-js/library/modules/_to-object.js",
        "./_shared-key":
          "../node_modules/core-js/library/modules/_shared-key.js"
      }
    ],
    "../node_modules/core-js/library/modules/_iter-define.js": [
      function(require, module, exports) {
        "use strict";
        var LIBRARY = require("./_library");
        var $export = require("./_export");
        var redefine = require("./_redefine");
        var hide = require("./_hide");
        var Iterators = require("./_iterators");
        var $iterCreate = require("./_iter-create");
        var setToStringTag = require("./_set-to-string-tag");
        var getPrototypeOf = require("./_object-gpo");
        var ITERATOR = require("./_wks")("iterator");
        var BUGGY = !([].keys && "next" in [].keys()); // Safari has buggy iterators w/o `next`
        var FF_ITERATOR = "@@iterator";
        var KEYS = "keys";
        var VALUES = "values";

        var returnThis = function() {
          return this;
        };

        module.exports = function(
          Base,
          NAME,
          Constructor,
          next,
          DEFAULT,
          IS_SET,
          FORCED
        ) {
          $iterCreate(Constructor, NAME, next);
          var getMethod = function(kind) {
            if (!BUGGY && kind in proto) return proto[kind];
            switch (kind) {
              case KEYS:
                return function keys() {
                  return new Constructor(this, kind);
                };
              case VALUES:
                return function values() {
                  return new Constructor(this, kind);
                };
            }
            return function entries() {
              return new Constructor(this, kind);
            };
          };
          var TAG = NAME + " Iterator";
          var DEF_VALUES = DEFAULT == VALUES;
          var VALUES_BUG = false;
          var proto = Base.prototype;
          var $native =
            proto[ITERATOR] ||
            proto[FF_ITERATOR] ||
            (DEFAULT && proto[DEFAULT]);
          var $default = $native || getMethod(DEFAULT);
          var $entries = DEFAULT
            ? !DEF_VALUES
              ? $default
              : getMethod("entries")
            : undefined;
          var $anyNative = NAME == "Array" ? proto.entries || $native : $native;
          var methods, key, IteratorPrototype;
          // Fix native
          if ($anyNative) {
            IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
            if (
              IteratorPrototype !== Object.prototype &&
              IteratorPrototype.next
            ) {
              // Set @@toStringTag to native iterators
              setToStringTag(IteratorPrototype, TAG, true);
              // fix for some old engines
              if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != "function")
                hide(IteratorPrototype, ITERATOR, returnThis);
            }
          }
          // fix Array#{values, @@iterator}.name in V8 / FF
          if (DEF_VALUES && $native && $native.name !== VALUES) {
            VALUES_BUG = true;
            $default = function values() {
              return $native.call(this);
            };
          }
          // Define iterator
          if (
            (!LIBRARY || FORCED) &&
            (BUGGY || VALUES_BUG || !proto[ITERATOR])
          ) {
            hide(proto, ITERATOR, $default);
          }
          // Plug for library
          Iterators[NAME] = $default;
          Iterators[TAG] = returnThis;
          if (DEFAULT) {
            methods = {
              values: DEF_VALUES ? $default : getMethod(VALUES),
              keys: IS_SET ? $default : getMethod(KEYS),
              entries: $entries
            };
            if (FORCED)
              for (key in methods) {
                if (!(key in proto)) redefine(proto, key, methods[key]);
              }
            else
              $export(
                $export.P + $export.F * (BUGGY || VALUES_BUG),
                NAME,
                methods
              );
          }
          return methods;
        };
      },
      {
        "./_library": "../node_modules/core-js/library/modules/_library.js",
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_redefine": "../node_modules/core-js/library/modules/_redefine.js",
        "./_hide": "../node_modules/core-js/library/modules/_hide.js",
        "./_iterators": "../node_modules/core-js/library/modules/_iterators.js",
        "./_iter-create":
          "../node_modules/core-js/library/modules/_iter-create.js",
        "./_set-to-string-tag":
          "../node_modules/core-js/library/modules/_set-to-string-tag.js",
        "./_object-gpo":
          "../node_modules/core-js/library/modules/_object-gpo.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js"
      }
    ],
    "../node_modules/core-js/library/modules/es6.string.iterator.js": [
      function(require, module, exports) {
        "use strict";
        var $at = require("./_string-at")(true);

        // 21.1.3.27 String.prototype[@@iterator]()
        require("./_iter-define")(
          String,
          "String",
          function(iterated) {
            this._t = String(iterated); // target
            this._i = 0; // next index
            // 21.1.5.2.1 %StringIteratorPrototype%.next()
          },
          function() {
            var O = this._t;
            var index = this._i;
            var point;
            if (index >= O.length) return { value: undefined, done: true };
            point = $at(O, index);
            this._i += point.length;
            return { value: point, done: false };
          }
        );
      },
      {
        "./_string-at": "../node_modules/core-js/library/modules/_string-at.js",
        "./_iter-define":
          "../node_modules/core-js/library/modules/_iter-define.js"
      }
    ],
    "../node_modules/core-js/library/modules/_iter-call.js": [
      function(require, module, exports) {
        // call something on iterator step with safe closing on error
        var anObject = require("./_an-object");
        module.exports = function(iterator, fn, value, entries) {
          try {
            return entries ? fn(anObject(value)[0], value[1]) : fn(value);
            // 7.4.6 IteratorClose(iterator, completion)
          } catch (e) {
            var ret = iterator["return"];
            if (ret !== undefined) anObject(ret.call(iterator));
            throw e;
          }
        };
      },
      {
        "./_an-object": "../node_modules/core-js/library/modules/_an-object.js"
      }
    ],
    "../node_modules/core-js/library/modules/_is-array-iter.js": [
      function(require, module, exports) {
        // check on default Array iterator
        var Iterators = require("./_iterators");
        var ITERATOR = require("./_wks")("iterator");
        var ArrayProto = Array.prototype;

        module.exports = function(it) {
          return (
            it !== undefined &&
            (Iterators.Array === it || ArrayProto[ITERATOR] === it)
          );
        };
      },
      {
        "./_iterators": "../node_modules/core-js/library/modules/_iterators.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js"
      }
    ],
    "../node_modules/core-js/library/modules/_create-property.js": [
      function(require, module, exports) {
        "use strict";
        var $defineProperty = require("./_object-dp");
        var createDesc = require("./_property-desc");

        module.exports = function(object, index, value) {
          if (index in object)
            $defineProperty.f(object, index, createDesc(0, value));
          else object[index] = value;
        };
      },
      {
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js",
        "./_property-desc":
          "../node_modules/core-js/library/modules/_property-desc.js"
      }
    ],
    "../node_modules/core-js/library/modules/_classof.js": [
      function(require, module, exports) {
        // getting tag from 19.1.3.6 Object.prototype.toString()
        var cof = require("./_cof");
        var TAG = require("./_wks")("toStringTag");
        // ES3 wrong here
        var ARG =
          cof(
            (function() {
              return arguments;
            })()
          ) == "Arguments";

        // fallback for IE11 Script Access Denied error
        var tryGet = function(it, key) {
          try {
            return it[key];
          } catch (e) {
            /* empty */
          }
        };

        module.exports = function(it) {
          var O, T, B;
          return it === undefined
            ? "Undefined"
            : it === null
            ? "Null"
            : // @@toStringTag case
            typeof (T = tryGet((O = Object(it)), TAG)) == "string"
            ? T
            : // builtinTag case
            ARG
            ? cof(O)
            : // ES3 arguments fallback
            (B = cof(O)) == "Object" && typeof O.callee == "function"
            ? "Arguments"
            : B;
        };
      },
      {
        "./_cof": "../node_modules/core-js/library/modules/_cof.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js"
      }
    ],
    "../node_modules/core-js/library/modules/core.get-iterator-method.js": [
      function(require, module, exports) {
        var classof = require("./_classof");
        var ITERATOR = require("./_wks")("iterator");
        var Iterators = require("./_iterators");
        module.exports = require("./_core").getIteratorMethod = function(it) {
          if (it != undefined)
            return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
        };
      },
      {
        "./_classof": "../node_modules/core-js/library/modules/_classof.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js",
        "./_iterators": "../node_modules/core-js/library/modules/_iterators.js",
        "./_core": "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/core-js/library/modules/_iter-detect.js": [
      function(require, module, exports) {
        var ITERATOR = require("./_wks")("iterator");
        var SAFE_CLOSING = false;

        try {
          var riter = [7][ITERATOR]();
          riter["return"] = function() {
            SAFE_CLOSING = true;
          };
          // eslint-disable-next-line no-throw-literal
          Array.from(riter, function() {
            throw 2;
          });
        } catch (e) {
          /* empty */
        }

        module.exports = function(exec, skipClosing) {
          if (!skipClosing && !SAFE_CLOSING) return false;
          var safe = false;
          try {
            var arr = [7];
            var iter = arr[ITERATOR]();
            iter.next = function() {
              return { done: (safe = true) };
            };
            arr[ITERATOR] = function() {
              return iter;
            };
            exec(arr);
          } catch (e) {
            /* empty */
          }
          return safe;
        };
      },
      { "./_wks": "../node_modules/core-js/library/modules/_wks.js" }
    ],
    "../node_modules/core-js/library/modules/es6.array.from.js": [
      function(require, module, exports) {
        "use strict";
        var ctx = require("./_ctx");
        var $export = require("./_export");
        var toObject = require("./_to-object");
        var call = require("./_iter-call");
        var isArrayIter = require("./_is-array-iter");
        var toLength = require("./_to-length");
        var createProperty = require("./_create-property");
        var getIterFn = require("./core.get-iterator-method");

        $export(
          $export.S +
            $export.F *
              !require("./_iter-detect")(function(iter) {
                Array.from(iter);
              }),
          "Array",
          {
            // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
            from: function from(
              arrayLike /* , mapfn = undefined, thisArg = undefined */
            ) {
              var O = toObject(arrayLike);
              var C = typeof this == "function" ? this : Array;
              var aLen = arguments.length;
              var mapfn = aLen > 1 ? arguments[1] : undefined;
              var mapping = mapfn !== undefined;
              var index = 0;
              var iterFn = getIterFn(O);
              var length, result, step, iterator;
              if (mapping)
                mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
              // if object isn't iterable or it's array with default iterator - use simple case
              if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                for (
                  iterator = iterFn.call(O), result = new C();
                  !(step = iterator.next()).done;
                  index++
                ) {
                  createProperty(
                    result,
                    index,
                    mapping
                      ? call(iterator, mapfn, [step.value, index], true)
                      : step.value
                  );
                }
              } else {
                length = toLength(O.length);
                for (result = new C(length); length > index; index++) {
                  createProperty(
                    result,
                    index,
                    mapping ? mapfn(O[index], index) : O[index]
                  );
                }
              }
              result.length = index;
              return result;
            }
          }
        );
      },
      {
        "./_ctx": "../node_modules/core-js/library/modules/_ctx.js",
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_to-object": "../node_modules/core-js/library/modules/_to-object.js",
        "./_iter-call": "../node_modules/core-js/library/modules/_iter-call.js",
        "./_is-array-iter":
          "../node_modules/core-js/library/modules/_is-array-iter.js",
        "./_to-length": "../node_modules/core-js/library/modules/_to-length.js",
        "./_create-property":
          "../node_modules/core-js/library/modules/_create-property.js",
        "./core.get-iterator-method":
          "../node_modules/core-js/library/modules/core.get-iterator-method.js",
        "./_iter-detect":
          "../node_modules/core-js/library/modules/_iter-detect.js"
      }
    ],
    "../node_modules/core-js/library/fn/array/from.js": [
      function(require, module, exports) {
        require("../../modules/es6.string.iterator");
        require("../../modules/es6.array.from");
        module.exports = require("../../modules/_core").Array.from;
      },
      {
        "../../modules/es6.string.iterator":
          "../node_modules/core-js/library/modules/es6.string.iterator.js",
        "../../modules/es6.array.from":
          "../node_modules/core-js/library/modules/es6.array.from.js",
        "../../modules/_core":
          "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/array/from.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/array/from"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/array/from":
          "../node_modules/core-js/library/fn/array/from.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/toConsumableArray.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _from = require("../core-js/array/from");

        var _from2 = _interopRequireDefault(_from);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = function(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          } else {
            return (0, _from2.default)(arr);
          }
        };
      },
      {
        "../core-js/array/from":
          "../node_modules/babel-runtime/core-js/array/from.js"
      }
    ],
    "../node_modules/core-js/library/modules/_object-gops.js": [
      function(require, module, exports) {
        exports.f = Object.getOwnPropertySymbols;
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_object-pie.js": [
      function(require, module, exports) {
        exports.f = {}.propertyIsEnumerable;
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_object-assign.js": [
      function(require, module, exports) {
        "use strict";
        // 19.1.2.1 Object.assign(target, source, ...)
        var getKeys = require("./_object-keys");
        var gOPS = require("./_object-gops");
        var pIE = require("./_object-pie");
        var toObject = require("./_to-object");
        var IObject = require("./_iobject");
        var $assign = Object.assign;

        // should work with symbols and should have deterministic property order (V8 bug)
        module.exports =
          !$assign ||
          require("./_fails")(function() {
            var A = {};
            var B = {};
            // eslint-disable-next-line no-undef
            var S = Symbol();
            var K = "abcdefghijklmnopqrst";
            A[S] = 7;
            K.split("").forEach(function(k) {
              B[k] = k;
            });
            return (
              $assign({}, A)[S] != 7 ||
              Object.keys($assign({}, B)).join("") != K
            );
          })
            ? function assign(target, source) {
                // eslint-disable-line no-unused-vars
                var T = toObject(target);
                var aLen = arguments.length;
                var index = 1;
                var getSymbols = gOPS.f;
                var isEnum = pIE.f;
                while (aLen > index) {
                  var S = IObject(arguments[index++]);
                  var keys = getSymbols
                    ? getKeys(S).concat(getSymbols(S))
                    : getKeys(S);
                  var length = keys.length;
                  var j = 0;
                  var key;
                  while (length > j)
                    if (isEnum.call(S, (key = keys[j++]))) T[key] = S[key];
                }
                return T;
              }
            : $assign;
      },
      {
        "./_object-keys":
          "../node_modules/core-js/library/modules/_object-keys.js",
        "./_object-gops":
          "../node_modules/core-js/library/modules/_object-gops.js",
        "./_object-pie":
          "../node_modules/core-js/library/modules/_object-pie.js",
        "./_to-object": "../node_modules/core-js/library/modules/_to-object.js",
        "./_iobject": "../node_modules/core-js/library/modules/_iobject.js",
        "./_fails": "../node_modules/core-js/library/modules/_fails.js"
      }
    ],
    "../node_modules/core-js/library/modules/es6.object.assign.js": [
      function(require, module, exports) {
        // 19.1.3.1 Object.assign(target, source)
        var $export = require("./_export");

        $export($export.S + $export.F, "Object", {
          assign: require("./_object-assign")
        });
      },
      {
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_object-assign":
          "../node_modules/core-js/library/modules/_object-assign.js"
      }
    ],
    "../node_modules/core-js/library/fn/object/assign.js": [
      function(require, module, exports) {
        require("../../modules/es6.object.assign");
        module.exports = require("../../modules/_core").Object.assign;
      },
      {
        "../../modules/es6.object.assign":
          "../node_modules/core-js/library/modules/es6.object.assign.js",
        "../../modules/_core":
          "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/object/assign.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/object/assign"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/object/assign":
          "../node_modules/core-js/library/fn/object/assign.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/extends.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _assign = require("../core-js/object/assign");

        var _assign2 = _interopRequireDefault(_assign);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default =
          _assign2.default ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };
      },
      {
        "../core-js/object/assign":
          "../node_modules/babel-runtime/core-js/object/assign.js"
      }
    ],
    "../node_modules/core-js/library/modules/_object-sap.js": [
      function(require, module, exports) {
        // most Object methods by ES6 should accept primitives
        var $export = require("./_export");
        var core = require("./_core");
        var fails = require("./_fails");
        module.exports = function(KEY, exec) {
          var fn = (core.Object || {})[KEY] || Object[KEY];
          var exp = {};
          exp[KEY] = exec(fn);
          $export(
            $export.S +
              $export.F *
                fails(function() {
                  fn(1);
                }),
            "Object",
            exp
          );
        };
      },
      {
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_core": "../node_modules/core-js/library/modules/_core.js",
        "./_fails": "../node_modules/core-js/library/modules/_fails.js"
      }
    ],
    "../node_modules/core-js/library/modules/es6.object.get-prototype-of.js": [
      function(require, module, exports) {
        // 19.1.2.9 Object.getPrototypeOf(O)
        var toObject = require("./_to-object");
        var $getPrototypeOf = require("./_object-gpo");

        require("./_object-sap")("getPrototypeOf", function() {
          return function getPrototypeOf(it) {
            return $getPrototypeOf(toObject(it));
          };
        });
      },
      {
        "./_to-object": "../node_modules/core-js/library/modules/_to-object.js",
        "./_object-gpo":
          "../node_modules/core-js/library/modules/_object-gpo.js",
        "./_object-sap":
          "../node_modules/core-js/library/modules/_object-sap.js"
      }
    ],
    "../node_modules/core-js/library/fn/object/get-prototype-of.js": [
      function(require, module, exports) {
        require("../../modules/es6.object.get-prototype-of");
        module.exports = require("../../modules/_core").Object.getPrototypeOf;
      },
      {
        "../../modules/es6.object.get-prototype-of":
          "../node_modules/core-js/library/modules/es6.object.get-prototype-of.js",
        "../../modules/_core":
          "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/object/get-prototype-of.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/object/get-prototype-of"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/object/get-prototype-of":
          "../node_modules/core-js/library/fn/object/get-prototype-of.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/classCallCheck.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        exports.default = function(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/es6.object.define-property.js": [
      function(require, module, exports) {
        var $export = require("./_export");
        // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
        $export($export.S + $export.F * !require("./_descriptors"), "Object", {
          defineProperty: require("./_object-dp").f
        });
      },
      {
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_descriptors":
          "../node_modules/core-js/library/modules/_descriptors.js",
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js"
      }
    ],
    "../node_modules/core-js/library/fn/object/define-property.js": [
      function(require, module, exports) {
        require("../../modules/es6.object.define-property");
        var $Object = require("../../modules/_core").Object;
        module.exports = function defineProperty(it, key, desc) {
          return $Object.defineProperty(it, key, desc);
        };
      },
      {
        "../../modules/es6.object.define-property":
          "../node_modules/core-js/library/modules/es6.object.define-property.js",
        "../../modules/_core":
          "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/object/define-property.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/object/define-property"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/object/define-property":
          "../node_modules/core-js/library/fn/object/define-property.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/createClass.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _defineProperty = require("../core-js/object/define-property");

        var _defineProperty2 = _interopRequireDefault(_defineProperty);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              (0, _defineProperty2.default)(target, descriptor.key, descriptor);
            }
          }

          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();
      },
      {
        "../core-js/object/define-property":
          "../node_modules/babel-runtime/core-js/object/define-property.js"
      }
    ],
    "../node_modules/core-js/library/modules/_add-to-unscopables.js": [
      function(require, module, exports) {
        module.exports = function() {
          /* empty */
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/_iter-step.js": [
      function(require, module, exports) {
        module.exports = function(done, value) {
          return { value: value, done: !!done };
        };
      },
      {}
    ],
    "../node_modules/core-js/library/modules/es6.array.iterator.js": [
      function(require, module, exports) {
        "use strict";
        var addToUnscopables = require("./_add-to-unscopables");
        var step = require("./_iter-step");
        var Iterators = require("./_iterators");
        var toIObject = require("./_to-iobject");

        // 22.1.3.4 Array.prototype.entries()
        // 22.1.3.13 Array.prototype.keys()
        // 22.1.3.29 Array.prototype.values()
        // 22.1.3.30 Array.prototype[@@iterator]()
        module.exports = require("./_iter-define")(
          Array,
          "Array",
          function(iterated, kind) {
            this._t = toIObject(iterated); // target
            this._i = 0; // next index
            this._k = kind; // kind
            // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
          },
          function() {
            var O = this._t;
            var kind = this._k;
            var index = this._i++;
            if (!O || index >= O.length) {
              this._t = undefined;
              return step(1);
            }
            if (kind == "keys") return step(0, index);
            if (kind == "values") return step(0, O[index]);
            return step(0, [index, O[index]]);
          },
          "values"
        );

        // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
        Iterators.Arguments = Iterators.Array;

        addToUnscopables("keys");
        addToUnscopables("values");
        addToUnscopables("entries");
      },
      {
        "./_add-to-unscopables":
          "../node_modules/core-js/library/modules/_add-to-unscopables.js",
        "./_iter-step": "../node_modules/core-js/library/modules/_iter-step.js",
        "./_iterators": "../node_modules/core-js/library/modules/_iterators.js",
        "./_to-iobject":
          "../node_modules/core-js/library/modules/_to-iobject.js",
        "./_iter-define":
          "../node_modules/core-js/library/modules/_iter-define.js"
      }
    ],
    "../node_modules/core-js/library/modules/web.dom.iterable.js": [
      function(require, module, exports) {
        require("./es6.array.iterator");
        var global = require("./_global");
        var hide = require("./_hide");
        var Iterators = require("./_iterators");
        var TO_STRING_TAG = require("./_wks")("toStringTag");

        var DOMIterables = (
          "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList," +
          "DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement," +
          "MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList," +
          "SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList," +
          "TextTrackList,TouchList"
        ).split(",");

        for (var i = 0; i < DOMIterables.length; i++) {
          var NAME = DOMIterables[i];
          var Collection = global[NAME];
          var proto = Collection && Collection.prototype;
          if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
          Iterators[NAME] = Iterators.Array;
        }
      },
      {
        "./es6.array.iterator":
          "../node_modules/core-js/library/modules/es6.array.iterator.js",
        "./_global": "../node_modules/core-js/library/modules/_global.js",
        "./_hide": "../node_modules/core-js/library/modules/_hide.js",
        "./_iterators": "../node_modules/core-js/library/modules/_iterators.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js"
      }
    ],
    "../node_modules/core-js/library/modules/_wks-ext.js": [
      function(require, module, exports) {
        exports.f = require("./_wks");
      },
      { "./_wks": "../node_modules/core-js/library/modules/_wks.js" }
    ],
    "../node_modules/core-js/library/fn/symbol/iterator.js": [
      function(require, module, exports) {
        require("../../modules/es6.string.iterator");
        require("../../modules/web.dom.iterable");
        module.exports = require("../../modules/_wks-ext").f("iterator");
      },
      {
        "../../modules/es6.string.iterator":
          "../node_modules/core-js/library/modules/es6.string.iterator.js",
        "../../modules/web.dom.iterable":
          "../node_modules/core-js/library/modules/web.dom.iterable.js",
        "../../modules/_wks-ext":
          "../node_modules/core-js/library/modules/_wks-ext.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/symbol/iterator.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/symbol/iterator"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/symbol/iterator":
          "../node_modules/core-js/library/fn/symbol/iterator.js"
      }
    ],
    "../node_modules/core-js/library/modules/_meta.js": [
      function(require, module, exports) {
        var META = require("./_uid")("meta");
        var isObject = require("./_is-object");
        var has = require("./_has");
        var setDesc = require("./_object-dp").f;
        var id = 0;
        var isExtensible =
          Object.isExtensible ||
          function() {
            return true;
          };
        var FREEZE = !require("./_fails")(function() {
          return isExtensible(Object.preventExtensions({}));
        });
        var setMeta = function(it) {
          setDesc(it, META, {
            value: {
              i: "O" + ++id, // object ID
              w: {} // weak collections IDs
            }
          });
        };
        var fastKey = function(it, create) {
          // return primitive with prefix
          if (!isObject(it))
            return typeof it == "symbol"
              ? it
              : (typeof it == "string" ? "S" : "P") + it;
          if (!has(it, META)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return "F";
            // not necessary to add metadata
            if (!create) return "E";
            // add missing metadata
            setMeta(it);
            // return object ID
          }
          return it[META].i;
        };
        var getWeak = function(it, create) {
          if (!has(it, META)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return true;
            // not necessary to add metadata
            if (!create) return false;
            // add missing metadata
            setMeta(it);
            // return hash weak collections IDs
          }
          return it[META].w;
        };
        // add metadata on freeze-family methods calling
        var onFreeze = function(it) {
          if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META))
            setMeta(it);
          return it;
        };
        var meta = (module.exports = {
          KEY: META,
          NEED: false,
          fastKey: fastKey,
          getWeak: getWeak,
          onFreeze: onFreeze
        });
      },
      {
        "./_uid": "../node_modules/core-js/library/modules/_uid.js",
        "./_is-object": "../node_modules/core-js/library/modules/_is-object.js",
        "./_has": "../node_modules/core-js/library/modules/_has.js",
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js",
        "./_fails": "../node_modules/core-js/library/modules/_fails.js"
      }
    ],
    "../node_modules/core-js/library/modules/_wks-define.js": [
      function(require, module, exports) {
        var global = require("./_global");
        var core = require("./_core");
        var LIBRARY = require("./_library");
        var wksExt = require("./_wks-ext");
        var defineProperty = require("./_object-dp").f;
        module.exports = function(name) {
          var $Symbol =
            core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
          if (name.charAt(0) != "_" && !(name in $Symbol))
            defineProperty($Symbol, name, { value: wksExt.f(name) });
        };
      },
      {
        "./_global": "../node_modules/core-js/library/modules/_global.js",
        "./_core": "../node_modules/core-js/library/modules/_core.js",
        "./_library": "../node_modules/core-js/library/modules/_library.js",
        "./_wks-ext": "../node_modules/core-js/library/modules/_wks-ext.js",
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js"
      }
    ],
    "../node_modules/core-js/library/modules/_enum-keys.js": [
      function(require, module, exports) {
        // all enumerable object keys, includes symbols
        var getKeys = require("./_object-keys");
        var gOPS = require("./_object-gops");
        var pIE = require("./_object-pie");
        module.exports = function(it) {
          var result = getKeys(it);
          var getSymbols = gOPS.f;
          if (getSymbols) {
            var symbols = getSymbols(it);
            var isEnum = pIE.f;
            var i = 0;
            var key;
            while (symbols.length > i)
              if (isEnum.call(it, (key = symbols[i++]))) result.push(key);
          }
          return result;
        };
      },
      {
        "./_object-keys":
          "../node_modules/core-js/library/modules/_object-keys.js",
        "./_object-gops":
          "../node_modules/core-js/library/modules/_object-gops.js",
        "./_object-pie":
          "../node_modules/core-js/library/modules/_object-pie.js"
      }
    ],
    "../node_modules/core-js/library/modules/_is-array.js": [
      function(require, module, exports) {
        // 7.2.2 IsArray(argument)
        var cof = require("./_cof");
        module.exports =
          Array.isArray ||
          function isArray(arg) {
            return cof(arg) == "Array";
          };
      },
      { "./_cof": "../node_modules/core-js/library/modules/_cof.js" }
    ],
    "../node_modules/core-js/library/modules/_object-gopn.js": [
      function(require, module, exports) {
        // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
        var $keys = require("./_object-keys-internal");
        var hiddenKeys = require("./_enum-bug-keys").concat(
          "length",
          "prototype"
        );

        exports.f =
          Object.getOwnPropertyNames ||
          function getOwnPropertyNames(O) {
            return $keys(O, hiddenKeys);
          };
      },
      {
        "./_object-keys-internal":
          "../node_modules/core-js/library/modules/_object-keys-internal.js",
        "./_enum-bug-keys":
          "../node_modules/core-js/library/modules/_enum-bug-keys.js"
      }
    ],
    "../node_modules/core-js/library/modules/_object-gopn-ext.js": [
      function(require, module, exports) {
        // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
        var toIObject = require("./_to-iobject");
        var gOPN = require("./_object-gopn").f;
        var toString = {}.toString;

        var windowNames =
          typeof window == "object" && window && Object.getOwnPropertyNames
            ? Object.getOwnPropertyNames(window)
            : [];

        var getWindowNames = function(it) {
          try {
            return gOPN(it);
          } catch (e) {
            return windowNames.slice();
          }
        };

        module.exports.f = function getOwnPropertyNames(it) {
          return windowNames && toString.call(it) == "[object Window]"
            ? getWindowNames(it)
            : gOPN(toIObject(it));
        };
      },
      {
        "./_to-iobject":
          "../node_modules/core-js/library/modules/_to-iobject.js",
        "./_object-gopn":
          "../node_modules/core-js/library/modules/_object-gopn.js"
      }
    ],
    "../node_modules/core-js/library/modules/_object-gopd.js": [
      function(require, module, exports) {
        var pIE = require("./_object-pie");
        var createDesc = require("./_property-desc");
        var toIObject = require("./_to-iobject");
        var toPrimitive = require("./_to-primitive");
        var has = require("./_has");
        var IE8_DOM_DEFINE = require("./_ie8-dom-define");
        var gOPD = Object.getOwnPropertyDescriptor;

        exports.f = require("./_descriptors")
          ? gOPD
          : function getOwnPropertyDescriptor(O, P) {
              O = toIObject(O);
              P = toPrimitive(P, true);
              if (IE8_DOM_DEFINE)
                try {
                  return gOPD(O, P);
                } catch (e) {
                  /* empty */
                }
              if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
            };
      },
      {
        "./_object-pie":
          "../node_modules/core-js/library/modules/_object-pie.js",
        "./_property-desc":
          "../node_modules/core-js/library/modules/_property-desc.js",
        "./_to-iobject":
          "../node_modules/core-js/library/modules/_to-iobject.js",
        "./_to-primitive":
          "../node_modules/core-js/library/modules/_to-primitive.js",
        "./_has": "../node_modules/core-js/library/modules/_has.js",
        "./_ie8-dom-define":
          "../node_modules/core-js/library/modules/_ie8-dom-define.js",
        "./_descriptors":
          "../node_modules/core-js/library/modules/_descriptors.js"
      }
    ],
    "../node_modules/core-js/library/modules/es6.symbol.js": [
      function(require, module, exports) {
        "use strict";
        // ECMAScript 6 symbols shim
        var global = require("./_global");
        var has = require("./_has");
        var DESCRIPTORS = require("./_descriptors");
        var $export = require("./_export");
        var redefine = require("./_redefine");
        var META = require("./_meta").KEY;
        var $fails = require("./_fails");
        var shared = require("./_shared");
        var setToStringTag = require("./_set-to-string-tag");
        var uid = require("./_uid");
        var wks = require("./_wks");
        var wksExt = require("./_wks-ext");
        var wksDefine = require("./_wks-define");
        var enumKeys = require("./_enum-keys");
        var isArray = require("./_is-array");
        var anObject = require("./_an-object");
        var isObject = require("./_is-object");
        var toIObject = require("./_to-iobject");
        var toPrimitive = require("./_to-primitive");
        var createDesc = require("./_property-desc");
        var _create = require("./_object-create");
        var gOPNExt = require("./_object-gopn-ext");
        var $GOPD = require("./_object-gopd");
        var $DP = require("./_object-dp");
        var $keys = require("./_object-keys");
        var gOPD = $GOPD.f;
        var dP = $DP.f;
        var gOPN = gOPNExt.f;
        var $Symbol = global.Symbol;
        var $JSON = global.JSON;
        var _stringify = $JSON && $JSON.stringify;
        var PROTOTYPE = "prototype";
        var HIDDEN = wks("_hidden");
        var TO_PRIMITIVE = wks("toPrimitive");
        var isEnum = {}.propertyIsEnumerable;
        var SymbolRegistry = shared("symbol-registry");
        var AllSymbols = shared("symbols");
        var OPSymbols = shared("op-symbols");
        var ObjectProto = Object[PROTOTYPE];
        var USE_NATIVE = typeof $Symbol == "function";
        var QObject = global.QObject;
        // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
        var setter =
          !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

        // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
        var setSymbolDesc =
          DESCRIPTORS &&
          $fails(function() {
            return (
              _create(
                dP({}, "a", {
                  get: function() {
                    return dP(this, "a", { value: 7 }).a;
                  }
                })
              ).a != 7
            );
          })
            ? function(it, key, D) {
                var protoDesc = gOPD(ObjectProto, key);
                if (protoDesc) delete ObjectProto[key];
                dP(it, key, D);
                if (protoDesc && it !== ObjectProto)
                  dP(ObjectProto, key, protoDesc);
              }
            : dP;

        var wrap = function(tag) {
          var sym = (AllSymbols[tag] = _create($Symbol[PROTOTYPE]));
          sym._k = tag;
          return sym;
        };

        var isSymbol =
          USE_NATIVE && typeof $Symbol.iterator == "symbol"
            ? function(it) {
                return typeof it == "symbol";
              }
            : function(it) {
                return it instanceof $Symbol;
              };

        var $defineProperty = function defineProperty(it, key, D) {
          if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
          anObject(it);
          key = toPrimitive(key, true);
          anObject(D);
          if (has(AllSymbols, key)) {
            if (!D.enumerable) {
              if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
              it[HIDDEN][key] = true;
            } else {
              if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
              D = _create(D, { enumerable: createDesc(0, false) });
            }
            return setSymbolDesc(it, key, D);
          }
          return dP(it, key, D);
        };
        var $defineProperties = function defineProperties(it, P) {
          anObject(it);
          var keys = enumKeys((P = toIObject(P)));
          var i = 0;
          var l = keys.length;
          var key;
          while (l > i) $defineProperty(it, (key = keys[i++]), P[key]);
          return it;
        };
        var $create = function create(it, P) {
          return P === undefined
            ? _create(it)
            : $defineProperties(_create(it), P);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
          var E = isEnum.call(this, (key = toPrimitive(key, true)));
          if (
            this === ObjectProto &&
            has(AllSymbols, key) &&
            !has(OPSymbols, key)
          )
            return false;
          return E ||
            !has(this, key) ||
            !has(AllSymbols, key) ||
            (has(this, HIDDEN) && this[HIDDEN][key])
            ? E
            : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(
          it,
          key
        ) {
          it = toIObject(it);
          key = toPrimitive(key, true);
          if (
            it === ObjectProto &&
            has(AllSymbols, key) &&
            !has(OPSymbols, key)
          )
            return;
          var D = gOPD(it, key);
          if (
            D &&
            has(AllSymbols, key) &&
            !(has(it, HIDDEN) && it[HIDDEN][key])
          )
            D.enumerable = true;
          return D;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
          var names = gOPN(toIObject(it));
          var result = [];
          var i = 0;
          var key;
          while (names.length > i) {
            if (
              !has(AllSymbols, (key = names[i++])) &&
              key != HIDDEN &&
              key != META
            )
              result.push(key);
          }
          return result;
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
          var IS_OP = it === ObjectProto;
          var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
          var result = [];
          var i = 0;
          var key;
          while (names.length > i) {
            if (
              has(AllSymbols, (key = names[i++])) &&
              (IS_OP ? has(ObjectProto, key) : true)
            )
              result.push(AllSymbols[key]);
          }
          return result;
        };

        // 19.4.1.1 Symbol([description])
        if (!USE_NATIVE) {
          $Symbol = function Symbol() {
            if (this instanceof $Symbol)
              throw TypeError("Symbol is not a constructor!");
            var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
            var $set = function(value) {
              if (this === ObjectProto) $set.call(OPSymbols, value);
              if (has(this, HIDDEN) && has(this[HIDDEN], tag))
                this[HIDDEN][tag] = false;
              setSymbolDesc(this, tag, createDesc(1, value));
            };
            if (DESCRIPTORS && setter)
              setSymbolDesc(ObjectProto, tag, {
                configurable: true,
                set: $set
              });
            return wrap(tag);
          };
          redefine($Symbol[PROTOTYPE], "toString", function toString() {
            return this._k;
          });

          $GOPD.f = $getOwnPropertyDescriptor;
          $DP.f = $defineProperty;
          require("./_object-gopn").f = gOPNExt.f = $getOwnPropertyNames;
          require("./_object-pie").f = $propertyIsEnumerable;
          require("./_object-gops").f = $getOwnPropertySymbols;

          if (DESCRIPTORS && !require("./_library")) {
            redefine(
              ObjectProto,
              "propertyIsEnumerable",
              $propertyIsEnumerable,
              true
            );
          }

          wksExt.f = function(name) {
            return wrap(wks(name));
          };
        }

        $export($export.G + $export.W + $export.F * !USE_NATIVE, {
          Symbol: $Symbol
        });

        for (
          var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
            "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(
              ","
            ),
            j = 0;
          es6Symbols.length > j;

        )
          wks(es6Symbols[j++]);

        for (
          var wellKnownSymbols = $keys(wks.store), k = 0;
          wellKnownSymbols.length > k;

        )
          wksDefine(wellKnownSymbols[k++]);

        $export($export.S + $export.F * !USE_NATIVE, "Symbol", {
          // 19.4.2.1 Symbol.for(key)
          for: function(key) {
            return has(SymbolRegistry, (key += ""))
              ? SymbolRegistry[key]
              : (SymbolRegistry[key] = $Symbol(key));
          },
          // 19.4.2.5 Symbol.keyFor(sym)
          keyFor: function keyFor(sym) {
            if (!isSymbol(sym)) throw TypeError(sym + " is not a symbol!");
            for (var key in SymbolRegistry)
              if (SymbolRegistry[key] === sym) return key;
          },
          useSetter: function() {
            setter = true;
          },
          useSimple: function() {
            setter = false;
          }
        });

        $export($export.S + $export.F * !USE_NATIVE, "Object", {
          // 19.1.2.2 Object.create(O [, Properties])
          create: $create,
          // 19.1.2.4 Object.defineProperty(O, P, Attributes)
          defineProperty: $defineProperty,
          // 19.1.2.3 Object.defineProperties(O, Properties)
          defineProperties: $defineProperties,
          // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
          getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
          // 19.1.2.7 Object.getOwnPropertyNames(O)
          getOwnPropertyNames: $getOwnPropertyNames,
          // 19.1.2.8 Object.getOwnPropertySymbols(O)
          getOwnPropertySymbols: $getOwnPropertySymbols
        });

        // 24.3.2 JSON.stringify(value [, replacer [, space]])
        $JSON &&
          $export(
            $export.S +
              $export.F *
                (!USE_NATIVE ||
                  $fails(function() {
                    var S = $Symbol();
                    // MS Edge converts symbol values to JSON as {}
                    // WebKit converts symbol values to JSON as null
                    // V8 throws on boxed symbols
                    return (
                      _stringify([S]) != "[null]" ||
                      _stringify({ a: S }) != "{}" ||
                      _stringify(Object(S)) != "{}"
                    );
                  })),
            "JSON",
            {
              stringify: function stringify(it) {
                var args = [it];
                var i = 1;
                var replacer, $replacer;
                while (arguments.length > i) args.push(arguments[i++]);
                $replacer = replacer = args[1];
                if ((!isObject(replacer) && it === undefined) || isSymbol(it))
                  return; // IE8 returns string on undefined
                if (!isArray(replacer))
                  replacer = function(key, value) {
                    if (typeof $replacer == "function")
                      value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                  };
                args[1] = replacer;
                return _stringify.apply($JSON, args);
              }
            }
          );

        // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
        $Symbol[PROTOTYPE][TO_PRIMITIVE] ||
          require("./_hide")(
            $Symbol[PROTOTYPE],
            TO_PRIMITIVE,
            $Symbol[PROTOTYPE].valueOf
          );
        // 19.4.3.5 Symbol.prototype[@@toStringTag]
        setToStringTag($Symbol, "Symbol");
        // 20.2.1.9 Math[@@toStringTag]
        setToStringTag(Math, "Math", true);
        // 24.3.3 JSON[@@toStringTag]
        setToStringTag(global.JSON, "JSON", true);
      },
      {
        "./_global": "../node_modules/core-js/library/modules/_global.js",
        "./_has": "../node_modules/core-js/library/modules/_has.js",
        "./_descriptors":
          "../node_modules/core-js/library/modules/_descriptors.js",
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_redefine": "../node_modules/core-js/library/modules/_redefine.js",
        "./_meta": "../node_modules/core-js/library/modules/_meta.js",
        "./_fails": "../node_modules/core-js/library/modules/_fails.js",
        "./_shared": "../node_modules/core-js/library/modules/_shared.js",
        "./_set-to-string-tag":
          "../node_modules/core-js/library/modules/_set-to-string-tag.js",
        "./_uid": "../node_modules/core-js/library/modules/_uid.js",
        "./_wks": "../node_modules/core-js/library/modules/_wks.js",
        "./_wks-ext": "../node_modules/core-js/library/modules/_wks-ext.js",
        "./_wks-define":
          "../node_modules/core-js/library/modules/_wks-define.js",
        "./_enum-keys": "../node_modules/core-js/library/modules/_enum-keys.js",
        "./_is-array": "../node_modules/core-js/library/modules/_is-array.js",
        "./_an-object": "../node_modules/core-js/library/modules/_an-object.js",
        "./_is-object": "../node_modules/core-js/library/modules/_is-object.js",
        "./_to-iobject":
          "../node_modules/core-js/library/modules/_to-iobject.js",
        "./_to-primitive":
          "../node_modules/core-js/library/modules/_to-primitive.js",
        "./_property-desc":
          "../node_modules/core-js/library/modules/_property-desc.js",
        "./_object-create":
          "../node_modules/core-js/library/modules/_object-create.js",
        "./_object-gopn-ext":
          "../node_modules/core-js/library/modules/_object-gopn-ext.js",
        "./_object-gopd":
          "../node_modules/core-js/library/modules/_object-gopd.js",
        "./_object-dp": "../node_modules/core-js/library/modules/_object-dp.js",
        "./_object-keys":
          "../node_modules/core-js/library/modules/_object-keys.js",
        "./_object-gopn":
          "../node_modules/core-js/library/modules/_object-gopn.js",
        "./_object-pie":
          "../node_modules/core-js/library/modules/_object-pie.js",
        "./_object-gops":
          "../node_modules/core-js/library/modules/_object-gops.js",
        "./_library": "../node_modules/core-js/library/modules/_library.js",
        "./_hide": "../node_modules/core-js/library/modules/_hide.js"
      }
    ],
    "../node_modules/core-js/library/modules/es6.object.to-string.js": [
      function(require, module, exports) {},
      {}
    ],
    "../node_modules/core-js/library/modules/es7.symbol.async-iterator.js": [
      function(require, module, exports) {
        require("./_wks-define")("asyncIterator");
      },
      {
        "./_wks-define":
          "../node_modules/core-js/library/modules/_wks-define.js"
      }
    ],
    "../node_modules/core-js/library/modules/es7.symbol.observable.js": [
      function(require, module, exports) {
        require("./_wks-define")("observable");
      },
      {
        "./_wks-define":
          "../node_modules/core-js/library/modules/_wks-define.js"
      }
    ],
    "../node_modules/core-js/library/fn/symbol/index.js": [
      function(require, module, exports) {
        require("../../modules/es6.symbol");
        require("../../modules/es6.object.to-string");
        require("../../modules/es7.symbol.async-iterator");
        require("../../modules/es7.symbol.observable");
        module.exports = require("../../modules/_core").Symbol;
      },
      {
        "../../modules/es6.symbol":
          "../node_modules/core-js/library/modules/es6.symbol.js",
        "../../modules/es6.object.to-string":
          "../node_modules/core-js/library/modules/es6.object.to-string.js",
        "../../modules/es7.symbol.async-iterator":
          "../node_modules/core-js/library/modules/es7.symbol.async-iterator.js",
        "../../modules/es7.symbol.observable":
          "../node_modules/core-js/library/modules/es7.symbol.observable.js",
        "../../modules/_core":
          "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/symbol.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/symbol"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/symbol":
          "../node_modules/core-js/library/fn/symbol/index.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/typeof.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _iterator = require("../core-js/symbol/iterator");

        var _iterator2 = _interopRequireDefault(_iterator);

        var _symbol = require("../core-js/symbol");

        var _symbol2 = _interopRequireDefault(_symbol);

        var _typeof =
          typeof _symbol2.default === "function" &&
          typeof _iterator2.default === "symbol"
            ? function(obj) {
                return typeof obj;
              }
            : function(obj) {
                return obj &&
                  typeof _symbol2.default === "function" &&
                  obj.constructor === _symbol2.default &&
                  obj !== _symbol2.default.prototype
                  ? "symbol"
                  : typeof obj;
              };

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default =
          typeof _symbol2.default === "function" &&
          _typeof(_iterator2.default) === "symbol"
            ? function(obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof(obj);
              }
            : function(obj) {
                return obj &&
                  typeof _symbol2.default === "function" &&
                  obj.constructor === _symbol2.default &&
                  obj !== _symbol2.default.prototype
                  ? "symbol"
                  : typeof obj === "undefined"
                  ? "undefined"
                  : _typeof(obj);
              };
      },
      {
        "../core-js/symbol/iterator":
          "../node_modules/babel-runtime/core-js/symbol/iterator.js",
        "../core-js/symbol": "../node_modules/babel-runtime/core-js/symbol.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/possibleConstructorReturn.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _typeof2 = require("../helpers/typeof");

        var _typeof3 = _interopRequireDefault(_typeof2);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = function(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return call &&
            ((typeof call === "undefined"
              ? "undefined"
              : (0, _typeof3.default)(call)) === "object" ||
              typeof call === "function")
            ? call
            : self;
        };
      },
      { "../helpers/typeof": "../node_modules/babel-runtime/helpers/typeof.js" }
    ],
    "../node_modules/core-js/library/modules/_set-proto.js": [
      function(require, module, exports) {
        // Works with __proto__ only. Old v8 can't work with null proto objects.
        /* eslint-disable no-proto */
        var isObject = require("./_is-object");
        var anObject = require("./_an-object");
        var check = function(O, proto) {
          anObject(O);
          if (!isObject(proto) && proto !== null)
            throw TypeError(proto + ": can't set as prototype!");
        };
        module.exports = {
          set:
            Object.setPrototypeOf ||
            ("__proto__" in {} // eslint-disable-line
              ? (function(test, buggy, set) {
                  try {
                    set = require("./_ctx")(
                      Function.call,
                      require("./_object-gopd").f(Object.prototype, "__proto__")
                        .set,
                      2
                    );
                    set(test, []);
                    buggy = !(test instanceof Array);
                  } catch (e) {
                    buggy = true;
                  }
                  return function setPrototypeOf(O, proto) {
                    check(O, proto);
                    if (buggy) O.__proto__ = proto;
                    else set(O, proto);
                    return O;
                  };
                })({}, false)
              : undefined),
          check: check
        };
      },
      {
        "./_is-object": "../node_modules/core-js/library/modules/_is-object.js",
        "./_an-object": "../node_modules/core-js/library/modules/_an-object.js",
        "./_ctx": "../node_modules/core-js/library/modules/_ctx.js",
        "./_object-gopd":
          "../node_modules/core-js/library/modules/_object-gopd.js"
      }
    ],
    "../node_modules/core-js/library/modules/es6.object.set-prototype-of.js": [
      function(require, module, exports) {
        // 19.1.3.19 Object.setPrototypeOf(O, proto)
        var $export = require("./_export");
        $export($export.S, "Object", {
          setPrototypeOf: require("./_set-proto").set
        });
      },
      {
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_set-proto": "../node_modules/core-js/library/modules/_set-proto.js"
      }
    ],
    "../node_modules/core-js/library/fn/object/set-prototype-of.js": [
      function(require, module, exports) {
        require("../../modules/es6.object.set-prototype-of");
        module.exports = require("../../modules/_core").Object.setPrototypeOf;
      },
      {
        "../../modules/es6.object.set-prototype-of":
          "../node_modules/core-js/library/modules/es6.object.set-prototype-of.js",
        "../../modules/_core":
          "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/object/set-prototype-of.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/object/set-prototype-of"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/object/set-prototype-of":
          "../node_modules/core-js/library/fn/object/set-prototype-of.js"
      }
    ],
    "../node_modules/core-js/library/modules/es6.object.create.js": [
      function(require, module, exports) {
        var $export = require("./_export");
        // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        $export($export.S, "Object", { create: require("./_object-create") });
      },
      {
        "./_export": "../node_modules/core-js/library/modules/_export.js",
        "./_object-create":
          "../node_modules/core-js/library/modules/_object-create.js"
      }
    ],
    "../node_modules/core-js/library/fn/object/create.js": [
      function(require, module, exports) {
        require("../../modules/es6.object.create");
        var $Object = require("../../modules/_core").Object;
        module.exports = function create(P, D) {
          return $Object.create(P, D);
        };
      },
      {
        "../../modules/es6.object.create":
          "../node_modules/core-js/library/modules/es6.object.create.js",
        "../../modules/_core":
          "../node_modules/core-js/library/modules/_core.js"
      }
    ],
    "../node_modules/babel-runtime/core-js/object/create.js": [
      function(require, module, exports) {
        module.exports = {
          default: require("core-js/library/fn/object/create"),
          __esModule: true
        };
      },
      {
        "core-js/library/fn/object/create":
          "../node_modules/core-js/library/fn/object/create.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/inherits.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        var _setPrototypeOf = require("../core-js/object/set-prototype-of");

        var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

        var _create = require("../core-js/object/create");

        var _create2 = _interopRequireDefault(_create);

        var _typeof2 = require("../helpers/typeof");

        var _typeof3 = _interopRequireDefault(_typeof2);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        exports.default = function(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                (typeof superClass === "undefined"
                  ? "undefined"
                  : (0, _typeof3.default)(superClass))
            );
          }

          subClass.prototype = (0, _create2.default)(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass)
            _setPrototypeOf2.default
              ? (0, _setPrototypeOf2.default)(subClass, superClass)
              : (subClass.__proto__ = superClass);
        };
      },
      {
        "../core-js/object/set-prototype-of":
          "../node_modules/babel-runtime/core-js/object/set-prototype-of.js",
        "../core-js/object/create":
          "../node_modules/babel-runtime/core-js/object/create.js",
        "../helpers/typeof": "../node_modules/babel-runtime/helpers/typeof.js"
      }
    ],
    "../node_modules/lodash/_baseTimes.js": [
      function(require, module, exports) {
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
          var index = -1,
            result = Array(n);

          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }

        module.exports = baseTimes;
      },
      {}
    ],
    "../node_modules/lodash/_freeGlobal.js": [
      function(require, module, exports) {
        var global = arguments[3];
        /** Detect free variable `global` from Node.js. */
        var freeGlobal =
          typeof global == "object" &&
          global &&
          global.Object === Object &&
          global;

        module.exports = freeGlobal;
      },
      {}
    ],
    "../node_modules/lodash/_root.js": [
      function(require, module, exports) {
        var freeGlobal = require("./_freeGlobal");

        /** Detect free variable `self`. */
        var freeSelf =
          typeof self == "object" && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function("return this")();

        module.exports = root;
      },
      { "./_freeGlobal": "../node_modules/lodash/_freeGlobal.js" }
    ],
    "../node_modules/lodash/_Symbol.js": [
      function(require, module, exports) {
        var root = require("./_root");

        /** Built-in value references. */
        var Symbol = root.Symbol;

        module.exports = Symbol;
      },
      { "./_root": "../node_modules/lodash/_root.js" }
    ],
    "../node_modules/lodash/_getRawTag.js": [
      function(require, module, exports) {
        var Symbol = require("./_Symbol");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }

        module.exports = getRawTag;
      },
      { "./_Symbol": "../node_modules/lodash/_Symbol.js" }
    ],
    "../node_modules/lodash/_objectToString.js": [
      function(require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        module.exports = objectToString;
      },
      {}
    ],
    "../node_modules/lodash/_baseGetTag.js": [
      function(require, module, exports) {
        var Symbol = require("./_Symbol"),
          getRawTag = require("./_getRawTag"),
          objectToString = require("./_objectToString");

        /** `Object#toString` result references. */
        var nullTag = "[object Null]",
          undefinedTag = "[object Undefined]";

        /** Built-in value references. */
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value)
            ? getRawTag(value)
            : objectToString(value);
        }

        module.exports = baseGetTag;
      },
      {
        "./_Symbol": "../node_modules/lodash/_Symbol.js",
        "./_getRawTag": "../node_modules/lodash/_getRawTag.js",
        "./_objectToString": "../node_modules/lodash/_objectToString.js"
      }
    ],
    "../node_modules/lodash/isObjectLike.js": [
      function(require, module, exports) {
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }

        module.exports = isObjectLike;
      },
      {}
    ],
    "../node_modules/lodash/_baseIsArguments.js": [
      function(require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]";

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        module.exports = baseIsArguments;
      },
      {
        "./_baseGetTag": "../node_modules/lodash/_baseGetTag.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/isArguments.js": [
      function(require, module, exports) {
        var baseIsArguments = require("./_baseIsArguments"),
          isObjectLike = require("./isObjectLike");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(
          (function() {
            return arguments;
          })()
        )
          ? baseIsArguments
          : function(value) {
              return (
                isObjectLike(value) &&
                hasOwnProperty.call(value, "callee") &&
                !propertyIsEnumerable.call(value, "callee")
              );
            };

        module.exports = isArguments;
      },
      {
        "./_baseIsArguments": "../node_modules/lodash/_baseIsArguments.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/isArray.js": [
      function(require, module, exports) {
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        module.exports = isArray;
      },
      {}
    ],
    "../node_modules/lodash/stubFalse.js": [
      function(require, module, exports) {
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }

        module.exports = stubFalse;
      },
      {}
    ],
    "../node_modules/lodash/isBuffer.js": [
      function(require, module, exports) {
        var root = require("./_root"),
          stubFalse = require("./stubFalse");

        /** Detect free variable `exports`. */
        var freeExports =
          typeof exports == "object" && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule =
          freeExports &&
          typeof module == "object" &&
          module &&
          !module.nodeType &&
          module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root.Buffer : undefined;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;

        module.exports = isBuffer;
      },
      {
        "./_root": "../node_modules/lodash/_root.js",
        "./stubFalse": "../node_modules/lodash/stubFalse.js"
      }
    ],
    "../node_modules/lodash/_isIndex.js": [
      function(require, module, exports) {
        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;

          return (
            !!length &&
            (type == "number" || (type != "symbol" && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length)
          );
        }

        module.exports = isIndex;
      },
      {}
    ],
    "../node_modules/lodash/isLength.js": [
      function(require, module, exports) {
        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return (
            typeof value == "number" &&
            value > -1 &&
            value % 1 == 0 &&
            value <= MAX_SAFE_INTEGER
          );
        }

        module.exports = isLength;
      },
      {}
    ],
    "../node_modules/lodash/_baseIsTypedArray.js": [
      function(require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isLength = require("./isLength"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          funcTag = "[object Function]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          objectTag = "[object Object]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          weakMapTag = "[object WeakMap]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[
          float64Tag
        ] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[
          int32Tag
        ] = typedArrayTags[uint8Tag] = typedArrayTags[
          uint8ClampedTag
        ] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[
          arrayBufferTag
        ] = typedArrayTags[boolTag] = typedArrayTags[
          dataViewTag
        ] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[
          funcTag
        ] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[
          objectTag
        ] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[
          stringTag
        ] = typedArrayTags[weakMapTag] = false;

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return (
            isObjectLike(value) &&
            isLength(value.length) &&
            !!typedArrayTags[baseGetTag(value)]
          );
        }

        module.exports = baseIsTypedArray;
      },
      {
        "./_baseGetTag": "../node_modules/lodash/_baseGetTag.js",
        "./isLength": "../node_modules/lodash/isLength.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/_baseUnary.js": [
      function(require, module, exports) {
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }

        module.exports = baseUnary;
      },
      {}
    ],
    "../node_modules/lodash/_nodeUtil.js": [
      function(require, module, exports) {
        var freeGlobal = require("./_freeGlobal");

        /** Detect free variable `exports`. */
        var freeExports =
          typeof exports == "object" && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule =
          freeExports &&
          typeof module == "object" &&
          module &&
          !module.nodeType &&
          module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function() {
          try {
            // Use `util.types` for Node.js 10+.
            var types =
              freeModule &&
              freeModule.require &&
              freeModule.require("util").types;

            if (types) {
              return types;
            }

            // Legacy `process.binding('util')` for Node.js < 10.
            return (
              freeProcess && freeProcess.binding && freeProcess.binding("util")
            );
          } catch (e) {}
        })();

        module.exports = nodeUtil;
      },
      { "./_freeGlobal": "../node_modules/lodash/_freeGlobal.js" }
    ],
    "../node_modules/lodash/isTypedArray.js": [
      function(require, module, exports) {
        var baseIsTypedArray = require("./_baseIsTypedArray"),
          baseUnary = require("./_baseUnary"),
          nodeUtil = require("./_nodeUtil");

        /* Node.js helper references. */
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray
          ? baseUnary(nodeIsTypedArray)
          : baseIsTypedArray;

        module.exports = isTypedArray;
      },
      {
        "./_baseIsTypedArray": "../node_modules/lodash/_baseIsTypedArray.js",
        "./_baseUnary": "../node_modules/lodash/_baseUnary.js",
        "./_nodeUtil": "../node_modules/lodash/_nodeUtil.js"
      }
    ],
    "../node_modules/lodash/_arrayLikeKeys.js": [
      function(require, module, exports) {
        var baseTimes = require("./_baseTimes"),
          isArguments = require("./isArguments"),
          isArray = require("./isArray"),
          isBuffer = require("./isBuffer"),
          isIndex = require("./_isIndex"),
          isTypedArray = require("./isTypedArray");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

          for (var key in value) {
            if (
              (inherited || hasOwnProperty.call(value, key)) &&
              !(
                skipIndexes &&
                // Safari 9 has enumerable `arguments.length` in strict mode.
                (key == "length" ||
                  // Node.js 0.10 has enumerable non-index properties on buffers.
                  (isBuff && (key == "offset" || key == "parent")) ||
                  // PhantomJS 2 has enumerable non-index properties on typed arrays.
                  (isType &&
                    (key == "buffer" ||
                      key == "byteLength" ||
                      key == "byteOffset")) ||
                  // Skip index properties.
                  isIndex(key, length))
              )
            ) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = arrayLikeKeys;
      },
      {
        "./_baseTimes": "../node_modules/lodash/_baseTimes.js",
        "./isArguments": "../node_modules/lodash/isArguments.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./isBuffer": "../node_modules/lodash/isBuffer.js",
        "./_isIndex": "../node_modules/lodash/_isIndex.js",
        "./isTypedArray": "../node_modules/lodash/isTypedArray.js"
      }
    ],
    "../node_modules/lodash/_isPrototype.js": [
      function(require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto =
              (typeof Ctor == "function" && Ctor.prototype) || objectProto;

          return value === proto;
        }

        module.exports = isPrototype;
      },
      {}
    ],
    "../node_modules/lodash/_overArg.js": [
      function(require, module, exports) {
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }

        module.exports = overArg;
      },
      {}
    ],
    "../node_modules/lodash/_nativeKeys.js": [
      function(require, module, exports) {
        var overArg = require("./_overArg");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeKeys = overArg(Object.keys, Object);

        module.exports = nativeKeys;
      },
      { "./_overArg": "../node_modules/lodash/_overArg.js" }
    ],
    "../node_modules/lodash/_baseKeys.js": [
      function(require, module, exports) {
        var isPrototype = require("./_isPrototype"),
          nativeKeys = require("./_nativeKeys");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = baseKeys;
      },
      {
        "./_isPrototype": "../node_modules/lodash/_isPrototype.js",
        "./_nativeKeys": "../node_modules/lodash/_nativeKeys.js"
      }
    ],
    "../node_modules/lodash/isObject.js": [
      function(require, module, exports) {
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }

        module.exports = isObject;
      },
      {}
    ],
    "../node_modules/lodash/isFunction.js": [
      function(require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isObject = require("./isObject");

        /** `Object#toString` result references. */
        var asyncTag = "[object AsyncFunction]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          proxyTag = "[object Proxy]";

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return (
            tag == funcTag ||
            tag == genTag ||
            tag == asyncTag ||
            tag == proxyTag
          );
        }

        module.exports = isFunction;
      },
      {
        "./_baseGetTag": "../node_modules/lodash/_baseGetTag.js",
        "./isObject": "../node_modules/lodash/isObject.js"
      }
    ],
    "../node_modules/lodash/isArrayLike.js": [
      function(require, module, exports) {
        var isFunction = require("./isFunction"),
          isLength = require("./isLength");

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }

        module.exports = isArrayLike;
      },
      {
        "./isFunction": "../node_modules/lodash/isFunction.js",
        "./isLength": "../node_modules/lodash/isLength.js"
      }
    ],
    "../node_modules/lodash/keys.js": [
      function(require, module, exports) {
        var arrayLikeKeys = require("./_arrayLikeKeys"),
          baseKeys = require("./_baseKeys"),
          isArrayLike = require("./isArrayLike");

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        module.exports = keys;
      },
      {
        "./_arrayLikeKeys": "../node_modules/lodash/_arrayLikeKeys.js",
        "./_baseKeys": "../node_modules/lodash/_baseKeys.js",
        "./isArrayLike": "../node_modules/lodash/isArrayLike.js"
      }
    ],
    "../node_modules/lodash/_arrayMap.js": [
      function(require, module, exports) {
        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }

        module.exports = arrayMap;
      },
      {}
    ],
    "../node_modules/lodash/_listCacheClear.js": [
      function(require, module, exports) {
        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        module.exports = listCacheClear;
      },
      {}
    ],
    "../node_modules/lodash/eq.js": [
      function(require, module, exports) {
        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }

        module.exports = eq;
      },
      {}
    ],
    "../node_modules/lodash/_assocIndexOf.js": [
      function(require, module, exports) {
        var eq = require("./eq");

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }

        module.exports = assocIndexOf;
      },
      { "./eq": "../node_modules/lodash/eq.js" }
    ],
    "../node_modules/lodash/_listCacheDelete.js": [
      function(require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }

        module.exports = listCacheDelete;
      },
      { "./_assocIndexOf": "../node_modules/lodash/_assocIndexOf.js" }
    ],
    "../node_modules/lodash/_listCacheGet.js": [
      function(require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          return index < 0 ? undefined : data[index][1];
        }

        module.exports = listCacheGet;
      },
      { "./_assocIndexOf": "../node_modules/lodash/_assocIndexOf.js" }
    ],
    "../node_modules/lodash/_listCacheHas.js": [
      function(require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        module.exports = listCacheHas;
      },
      { "./_assocIndexOf": "../node_modules/lodash/_assocIndexOf.js" }
    ],
    "../node_modules/lodash/_listCacheSet.js": [
      function(require, module, exports) {
        var assocIndexOf = require("./_assocIndexOf");

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }

        module.exports = listCacheSet;
      },
      { "./_assocIndexOf": "../node_modules/lodash/_assocIndexOf.js" }
    ],
    "../node_modules/lodash/_ListCache.js": [
      function(require, module, exports) {
        var listCacheClear = require("./_listCacheClear"),
          listCacheDelete = require("./_listCacheDelete"),
          listCacheGet = require("./_listCacheGet"),
          listCacheHas = require("./_listCacheHas"),
          listCacheSet = require("./_listCacheSet");

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        module.exports = ListCache;
      },
      {
        "./_listCacheClear": "../node_modules/lodash/_listCacheClear.js",
        "./_listCacheDelete": "../node_modules/lodash/_listCacheDelete.js",
        "./_listCacheGet": "../node_modules/lodash/_listCacheGet.js",
        "./_listCacheHas": "../node_modules/lodash/_listCacheHas.js",
        "./_listCacheSet": "../node_modules/lodash/_listCacheSet.js"
      }
    ],
    "../node_modules/lodash/_stackClear.js": [
      function(require, module, exports) {
        var ListCache = require("./_ListCache");

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }

        module.exports = stackClear;
      },
      { "./_ListCache": "../node_modules/lodash/_ListCache.js" }
    ],
    "../node_modules/lodash/_stackDelete.js": [
      function(require, module, exports) {
        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
            result = data["delete"](key);

          this.size = data.size;
          return result;
        }

        module.exports = stackDelete;
      },
      {}
    ],
    "../node_modules/lodash/_stackGet.js": [
      function(require, module, exports) {
        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }

        module.exports = stackGet;
      },
      {}
    ],
    "../node_modules/lodash/_stackHas.js": [
      function(require, module, exports) {
        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }

        module.exports = stackHas;
      },
      {}
    ],
    "../node_modules/lodash/_coreJsData.js": [
      function(require, module, exports) {
        var root = require("./_root");

        /** Used to detect overreaching core-js shims. */
        var coreJsData = root["__core-js_shared__"];

        module.exports = coreJsData;
      },
      { "./_root": "../node_modules/lodash/_root.js" }
    ],
    "../node_modules/lodash/_isMasked.js": [
      function(require, module, exports) {
        var coreJsData = require("./_coreJsData");

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(
            (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""
          );
          return uid ? "Symbol(src)_1." + uid : "";
        })();

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }

        module.exports = isMasked;
      },
      { "./_coreJsData": "../node_modules/lodash/_coreJsData.js" }
    ],
    "../node_modules/lodash/_toSource.js": [
      function(require, module, exports) {
        /** Used for built-in method references. */
        var funcProto = Function.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return func + "";
            } catch (e) {}
          }
          return "";
        }

        module.exports = toSource;
      },
      {}
    ],
    "../node_modules/lodash/_baseIsNative.js": [
      function(require, module, exports) {
        var isFunction = require("./isFunction"),
          isMasked = require("./_isMasked"),
          isObject = require("./isObject"),
          toSource = require("./_toSource");

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
          objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp(
          "^" +
            funcToString
              .call(hasOwnProperty)
              .replace(reRegExpChar, "\\$&")
              .replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                "$1.*?"
              ) +
            "$"
        );

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        module.exports = baseIsNative;
      },
      {
        "./isFunction": "../node_modules/lodash/isFunction.js",
        "./_isMasked": "../node_modules/lodash/_isMasked.js",
        "./isObject": "../node_modules/lodash/isObject.js",
        "./_toSource": "../node_modules/lodash/_toSource.js"
      }
    ],
    "../node_modules/lodash/_getValue.js": [
      function(require, module, exports) {
        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
          return object == null ? undefined : object[key];
        }

        module.exports = getValue;
      },
      {}
    ],
    "../node_modules/lodash/_getNative.js": [
      function(require, module, exports) {
        var baseIsNative = require("./_baseIsNative"),
          getValue = require("./_getValue");

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }

        module.exports = getNative;
      },
      {
        "./_baseIsNative": "../node_modules/lodash/_baseIsNative.js",
        "./_getValue": "../node_modules/lodash/_getValue.js"
      }
    ],
    "../node_modules/lodash/_Map.js": [
      function(require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var Map = getNative(root, "Map");

        module.exports = Map;
      },
      {
        "./_getNative": "../node_modules/lodash/_getNative.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_nativeCreate.js": [
      function(require, module, exports) {
        var getNative = require("./_getNative");

        /* Built-in method references that are verified to be native. */
        var nativeCreate = getNative(Object, "create");

        module.exports = nativeCreate;
      },
      { "./_getNative": "../node_modules/lodash/_getNative.js" }
    ],
    "../node_modules/lodash/_hashClear.js": [
      function(require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }

        module.exports = hashClear;
      },
      { "./_nativeCreate": "../node_modules/lodash/_nativeCreate.js" }
    ],
    "../node_modules/lodash/_hashDelete.js": [
      function(require, module, exports) {
        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = hashDelete;
      },
      {}
    ],
    "../node_modules/lodash/_hashGet.js": [
      function(require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        module.exports = hashGet;
      },
      { "./_nativeCreate": "../node_modules/lodash/_nativeCreate.js" }
    ],
    "../node_modules/lodash/_hashHas.js": [
      function(require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate
            ? data[key] !== undefined
            : hasOwnProperty.call(data, key);
        }

        module.exports = hashHas;
      },
      { "./_nativeCreate": "../node_modules/lodash/_nativeCreate.js" }
    ],
    "../node_modules/lodash/_hashSet.js": [
      function(require, module, exports) {
        var nativeCreate = require("./_nativeCreate");

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] =
            nativeCreate && value === undefined ? HASH_UNDEFINED : value;
          return this;
        }

        module.exports = hashSet;
      },
      { "./_nativeCreate": "../node_modules/lodash/_nativeCreate.js" }
    ],
    "../node_modules/lodash/_Hash.js": [
      function(require, module, exports) {
        var hashClear = require("./_hashClear"),
          hashDelete = require("./_hashDelete"),
          hashGet = require("./_hashGet"),
          hashHas = require("./_hashHas"),
          hashSet = require("./_hashSet");

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        module.exports = Hash;
      },
      {
        "./_hashClear": "../node_modules/lodash/_hashClear.js",
        "./_hashDelete": "../node_modules/lodash/_hashDelete.js",
        "./_hashGet": "../node_modules/lodash/_hashGet.js",
        "./_hashHas": "../node_modules/lodash/_hashHas.js",
        "./_hashSet": "../node_modules/lodash/_hashSet.js"
      }
    ],
    "../node_modules/lodash/_mapCacheClear.js": [
      function(require, module, exports) {
        var Hash = require("./_Hash"),
          ListCache = require("./_ListCache"),
          Map = require("./_Map");

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            hash: new Hash(),
            map: new (Map || ListCache)(),
            string: new Hash()
          };
        }

        module.exports = mapCacheClear;
      },
      {
        "./_Hash": "../node_modules/lodash/_Hash.js",
        "./_ListCache": "../node_modules/lodash/_ListCache.js",
        "./_Map": "../node_modules/lodash/_Map.js"
      }
    ],
    "../node_modules/lodash/_isKeyable.js": [
      function(require, module, exports) {
        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" ||
            type == "number" ||
            type == "symbol" ||
            type == "boolean"
            ? value !== "__proto__"
            : value === null;
        }

        module.exports = isKeyable;
      },
      {}
    ],
    "../node_modules/lodash/_getMapData.js": [
      function(require, module, exports) {
        var isKeyable = require("./_isKeyable");

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == "string" ? "string" : "hash"]
            : data.map;
        }

        module.exports = getMapData;
      },
      { "./_isKeyable": "../node_modules/lodash/_isKeyable.js" }
    ],
    "../node_modules/lodash/_mapCacheDelete.js": [
      function(require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)["delete"](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = mapCacheDelete;
      },
      { "./_getMapData": "../node_modules/lodash/_getMapData.js" }
    ],
    "../node_modules/lodash/_mapCacheGet.js": [
      function(require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        module.exports = mapCacheGet;
      },
      { "./_getMapData": "../node_modules/lodash/_getMapData.js" }
    ],
    "../node_modules/lodash/_mapCacheHas.js": [
      function(require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        module.exports = mapCacheHas;
      },
      { "./_getMapData": "../node_modules/lodash/_getMapData.js" }
    ],
    "../node_modules/lodash/_mapCacheSet.js": [
      function(require, module, exports) {
        var getMapData = require("./_getMapData");

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size = data.size;

          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        module.exports = mapCacheSet;
      },
      { "./_getMapData": "../node_modules/lodash/_getMapData.js" }
    ],
    "../node_modules/lodash/_MapCache.js": [
      function(require, module, exports) {
        var mapCacheClear = require("./_mapCacheClear"),
          mapCacheDelete = require("./_mapCacheDelete"),
          mapCacheGet = require("./_mapCacheGet"),
          mapCacheHas = require("./_mapCacheHas"),
          mapCacheSet = require("./_mapCacheSet");

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        module.exports = MapCache;
      },
      {
        "./_mapCacheClear": "../node_modules/lodash/_mapCacheClear.js",
        "./_mapCacheDelete": "../node_modules/lodash/_mapCacheDelete.js",
        "./_mapCacheGet": "../node_modules/lodash/_mapCacheGet.js",
        "./_mapCacheHas": "../node_modules/lodash/_mapCacheHas.js",
        "./_mapCacheSet": "../node_modules/lodash/_mapCacheSet.js"
      }
    ],
    "../node_modules/lodash/_stackSet.js": [
      function(require, module, exports) {
        var ListCache = require("./_ListCache"),
          Map = require("./_Map"),
          MapCache = require("./_MapCache");

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }

        module.exports = stackSet;
      },
      {
        "./_ListCache": "../node_modules/lodash/_ListCache.js",
        "./_Map": "../node_modules/lodash/_Map.js",
        "./_MapCache": "../node_modules/lodash/_MapCache.js"
      }
    ],
    "../node_modules/lodash/_Stack.js": [
      function(require, module, exports) {
        var ListCache = require("./_ListCache"),
          stackClear = require("./_stackClear"),
          stackDelete = require("./_stackDelete"),
          stackGet = require("./_stackGet"),
          stackHas = require("./_stackHas"),
          stackSet = require("./_stackSet");

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = (this.__data__ = new ListCache(entries));
          this.size = data.size;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        module.exports = Stack;
      },
      {
        "./_ListCache": "../node_modules/lodash/_ListCache.js",
        "./_stackClear": "../node_modules/lodash/_stackClear.js",
        "./_stackDelete": "../node_modules/lodash/_stackDelete.js",
        "./_stackGet": "../node_modules/lodash/_stackGet.js",
        "./_stackHas": "../node_modules/lodash/_stackHas.js",
        "./_stackSet": "../node_modules/lodash/_stackSet.js"
      }
    ],
    "../node_modules/lodash/_arrayEach.js": [
      function(require, module, exports) {
        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }

        module.exports = arrayEach;
      },
      {}
    ],
    "../node_modules/lodash/_defineProperty.js": [
      function(require, module, exports) {
        var getNative = require("./_getNative");

        var defineProperty = (function() {
          try {
            var func = getNative(Object, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {}
        })();

        module.exports = defineProperty;
      },
      { "./_getNative": "../node_modules/lodash/_getNative.js" }
    ],
    "../node_modules/lodash/_baseAssignValue.js": [
      function(require, module, exports) {
        var defineProperty = require("./_defineProperty");

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              configurable: true,
              enumerable: true,
              value: value,
              writable: true
            });
          } else {
            object[key] = value;
          }
        }

        module.exports = baseAssignValue;
      },
      { "./_defineProperty": "../node_modules/lodash/_defineProperty.js" }
    ],
    "../node_modules/lodash/_assignValue.js": [
      function(require, module, exports) {
        var baseAssignValue = require("./_baseAssignValue"),
          eq = require("./eq");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (
            !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))
          ) {
            baseAssignValue(object, key, value);
          }
        }

        module.exports = assignValue;
      },
      {
        "./_baseAssignValue": "../node_modules/lodash/_baseAssignValue.js",
        "./eq": "../node_modules/lodash/eq.js"
      }
    ],
    "../node_modules/lodash/_copyObject.js": [
      function(require, module, exports) {
        var assignValue = require("./_assignValue"),
          baseAssignValue = require("./_baseAssignValue");

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});

          var index = -1,
            length = props.length;

          while (++index < length) {
            var key = props[index];

            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined;

            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }

        module.exports = copyObject;
      },
      {
        "./_assignValue": "../node_modules/lodash/_assignValue.js",
        "./_baseAssignValue": "../node_modules/lodash/_baseAssignValue.js"
      }
    ],
    "../node_modules/lodash/_baseAssign.js": [
      function(require, module, exports) {
        var copyObject = require("./_copyObject"),
          keys = require("./keys");

        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        module.exports = baseAssign;
      },
      {
        "./_copyObject": "../node_modules/lodash/_copyObject.js",
        "./keys": "../node_modules/lodash/keys.js"
      }
    ],
    "../node_modules/lodash/_nativeKeysIn.js": [
      function(require, module, exports) {
        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = nativeKeysIn;
      },
      {}
    ],
    "../node_modules/lodash/_baseKeysIn.js": [
      function(require, module, exports) {
        var isObject = require("./isObject"),
          isPrototype = require("./_isPrototype"),
          nativeKeysIn = require("./_nativeKeysIn");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
            result = [];

          for (var key in object) {
            if (
              !(
                key == "constructor" &&
                (isProto || !hasOwnProperty.call(object, key))
              )
            ) {
              result.push(key);
            }
          }
          return result;
        }

        module.exports = baseKeysIn;
      },
      {
        "./isObject": "../node_modules/lodash/isObject.js",
        "./_isPrototype": "../node_modules/lodash/_isPrototype.js",
        "./_nativeKeysIn": "../node_modules/lodash/_nativeKeysIn.js"
      }
    ],
    "../node_modules/lodash/keysIn.js": [
      function(require, module, exports) {
        var arrayLikeKeys = require("./_arrayLikeKeys"),
          baseKeysIn = require("./_baseKeysIn"),
          isArrayLike = require("./isArrayLike");

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object)
            ? arrayLikeKeys(object, true)
            : baseKeysIn(object);
        }

        module.exports = keysIn;
      },
      {
        "./_arrayLikeKeys": "../node_modules/lodash/_arrayLikeKeys.js",
        "./_baseKeysIn": "../node_modules/lodash/_baseKeysIn.js",
        "./isArrayLike": "../node_modules/lodash/isArrayLike.js"
      }
    ],
    "../node_modules/lodash/_baseAssignIn.js": [
      function(require, module, exports) {
        var copyObject = require("./_copyObject"),
          keysIn = require("./keysIn");

        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        module.exports = baseAssignIn;
      },
      {
        "./_copyObject": "../node_modules/lodash/_copyObject.js",
        "./keysIn": "../node_modules/lodash/keysIn.js"
      }
    ],
    "../node_modules/lodash/_cloneBuffer.js": [
      function(require, module, exports) {
        var root = require("./_root");

        /** Detect free variable `exports`. */
        var freeExports =
          typeof exports == "object" && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule =
          freeExports &&
          typeof module == "object" &&
          module &&
          !module.nodeType &&
          module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root.Buffer : undefined,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
            result = allocUnsafe
              ? allocUnsafe(length)
              : new buffer.constructor(length);

          buffer.copy(result);
          return result;
        }

        module.exports = cloneBuffer;
      },
      { "./_root": "../node_modules/lodash/_root.js" }
    ],
    "../node_modules/lodash/_copyArray.js": [
      function(require, module, exports) {
        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
            length = source.length;

          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        module.exports = copyArray;
      },
      {}
    ],
    "../node_modules/lodash/_arrayFilter.js": [
      function(require, module, exports) {
        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        module.exports = arrayFilter;
      },
      {}
    ],
    "../node_modules/lodash/stubArray.js": [
      function(require, module, exports) {
        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }

        module.exports = stubArray;
      },
      {}
    ],
    "../node_modules/lodash/_getSymbols.js": [
      function(require, module, exports) {
        var arrayFilter = require("./_arrayFilter"),
          stubArray = require("./stubArray");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols
          ? stubArray
          : function(object) {
              if (object == null) {
                return [];
              }
              object = Object(object);
              return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
              });
            };

        module.exports = getSymbols;
      },
      {
        "./_arrayFilter": "../node_modules/lodash/_arrayFilter.js",
        "./stubArray": "../node_modules/lodash/stubArray.js"
      }
    ],
    "../node_modules/lodash/_copySymbols.js": [
      function(require, module, exports) {
        var copyObject = require("./_copyObject"),
          getSymbols = require("./_getSymbols");

        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }

        module.exports = copySymbols;
      },
      {
        "./_copyObject": "../node_modules/lodash/_copyObject.js",
        "./_getSymbols": "../node_modules/lodash/_getSymbols.js"
      }
    ],
    "../node_modules/lodash/_arrayPush.js": [
      function(require, module, exports) {
        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length;

          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }

        module.exports = arrayPush;
      },
      {}
    ],
    "../node_modules/lodash/_getPrototype.js": [
      function(require, module, exports) {
        var overArg = require("./_overArg");

        /** Built-in value references. */
        var getPrototype = overArg(Object.getPrototypeOf, Object);

        module.exports = getPrototype;
      },
      { "./_overArg": "../node_modules/lodash/_overArg.js" }
    ],
    "../node_modules/lodash/_getSymbolsIn.js": [
      function(require, module, exports) {
        var arrayPush = require("./_arrayPush"),
          getPrototype = require("./_getPrototype"),
          getSymbols = require("./_getSymbols"),
          stubArray = require("./stubArray");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols
          ? stubArray
          : function(object) {
              var result = [];
              while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
              }
              return result;
            };

        module.exports = getSymbolsIn;
      },
      {
        "./_arrayPush": "../node_modules/lodash/_arrayPush.js",
        "./_getPrototype": "../node_modules/lodash/_getPrototype.js",
        "./_getSymbols": "../node_modules/lodash/_getSymbols.js",
        "./stubArray": "../node_modules/lodash/stubArray.js"
      }
    ],
    "../node_modules/lodash/_copySymbolsIn.js": [
      function(require, module, exports) {
        var copyObject = require("./_copyObject"),
          getSymbolsIn = require("./_getSymbolsIn");

        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }

        module.exports = copySymbolsIn;
      },
      {
        "./_copyObject": "../node_modules/lodash/_copyObject.js",
        "./_getSymbolsIn": "../node_modules/lodash/_getSymbolsIn.js"
      }
    ],
    "../node_modules/lodash/_baseGetAllKeys.js": [
      function(require, module, exports) {
        var arrayPush = require("./_arrayPush"),
          isArray = require("./isArray");

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object)
            ? result
            : arrayPush(result, symbolsFunc(object));
        }

        module.exports = baseGetAllKeys;
      },
      {
        "./_arrayPush": "../node_modules/lodash/_arrayPush.js",
        "./isArray": "../node_modules/lodash/isArray.js"
      }
    ],
    "../node_modules/lodash/_getAllKeys.js": [
      function(require, module, exports) {
        var baseGetAllKeys = require("./_baseGetAllKeys"),
          getSymbols = require("./_getSymbols"),
          keys = require("./keys");

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }

        module.exports = getAllKeys;
      },
      {
        "./_baseGetAllKeys": "../node_modules/lodash/_baseGetAllKeys.js",
        "./_getSymbols": "../node_modules/lodash/_getSymbols.js",
        "./keys": "../node_modules/lodash/keys.js"
      }
    ],
    "../node_modules/lodash/_getAllKeysIn.js": [
      function(require, module, exports) {
        var baseGetAllKeys = require("./_baseGetAllKeys"),
          getSymbolsIn = require("./_getSymbolsIn"),
          keysIn = require("./keysIn");

        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }

        module.exports = getAllKeysIn;
      },
      {
        "./_baseGetAllKeys": "../node_modules/lodash/_baseGetAllKeys.js",
        "./_getSymbolsIn": "../node_modules/lodash/_getSymbolsIn.js",
        "./keysIn": "../node_modules/lodash/keysIn.js"
      }
    ],
    "../node_modules/lodash/_DataView.js": [
      function(require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(root, "DataView");

        module.exports = DataView;
      },
      {
        "./_getNative": "../node_modules/lodash/_getNative.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_Promise.js": [
      function(require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var Promise = getNative(root, "Promise");

        module.exports = Promise;
      },
      {
        "./_getNative": "../node_modules/lodash/_getNative.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_Set.js": [
      function(require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var Set = getNative(root, "Set");

        module.exports = Set;
      },
      {
        "./_getNative": "../node_modules/lodash/_getNative.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_WeakMap.js": [
      function(require, module, exports) {
        var getNative = require("./_getNative"),
          root = require("./_root");

        /* Built-in method references that are verified to be native. */
        var WeakMap = getNative(root, "WeakMap");

        module.exports = WeakMap;
      },
      {
        "./_getNative": "../node_modules/lodash/_getNative.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_getTag.js": [
      function(require, module, exports) {
        var DataView = require("./_DataView"),
          Map = require("./_Map"),
          Promise = require("./_Promise"),
          Set = require("./_Set"),
          WeakMap = require("./_WeakMap"),
          baseGetTag = require("./_baseGetTag"),
          toSource = require("./_toSource");

        /** `Object#toString` result references. */
        var mapTag = "[object Map]",
          objectTag = "[object Object]",
          promiseTag = "[object Promise]",
          setTag = "[object Set]",
          weakMapTag = "[object WeakMap]";

        var dataViewTag = "[object DataView]";

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (
          (DataView &&
            getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map()) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set()) != setTag) ||
          (WeakMap && getTag(new WeakMap()) != weakMapTag)
        ) {
          getTag = function(value) {
            var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : "";

            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result;
          };
        }

        module.exports = getTag;
      },
      {
        "./_DataView": "../node_modules/lodash/_DataView.js",
        "./_Map": "../node_modules/lodash/_Map.js",
        "./_Promise": "../node_modules/lodash/_Promise.js",
        "./_Set": "../node_modules/lodash/_Set.js",
        "./_WeakMap": "../node_modules/lodash/_WeakMap.js",
        "./_baseGetTag": "../node_modules/lodash/_baseGetTag.js",
        "./_toSource": "../node_modules/lodash/_toSource.js"
      }
    ],
    "../node_modules/lodash/_initCloneArray.js": [
      function(require, module, exports) {
        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
            result = new array.constructor(length);

          // Add properties assigned by `RegExp#exec`.
          if (
            length &&
            typeof array[0] == "string" &&
            hasOwnProperty.call(array, "index")
          ) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        module.exports = initCloneArray;
      },
      {}
    ],
    "../node_modules/lodash/_Uint8Array.js": [
      function(require, module, exports) {
        var root = require("./_root");

        /** Built-in value references. */
        var Uint8Array = root.Uint8Array;

        module.exports = Uint8Array;
      },
      { "./_root": "../node_modules/lodash/_root.js" }
    ],
    "../node_modules/lodash/_cloneArrayBuffer.js": [
      function(require, module, exports) {
        var Uint8Array = require("./_Uint8Array");

        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }

        module.exports = cloneArrayBuffer;
      },
      { "./_Uint8Array": "../node_modules/lodash/_Uint8Array.js" }
    ],
    "../node_modules/lodash/_cloneDataView.js": [
      function(require, module, exports) {
        var cloneArrayBuffer = require("./_cloneArrayBuffer");

        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(dataView.buffer)
            : dataView.buffer;
          return new dataView.constructor(
            buffer,
            dataView.byteOffset,
            dataView.byteLength
          );
        }

        module.exports = cloneDataView;
      },
      { "./_cloneArrayBuffer": "../node_modules/lodash/_cloneArrayBuffer.js" }
    ],
    "../node_modules/lodash/_cloneRegExp.js": [
      function(require, module, exports) {
        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(
            regexp.source,
            reFlags.exec(regexp)
          );
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        module.exports = cloneRegExp;
      },
      {}
    ],
    "../node_modules/lodash/_cloneSymbol.js": [
      function(require, module, exports) {
        var Symbol = require("./_Symbol");

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        module.exports = cloneSymbol;
      },
      { "./_Symbol": "../node_modules/lodash/_Symbol.js" }
    ],
    "../node_modules/lodash/_cloneTypedArray.js": [
      function(require, module, exports) {
        var cloneArrayBuffer = require("./_cloneArrayBuffer");

        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(typedArray.buffer)
            : typedArray.buffer;
          return new typedArray.constructor(
            buffer,
            typedArray.byteOffset,
            typedArray.length
          );
        }

        module.exports = cloneTypedArray;
      },
      { "./_cloneArrayBuffer": "../node_modules/lodash/_cloneArrayBuffer.js" }
    ],
    "../node_modules/lodash/_initCloneByTag.js": [
      function(require, module, exports) {
        var cloneArrayBuffer = require("./_cloneArrayBuffer"),
          cloneDataView = require("./_cloneDataView"),
          cloneRegExp = require("./_cloneRegExp"),
          cloneSymbol = require("./_cloneSymbol"),
          cloneTypedArray = require("./_cloneTypedArray");

        /** `Object#toString` result references. */
        var boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case dataViewTag:
              return cloneDataView(object, isDeep);

            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);

            case mapTag:
              return new Ctor();

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              return cloneRegExp(object);

            case setTag:
              return new Ctor();

            case symbolTag:
              return cloneSymbol(object);
          }
        }

        module.exports = initCloneByTag;
      },
      {
        "./_cloneArrayBuffer": "../node_modules/lodash/_cloneArrayBuffer.js",
        "./_cloneDataView": "../node_modules/lodash/_cloneDataView.js",
        "./_cloneRegExp": "../node_modules/lodash/_cloneRegExp.js",
        "./_cloneSymbol": "../node_modules/lodash/_cloneSymbol.js",
        "./_cloneTypedArray": "../node_modules/lodash/_cloneTypedArray.js"
      }
    ],
    "../node_modules/lodash/_baseCreate.js": [
      function(require, module, exports) {
        var isObject = require("./isObject");

        /** Built-in value references. */
        var objectCreate = Object.create;

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
          function object() {}
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = undefined;
            return result;
          };
        })();

        module.exports = baseCreate;
      },
      { "./isObject": "../node_modules/lodash/isObject.js" }
    ],
    "../node_modules/lodash/_initCloneObject.js": [
      function(require, module, exports) {
        var baseCreate = require("./_baseCreate"),
          getPrototype = require("./_getPrototype"),
          isPrototype = require("./_isPrototype");

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object)
            ? baseCreate(getPrototype(object))
            : {};
        }

        module.exports = initCloneObject;
      },
      {
        "./_baseCreate": "../node_modules/lodash/_baseCreate.js",
        "./_getPrototype": "../node_modules/lodash/_getPrototype.js",
        "./_isPrototype": "../node_modules/lodash/_isPrototype.js"
      }
    ],
    "../node_modules/lodash/_baseIsMap.js": [
      function(require, module, exports) {
        var getTag = require("./_getTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var mapTag = "[object Map]";

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }

        module.exports = baseIsMap;
      },
      {
        "./_getTag": "../node_modules/lodash/_getTag.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/isMap.js": [
      function(require, module, exports) {
        var baseIsMap = require("./_baseIsMap"),
          baseUnary = require("./_baseUnary"),
          nodeUtil = require("./_nodeUtil");

        /* Node.js helper references. */
        var nodeIsMap = nodeUtil && nodeUtil.isMap;

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

        module.exports = isMap;
      },
      {
        "./_baseIsMap": "../node_modules/lodash/_baseIsMap.js",
        "./_baseUnary": "../node_modules/lodash/_baseUnary.js",
        "./_nodeUtil": "../node_modules/lodash/_nodeUtil.js"
      }
    ],
    "../node_modules/lodash/_baseIsSet.js": [
      function(require, module, exports) {
        var getTag = require("./_getTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var setTag = "[object Set]";

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }

        module.exports = baseIsSet;
      },
      {
        "./_getTag": "../node_modules/lodash/_getTag.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/isSet.js": [
      function(require, module, exports) {
        var baseIsSet = require("./_baseIsSet"),
          baseUnary = require("./_baseUnary"),
          nodeUtil = require("./_nodeUtil");

        /* Node.js helper references. */
        var nodeIsSet = nodeUtil && nodeUtil.isSet;

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

        module.exports = isSet;
      },
      {
        "./_baseIsSet": "../node_modules/lodash/_baseIsSet.js",
        "./_baseUnary": "../node_modules/lodash/_baseUnary.js",
        "./_nodeUtil": "../node_modules/lodash/_nodeUtil.js"
      }
    ],
    "../node_modules/lodash/_baseClone.js": [
      function(require, module, exports) {
        var Stack = require("./_Stack"),
          arrayEach = require("./_arrayEach"),
          assignValue = require("./_assignValue"),
          baseAssign = require("./_baseAssign"),
          baseAssignIn = require("./_baseAssignIn"),
          cloneBuffer = require("./_cloneBuffer"),
          copyArray = require("./_copyArray"),
          copySymbols = require("./_copySymbols"),
          copySymbolsIn = require("./_copySymbolsIn"),
          getAllKeys = require("./_getAllKeys"),
          getAllKeysIn = require("./_getAllKeysIn"),
          getTag = require("./_getTag"),
          initCloneArray = require("./_initCloneArray"),
          initCloneByTag = require("./_initCloneByTag"),
          initCloneObject = require("./_initCloneObject"),
          isArray = require("./isArray"),
          isBuffer = require("./isBuffer"),
          isMap = require("./isMap"),
          isObject = require("./isObject"),
          isSet = require("./isSet"),
          keys = require("./keys");

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          objectTag = "[object Object]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]",
          weakMapTag = "[object WeakMap]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[
          arrayBufferTag
        ] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[
          dateTag
        ] = cloneableTags[float32Tag] = cloneableTags[
          float64Tag
        ] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[
          int32Tag
        ] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[
          objectTag
        ] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[
          stringTag
        ] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[
          uint8ClampedTag
        ] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[
          weakMapTag
        ] = false;

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

          if (customizer) {
            result = object
              ? customizer(value, key, object, stack)
              : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);

          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(
                baseClone(subValue, bitmask, customizer, subValue, value, stack)
              );
            });

            return result;
          }

          if (isMap(value)) {
            value.forEach(function(subValue, key) {
              result.set(
                key,
                baseClone(subValue, bitmask, customizer, key, value, stack)
              );
            });

            return result;
          }

          var keysFunc = isFull
            ? isFlat
              ? getAllKeysIn
              : getAllKeys
            : isFlat
            ? keysIn
            : keys;

          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function(subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(
              result,
              key,
              baseClone(subValue, bitmask, customizer, key, value, stack)
            );
          });
          return result;
        }

        module.exports = baseClone;
      },
      {
        "./_Stack": "../node_modules/lodash/_Stack.js",
        "./_arrayEach": "../node_modules/lodash/_arrayEach.js",
        "./_assignValue": "../node_modules/lodash/_assignValue.js",
        "./_baseAssign": "../node_modules/lodash/_baseAssign.js",
        "./_baseAssignIn": "../node_modules/lodash/_baseAssignIn.js",
        "./_cloneBuffer": "../node_modules/lodash/_cloneBuffer.js",
        "./_copyArray": "../node_modules/lodash/_copyArray.js",
        "./_copySymbols": "../node_modules/lodash/_copySymbols.js",
        "./_copySymbolsIn": "../node_modules/lodash/_copySymbolsIn.js",
        "./_getAllKeys": "../node_modules/lodash/_getAllKeys.js",
        "./_getAllKeysIn": "../node_modules/lodash/_getAllKeysIn.js",
        "./_getTag": "../node_modules/lodash/_getTag.js",
        "./_initCloneArray": "../node_modules/lodash/_initCloneArray.js",
        "./_initCloneByTag": "../node_modules/lodash/_initCloneByTag.js",
        "./_initCloneObject": "../node_modules/lodash/_initCloneObject.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./isBuffer": "../node_modules/lodash/isBuffer.js",
        "./isMap": "../node_modules/lodash/isMap.js",
        "./isObject": "../node_modules/lodash/isObject.js",
        "./isSet": "../node_modules/lodash/isSet.js",
        "./keys": "../node_modules/lodash/keys.js"
      }
    ],
    "../node_modules/lodash/isSymbol.js": [
      function(require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var symbolTag = "[object Symbol]";

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return (
            typeof value == "symbol" ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag)
          );
        }

        module.exports = isSymbol;
      },
      {
        "./_baseGetTag": "../node_modules/lodash/_baseGetTag.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/_isKey.js": [
      function(require, module, exports) {
        var isArray = require("./isArray"),
          isSymbol = require("./isSymbol");

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/;

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (
            type == "number" ||
            type == "symbol" ||
            type == "boolean" ||
            value == null ||
            isSymbol(value)
          ) {
            return true;
          }
          return (
            reIsPlainProp.test(value) ||
            !reIsDeepProp.test(value) ||
            (object != null && value in Object(object))
          );
        }

        module.exports = isKey;
      },
      {
        "./isArray": "../node_modules/lodash/isArray.js",
        "./isSymbol": "../node_modules/lodash/isSymbol.js"
      }
    ],
    "../node_modules/lodash/memoize.js": [
      function(require, module, exports) {
        var MapCache = require("./_MapCache");

        /** Error message constants. */
        var FUNC_ERROR_TEXT = "Expected a function";

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (
            typeof func != "function" ||
            (resolver != null && typeof resolver != "function")
          ) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        module.exports = memoize;
      },
      { "./_MapCache": "../node_modules/lodash/_MapCache.js" }
    ],
    "../node_modules/lodash/_memoizeCapped.js": [
      function(require, module, exports) {
        var memoize = require("./memoize");

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });

          var cache = result.cache;
          return result;
        }

        module.exports = memoizeCapped;
      },
      { "./memoize": "../node_modules/lodash/memoize.js" }
    ],
    "../node_modules/lodash/_stringToPath.js": [
      function(require, module, exports) {
        var memoizeCapped = require("./_memoizeCapped");

        /** Used to match property names within property paths. */
        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function(string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(
              quote ? subString.replace(reEscapeChar, "$1") : number || match
            );
          });
          return result;
        });

        module.exports = stringToPath;
      },
      { "./_memoizeCapped": "../node_modules/lodash/_memoizeCapped.js" }
    ],
    "../node_modules/lodash/_baseToString.js": [
      function(require, module, exports) {
        var Symbol = require("./_Symbol"),
          arrayMap = require("./_arrayMap"),
          isArray = require("./isArray"),
          isSymbol = require("./isSymbol");

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }

        module.exports = baseToString;
      },
      {
        "./_Symbol": "../node_modules/lodash/_Symbol.js",
        "./_arrayMap": "../node_modules/lodash/_arrayMap.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./isSymbol": "../node_modules/lodash/isSymbol.js"
      }
    ],
    "../node_modules/lodash/toString.js": [
      function(require, module, exports) {
        var baseToString = require("./_baseToString");

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }

        module.exports = toString;
      },
      { "./_baseToString": "../node_modules/lodash/_baseToString.js" }
    ],
    "../node_modules/lodash/_castPath.js": [
      function(require, module, exports) {
        var isArray = require("./isArray"),
          isKey = require("./_isKey"),
          stringToPath = require("./_stringToPath"),
          toString = require("./toString");

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        module.exports = castPath;
      },
      {
        "./isArray": "../node_modules/lodash/isArray.js",
        "./_isKey": "../node_modules/lodash/_isKey.js",
        "./_stringToPath": "../node_modules/lodash/_stringToPath.js",
        "./toString": "../node_modules/lodash/toString.js"
      }
    ],
    "../node_modules/lodash/last.js": [
      function(require, module, exports) {
        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined;
        }

        module.exports = last;
      },
      {}
    ],
    "../node_modules/lodash/_toKey.js": [
      function(require, module, exports) {
        var isSymbol = require("./isSymbol");

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }

        module.exports = toKey;
      },
      { "./isSymbol": "../node_modules/lodash/isSymbol.js" }
    ],
    "../node_modules/lodash/_baseGet.js": [
      function(require, module, exports) {
        var castPath = require("./_castPath"),
          toKey = require("./_toKey");

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);

          var index = 0,
            length = path.length;

          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined;
        }

        module.exports = baseGet;
      },
      {
        "./_castPath": "../node_modules/lodash/_castPath.js",
        "./_toKey": "../node_modules/lodash/_toKey.js"
      }
    ],
    "../node_modules/lodash/_baseSlice.js": [
      function(require, module, exports) {
        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
            length = array.length;

          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : (end - start) >>> 0;
          start >>>= 0;

          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }

        module.exports = baseSlice;
      },
      {}
    ],
    "../node_modules/lodash/_parent.js": [
      function(require, module, exports) {
        var baseGet = require("./_baseGet"),
          baseSlice = require("./_baseSlice");

        /**
         * Gets the parent value at `path` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path to get the parent value of.
         * @returns {*} Returns the parent value.
         */
        function parent(object, path) {
          return path.length < 2
            ? object
            : baseGet(object, baseSlice(path, 0, -1));
        }

        module.exports = parent;
      },
      {
        "./_baseGet": "../node_modules/lodash/_baseGet.js",
        "./_baseSlice": "../node_modules/lodash/_baseSlice.js"
      }
    ],
    "../node_modules/lodash/_baseUnset.js": [
      function(require, module, exports) {
        var castPath = require("./_castPath"),
          last = require("./last"),
          parent = require("./_parent"),
          toKey = require("./_toKey");

        /**
         * The base implementation of `_.unset`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The property path to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         */
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }

        module.exports = baseUnset;
      },
      {
        "./_castPath": "../node_modules/lodash/_castPath.js",
        "./last": "../node_modules/lodash/last.js",
        "./_parent": "../node_modules/lodash/_parent.js",
        "./_toKey": "../node_modules/lodash/_toKey.js"
      }
    ],
    "../node_modules/lodash/isPlainObject.js": [
      function(require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          getPrototype = require("./_getPrototype"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var objectTag = "[object Object]";

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
          objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString.call(Object);

        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor =
            hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return (
            typeof Ctor == "function" &&
            Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString
          );
        }

        module.exports = isPlainObject;
      },
      {
        "./_baseGetTag": "../node_modules/lodash/_baseGetTag.js",
        "./_getPrototype": "../node_modules/lodash/_getPrototype.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/_customOmitClone.js": [
      function(require, module, exports) {
        var isPlainObject = require("./isPlainObject");

        /**
         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
         * objects.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {string} key The key of the property to inspect.
         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
         */
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined : value;
        }

        module.exports = customOmitClone;
      },
      { "./isPlainObject": "../node_modules/lodash/isPlainObject.js" }
    ],
    "../node_modules/lodash/_isFlattenable.js": [
      function(require, module, exports) {
        var Symbol = require("./_Symbol"),
          isArguments = require("./isArguments"),
          isArray = require("./isArray");

        /** Built-in value references. */
        var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return (
            isArray(value) ||
            isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol])
          );
        }

        module.exports = isFlattenable;
      },
      {
        "./_Symbol": "../node_modules/lodash/_Symbol.js",
        "./isArguments": "../node_modules/lodash/isArguments.js",
        "./isArray": "../node_modules/lodash/isArray.js"
      }
    ],
    "../node_modules/lodash/_baseFlatten.js": [
      function(require, module, exports) {
        var arrayPush = require("./_arrayPush"),
          isFlattenable = require("./_isFlattenable");

        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
            length = array.length;

          predicate || (predicate = isFlattenable);
          result || (result = []);

          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }

        module.exports = baseFlatten;
      },
      {
        "./_arrayPush": "../node_modules/lodash/_arrayPush.js",
        "./_isFlattenable": "../node_modules/lodash/_isFlattenable.js"
      }
    ],
    "../node_modules/lodash/flatten.js": [
      function(require, module, exports) {
        var baseFlatten = require("./_baseFlatten");

        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }

        module.exports = flatten;
      },
      { "./_baseFlatten": "../node_modules/lodash/_baseFlatten.js" }
    ],
    "../node_modules/lodash/_apply.js": [
      function(require, module, exports) {
        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }

        module.exports = apply;
      },
      {}
    ],
    "../node_modules/lodash/_overRest.js": [
      function(require, module, exports) {
        var apply = require("./_apply");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined ? func.length - 1 : start, 0);
          return function() {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }

        module.exports = overRest;
      },
      { "./_apply": "../node_modules/lodash/_apply.js" }
    ],
    "../node_modules/lodash/constant.js": [
      function(require, module, exports) {
        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function() {
            return value;
          };
        }

        module.exports = constant;
      },
      {}
    ],
    "../node_modules/lodash/identity.js": [
      function(require, module, exports) {
        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }

        module.exports = identity;
      },
      {}
    ],
    "../node_modules/lodash/_baseSetToString.js": [
      function(require, module, exports) {
        var constant = require("./constant"),
          defineProperty = require("./_defineProperty"),
          identity = require("./identity");

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty
          ? identity
          : function(func, string) {
              return defineProperty(func, "toString", {
                configurable: true,
                enumerable: false,
                value: constant(string),
                writable: true
              });
            };

        module.exports = baseSetToString;
      },
      {
        "./constant": "../node_modules/lodash/constant.js",
        "./_defineProperty": "../node_modules/lodash/_defineProperty.js",
        "./identity": "../node_modules/lodash/identity.js"
      }
    ],
    "../node_modules/lodash/_shortOut.js": [
      function(require, module, exports) {
        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
          HOT_SPAN = 16;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeNow = Date.now;

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
            lastCalled = 0;

          return function() {
            var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined, arguments);
          };
        }

        module.exports = shortOut;
      },
      {}
    ],
    "../node_modules/lodash/_setToString.js": [
      function(require, module, exports) {
        var baseSetToString = require("./_baseSetToString"),
          shortOut = require("./_shortOut");

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        module.exports = setToString;
      },
      {
        "./_baseSetToString": "../node_modules/lodash/_baseSetToString.js",
        "./_shortOut": "../node_modules/lodash/_shortOut.js"
      }
    ],
    "../node_modules/lodash/_flatRest.js": [
      function(require, module, exports) {
        var flatten = require("./flatten"),
          overRest = require("./_overRest"),
          setToString = require("./_setToString");

        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
          return setToString(overRest(func, undefined, flatten), func + "");
        }

        module.exports = flatRest;
      },
      {
        "./flatten": "../node_modules/lodash/flatten.js",
        "./_overRest": "../node_modules/lodash/_overRest.js",
        "./_setToString": "../node_modules/lodash/_setToString.js"
      }
    ],
    "../node_modules/lodash/omit.js": [
      function(require, module, exports) {
        var arrayMap = require("./_arrayMap"),
          baseClone = require("./_baseClone"),
          baseUnset = require("./_baseUnset"),
          castPath = require("./_castPath"),
          copyObject = require("./_copyObject"),
          customOmitClone = require("./_customOmitClone"),
          flatRest = require("./_flatRest"),
          getAllKeysIn = require("./_getAllKeysIn");

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable property paths of `object` that are not omitted.
         *
         * **Note:** This method is considerably slower than `_.pick`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to omit.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omit(object, ['a', 'c']);
         * // => { 'b': '2' }
         */
        var omit = flatRest(function(object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(
              result,
              CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
              customOmitClone
            );
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });

        module.exports = omit;
      },
      {
        "./_arrayMap": "../node_modules/lodash/_arrayMap.js",
        "./_baseClone": "../node_modules/lodash/_baseClone.js",
        "./_baseUnset": "../node_modules/lodash/_baseUnset.js",
        "./_castPath": "../node_modules/lodash/_castPath.js",
        "./_copyObject": "../node_modules/lodash/_copyObject.js",
        "./_customOmitClone": "../node_modules/lodash/_customOmitClone.js",
        "./_flatRest": "../node_modules/lodash/_flatRest.js",
        "./_getAllKeysIn": "../node_modules/lodash/_getAllKeysIn.js"
      }
    ],
    "../node_modules/lodash/_createBaseFor.js": [
      function(require, module, exports) {
        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }

        module.exports = createBaseFor;
      },
      {}
    ],
    "../node_modules/lodash/_baseFor.js": [
      function(require, module, exports) {
        var createBaseFor = require("./_createBaseFor");

        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        module.exports = baseFor;
      },
      { "./_createBaseFor": "../node_modules/lodash/_createBaseFor.js" }
    ],
    "../node_modules/lodash/_baseForOwn.js": [
      function(require, module, exports) {
        var baseFor = require("./_baseFor"),
          keys = require("./keys");

        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }

        module.exports = baseForOwn;
      },
      {
        "./_baseFor": "../node_modules/lodash/_baseFor.js",
        "./keys": "../node_modules/lodash/keys.js"
      }
    ],
    "../node_modules/lodash/_createBaseEach.js": [
      function(require, module, exports) {
        var isArrayLike = require("./isArrayLike");

        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }
            var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

            while (fromRight ? index-- : ++index < length) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }

        module.exports = createBaseEach;
      },
      { "./isArrayLike": "../node_modules/lodash/isArrayLike.js" }
    ],
    "../node_modules/lodash/_baseEach.js": [
      function(require, module, exports) {
        var baseForOwn = require("./_baseForOwn"),
          createBaseEach = require("./_createBaseEach");

        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);

        module.exports = baseEach;
      },
      {
        "./_baseForOwn": "../node_modules/lodash/_baseForOwn.js",
        "./_createBaseEach": "../node_modules/lodash/_createBaseEach.js"
      }
    ],
    "../node_modules/lodash/_baseFilter.js": [
      function(require, module, exports) {
        var baseEach = require("./_baseEach");

        /**
         * The base implementation of `_.filter` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function baseFilter(collection, predicate) {
          var result = [];
          baseEach(collection, function(value, index, collection) {
            if (predicate(value, index, collection)) {
              result.push(value);
            }
          });
          return result;
        }

        module.exports = baseFilter;
      },
      { "./_baseEach": "../node_modules/lodash/_baseEach.js" }
    ],
    "../node_modules/lodash/_setCacheAdd.js": [
      function(require, module, exports) {
        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }

        module.exports = setCacheAdd;
      },
      {}
    ],
    "../node_modules/lodash/_setCacheHas.js": [
      function(require, module, exports) {
        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }

        module.exports = setCacheHas;
      },
      {}
    ],
    "../node_modules/lodash/_SetCache.js": [
      function(require, module, exports) {
        var MapCache = require("./_MapCache"),
          setCacheAdd = require("./_setCacheAdd"),
          setCacheHas = require("./_setCacheHas");

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
            length = values == null ? 0 : values.length;

          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values[index]);
          }
        }

        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        module.exports = SetCache;
      },
      {
        "./_MapCache": "../node_modules/lodash/_MapCache.js",
        "./_setCacheAdd": "../node_modules/lodash/_setCacheAdd.js",
        "./_setCacheHas": "../node_modules/lodash/_setCacheHas.js"
      }
    ],
    "../node_modules/lodash/_arraySome.js": [
      function(require, module, exports) {
        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }

        module.exports = arraySome;
      },
      {}
    ],
    "../node_modules/lodash/_cacheHas.js": [
      function(require, module, exports) {
        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
          return cache.has(key);
        }

        module.exports = cacheHas;
      },
      {}
    ],
    "../node_modules/lodash/_equalArrays.js": [
      function(require, module, exports) {
        var SetCache = require("./_SetCache"),
          arraySome = require("./_arraySome"),
          cacheHas = require("./_cacheHas");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(
          array,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(array);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var index = -1,
            result = true,
            seen =
              bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

          stack.set(array, other);
          stack.set(other, array);

          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (
                !arraySome(other, function(othValue, othIndex) {
                  if (
                    !cacheHas(seen, othIndex) &&
                    (arrValue === othValue ||
                      equalFunc(arrValue, othValue, bitmask, customizer, stack))
                  ) {
                    return seen.push(othIndex);
                  }
                })
              ) {
                result = false;
                break;
              }
            } else if (
              !(
                arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )
            ) {
              result = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result;
        }

        module.exports = equalArrays;
      },
      {
        "./_SetCache": "../node_modules/lodash/_SetCache.js",
        "./_arraySome": "../node_modules/lodash/_arraySome.js",
        "./_cacheHas": "../node_modules/lodash/_cacheHas.js"
      }
    ],
    "../node_modules/lodash/_mapToArray.js": [
      function(require, module, exports) {
        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
          var index = -1,
            result = Array(map.size);

          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }

        module.exports = mapToArray;
      },
      {}
    ],
    "../node_modules/lodash/_setToArray.js": [
      function(require, module, exports) {
        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
          var index = -1,
            result = Array(set.size);

          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }

        module.exports = setToArray;
      },
      {}
    ],
    "../node_modules/lodash/_equalByTag.js": [
      function(require, module, exports) {
        var Symbol = require("./_Symbol"),
          Uint8Array = require("./_Uint8Array"),
          eq = require("./eq"),
          equalArrays = require("./_equalArrays"),
          mapToArray = require("./_mapToArray"),
          setToArray = require("./_setToArray");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /** `Object#toString` result references. */
        var boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]";

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]";

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(
          object,
          other,
          tag,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          switch (tag) {
            case dataViewTag:
              if (
                object.byteLength != other.byteLength ||
                object.byteOffset != other.byteOffset
              ) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;

            case arrayBufferTag:
              if (
                object.byteLength != other.byteLength ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))
              ) {
                return false;
              }
              return true;

            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);

            case errorTag:
              return (
                object.name == other.name && object.message == other.message
              );

            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == other + "";

            case mapTag:
              var convert = mapToArray;

            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);

              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;

              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(
                convert(object),
                convert(other),
                bitmask,
                customizer,
                equalFunc,
                stack
              );
              stack["delete"](object);
              return result;

            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }

        module.exports = equalByTag;
      },
      {
        "./_Symbol": "../node_modules/lodash/_Symbol.js",
        "./_Uint8Array": "../node_modules/lodash/_Uint8Array.js",
        "./eq": "../node_modules/lodash/eq.js",
        "./_equalArrays": "../node_modules/lodash/_equalArrays.js",
        "./_mapToArray": "../node_modules/lodash/_mapToArray.js",
        "./_setToArray": "../node_modules/lodash/_setToArray.js"
      }
    ],
    "../node_modules/lodash/_equalObjects.js": [
      function(require, module, exports) {
        var getAllKeys = require("./_getAllKeys");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);

          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
              othValue = other[key];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (
              !(compared === undefined
                ? objValue === othValue ||
                  equalFunc(objValue, othValue, bitmask, customizer, stack)
                : compared)
            ) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
              othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (
              objCtor != othCtor &&
              ("constructor" in object && "constructor" in other) &&
              !(
                typeof objCtor == "function" &&
                objCtor instanceof objCtor &&
                typeof othCtor == "function" &&
                othCtor instanceof othCtor
              )
            ) {
              result = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result;
        }

        module.exports = equalObjects;
      },
      { "./_getAllKeys": "../node_modules/lodash/_getAllKeys.js" }
    ],
    "../node_modules/lodash/_baseIsEqualDeep.js": [
      function(require, module, exports) {
        var Stack = require("./_Stack"),
          equalArrays = require("./_equalArrays"),
          equalByTag = require("./_equalByTag"),
          equalObjects = require("./_equalObjects"),
          getTag = require("./_getTag"),
          isArray = require("./isArray"),
          isBuffer = require("./isBuffer"),
          isTypedArray = require("./isTypedArray");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1;

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          objectTag = "[object Object]";

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;

          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object)
              ? equalArrays(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
              : equalByTag(
                  object,
                  other,
                  objTag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped =
                objIsObj && hasOwnProperty.call(object, "__wrapped__"),
              othIsWrapped =
                othIsObj && hasOwnProperty.call(other, "__wrapped__");

            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

              stack || (stack = new Stack());
              return equalFunc(
                objUnwrapped,
                othUnwrapped,
                bitmask,
                customizer,
                stack
              );
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          );
        }

        module.exports = baseIsEqualDeep;
      },
      {
        "./_Stack": "../node_modules/lodash/_Stack.js",
        "./_equalArrays": "../node_modules/lodash/_equalArrays.js",
        "./_equalByTag": "../node_modules/lodash/_equalByTag.js",
        "./_equalObjects": "../node_modules/lodash/_equalObjects.js",
        "./_getTag": "../node_modules/lodash/_getTag.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./isBuffer": "../node_modules/lodash/isBuffer.js",
        "./isTypedArray": "../node_modules/lodash/isTypedArray.js"
      }
    ],
    "../node_modules/lodash/_baseIsEqual.js": [
      function(require, module, exports) {
        var baseIsEqualDeep = require("./_baseIsEqualDeep"),
          isObjectLike = require("./isObjectLike");

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (
            value == null ||
            other == null ||
            (!isObjectLike(value) && !isObjectLike(other))
          ) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(
            value,
            other,
            bitmask,
            customizer,
            baseIsEqual,
            stack
          );
        }

        module.exports = baseIsEqual;
      },
      {
        "./_baseIsEqualDeep": "../node_modules/lodash/_baseIsEqualDeep.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/_baseIsMatch.js": [
      function(require, module, exports) {
        var Stack = require("./_Stack"),
          baseIsEqual = require("./_baseIsEqual");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if (
              noCustomizer && data[2]
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
            ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object[key],
              srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result = customizer(
                  objValue,
                  srcValue,
                  key,
                  object,
                  source,
                  stack
                );
              }
              if (
                !(result === undefined
                  ? baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                      customizer,
                      stack
                    )
                  : result)
              ) {
                return false;
              }
            }
          }
          return true;
        }

        module.exports = baseIsMatch;
      },
      {
        "./_Stack": "../node_modules/lodash/_Stack.js",
        "./_baseIsEqual": "../node_modules/lodash/_baseIsEqual.js"
      }
    ],
    "../node_modules/lodash/_isStrictComparable.js": [
      function(require, module, exports) {
        var isObject = require("./isObject");

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        module.exports = isStrictComparable;
      },
      { "./isObject": "../node_modules/lodash/isObject.js" }
    ],
    "../node_modules/lodash/_getMatchData.js": [
      function(require, module, exports) {
        var isStrictComparable = require("./_isStrictComparable"),
          keys = require("./keys");

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
            length = result.length;

          while (length--) {
            var key = result[length],
              value = object[key];

            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }

        module.exports = getMatchData;
      },
      {
        "./_isStrictComparable":
          "../node_modules/lodash/_isStrictComparable.js",
        "./keys": "../node_modules/lodash/keys.js"
      }
    ],
    "../node_modules/lodash/_matchesStrictComparable.js": [
      function(require, module, exports) {
        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return (
              object[key] === srcValue &&
              (srcValue !== undefined || key in Object(object))
            );
          };
        }

        module.exports = matchesStrictComparable;
      },
      {}
    ],
    "../node_modules/lodash/_baseMatches.js": [
      function(require, module, exports) {
        var baseIsMatch = require("./_baseIsMatch"),
          getMatchData = require("./_getMatchData"),
          matchesStrictComparable = require("./_matchesStrictComparable");

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }

        module.exports = baseMatches;
      },
      {
        "./_baseIsMatch": "../node_modules/lodash/_baseIsMatch.js",
        "./_getMatchData": "../node_modules/lodash/_getMatchData.js",
        "./_matchesStrictComparable":
          "../node_modules/lodash/_matchesStrictComparable.js"
      }
    ],
    "../node_modules/lodash/get.js": [
      function(require, module, exports) {
        var baseGet = require("./_baseGet");

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, path);
          return result === undefined ? defaultValue : result;
        }

        module.exports = get;
      },
      { "./_baseGet": "../node_modules/lodash/_baseGet.js" }
    ],
    "../node_modules/lodash/_baseHasIn.js": [
      function(require, module, exports) {
        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }

        module.exports = baseHasIn;
      },
      {}
    ],
    "../node_modules/lodash/_hasPath.js": [
      function(require, module, exports) {
        var castPath = require("./_castPath"),
          isArguments = require("./isArguments"),
          isArray = require("./isArray"),
          isIndex = require("./_isIndex"),
          isLength = require("./isLength"),
          toKey = require("./_toKey");

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);

          var index = -1,
            length = path.length,
            result = false;

          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return (
            !!length &&
            isLength(length) &&
            isIndex(key, length) &&
            (isArray(object) || isArguments(object))
          );
        }

        module.exports = hasPath;
      },
      {
        "./_castPath": "../node_modules/lodash/_castPath.js",
        "./isArguments": "../node_modules/lodash/isArguments.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./_isIndex": "../node_modules/lodash/_isIndex.js",
        "./isLength": "../node_modules/lodash/isLength.js",
        "./_toKey": "../node_modules/lodash/_toKey.js"
      }
    ],
    "../node_modules/lodash/hasIn.js": [
      function(require, module, exports) {
        var baseHasIn = require("./_baseHasIn"),
          hasPath = require("./_hasPath");

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }

        module.exports = hasIn;
      },
      {
        "./_baseHasIn": "../node_modules/lodash/_baseHasIn.js",
        "./_hasPath": "../node_modules/lodash/_hasPath.js"
      }
    ],
    "../node_modules/lodash/_baseMatchesProperty.js": [
      function(require, module, exports) {
        var baseIsEqual = require("./_baseIsEqual"),
          get = require("./get"),
          hasIn = require("./hasIn"),
          isKey = require("./_isKey"),
          isStrictComparable = require("./_isStrictComparable"),
          matchesStrictComparable = require("./_matchesStrictComparable"),
          toKey = require("./_toKey");

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined && objValue === srcValue
              ? hasIn(object, path)
              : baseIsEqual(
                  srcValue,
                  objValue,
                  COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                );
          };
        }

        module.exports = baseMatchesProperty;
      },
      {
        "./_baseIsEqual": "../node_modules/lodash/_baseIsEqual.js",
        "./get": "../node_modules/lodash/get.js",
        "./hasIn": "../node_modules/lodash/hasIn.js",
        "./_isKey": "../node_modules/lodash/_isKey.js",
        "./_isStrictComparable":
          "../node_modules/lodash/_isStrictComparable.js",
        "./_matchesStrictComparable":
          "../node_modules/lodash/_matchesStrictComparable.js",
        "./_toKey": "../node_modules/lodash/_toKey.js"
      }
    ],
    "../node_modules/lodash/_baseProperty.js": [
      function(require, module, exports) {
        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined : object[key];
          };
        }

        module.exports = baseProperty;
      },
      {}
    ],
    "../node_modules/lodash/_basePropertyDeep.js": [
      function(require, module, exports) {
        var baseGet = require("./_baseGet");

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }

        module.exports = basePropertyDeep;
      },
      { "./_baseGet": "../node_modules/lodash/_baseGet.js" }
    ],
    "../node_modules/lodash/property.js": [
      function(require, module, exports) {
        var baseProperty = require("./_baseProperty"),
          basePropertyDeep = require("./_basePropertyDeep"),
          isKey = require("./_isKey"),
          toKey = require("./_toKey");

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path)
            ? baseProperty(toKey(path))
            : basePropertyDeep(path);
        }

        module.exports = property;
      },
      {
        "./_baseProperty": "../node_modules/lodash/_baseProperty.js",
        "./_basePropertyDeep": "../node_modules/lodash/_basePropertyDeep.js",
        "./_isKey": "../node_modules/lodash/_isKey.js",
        "./_toKey": "../node_modules/lodash/_toKey.js"
      }
    ],
    "../node_modules/lodash/_baseIteratee.js": [
      function(require, module, exports) {
        var baseMatches = require("./_baseMatches"),
          baseMatchesProperty = require("./_baseMatchesProperty"),
          identity = require("./identity"),
          isArray = require("./isArray"),
          property = require("./property");

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }

        module.exports = baseIteratee;
      },
      {
        "./_baseMatches": "../node_modules/lodash/_baseMatches.js",
        "./_baseMatchesProperty":
          "../node_modules/lodash/_baseMatchesProperty.js",
        "./identity": "../node_modules/lodash/identity.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./property": "../node_modules/lodash/property.js"
      }
    ],
    "../node_modules/lodash/negate.js": [
      function(require, module, exports) {
        /** Error message constants. */
        var FUNC_ERROR_TEXT = "Expected a function";

        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new negated function.
         * @example
         *
         * function isEven(n) {
         *   return n % 2 == 0;
         * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }

        module.exports = negate;
      },
      {}
    ],
    "../node_modules/lodash/reject.js": [
      function(require, module, exports) {
        var arrayFilter = require("./_arrayFilter"),
          baseFilter = require("./_baseFilter"),
          baseIteratee = require("./_baseIteratee"),
          isArray = require("./isArray"),
          negate = require("./negate");

        /**
         * The opposite of `_.filter`; this method returns the elements of `collection`
         * that `predicate` does **not** return truthy for.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.filter
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': true }
         * ];
         *
         * _.reject(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.reject(users, { 'age': 40, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.reject(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.reject(users, 'active');
         * // => objects for ['barney']
         */
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(baseIteratee(predicate, 3)));
        }

        module.exports = reject;
      },
      {
        "./_arrayFilter": "../node_modules/lodash/_arrayFilter.js",
        "./_baseFilter": "../node_modules/lodash/_baseFilter.js",
        "./_baseIteratee": "../node_modules/lodash/_baseIteratee.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./negate": "../node_modules/lodash/negate.js"
      }
    ],
    "../node_modules/lodash/_baseRest.js": [
      function(require, module, exports) {
        var identity = require("./identity"),
          overRest = require("./_overRest"),
          setToString = require("./_setToString");

        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }

        module.exports = baseRest;
      },
      {
        "./identity": "../node_modules/lodash/identity.js",
        "./_overRest": "../node_modules/lodash/_overRest.js",
        "./_setToString": "../node_modules/lodash/_setToString.js"
      }
    ],
    "../node_modules/lodash/_metaMap.js": [
      function(require, module, exports) {
        var WeakMap = require("./_WeakMap");

        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap();

        module.exports = metaMap;
      },
      { "./_WeakMap": "../node_modules/lodash/_WeakMap.js" }
    ],
    "../node_modules/lodash/_baseSetData.js": [
      function(require, module, exports) {
        var identity = require("./identity"),
          metaMap = require("./_metaMap");

        /**
         * The base implementation of `setData` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap
          ? identity
          : function(func, data) {
              metaMap.set(func, data);
              return func;
            };

        module.exports = baseSetData;
      },
      {
        "./identity": "../node_modules/lodash/identity.js",
        "./_metaMap": "../node_modules/lodash/_metaMap.js"
      }
    ],
    "../node_modules/lodash/_createCtor.js": [
      function(require, module, exports) {
        var baseCreate = require("./_baseCreate"),
          isObject = require("./isObject");

        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtor(Ctor) {
          return function() {
            // Use a `switch` statement to work with class constructors. See
            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5]
                );
              case 7:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5],
                  args[6]
                );
            }
            var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }

        module.exports = createCtor;
      },
      {
        "./_baseCreate": "../node_modules/lodash/_baseCreate.js",
        "./isObject": "../node_modules/lodash/isObject.js"
      }
    ],
    "../node_modules/lodash/_createBind.js": [
      function(require, module, exports) {
        var createCtor = require("./_createCtor"),
          root = require("./_root");

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1;

        /**
         * Creates a function that wraps `func` to invoke it with the optional `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

          function wrapper() {
            var fn =
              this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }

        module.exports = createBind;
      },
      {
        "./_createCtor": "../node_modules/lodash/_createCtor.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_composeArgs.js": [
      function(require, module, exports) {
        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }

        module.exports = composeArgs;
      },
      {}
    ],
    "../node_modules/lodash/_composeArgsRight.js": [
      function(require, module, exports) {
        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

          while (++argsIndex < rangeLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result;
        }

        module.exports = composeArgsRight;
      },
      {}
    ],
    "../node_modules/lodash/_countHolders.js": [
      function(require, module, exports) {
        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */
        function countHolders(array, placeholder) {
          var length = array.length,
            result = 0;

          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }

        module.exports = countHolders;
      },
      {}
    ],
    "../node_modules/lodash/_baseLodash.js": [
      function(require, module, exports) {
        /**
         * The function whose prototype chain sequence wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }

        module.exports = baseLodash;
      },
      {}
    ],
    "../node_modules/lodash/_LazyWrapper.js": [
      function(require, module, exports) {
        var baseCreate = require("./_baseCreate"),
          baseLodash = require("./_baseLodash");

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295;

        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @constructor
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }

        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;

        module.exports = LazyWrapper;
      },
      {
        "./_baseCreate": "../node_modules/lodash/_baseCreate.js",
        "./_baseLodash": "../node_modules/lodash/_baseLodash.js"
      }
    ],
    "../node_modules/lodash/noop.js": [
      function(require, module, exports) {
        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */
        function noop() {
          // No operation performed.
        }

        module.exports = noop;
      },
      {}
    ],
    "../node_modules/lodash/_getData.js": [
      function(require, module, exports) {
        var metaMap = require("./_metaMap"),
          noop = require("./noop");

        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap
          ? noop
          : function(func) {
              return metaMap.get(func);
            };

        module.exports = getData;
      },
      {
        "./_metaMap": "../node_modules/lodash/_metaMap.js",
        "./noop": "../node_modules/lodash/noop.js"
      }
    ],
    "../node_modules/lodash/_realNames.js": [
      function(require, module, exports) {
        /** Used to lookup unminified function names. */
        var realNames = {};

        module.exports = realNames;
      },
      {}
    ],
    "../node_modules/lodash/_getFuncName.js": [
      function(require, module, exports) {
        var realNames = require("./_realNames");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = func.name + "",
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

          while (length--) {
            var data = array[length],
              otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }

        module.exports = getFuncName;
      },
      { "./_realNames": "../node_modules/lodash/_realNames.js" }
    ],
    "../node_modules/lodash/_LodashWrapper.js": [
      function(require, module, exports) {
        var baseCreate = require("./_baseCreate"),
          baseLodash = require("./_baseLodash");

        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable explicit method chain sequences.
         */
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined;
        }

        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;

        module.exports = LodashWrapper;
      },
      {
        "./_baseCreate": "../node_modules/lodash/_baseCreate.js",
        "./_baseLodash": "../node_modules/lodash/_baseLodash.js"
      }
    ],
    "../node_modules/lodash/_wrapperClone.js": [
      function(require, module, exports) {
        var LazyWrapper = require("./_LazyWrapper"),
          LodashWrapper = require("./_LodashWrapper"),
          copyArray = require("./_copyArray");

        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result = new LodashWrapper(
            wrapper.__wrapped__,
            wrapper.__chain__
          );
          result.__actions__ = copyArray(wrapper.__actions__);
          result.__index__ = wrapper.__index__;
          result.__values__ = wrapper.__values__;
          return result;
        }

        module.exports = wrapperClone;
      },
      {
        "./_LazyWrapper": "../node_modules/lodash/_LazyWrapper.js",
        "./_LodashWrapper": "../node_modules/lodash/_LodashWrapper.js",
        "./_copyArray": "../node_modules/lodash/_copyArray.js"
      }
    ],
    "../node_modules/lodash/wrapperLodash.js": [
      function(require, module, exports) {
        var LazyWrapper = require("./_LazyWrapper"),
          LodashWrapper = require("./_LodashWrapper"),
          baseLodash = require("./_baseLodash"),
          isArray = require("./isArray"),
          isObjectLike = require("./isObjectLike"),
          wrapperClone = require("./_wrapperClone");

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Creates a `lodash` object which wraps `value` to enable implicit method
         * chain sequences. Methods that operate on and return arrays, collections,
         * and functions can be chained together. Methods that retrieve a single value
         * or may return a primitive value will automatically end the chain sequence
         * and return the unwrapped value. Otherwise, the value must be unwrapped
         * with `_#value`.
         *
         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
         * enabled using `_.chain`.
         *
         * The execution of chained methods is lazy, that is, it's deferred until
         * `_#value` is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion.
         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
         * the creation of intermediate arrays and can greatly reduce the number of
         * iteratee executions. Sections of a chain sequence qualify for shortcut
         * fusion if the section is applied to an array and iteratees accept only
         * one argument. The heuristic for whether a section qualifies for shortcut
         * fusion is subject to change.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
         * `zipObject`, `zipObjectDeep`, and `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
         * `upperFirst`, `value`, and `words`
         *
         * @name _
         * @constructor
         * @category Seq
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // Returns an unwrapped value.
         * wrapped.reduce(_.add);
         * // => 6
         *
         * // Returns a wrapped value.
         * var squares = wrapped.map(square);
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (
            isObjectLike(value) &&
            !isArray(value) &&
            !(value instanceof LazyWrapper)
          ) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }

        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;

        module.exports = lodash;
      },
      {
        "./_LazyWrapper": "../node_modules/lodash/_LazyWrapper.js",
        "./_LodashWrapper": "../node_modules/lodash/_LodashWrapper.js",
        "./_baseLodash": "../node_modules/lodash/_baseLodash.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js",
        "./_wrapperClone": "../node_modules/lodash/_wrapperClone.js"
      }
    ],
    "../node_modules/lodash/_isLaziable.js": [
      function(require, module, exports) {
        var LazyWrapper = require("./_LazyWrapper"),
          getData = require("./_getData"),
          getFuncName = require("./_getFuncName"),
          lodash = require("./wrapperLodash");

        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
         *  else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func),
            other = lodash[funcName];

          if (
            typeof other != "function" ||
            !(funcName in LazyWrapper.prototype)
          ) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }

        module.exports = isLaziable;
      },
      {
        "./_LazyWrapper": "../node_modules/lodash/_LazyWrapper.js",
        "./_getData": "../node_modules/lodash/_getData.js",
        "./_getFuncName": "../node_modules/lodash/_getFuncName.js",
        "./wrapperLodash": "../node_modules/lodash/wrapperLodash.js"
      }
    ],
    "../node_modules/lodash/_setData.js": [
      function(require, module, exports) {
        var baseSetData = require("./_baseSetData"),
          shortOut = require("./_shortOut");

        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity
         * function to avoid garbage collection pauses in V8. See
         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = shortOut(baseSetData);

        module.exports = setData;
      },
      {
        "./_baseSetData": "../node_modules/lodash/_baseSetData.js",
        "./_shortOut": "../node_modules/lodash/_shortOut.js"
      }
    ],
    "../node_modules/lodash/_getWrapDetails.js": [
      function(require, module, exports) {
        /** Used to match wrap detail comments. */
        var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /;

        /**
         * Extracts wrapper details from the `source` body comment.
         *
         * @private
         * @param {string} source The source to inspect.
         * @returns {Array} Returns the wrapper details.
         */
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }

        module.exports = getWrapDetails;
      },
      {}
    ],
    "../node_modules/lodash/_insertWrapDetails.js": [
      function(require, module, exports) {
        /** Used to match wrap detail comments. */
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

        /**
         * Inserts wrapper `details` in a comment at the top of the `source` body.
         *
         * @private
         * @param {string} source The source to modify.
         * @returns {Array} details The details to insert.
         * @returns {string} Returns the modified source.
         */
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(
            reWrapComment,
            "{\n/* [wrapped with " + details + "] */\n"
          );
        }

        module.exports = insertWrapDetails;
      },
      {}
    ],
    "../node_modules/lodash/_baseFindIndex.js": [
      function(require, module, exports) {
        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }

        module.exports = baseFindIndex;
      },
      {}
    ],
    "../node_modules/lodash/_baseIsNaN.js": [
      function(require, module, exports) {
        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */
        function baseIsNaN(value) {
          return value !== value;
        }

        module.exports = baseIsNaN;
      },
      {}
    ],
    "../node_modules/lodash/_strictIndexOf.js": [
      function(require, module, exports) {
        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
            length = array.length;

          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }

        module.exports = strictIndexOf;
      },
      {}
    ],
    "../node_modules/lodash/_baseIndexOf.js": [
      function(require, module, exports) {
        var baseFindIndex = require("./_baseFindIndex"),
          baseIsNaN = require("./_baseIsNaN"),
          strictIndexOf = require("./_strictIndexOf");

        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOf(array, value, fromIndex) {
          return value === value
            ? strictIndexOf(array, value, fromIndex)
            : baseFindIndex(array, baseIsNaN, fromIndex);
        }

        module.exports = baseIndexOf;
      },
      {
        "./_baseFindIndex": "../node_modules/lodash/_baseFindIndex.js",
        "./_baseIsNaN": "../node_modules/lodash/_baseIsNaN.js",
        "./_strictIndexOf": "../node_modules/lodash/_strictIndexOf.js"
      }
    ],
    "../node_modules/lodash/_arrayIncludes.js": [
      function(require, module, exports) {
        var baseIndexOf = require("./_baseIndexOf");

        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }

        module.exports = arrayIncludes;
      },
      { "./_baseIndexOf": "../node_modules/lodash/_baseIndexOf.js" }
    ],
    "../node_modules/lodash/_updateWrapDetails.js": [
      function(require, module, exports) {
        var arrayEach = require("./_arrayEach"),
          arrayIncludes = require("./_arrayIncludes");

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512;

        /** Used to associate wrap methods with their bit flags. */
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];

        /**
         * Updates wrapper `details` based on `bitmask` flags.
         *
         * @private
         * @returns {Array} details The details to modify.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Array} Returns `details`.
         */
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }

        module.exports = updateWrapDetails;
      },
      {
        "./_arrayEach": "../node_modules/lodash/_arrayEach.js",
        "./_arrayIncludes": "../node_modules/lodash/_arrayIncludes.js"
      }
    ],
    "../node_modules/lodash/_setWrapToString.js": [
      function(require, module, exports) {
        var getWrapDetails = require("./_getWrapDetails"),
          insertWrapDetails = require("./_insertWrapDetails"),
          setToString = require("./_setToString"),
          updateWrapDetails = require("./_updateWrapDetails");

        /**
         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
         * with wrapper details in a comment at the top of the source body.
         *
         * @private
         * @param {Function} wrapper The function to modify.
         * @param {Function} reference The reference function.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Function} Returns `wrapper`.
         */
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(
            wrapper,
            insertWrapDetails(
              source,
              updateWrapDetails(getWrapDetails(source), bitmask)
            )
          );
        }

        module.exports = setWrapToString;
      },
      {
        "./_getWrapDetails": "../node_modules/lodash/_getWrapDetails.js",
        "./_insertWrapDetails": "../node_modules/lodash/_insertWrapDetails.js",
        "./_setToString": "../node_modules/lodash/_setToString.js",
        "./_updateWrapDetails": "../node_modules/lodash/_updateWrapDetails.js"
      }
    ],
    "../node_modules/lodash/_createRecurry.js": [
      function(require, module, exports) {
        var isLaziable = require("./_isLaziable"),
          setData = require("./_setData"),
          setWrapToString = require("./_setWrapToString");

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64;

        /**
         * Creates a function that wraps `func` to continue currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {Function} wrapFunc The function to create the `func` wrapper.
         * @param {*} placeholder The placeholder value.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createRecurry(
          func,
          bitmask,
          wrapFunc,
          placeholder,
          thisArg,
          partials,
          holders,
          argPos,
          ary,
          arity
        ) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;

          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary,
            arity
          ];

          var result = wrapFunc.apply(undefined, newData);
          if (isLaziable(func)) {
            setData(result, newData);
          }
          result.placeholder = placeholder;
          return setWrapToString(result, func, bitmask);
        }

        module.exports = createRecurry;
      },
      {
        "./_isLaziable": "../node_modules/lodash/_isLaziable.js",
        "./_setData": "../node_modules/lodash/_setData.js",
        "./_setWrapToString": "../node_modules/lodash/_setWrapToString.js"
      }
    ],
    "../node_modules/lodash/_getHolder.js": [
      function(require, module, exports) {
        /**
         * Gets the argument placeholder value for `func`.
         *
         * @private
         * @param {Function} func The function to inspect.
         * @returns {*} Returns the placeholder value.
         */
        function getHolder(func) {
          var object = func;
          return object.placeholder;
        }

        module.exports = getHolder;
      },
      {}
    ],
    "../node_modules/lodash/_reorder.js": [
      function(require, module, exports) {
        var copyArray = require("./_copyArray"),
          isIndex = require("./_isIndex");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMin = Math.min;

        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength)
              ? oldArray[index]
              : undefined;
          }
          return array;
        }

        module.exports = reorder;
      },
      {
        "./_copyArray": "../node_modules/lodash/_copyArray.js",
        "./_isIndex": "../node_modules/lodash/_isIndex.js"
      }
    ],
    "../node_modules/lodash/_replaceHolders.js": [
      function(require, module, exports) {
        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = "__lodash_placeholder__";

        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */
        function replaceHolders(array, placeholder) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }

        module.exports = replaceHolders;
      },
      {}
    ],
    "../node_modules/lodash/_createHybrid.js": [
      function(require, module, exports) {
        var composeArgs = require("./_composeArgs"),
          composeArgsRight = require("./_composeArgsRight"),
          countHolders = require("./_countHolders"),
          createCtor = require("./_createCtor"),
          createRecurry = require("./_createRecurry"),
          getHolder = require("./_getHolder"),
          reorder = require("./_reorder"),
          replaceHolders = require("./_replaceHolders"),
          root = require("./_root");

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_ARY_FLAG = 128,
          WRAP_FLIP_FLAG = 512;

        /**
         * Creates a function that wraps `func` to invoke it with optional `this`
         * binding of `thisArg`, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided
         *  to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybrid(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary,
          arity
        ) {
          var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

          function wrapper() {
            var length = arguments.length,
              args = Array(length),
              index = length;

            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(
                args,
                partialsRight,
                holdersRight,
                isCurried
              );
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary < length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }

        module.exports = createHybrid;
      },
      {
        "./_composeArgs": "../node_modules/lodash/_composeArgs.js",
        "./_composeArgsRight": "../node_modules/lodash/_composeArgsRight.js",
        "./_countHolders": "../node_modules/lodash/_countHolders.js",
        "./_createCtor": "../node_modules/lodash/_createCtor.js",
        "./_createRecurry": "../node_modules/lodash/_createRecurry.js",
        "./_getHolder": "../node_modules/lodash/_getHolder.js",
        "./_reorder": "../node_modules/lodash/_reorder.js",
        "./_replaceHolders": "../node_modules/lodash/_replaceHolders.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_createCurry.js": [
      function(require, module, exports) {
        var apply = require("./_apply"),
          createCtor = require("./_createCtor"),
          createHybrid = require("./_createHybrid"),
          createRecurry = require("./_createRecurry"),
          getHolder = require("./_getHolder"),
          replaceHolders = require("./_replaceHolders"),
          root = require("./_root");

        /**
         * Creates a function that wraps `func` to enable currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {number} arity The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);

          function wrapper() {
            var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

            while (index--) {
              args[index] = arguments[index];
            }
            var holders =
              length < 3 &&
              args[0] !== placeholder &&
              args[length - 1] !== placeholder
                ? []
                : replaceHolders(args, placeholder);

            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined,
                args,
                holders,
                undefined,
                undefined,
                arity - length
              );
            }
            var fn =
              this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }

        module.exports = createCurry;
      },
      {
        "./_apply": "../node_modules/lodash/_apply.js",
        "./_createCtor": "../node_modules/lodash/_createCtor.js",
        "./_createHybrid": "../node_modules/lodash/_createHybrid.js",
        "./_createRecurry": "../node_modules/lodash/_createRecurry.js",
        "./_getHolder": "../node_modules/lodash/_getHolder.js",
        "./_replaceHolders": "../node_modules/lodash/_replaceHolders.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_createPartial.js": [
      function(require, module, exports) {
        var apply = require("./_apply"),
          createCtor = require("./_createCtor"),
          root = require("./_root");

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1;

        /**
         * Creates a function that wraps `func` to invoke it with the `this` binding
         * of `thisArg` and `partials` prepended to the arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to
         *  the new function.
         * @returns {Function} Returns the new wrapped function.
         */
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

          function wrapper() {
            var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn =
                this && this !== root && this instanceof wrapper ? Ctor : func;

            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }

        module.exports = createPartial;
      },
      {
        "./_apply": "../node_modules/lodash/_apply.js",
        "./_createCtor": "../node_modules/lodash/_createCtor.js",
        "./_root": "../node_modules/lodash/_root.js"
      }
    ],
    "../node_modules/lodash/_mergeData.js": [
      function(require, module, exports) {
        var composeArgs = require("./_composeArgs"),
          composeArgsRight = require("./_composeArgsRight"),
          replaceHolders = require("./_replaceHolders");

        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = "__lodash_placeholder__";

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMin = Math.min;

        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers used to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and
         * `_.rearg` modify function arguments, making the order in which they are
         * executed important, preventing the merging of metadata. However, we make
         * an exception for a safe combined case where curried functions have `_.ary`
         * and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon =
              newBitmask <
              (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

          var isCombo =
            (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
            (srcBitmask == WRAP_ARY_FLAG &&
              bitmask == WRAP_REARG_FLAG &&
              data[7].length <= source[8]) ||
            (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
              source[7].length <= source[8] &&
              bitmask == WRAP_CURRY_FLAG);

          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials
              ? composeArgs(partials, value, source[4])
              : value;
            data[4] = partials
              ? replaceHolders(data[3], PLACEHOLDER)
              : source[4];
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials
              ? composeArgsRight(partials, value, source[6])
              : value;
            data[6] = partials
              ? replaceHolders(data[5], PLACEHOLDER)
              : source[6];
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = value;
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] =
              data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;

          return data;
        }

        module.exports = mergeData;
      },
      {
        "./_composeArgs": "../node_modules/lodash/_composeArgs.js",
        "./_composeArgsRight": "../node_modules/lodash/_composeArgsRight.js",
        "./_replaceHolders": "../node_modules/lodash/_replaceHolders.js"
      }
    ],
    "../node_modules/lodash/toNumber.js": [
      function(require, module, exports) {
        var isObject = require("./isObject"),
          isSymbol = require("./isSymbol");

        /** Used as references for various `Number` constants. */
        var NAN = 0 / 0;

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Built-in method references without a dependency on `root`. */
        var freeParseInt = parseInt;

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other =
              typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value)
            ? NAN
            : +value;
        }

        module.exports = toNumber;
      },
      {
        "./isObject": "../node_modules/lodash/isObject.js",
        "./isSymbol": "../node_modules/lodash/isSymbol.js"
      }
    ],
    "../node_modules/lodash/toFinite.js": [
      function(require, module, exports) {
        var toNumber = require("./toNumber");

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
          MAX_INTEGER = 1.7976931348623157e308;

        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }

        module.exports = toFinite;
      },
      { "./toNumber": "../node_modules/lodash/toNumber.js" }
    ],
    "../node_modules/lodash/toInteger.js": [
      function(require, module, exports) {
        var toFinite = require("./toFinite");

        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
          var result = toFinite(value),
            remainder = result % 1;

          return result === result
            ? remainder
              ? result - remainder
              : result
            : 0;
        }

        module.exports = toInteger;
      },
      { "./toFinite": "../node_modules/lodash/toFinite.js" }
    ],
    "../node_modules/lodash/_createWrap.js": [
      function(require, module, exports) {
        var baseSetData = require("./_baseSetData"),
          createBind = require("./_createBind"),
          createCurry = require("./_createCurry"),
          createHybrid = require("./_createHybrid"),
          createPartial = require("./_createPartial"),
          getData = require("./_getData"),
          mergeData = require("./_mergeData"),
          setData = require("./_setData"),
          setWrapToString = require("./_setWrapToString"),
          toInteger = require("./toInteger");

        /** Error message constants. */
        var FUNC_ERROR_TEXT = "Expected a function";

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags.
         *    1 - `_.bind`
         *    2 - `_.bindKey`
         *    4 - `_.curry` or `_.curryRight` of a bound function
         *    8 - `_.curry`
         *   16 - `_.curryRight`
         *   32 - `_.partial`
         *   64 - `_.partialRight`
         *  128 - `_.rearg`
         *  256 - `_.ary`
         *  512 - `_.flip`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrap(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          argPos,
          ary,
          arity
        ) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined;
          }
          ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
          arity = arity === undefined ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;

          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
              holdersRight = holders;

            partials = holders = undefined;
          }
          var data = isBindKey ? undefined : getData(func);

          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary,
            arity
          ];

          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] =
            newData[9] === undefined
              ? isBindKey
                ? 0
                : func.length
              : nativeMax(newData[9] - length, 0);

          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result = createBind(func, bitmask, thisArg);
          } else if (
            bitmask == WRAP_CURRY_FLAG ||
            bitmask == WRAP_CURRY_RIGHT_FLAG
          ) {
            result = createCurry(func, bitmask, arity);
          } else if (
            (bitmask == WRAP_PARTIAL_FLAG ||
              bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
            !holders.length
          ) {
            result = createPartial(func, bitmask, thisArg, partials);
          } else {
            result = createHybrid.apply(undefined, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result, newData), func, bitmask);
        }

        module.exports = createWrap;
      },
      {
        "./_baseSetData": "../node_modules/lodash/_baseSetData.js",
        "./_createBind": "../node_modules/lodash/_createBind.js",
        "./_createCurry": "../node_modules/lodash/_createCurry.js",
        "./_createHybrid": "../node_modules/lodash/_createHybrid.js",
        "./_createPartial": "../node_modules/lodash/_createPartial.js",
        "./_getData": "../node_modules/lodash/_getData.js",
        "./_mergeData": "../node_modules/lodash/_mergeData.js",
        "./_setData": "../node_modules/lodash/_setData.js",
        "./_setWrapToString": "../node_modules/lodash/_setWrapToString.js",
        "./toInteger": "../node_modules/lodash/toInteger.js"
      }
    ],
    "../node_modules/lodash/bind.js": [
      function(require, module, exports) {
        var baseRest = require("./_baseRest"),
          createWrap = require("./_createWrap"),
          getHolder = require("./_getHolder"),
          replaceHolders = require("./_replaceHolders");

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_PARTIAL_FLAG = 32;

        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and `partials` prepended to the arguments it receives.
         *
         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for partially applied arguments.
         *
         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
         * property of bound functions.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * function greet(greeting, punctuation) {
         *   return greeting + ' ' + this.user + punctuation;
         * }
         *
         * var object = { 'user': 'fred' };
         *
         * var bound = _.bind(greet, object, 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bind(greet, object, _, '!');
         * bound('hi');
         * // => 'hi fred!'
         */
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });

        // Assign default placeholders.
        bind.placeholder = {};

        module.exports = bind;
      },
      {
        "./_baseRest": "../node_modules/lodash/_baseRest.js",
        "./_createWrap": "../node_modules/lodash/_createWrap.js",
        "./_getHolder": "../node_modules/lodash/_getHolder.js",
        "./_replaceHolders": "../node_modules/lodash/_replaceHolders.js"
      }
    ],
    "../node_modules/lodash/uniqueId.js": [
      function(require, module, exports) {
        var toString = require("./toString");

        /** Used to generate unique IDs. */
        var idCounter = 0;

        /**
         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {string} [prefix=''] The value to prefix the ID with.
         * @returns {string} Returns the unique ID.
         * @example
         *
         * _.uniqueId('contact_');
         * // => 'contact_104'
         *
         * _.uniqueId();
         * // => '105'
         */
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }

        module.exports = uniqueId;
      },
      { "./toString": "../node_modules/lodash/toString.js" }
    ],
    "../node_modules/lodash/isString.js": [
      function(require, module, exports) {
        var baseGetTag = require("./_baseGetTag"),
          isArray = require("./isArray"),
          isObjectLike = require("./isObjectLike");

        /** `Object#toString` result references. */
        var stringTag = "[object String]";

        /**
         * Checks if `value` is classified as a `String` primitive or object.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
         * @example
         *
         * _.isString('abc');
         * // => true
         *
         * _.isString(1);
         * // => false
         */
        function isString(value) {
          return (
            typeof value == "string" ||
            (!isArray(value) &&
              isObjectLike(value) &&
              baseGetTag(value) == stringTag)
          );
        }

        module.exports = isString;
      },
      {
        "./_baseGetTag": "../node_modules/lodash/_baseGetTag.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./isObjectLike": "../node_modules/lodash/isObjectLike.js"
      }
    ],
    "../node_modules/lodash/_baseValues.js": [
      function(require, module, exports) {
        var arrayMap = require("./_arrayMap");

        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }

        module.exports = baseValues;
      },
      { "./_arrayMap": "../node_modules/lodash/_arrayMap.js" }
    ],
    "../node_modules/lodash/values.js": [
      function(require, module, exports) {
        var baseValues = require("./_baseValues"),
          keys = require("./keys");

        /**
         * Creates an array of the own enumerable string keyed property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }

        module.exports = values;
      },
      {
        "./_baseValues": "../node_modules/lodash/_baseValues.js",
        "./keys": "../node_modules/lodash/keys.js"
      }
    ],
    "../node_modules/lodash/includes.js": [
      function(require, module, exports) {
        var baseIndexOf = require("./_baseIndexOf"),
          isArrayLike = require("./isArrayLike"),
          isString = require("./isString"),
          toInteger = require("./toInteger"),
          values = require("./values");

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeMax = Math.max;

        /**
         * Checks if `value` is in `collection`. If `collection` is a string, it's
         * checked for a substring of `value`, otherwise
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * is used for equality comparisons. If `fromIndex` is negative, it's used as
         * the offset from the end of `collection`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {boolean} Returns `true` if `value` is found, else `false`.
         * @example
         *
         * _.includes([1, 2, 3], 1);
         * // => true
         *
         * _.includes([1, 2, 3], 1, 2);
         * // => false
         *
         * _.includes({ 'a': 1, 'b': 2 }, 1);
         * // => true
         *
         * _.includes('abcd', 'bc');
         * // => true
         */
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection)
            ? collection
            : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
            : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }

        module.exports = includes;
      },
      {
        "./_baseIndexOf": "../node_modules/lodash/_baseIndexOf.js",
        "./isArrayLike": "../node_modules/lodash/isArrayLike.js",
        "./isString": "../node_modules/lodash/isString.js",
        "./toInteger": "../node_modules/lodash/toInteger.js",
        "./values": "../node_modules/lodash/values.js"
      }
    ],
    "../node_modules/lodash/_castFunction.js": [
      function(require, module, exports) {
        var identity = require("./identity");

        /**
         * Casts `value` to `identity` if it's not a function.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Function} Returns cast function.
         */
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }

        module.exports = castFunction;
      },
      { "./identity": "../node_modules/lodash/identity.js" }
    ],
    "../node_modules/lodash/forEach.js": [
      function(require, module, exports) {
        var arrayEach = require("./_arrayEach"),
          baseEach = require("./_baseEach"),
          castFunction = require("./_castFunction"),
          isArray = require("./isArray");

        /**
         * Iterates over elements of `collection` and invokes `iteratee` for each element.
         * The iteratee is invoked with three arguments: (value, index|key, collection).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * **Note:** As with other "Collections" methods, objects with a "length"
         * property are iterated like arrays. To avoid this behavior use `_.forIn`
         * or `_.forOwn` for object iteration.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias each
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEachRight
         * @example
         *
         * _.forEach([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `1` then `2`.
         *
         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forEach(collection, iteratee) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, castFunction(iteratee));
        }

        module.exports = forEach;
      },
      {
        "./_arrayEach": "../node_modules/lodash/_arrayEach.js",
        "./_baseEach": "../node_modules/lodash/_baseEach.js",
        "./_castFunction": "../node_modules/lodash/_castFunction.js",
        "./isArray": "../node_modules/lodash/isArray.js"
      }
    ],
    "../node_modules/lodash/isNil.js": [
      function(require, module, exports) {
        /**
         * Checks if `value` is `null` or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
         * @example
         *
         * _.isNil(null);
         * // => true
         *
         * _.isNil(void 0);
         * // => true
         *
         * _.isNil(NaN);
         * // => false
         */
        function isNil(value) {
          return value == null;
        }

        module.exports = isNil;
      },
      {}
    ],
    "../node_modules/lodash/_createFlow.js": [
      function(require, module, exports) {
        var LodashWrapper = require("./_LodashWrapper"),
          flatRest = require("./_flatRest"),
          getData = require("./_getData"),
          getFuncName = require("./_getFuncName"),
          isArray = require("./isArray"),
          isLaziable = require("./_isLaziable");

        /** Error message constants. */
        var FUNC_ERROR_TEXT = "Expected a function";

        /** Used to compose bitmasks for function metadata. */
        var WRAP_CURRY_FLAG = 8,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256;

        /**
         * Creates a `_.flow` or `_.flowRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new flow function.
         */
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];

              var funcName = getFuncName(func),
                data = funcName == "wrapper" ? getData(func) : undefined;

              if (
                data &&
                isLaziable(data[0]) &&
                data[1] ==
                  (WRAP_ARY_FLAG |
                    WRAP_CURRY_FLAG |
                    WRAP_PARTIAL_FLAG |
                    WRAP_REARG_FLAG) &&
                !data[4].length &&
                data[9] == 1
              ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper =
                  func.length == 1 && isLaziable(func)
                    ? wrapper[funcName]()
                    : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments,
                value = args[0];

              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

              while (++index < length) {
                result = funcs[index].call(this, result);
              }
              return result;
            };
          });
        }

        module.exports = createFlow;
      },
      {
        "./_LodashWrapper": "../node_modules/lodash/_LodashWrapper.js",
        "./_flatRest": "../node_modules/lodash/_flatRest.js",
        "./_getData": "../node_modules/lodash/_getData.js",
        "./_getFuncName": "../node_modules/lodash/_getFuncName.js",
        "./isArray": "../node_modules/lodash/isArray.js",
        "./_isLaziable": "../node_modules/lodash/_isLaziable.js"
      }
    ],
    "../node_modules/lodash/flowRight.js": [
      function(require, module, exports) {
        var createFlow = require("./_createFlow");

        /**
         * This method is like `_.flow` except that it creates a function that
         * invokes the given functions from right to left.
         *
         * @static
         * @since 3.0.0
         * @memberOf _
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flow
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flowRight([square, _.add]);
         * addSquare(1, 2);
         * // => 9
         */
        var flowRight = createFlow(true);

        module.exports = flowRight;
      },
      { "./_createFlow": "../node_modules/lodash/_createFlow.js" }
    ],
    "../node_modules/lodash/isUndefined.js": [
      function(require, module, exports) {
        /**
         * Checks if `value` is `undefined`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
         * @example
         *
         * _.isUndefined(void 0);
         * // => true
         *
         * _.isUndefined(null);
         * // => false
         */
        function isUndefined(value) {
          return value === undefined;
        }

        module.exports = isUndefined;
      },
      {}
    ],
    "../node_modules/classnames/index.js": [
      function(require, module, exports) {
        var define;
        /*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
        /* global define */

        (function() {
          "use strict";

          var hasOwn = {}.hasOwnProperty;

          function classNames() {
            var classes = [];

            for (var i = 0; i < arguments.length; i++) {
              var arg = arguments[i];
              if (!arg) continue;

              var argType = typeof arg;

              if (argType === "string" || argType === "number") {
                classes.push(arg);
              } else if (Array.isArray(arg) && arg.length) {
                var inner = classNames.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              } else if (argType === "object") {
                for (var key in arg) {
                  if (hasOwn.call(arg, key) && arg[key]) {
                    classes.push(key);
                  }
                }
              }
            }

            return classes.join(" ");
          }

          if (typeof module !== "undefined" && module.exports) {
            classNames.default = classNames;
            module.exports = classNames;
          } else if (
            typeof define === "function" &&
            typeof define.amd === "object" &&
            define.amd
          ) {
            // register as 'classnames', consistent with npm package name
            define("classnames", [], function() {
              return classNames;
            });
          } else {
            window.classNames = classNames;
          }
        })();
      },
      {}
    ],
    "../node_modules/@babel/runtime/helpers/interopRequireDefault.js": [
      function(require, module, exports) {
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        module.exports = _interopRequireDefault;
      },
      {}
    ],
    "../node_modules/dom-helpers/util/inDOM.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;
        exports.default = void 0;

        var _default = !!(
          typeof window !== "undefined" &&
          window.document &&
          window.document.createElement
        );

        exports.default = _default;
        module.exports = exports["default"];
      },
      {}
    ],
    "../node_modules/dom-helpers/events/on.js": [
      function(require, module, exports) {
        "use strict";

        var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

        exports.__esModule = true;
        exports.default = void 0;

        var _inDOM = _interopRequireDefault(require("../util/inDOM"));

        var on = function on() {};

        if (_inDOM.default) {
          on = (function() {
            if (document.addEventListener)
              return function(node, eventName, handler, capture) {
                return node.addEventListener(
                  eventName,
                  handler,
                  capture || false
                );
              };
            else if (document.attachEvent)
              return function(node, eventName, handler) {
                return node.attachEvent("on" + eventName, function(e) {
                  e = e || window.event;
                  e.target = e.target || e.srcElement;
                  e.currentTarget = node;
                  handler.call(node, e);
                });
              };
          })();
        }

        var _default = on;
        exports.default = _default;
        module.exports = exports["default"];
      },
      {
        "@babel/runtime/helpers/interopRequireDefault":
          "../node_modules/@babel/runtime/helpers/interopRequireDefault.js",
        "../util/inDOM": "../node_modules/dom-helpers/util/inDOM.js"
      }
    ],
    "../node_modules/dom-helpers/transition/properties.js": [
      function(require, module, exports) {
        "use strict";

        var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

        exports.__esModule = true;
        exports.default = exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = void 0;

        var _inDOM = _interopRequireDefault(require("../util/inDOM"));

        var transform = "transform";
        exports.transform = transform;
        var prefix, transitionEnd, animationEnd;
        exports.animationEnd = animationEnd;
        exports.transitionEnd = transitionEnd;
        var transitionProperty,
          transitionDuration,
          transitionTiming,
          transitionDelay;
        exports.transitionDelay = transitionDelay;
        exports.transitionTiming = transitionTiming;
        exports.transitionDuration = transitionDuration;
        exports.transitionProperty = transitionProperty;
        var animationName, animationDuration, animationTiming, animationDelay;
        exports.animationDelay = animationDelay;
        exports.animationTiming = animationTiming;
        exports.animationDuration = animationDuration;
        exports.animationName = animationName;

        if (_inDOM.default) {
          var _getTransitionPropert = getTransitionProperties();

          prefix = _getTransitionPropert.prefix;
          exports.transitionEnd = transitionEnd =
            _getTransitionPropert.transitionEnd;
          exports.animationEnd = animationEnd =
            _getTransitionPropert.animationEnd;
          exports.transform = transform = prefix + "-" + transform;
          exports.transitionProperty = transitionProperty =
            prefix + "-transition-property";
          exports.transitionDuration = transitionDuration =
            prefix + "-transition-duration";
          exports.transitionDelay = transitionDelay =
            prefix + "-transition-delay";
          exports.transitionTiming = transitionTiming =
            prefix + "-transition-timing-function";
          exports.animationName = animationName = prefix + "-animation-name";
          exports.animationDuration = animationDuration =
            prefix + "-animation-duration";
          exports.animationTiming = animationTiming =
            prefix + "-animation-delay";
          exports.animationDelay = animationDelay =
            prefix + "-animation-timing-function";
        }

        var _default = {
          transform: transform,
          end: transitionEnd,
          property: transitionProperty,
          timing: transitionTiming,
          delay: transitionDelay,
          duration: transitionDuration
        };
        exports.default = _default;

        function getTransitionProperties() {
          var style = document.createElement("div").style;
          var vendorMap = {
            O: function O(e) {
              return "o" + e.toLowerCase();
            },
            Moz: function Moz(e) {
              return e.toLowerCase();
            },
            Webkit: function Webkit(e) {
              return "webkit" + e;
            },
            ms: function ms(e) {
              return "MS" + e;
            }
          };
          var vendors = Object.keys(vendorMap);
          var transitionEnd, animationEnd;
          var prefix = "";

          for (var i = 0; i < vendors.length; i++) {
            var vendor = vendors[i];

            if (vendor + "TransitionProperty" in style) {
              prefix = "-" + vendor.toLowerCase();
              transitionEnd = vendorMap[vendor]("TransitionEnd");
              animationEnd = vendorMap[vendor]("AnimationEnd");
              break;
            }
          }

          if (!transitionEnd && "transitionProperty" in style)
            transitionEnd = "transitionend";
          if (!animationEnd && "animationName" in style)
            animationEnd = "animationend";
          style = null;
          return {
            animationEnd: animationEnd,
            transitionEnd: transitionEnd,
            prefix: prefix
          };
        }
      },
      {
        "@babel/runtime/helpers/interopRequireDefault":
          "../node_modules/@babel/runtime/helpers/interopRequireDefault.js",
        "../util/inDOM": "../node_modules/dom-helpers/util/inDOM.js"
      }
    ],
    "../node_modules/babel-runtime/helpers/objectWithoutProperties.js": [
      function(require, module, exports) {
        "use strict";

        exports.__esModule = true;

        exports.default = function(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        };
      },
      {}
    ],
    "../node_modules/react-toastr/lib/components/ToastMessage/ToastMessage.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToastMessage = undefined;

        var _extends2 = require("babel-runtime/helpers/extends");

        var _extends3 = _interopRequireDefault(_extends2);

        var _objectWithoutProperties2 = require("babel-runtime/helpers/objectWithoutProperties");

        var _objectWithoutProperties3 = _interopRequireDefault(
          _objectWithoutProperties2
        );

        var _noop2 = require("lodash/noop");

        var _noop3 = _interopRequireDefault(_noop2);

        var _classnames = require("classnames");

        var _classnames2 = _interopRequireDefault(_classnames);

        var _react = require("react");

        var _react2 = _interopRequireDefault(_react);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var defaultIconClassNames = {
          error: "toast-error",
          info: "toast-info",
          success: "toast-success",
          warning: "toast-warning"
        };

        /**
         * Base component for displaying a toast message.
         */
        var ToastMessage = function ToastMessage(_ref) {
          var _ref$className = _ref.className,
            className = _ref$className === undefined ? "toast" : _ref$className,
            type = _ref.type,
            _ref$iconClassNames = _ref.iconClassNames,
            iconClassNames =
              _ref$iconClassNames === undefined
                ? defaultIconClassNames
                : _ref$iconClassNames,
            _ref$iconClassName = _ref.iconClassName,
            iconClassName =
              _ref$iconClassName === undefined
                ? iconClassNames[type]
                : _ref$iconClassName,
            _ref$closeButton = _ref.closeButton,
            closeButton =
              _ref$closeButton === undefined ? false : _ref$closeButton,
            _ref$onCloseClick = _ref.onCloseClick,
            onCloseClick =
              _ref$onCloseClick === undefined
                ? _noop3.default
                : _ref$onCloseClick,
            _ref$title = _ref.title,
            title = _ref$title === undefined ? false : _ref$title,
            _ref$titleClassName = _ref.titleClassName,
            titleClassName =
              _ref$titleClassName === undefined
                ? "toast-title"
                : _ref$titleClassName,
            _ref$message = _ref.message,
            message = _ref$message === undefined ? false : _ref$message,
            _ref$messageClassName = _ref.messageClassName,
            messageClassName =
              _ref$messageClassName === undefined
                ? "toast-message"
                : _ref$messageClassName,
            restProps = (0, _objectWithoutProperties3.default)(_ref, [
              "className",
              "type",
              "iconClassNames",
              "iconClassName",
              "closeButton",
              "onCloseClick",
              "title",
              "titleClassName",
              "message",
              "messageClassName"
            ]);
          return _react2.default.createElement(
            "div",
            (0, _extends3.default)({}, restProps, {
              className: (0, _classnames2.default)(className, iconClassName)
            }),
            !!closeButton &&
              _react2.default.createElement("button", {
                className: "toast-close-button",
                onClick: onCloseClick,
                dangerouslySetInnerHTML: { __html: "&times;" }
              }),
            !!title &&
              _react2.default.createElement(
                "div",
                { className: titleClassName },
                title
              ),
            !!message &&
              _react2.default.createElement(
                "div",
                { className: messageClassName },
                message
              )
          );
        };

        exports.ToastMessage = ToastMessage;
        exports.default = ToastMessage;
      },
      {
        "babel-runtime/helpers/extends":
          "../node_modules/babel-runtime/helpers/extends.js",
        "babel-runtime/helpers/objectWithoutProperties":
          "../node_modules/babel-runtime/helpers/objectWithoutProperties.js",
        "lodash/noop": "../node_modules/lodash/noop.js",
        classnames: "../node_modules/classnames/index.js",
        react: "../node_modules/react/index.js"
      }
    ],
    "../node_modules/react-toastr/lib/components/ToastMessage/ToastMessageAnimated.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToastMessageAnimated = undefined;

        var _extends2 = require("babel-runtime/helpers/extends");

        var _extends3 = _interopRequireDefault(_extends2);

        var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

        var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

        var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _createClass2 = require("babel-runtime/helpers/createClass");

        var _createClass3 = _interopRequireDefault(_createClass2);

        var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

        var _possibleConstructorReturn3 = _interopRequireDefault(
          _possibleConstructorReturn2
        );

        var _inherits2 = require("babel-runtime/helpers/inherits");

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _keys2 = require("lodash/keys");

        var _keys3 = _interopRequireDefault(_keys2);

        var _omit2 = require("lodash/omit");

        var _omit3 = _interopRequireDefault(_omit2);

        var _isNil2 = require("lodash/isNil");

        var _isNil3 = _interopRequireDefault(_isNil2);

        var _flowRight2 = require("lodash/flowRight");

        var _flowRight3 = _interopRequireDefault(_flowRight2);

        var _isUndefined2 = require("lodash/isUndefined");

        var _isUndefined3 = _interopRequireDefault(_isUndefined2);

        var _noop2 = require("lodash/noop");

        var _noop3 = _interopRequireDefault(_noop2);

        var _classnames = require("classnames");

        var _classnames2 = _interopRequireDefault(_classnames);

        var _react = require("react");

        var _react2 = _interopRequireDefault(_react);

        var _on = require("dom-helpers/events/on");

        var _on2 = _interopRequireDefault(_on);

        var _properties = require("dom-helpers/transition/properties");

        var _ToastMessage = require("./ToastMessage");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        /**
         * A decorated component that leverages animate.css for toast showing/hiding.
         *
         * @see https://daneden.github.io/animate.css/
         */
        var ToastMessageAnimated = (exports.ToastMessageAnimated = (function(
          _React$PureComponent
        ) {
          (0, _inherits3.default)(ToastMessageAnimated, _React$PureComponent);

          function ToastMessageAnimated() {
            var _ref;

            var _temp, _this, _ret;
            (0, _classCallCheck3.default)(this, ToastMessageAnimated);

            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            return (
              (_ret = ((_temp = ((_this = (0,
              _possibleConstructorReturn3.default)(
                this,
                (_ref =
                  ToastMessageAnimated.__proto__ ||
                  (0, _getPrototypeOf2.default)(
                    ToastMessageAnimated
                  )).call.apply(_ref, [this].concat(args))
              )),
              _this)),
              (_this.state = {
                hidingTimoutId: undefined,
                className: undefined
              }),
              (_this.handleMount = function(ref) {
                _this.message = ref;
              }),
              (_this.handleMouseEnter = function() {
                _this.setState(function(state) {
                  if (!(0, _isUndefined3.default)(state.hidingTimoutId)) {
                    clearTimeout(state.hidingTimoutId);
                  }
                  return {
                    hidingTimoutId: undefined,
                    className: undefined
                  };
                });
              }),
              (_this.handleMouseLeave = function() {
                _this.setState(function(state) {
                  var timeOut =
                    _this.props.extendedTimeOut !== 0
                      ? _this.props.extendedTimeOut
                      : _this.props.timeOut;
                  if (
                    (0, _isUndefined3.default)(state.hidingTimoutId) &&
                    timeOut !== 0
                  ) {
                    return {
                      hidingTimoutId: setTimeout(_this.handleHide, timeOut)
                    };
                  }
                  return {};
                });
              }),
              (_this.handleTransitionEnd = function() {
                _this.setState(function() {
                  return {
                    className: undefined
                  };
                });
              }),
              (_this.handleHideHookOnEnd = function() {
                (0, _on2.default)(
                  _this.message,
                  _properties.animationEnd,
                  (0, _flowRight3.default)(
                    _this.handleRemove,
                    _this.handleTransitionEnd
                  )
                );
              }),
              (_this.handleHide = function() {
                var override =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : false;

                _this.setState(function(state) {
                  if (
                    override ||
                    !(0, _isUndefined3.default)(state.hidingTimoutId)
                  ) {
                    if (!(0, _isNil3.default)(_this.props.hideAnimation)) {
                      return {
                        hidingTimoutId: setTimeout(
                          _this.handleHideHookOnEnd,
                          50
                        ),
                        className: _this.props.hideAnimation
                      };
                    } else {
                      _this.handleRemove();
                      return {
                        hidingTimoutId: undefined,
                        className: undefined
                      };
                    }
                  }
                });
              }),
              (_this.handleRemove = function() {
                _this.props.onRemove();
              }),
              (_this.handleOnClick = function(event) {
                _this.props.onClick(event);
                if (_this.props.tapToDismiss) {
                  _this.handleHide(true);
                }
              }),
              (_this.handleOnCloseClick = function(event) {
                event.stopPropagation();
                _this.props.onCloseClick(event);
                _this.handleHide(true);
              }),
              _temp)),
              (0, _possibleConstructorReturn3.default)(_this, _ret)
            );
          }

          (0, _createClass3.default)(ToastMessageAnimated, [
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                var _this2 = this;

                if (!(0, _isUndefined3.default)(this.props.showAnimation)) {
                  this.setState(function() {
                    (0,
                    _on2.default)(_this2.message, _properties.animationEnd, _this2.handleTransitionEnd);
                    return {
                      className: _this2.props.showAnimation
                    };
                  });
                }
                if (this.props.timeOut > 0) {
                  this.setState(function() {
                    return {
                      hidingTimoutId: setTimeout(
                        _this2.handleHide,
                        _this2.props.timeOut
                      )
                    };
                  });
                }
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                if (!(0, _isUndefined3.default)(this.state.hidingTimoutId)) {
                  clearTimeout(this.state.hidingTimoutId);
                }
                this.setState = _noop3.default;
              }
            },
            {
              key: "render",
              value: function render() {
                var restProps = (0, _omit3.default)(
                  this.props,
                  (0, _keys3.default)(ToastMessageAnimated.defaultProps)
                );
                return (0, _ToastMessage.ToastMessage)(
                  (0, _extends3.default)({}, restProps, {
                    ref: this.handleMount,
                    className: (0, _classnames2.default)(
                      this.props.className,
                      this.state.className
                    ),
                    onClick: this.handleOnClick,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave,
                    onCloseClick: this.handleOnCloseClick
                  })
                );
              }
            }
          ]);
          return ToastMessageAnimated;
        })(_react2.default.PureComponent));

        ToastMessageAnimated.defaultProps = {
          className: "toast",
          showAnimation: "animated bounceIn",
          hideAnimation: "animated bounceOut",
          //
          timeOut: 5000,
          extendedTimeOut: 1000,
          //
          tapToDismiss: true,
          //
          onRemove: undefined,
          onClick: _noop3.default,
          onCloseClick: _noop3.default
        };
        exports.default = ToastMessageAnimated;
      },
      {
        "babel-runtime/helpers/extends":
          "../node_modules/babel-runtime/helpers/extends.js",
        "babel-runtime/core-js/object/get-prototype-of":
          "../node_modules/babel-runtime/core-js/object/get-prototype-of.js",
        "babel-runtime/helpers/classCallCheck":
          "../node_modules/babel-runtime/helpers/classCallCheck.js",
        "babel-runtime/helpers/createClass":
          "../node_modules/babel-runtime/helpers/createClass.js",
        "babel-runtime/helpers/possibleConstructorReturn":
          "../node_modules/babel-runtime/helpers/possibleConstructorReturn.js",
        "babel-runtime/helpers/inherits":
          "../node_modules/babel-runtime/helpers/inherits.js",
        "lodash/keys": "../node_modules/lodash/keys.js",
        "lodash/omit": "../node_modules/lodash/omit.js",
        "lodash/isNil": "../node_modules/lodash/isNil.js",
        "lodash/flowRight": "../node_modules/lodash/flowRight.js",
        "lodash/isUndefined": "../node_modules/lodash/isUndefined.js",
        "lodash/noop": "../node_modules/lodash/noop.js",
        classnames: "../node_modules/classnames/index.js",
        react: "../node_modules/react/index.js",
        "dom-helpers/events/on": "../node_modules/dom-helpers/events/on.js",
        "dom-helpers/transition/properties":
          "../node_modules/dom-helpers/transition/properties.js",
        "./ToastMessage":
          "../node_modules/react-toastr/lib/components/ToastMessage/ToastMessage.js"
      }
    ],
    "../node_modules/react-toastr/lib/components/ToastContainer.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToastContainer = undefined;

        var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

        var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

        var _extends2 = require("babel-runtime/helpers/extends");

        var _extends3 = _interopRequireDefault(_extends2);

        var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

        var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

        var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

        var _createClass2 = require("babel-runtime/helpers/createClass");

        var _createClass3 = _interopRequireDefault(_createClass2);

        var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

        var _possibleConstructorReturn3 = _interopRequireDefault(
          _possibleConstructorReturn2
        );

        var _inherits2 = require("babel-runtime/helpers/inherits");

        var _inherits3 = _interopRequireDefault(_inherits2);

        var _keys2 = require("lodash/keys");

        var _keys3 = _interopRequireDefault(_keys2);

        var _omit2 = require("lodash/omit");

        var _omit3 = _interopRequireDefault(_omit2);

        var _reject2 = require("lodash/reject");

        var _reject3 = _interopRequireDefault(_reject2);

        var _bind2 = require("lodash/bind");

        var _bind3 = _interopRequireDefault(_bind2);

        var _isFunction2 = require("lodash/isFunction");

        var _isFunction3 = _interopRequireDefault(_isFunction2);

        var _uniqueId2 = require("lodash/uniqueId");

        var _uniqueId3 = _interopRequireDefault(_uniqueId2);

        var _includes2 = require("lodash/includes");

        var _includes3 = _interopRequireDefault(_includes2);

        var _isObject2 = require("lodash/isObject");

        var _isObject3 = _interopRequireDefault(_isObject2);

        var _forEach2 = require("lodash/forEach");

        var _forEach3 = _interopRequireDefault(_forEach2);

        var _noop2 = require("lodash/noop");

        var _noop3 = _interopRequireDefault(_noop2);

        var _react = require("react");

        var _react2 = _interopRequireDefault(_react);

        var _ToastMessageAnimated = require("./ToastMessage/ToastMessageAnimated");

        var _ToastMessageAnimated2 = _interopRequireDefault(
          _ToastMessageAnimated
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        /**
         * A React container for displaying a list of toast messages.
         * It mimics the APIs with the vanilla [toastr.js](https://github.com/CodeSeven/toastr)
         * by retaining a [ref][react-ref] to publish a new **toast**.
         *
         * To display HTML, simply pass JSX instead of strings for title and message.
         *
         * ```javascript
         * this.container.success(
         *   <strong>I am a strong title</strong>,
         *   <em>I am an emphasized message</em>
         * });
         * ```
         *
         * If you're using Redux for managing states, you might consider using the
         * underlying component directly. See [ToastMessageAnimated](#toastmessage) below
         */
        var ToastContainer = (exports.ToastContainer = (function(
          _React$PureComponent
        ) {
          (0, _inherits3.default)(ToastContainer, _React$PureComponent);

          function ToastContainer() {
            var _ref;

            var _temp, _this, _ret;
            (0, _classCallCheck3.default)(this, ToastContainer);

            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            return (
              (_ret = ((_temp = ((_this = (0,
              _possibleConstructorReturn3.default)(
                this,
                (_ref =
                  ToastContainer.__proto__ ||
                  (0, _getPrototypeOf2.default)(ToastContainer)).call.apply(
                  _ref,
                  [this].concat(args)
                )
              )),
              _this)),
              (_this.state = {
                toastList: []
              }),
              (_this.toastMessageRefs = {}),
              (_this.handleOnToastClick = function(event) {
                _this.props.onClick(event);
                if (event.defaultPrevented) {
                  return;
                }
                event.preventDefault();
                event.stopPropagation();
              }),
              (_this.handleOnToastRemove = function(key) {
                _this.setState(function(state) {
                  return {
                    toastList: (0, _reject3.default)(state.toastList, {
                      key: key
                    })
                  };
                });
              }),
              _temp)),
              (0, _possibleConstructorReturn3.default)(_this, _ret)
            );
          }

          (0, _createClass3.default)(ToastContainer, [
            {
              key: "error",

              /**
               *
               * @param {any} message
               * @param {any} title
               * @param {any} optionsOverride
               * @public
               */
              value: function error(message, title, optionsOverride) {
                this.handleNotify(
                  this.props.toastType.error,
                  message,
                  title,
                  optionsOverride
                );
              }

              /**
               *
               * @param {any} message
               * @param {any} title
               * @param {any} optionsOverride
               * @public
               */
            },
            {
              key: "info",
              value: function info(message, title, optionsOverride) {
                this.handleNotify(
                  this.props.toastType.info,
                  message,
                  title,
                  optionsOverride
                );
              }

              /**
               *
               * @param {any} message
               * @param {any} title
               * @param {any} optionsOverride
               * @public
               */
            },
            {
              key: "success",
              value: function success(message, title, optionsOverride) {
                this.handleNotify(
                  this.props.toastType.success,
                  message,
                  title,
                  optionsOverride
                );
              }

              /**
               *
               * @param {any} message
               * @param {any} title
               * @param {any} optionsOverride
               * @public
               */
            },
            {
              key: "warning",
              value: function warning(message, title, optionsOverride) {
                this.handleNotify(
                  this.props.toastType.warning,
                  message,
                  title,
                  optionsOverride
                );
              }

              /**
               *
               * @public
               */
            },
            {
              key: "clear",
              value: function clear() {
                (0, _forEach3.default)(this.toastMessageRefs, function(ref) {
                  if ((0, _isObject3.default)(ref)) {
                    ref.handleHide();
                  }
                });
              }
            },
            {
              key: "handleNotify",
              value: function handleNotify(type, message, title) {
                var _this2 = this;

                var optionsOverride =
                  arguments.length > 3 && arguments[3] !== undefined
                    ? arguments[3]
                    : {};

                if (
                  this.props.preventDuplicates &&
                  (0, _includes3.default)(this.state.toastList, {
                    message: message
                  })
                ) {
                  return;
                }
                var key = (0, _uniqueId3.default)("toast_");
                var nextToast = (0, _extends3.default)({}, optionsOverride, {
                  key: key,
                  type: type,
                  title: title,
                  message: message,
                  ref: function ref(_ref2) {
                    _this2.toastMessageRefs[key] = _ref2;
                  },
                  onClick: function onClick(event) {
                    if (
                      (0, _isFunction3.default)(optionsOverride.handleOnClick)
                    ) {
                      optionsOverride.handleOnClick();
                    }
                    _this2.handleOnToastClick(event);
                  },
                  onRemove: (0, _bind3.default)(
                    this.handleOnToastRemove,
                    this,
                    key
                  )
                });
                this.setState(function(state) {
                  return {
                    toastList: _this2.props.newestOnTop
                      ? [nextToast].concat(
                          (0, _toConsumableArray3.default)(state.toastList)
                        )
                      : [].concat(
                          (0, _toConsumableArray3.default)(state.toastList),
                          [nextToast]
                        )
                  };
                });
              }
            },
            {
              key: "render",
              value: function render() {
                var _this3 = this;

                var restProps = (0, _omit3.default)(
                  this.props,
                  (0, _keys3.default)(ToastContainer.defaultProps)
                );
                return _react2.default.createElement(
                  "div",
                  (0, _extends3.default)({}, restProps, {
                    id: this.props.id,
                    "aria-live": "polite",
                    role: "alert"
                  }),
                  this.state.toastList.map(function(it) {
                    return _this3.props.toastMessageFactory(it);
                  })
                );
              }
            }
          ]);
          return ToastContainer;
        })(_react2.default.PureComponent));

        ToastContainer.defaultProps = {
          toastType: {
            error: "error",
            info: "info",
            success: "success",
            warning: "warning"
          },
          id: "toast-container",
          toastMessageFactory: _react2.default.createFactory(
            _ToastMessageAnimated2.default
          ),
          preventDuplicates: true,
          newestOnTop: true,
          onClick: _noop3.default
        };
        exports.default = ToastContainer;
      },
      {
        "babel-runtime/helpers/toConsumableArray":
          "../node_modules/babel-runtime/helpers/toConsumableArray.js",
        "babel-runtime/helpers/extends":
          "../node_modules/babel-runtime/helpers/extends.js",
        "babel-runtime/core-js/object/get-prototype-of":
          "../node_modules/babel-runtime/core-js/object/get-prototype-of.js",
        "babel-runtime/helpers/classCallCheck":
          "../node_modules/babel-runtime/helpers/classCallCheck.js",
        "babel-runtime/helpers/createClass":
          "../node_modules/babel-runtime/helpers/createClass.js",
        "babel-runtime/helpers/possibleConstructorReturn":
          "../node_modules/babel-runtime/helpers/possibleConstructorReturn.js",
        "babel-runtime/helpers/inherits":
          "../node_modules/babel-runtime/helpers/inherits.js",
        "lodash/keys": "../node_modules/lodash/keys.js",
        "lodash/omit": "../node_modules/lodash/omit.js",
        "lodash/reject": "../node_modules/lodash/reject.js",
        "lodash/bind": "../node_modules/lodash/bind.js",
        "lodash/isFunction": "../node_modules/lodash/isFunction.js",
        "lodash/uniqueId": "../node_modules/lodash/uniqueId.js",
        "lodash/includes": "../node_modules/lodash/includes.js",
        "lodash/isObject": "../node_modules/lodash/isObject.js",
        "lodash/forEach": "../node_modules/lodash/forEach.js",
        "lodash/noop": "../node_modules/lodash/noop.js",
        react: "../node_modules/react/index.js",
        "./ToastMessage/ToastMessageAnimated":
          "../node_modules/react-toastr/lib/components/ToastMessage/ToastMessageAnimated.js"
      }
    ],
    "../node_modules/react-toastr/lib/index.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _ToastContainer = require("./components/ToastContainer");

        Object.defineProperty(exports, "ToastContainer", {
          enumerable: true,
          get: function get() {
            return _ToastContainer.ToastContainer;
          }
        });

        var _ToastMessage = require("./components/ToastMessage/ToastMessage");

        Object.defineProperty(exports, "ToastMessage", {
          enumerable: true,
          get: function get() {
            return _ToastMessage.ToastMessage;
          }
        });

        var _ToastMessageAnimated = require("./components/ToastMessage/ToastMessageAnimated");

        Object.defineProperty(exports, "ToastMessageAnimated", {
          enumerable: true,
          get: function get() {
            return _ToastMessageAnimated.ToastMessageAnimated;
          }
        });
      },
      {
        "./components/ToastContainer":
          "../node_modules/react-toastr/lib/components/ToastContainer.js",
        "./components/ToastMessage/ToastMessage":
          "../node_modules/react-toastr/lib/components/ToastMessage/ToastMessage.js",
        "./components/ToastMessage/ToastMessageAnimated":
          "../node_modules/react-toastr/lib/components/ToastMessage/ToastMessageAnimated.js"
      }
    ],
    "../node_modules/axios/lib/helpers/bind.js": [
      function(require, module, exports) {
        "use strict";

        module.exports = function bind(fn, thisArg) {
          return function wrap() {
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i];
            }
            return fn.apply(thisArg, args);
          };
        };
      },
      {}
    ],
    "../node_modules/is-buffer/index.js": [
      function(require, module, exports) {
        /*!
         * Determine if an object is a Buffer
         *
         * @author   Feross Aboukhadijeh <https://feross.org>
         * @license  MIT
         */

        // The _isBuffer check is for Safari 5-7 support, because it's missing
        // Object.prototype.constructor. Remove this eventually
        module.exports = function(obj) {
          return (
            obj != null &&
            (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
          );
        };

        function isBuffer(obj) {
          return (
            !!obj.constructor &&
            typeof obj.constructor.isBuffer === "function" &&
            obj.constructor.isBuffer(obj)
          );
        }

        // For Node v0.10 support. Remove this eventually.
        function isSlowBuffer(obj) {
          return (
            typeof obj.readFloatLE === "function" &&
            typeof obj.slice === "function" &&
            isBuffer(obj.slice(0, 0))
          );
        }
      },
      {}
    ],
    "../node_modules/axios/lib/utils.js": [
      function(require, module, exports) {
        "use strict";

        var bind = require("./helpers/bind");
        var isBuffer = require("is-buffer");

        /*global toString:true*/

        // utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
          return toString.call(val) === "[object Array]";
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
          return toString.call(val) === "[object ArrayBuffer]";
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
          return typeof FormData !== "undefined" && val instanceof FormData;
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
          var result;
          if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
            result = ArrayBuffer.isView(val);
          } else {
            result = val && val.buffer && val.buffer instanceof ArrayBuffer;
          }
          return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
          return typeof val === "string";
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
          return typeof val === "number";
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
          return typeof val === "undefined";
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
          return val !== null && typeof val === "object";
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
          return toString.call(val) === "[object Date]";
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
          return toString.call(val) === "[object File]";
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
          return toString.call(val) === "[object Blob]";
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
          return toString.call(val) === "[object Function]";
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
          return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
          return (
            typeof URLSearchParams !== "undefined" &&
            val instanceof URLSearchParams
          );
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
          return str.replace(/^\s*/, "").replace(/\s*$/, "");
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         */
        function isStandardBrowserEnv() {
          if (
            typeof navigator !== "undefined" &&
            navigator.product === "ReactNative"
          ) {
            return false;
          }
          return (
            typeof window !== "undefined" && typeof document !== "undefined"
          );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
          // Don't bother if no value provided
          if (obj === null || typeof obj === "undefined") {
            return;
          }

          // Force an array if not already something iterable
          if (typeof obj !== "object") {
            /*eslint no-param-reassign:0*/
            obj = [obj];
          }

          if (isArray(obj)) {
            // Iterate over array values
            for (var i = 0, l = obj.length; i < l; i++) {
              fn.call(null, obj[i], i, obj);
            }
          } else {
            // Iterate over object keys
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                fn.call(null, obj[key], key, obj);
              }
            }
          }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
          var result = {};
          function assignValue(val, key) {
            if (typeof result[key] === "object" && typeof val === "object") {
              result[key] = merge(result[key], val);
            } else {
              result[key] = val;
            }
          }

          for (var i = 0, l = arguments.length; i < l; i++) {
            forEach(arguments[i], assignValue);
          }
          return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
          forEach(b, function assignValue(val, key) {
            if (thisArg && typeof val === "function") {
              a[key] = bind(val, thisArg);
            } else {
              a[key] = val;
            }
          });
          return a;
        }

        module.exports = {
          isArray: isArray,
          isArrayBuffer: isArrayBuffer,
          isBuffer: isBuffer,
          isFormData: isFormData,
          isArrayBufferView: isArrayBufferView,
          isString: isString,
          isNumber: isNumber,
          isObject: isObject,
          isUndefined: isUndefined,
          isDate: isDate,
          isFile: isFile,
          isBlob: isBlob,
          isFunction: isFunction,
          isStream: isStream,
          isURLSearchParams: isURLSearchParams,
          isStandardBrowserEnv: isStandardBrowserEnv,
          forEach: forEach,
          merge: merge,
          extend: extend,
          trim: trim
        };
      },
      {
        "./helpers/bind": "../node_modules/axios/lib/helpers/bind.js",
        "is-buffer": "../node_modules/is-buffer/index.js"
      }
    ],
    "../node_modules/axios/lib/helpers/normalizeHeaderName.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("../utils");

        module.exports = function normalizeHeaderName(headers, normalizedName) {
          utils.forEach(headers, function processHeader(value, name) {
            if (
              name !== normalizedName &&
              name.toUpperCase() === normalizedName.toUpperCase()
            ) {
              headers[normalizedName] = value;
              delete headers[name];
            }
          });
        };
      },
      { "../utils": "../node_modules/axios/lib/utils.js" }
    ],
    "../node_modules/axios/lib/core/enhanceError.js": [
      function(require, module, exports) {
        "use strict";

        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(
          error,
          config,
          code,
          request,
          response
        ) {
          error.config = config;
          if (code) {
            error.code = code;
          }
          error.request = request;
          error.response = response;
          return error;
        };
      },
      {}
    ],
    "../node_modules/axios/lib/core/createError.js": [
      function(require, module, exports) {
        "use strict";

        var enhanceError = require("./enhanceError");

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(
          message,
          config,
          code,
          request,
          response
        ) {
          var error = new Error(message);
          return enhanceError(error, config, code, request, response);
        };
      },
      { "./enhanceError": "../node_modules/axios/lib/core/enhanceError.js" }
    ],
    "../node_modules/axios/lib/core/settle.js": [
      function(require, module, exports) {
        "use strict";

        var createError = require("./createError");

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
          var validateStatus = response.config.validateStatus;
          // Note: status is not exposed by XDomainRequest
          if (
            !response.status ||
            !validateStatus ||
            validateStatus(response.status)
          ) {
            resolve(response);
          } else {
            reject(
              createError(
                "Request failed with status code " + response.status,
                response.config,
                null,
                response.request,
                response
              )
            );
          }
        };
      },
      { "./createError": "../node_modules/axios/lib/core/createError.js" }
    ],
    "../node_modules/axios/lib/helpers/buildURL.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        function encode(val) {
          return encodeURIComponent(val)
            .replace(/%40/gi, "@")
            .replace(/%3A/gi, ":")
            .replace(/%24/g, "$")
            .replace(/%2C/gi, ",")
            .replace(/%20/g, "+")
            .replace(/%5B/gi, "[")
            .replace(/%5D/gi, "]");
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
          /*eslint no-param-reassign:0*/
          if (!params) {
            return url;
          }

          var serializedParams;
          if (paramsSerializer) {
            serializedParams = paramsSerializer(params);
          } else if (utils.isURLSearchParams(params)) {
            serializedParams = params.toString();
          } else {
            var parts = [];

            utils.forEach(params, function serialize(val, key) {
              if (val === null || typeof val === "undefined") {
                return;
              }

              if (utils.isArray(val)) {
                key = key + "[]";
              } else {
                val = [val];
              }

              utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) {
                  v = v.toISOString();
                } else if (utils.isObject(v)) {
                  v = JSON.stringify(v);
                }
                parts.push(encode(key) + "=" + encode(v));
              });
            });

            serializedParams = parts.join("&");
          }

          if (serializedParams) {
            url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
          }

          return url;
        };
      },
      { "./../utils": "../node_modules/axios/lib/utils.js" }
    ],
    "../node_modules/axios/lib/helpers/parseHeaders.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        // Headers whose duplicates are ignored by node
        // c.f. https://nodejs.org/api/http.html#http_message_headers
        var ignoreDuplicateOf = [
          "age",
          "authorization",
          "content-length",
          "content-type",
          "etag",
          "expires",
          "from",
          "host",
          "if-modified-since",
          "if-unmodified-since",
          "last-modified",
          "location",
          "max-forwards",
          "proxy-authorization",
          "referer",
          "retry-after",
          "user-agent"
        ];

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
          var parsed = {};
          var key;
          var val;
          var i;

          if (!headers) {
            return parsed;
          }

          utils.forEach(headers.split("\n"), function parser(line) {
            i = line.indexOf(":");
            key = utils.trim(line.substr(0, i)).toLowerCase();
            val = utils.trim(line.substr(i + 1));

            if (key) {
              if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                return;
              }
              if (key === "set-cookie") {
                parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
              } else {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
              }
            }
          });

          return parsed;
        };
      },
      { "./../utils": "../node_modules/axios/lib/utils.js" }
    ],
    "../node_modules/axios/lib/helpers/isURLSameOrigin.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        module.exports = utils.isStandardBrowserEnv()
          ? // Standard browser envs have full support of the APIs needed to test
            // whether the request URL is of the same origin as current location.
            (function standardBrowserEnv() {
              var msie = /(msie|trident)/i.test(navigator.userAgent);
              var urlParsingNode = document.createElement("a");
              var originURL;

              /**
               * Parse a URL to discover it's components
               *
               * @param {String} url The URL to be parsed
               * @returns {Object}
               */
              function resolveURL(url) {
                var href = url;

                if (msie) {
                  // IE needs attribute set twice to normalize properties
                  urlParsingNode.setAttribute("href", href);
                  href = urlParsingNode.href;
                }

                urlParsingNode.setAttribute("href", href);

                // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                return {
                  href: urlParsingNode.href,
                  protocol: urlParsingNode.protocol
                    ? urlParsingNode.protocol.replace(/:$/, "")
                    : "",
                  host: urlParsingNode.host,
                  search: urlParsingNode.search
                    ? urlParsingNode.search.replace(/^\?/, "")
                    : "",
                  hash: urlParsingNode.hash
                    ? urlParsingNode.hash.replace(/^#/, "")
                    : "",
                  hostname: urlParsingNode.hostname,
                  port: urlParsingNode.port,
                  pathname:
                    urlParsingNode.pathname.charAt(0) === "/"
                      ? urlParsingNode.pathname
                      : "/" + urlParsingNode.pathname
                };
              }

              originURL = resolveURL(window.location.href);

              /**
               * Determine if a URL shares the same origin as the current location
               *
               * @param {String} requestURL The URL to test
               * @returns {boolean} True if URL shares the same origin, otherwise false
               */
              return function isURLSameOrigin(requestURL) {
                var parsed = utils.isString(requestURL)
                  ? resolveURL(requestURL)
                  : requestURL;
                return (
                  parsed.protocol === originURL.protocol &&
                  parsed.host === originURL.host
                );
              };
            })()
          : // Non standard browser envs (web workers, react-native) lack needed support.
            (function nonStandardBrowserEnv() {
              return function isURLSameOrigin() {
                return true;
              };
            })();
      },
      { "./../utils": "../node_modules/axios/lib/utils.js" }
    ],
    "../node_modules/axios/lib/helpers/btoa.js": [
      function(require, module, exports) {
        "use strict";

        // btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

        var chars =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

        function E() {
          this.message = "String contains an invalid character";
        }
        E.prototype = new Error();
        E.prototype.code = 5;
        E.prototype.name = "InvalidCharacterError";

        function btoa(input) {
          var str = String(input);
          var output = "";
          for (
            // initialize result and counter
            var block, charCode, idx = 0, map = chars;
            // if the next str index does not exist:
            //   change the mapping table to "="
            //   check if d has no fractional digits
            str.charAt(idx | 0) || ((map = "="), idx % 1);
            // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
            output += map.charAt(63 & (block >> (8 - (idx % 1) * 8)))
          ) {
            charCode = str.charCodeAt((idx += 3 / 4));
            if (charCode > 0xff) {
              throw new E();
            }
            block = (block << 8) | charCode;
          }
          return output;
        }

        module.exports = btoa;
      },
      {}
    ],
    "../node_modules/axios/lib/helpers/cookies.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        module.exports = utils.isStandardBrowserEnv()
          ? // Standard browser envs support document.cookie
            (function standardBrowserEnv() {
              return {
                write: function write(
                  name,
                  value,
                  expires,
                  path,
                  domain,
                  secure
                ) {
                  var cookie = [];
                  cookie.push(name + "=" + encodeURIComponent(value));

                  if (utils.isNumber(expires)) {
                    cookie.push("expires=" + new Date(expires).toGMTString());
                  }

                  if (utils.isString(path)) {
                    cookie.push("path=" + path);
                  }

                  if (utils.isString(domain)) {
                    cookie.push("domain=" + domain);
                  }

                  if (secure === true) {
                    cookie.push("secure");
                  }

                  document.cookie = cookie.join("; ");
                },

                read: function read(name) {
                  var match = document.cookie.match(
                    new RegExp("(^|;\\s*)(" + name + ")=([^;]*)")
                  );
                  return match ? decodeURIComponent(match[3]) : null;
                },

                remove: function remove(name) {
                  this.write(name, "", Date.now() - 86400000);
                }
              };
            })()
          : // Non standard browser env (web workers, react-native) lack needed support.
            (function nonStandardBrowserEnv() {
              return {
                write: function write() {},
                read: function read() {
                  return null;
                },
                remove: function remove() {}
              };
            })();
      },
      { "./../utils": "../node_modules/axios/lib/utils.js" }
    ],
    "../node_modules/axios/lib/adapters/xhr.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        var settle = require("./../core/settle");

        var buildURL = require("./../helpers/buildURL");

        var parseHeaders = require("./../helpers/parseHeaders");

        var isURLSameOrigin = require("./../helpers/isURLSameOrigin");

        var createError = require("../core/createError");

        var btoa =
          (typeof window !== "undefined" &&
            window.btoa &&
            window.btoa.bind(window)) ||
          require("./../helpers/btoa");

        module.exports = function xhrAdapter(config) {
          return new Promise(function dispatchXhrRequest(resolve, reject) {
            var requestData = config.data;
            var requestHeaders = config.headers;

            if (utils.isFormData(requestData)) {
              delete requestHeaders["Content-Type"]; // Let the browser set it
            }

            var request = new XMLHttpRequest();
            var loadEvent = "onreadystatechange";
            var xDomain = false; // For IE 8/9 CORS support
            // Only supports POST and GET calls and doesn't returns the response headers.
            // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.

            if (
              "development" !== "test" &&
              typeof window !== "undefined" &&
              window.XDomainRequest &&
              !("withCredentials" in request) &&
              !isURLSameOrigin(config.url)
            ) {
              request = new window.XDomainRequest();
              loadEvent = "onload";
              xDomain = true;

              request.onprogress = function handleProgress() {};

              request.ontimeout = function handleTimeout() {};
            } // HTTP basic authentication

            if (config.auth) {
              var username = config.auth.username || "";
              var password = config.auth.password || "";
              requestHeaders.Authorization =
                "Basic " + btoa(username + ":" + password);
            }

            request.open(
              config.method.toUpperCase(),
              buildURL(config.url, config.params, config.paramsSerializer),
              true
            ); // Set the request timeout in MS

            request.timeout = config.timeout; // Listen for ready state

            request[loadEvent] = function handleLoad() {
              if (!request || (request.readyState !== 4 && !xDomain)) {
                return;
              } // The request errored out and we didn't get a response, this will be
              // handled by onerror instead
              // With one exception: request that using file: protocol, most browsers
              // will return status as 0 even though it's a successful request

              if (
                request.status === 0 &&
                !(
                  request.responseURL &&
                  request.responseURL.indexOf("file:") === 0
                )
              ) {
                return;
              } // Prepare the response

              var responseHeaders =
                "getAllResponseHeaders" in request
                  ? parseHeaders(request.getAllResponseHeaders())
                  : null;
              var responseData =
                !config.responseType || config.responseType === "text"
                  ? request.responseText
                  : request.response;
              var response = {
                data: responseData,
                // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
                status: request.status === 1223 ? 204 : request.status,
                statusText:
                  request.status === 1223 ? "No Content" : request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
              };
              settle(resolve, reject, response); // Clean up request

              request = null;
            }; // Handle low level network errors

            request.onerror = function handleError() {
              // Real errors are hidden from us by the browser
              // onerror should only fire if it's a network error
              reject(createError("Network Error", config, null, request)); // Clean up request

              request = null;
            }; // Handle timeout

            request.ontimeout = function handleTimeout() {
              reject(
                createError(
                  "timeout of " + config.timeout + "ms exceeded",
                  config,
                  "ECONNABORTED",
                  request
                )
              ); // Clean up request

              request = null;
            }; // Add xsrf header
            // This is only done if running in a standard browser environment.
            // Specifically not if we're in a web worker, or react-native.

            if (utils.isStandardBrowserEnv()) {
              var cookies = require("./../helpers/cookies"); // Add xsrf header

              var xsrfValue =
                (config.withCredentials || isURLSameOrigin(config.url)) &&
                config.xsrfCookieName
                  ? cookies.read(config.xsrfCookieName)
                  : undefined;

              if (xsrfValue) {
                requestHeaders[config.xsrfHeaderName] = xsrfValue;
              }
            } // Add headers to the request

            if ("setRequestHeader" in request) {
              utils.forEach(requestHeaders, function setRequestHeader(
                val,
                key
              ) {
                if (
                  typeof requestData === "undefined" &&
                  key.toLowerCase() === "content-type"
                ) {
                  // Remove Content-Type if data is undefined
                  delete requestHeaders[key];
                } else {
                  // Otherwise add header to the request
                  request.setRequestHeader(key, val);
                }
              });
            } // Add withCredentials to request if needed

            if (config.withCredentials) {
              request.withCredentials = true;
            } // Add responseType to request if needed

            if (config.responseType) {
              try {
                request.responseType = config.responseType;
              } catch (e) {
                // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                if (config.responseType !== "json") {
                  throw e;
                }
              }
            } // Handle progress if needed

            if (typeof config.onDownloadProgress === "function") {
              request.addEventListener("progress", config.onDownloadProgress);
            } // Not all browsers support upload events

            if (
              typeof config.onUploadProgress === "function" &&
              request.upload
            ) {
              request.upload.addEventListener(
                "progress",
                config.onUploadProgress
              );
            }

            if (config.cancelToken) {
              // Handle cancellation
              config.cancelToken.promise.then(function onCanceled(cancel) {
                if (!request) {
                  return;
                }

                request.abort();
                reject(cancel); // Clean up request

                request = null;
              });
            }

            if (requestData === undefined) {
              requestData = null;
            } // Send the request

            request.send(requestData);
          });
        };
      },
      {
        "./../utils": "../node_modules/axios/lib/utils.js",
        "./../core/settle": "../node_modules/axios/lib/core/settle.js",
        "./../helpers/buildURL":
          "../node_modules/axios/lib/helpers/buildURL.js",
        "./../helpers/parseHeaders":
          "../node_modules/axios/lib/helpers/parseHeaders.js",
        "./../helpers/isURLSameOrigin":
          "../node_modules/axios/lib/helpers/isURLSameOrigin.js",
        "../core/createError": "../node_modules/axios/lib/core/createError.js",
        "./../helpers/btoa": "../node_modules/axios/lib/helpers/btoa.js",
        "./../helpers/cookies": "../node_modules/axios/lib/helpers/cookies.js"
      }
    ],
    "../node_modules/process/browser.js": [
      function(require, module, exports) {
        // shim for using process in browser
        var process = (module.exports = {}); // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }

        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }

        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }

          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();

        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          } // if setTimeout wasn't available but was latter defined

          if (
            (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
            setTimeout
          ) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }

          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }

        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          } // if clearTimeout wasn't available but was latter defined

          if (
            (cachedClearTimeout === defaultClearTimeout ||
              !cachedClearTimeout) &&
            clearTimeout
          ) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }

          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }

        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }

          draining = false;

          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }

          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }

          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;

          while (len) {
            currentQueue = queue;
            queue = [];

            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }

            queueIndex = -1;
            len = queue.length;
          }

          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);

          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }

          queue.push(new Item(fun, args));

          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        }; // v8 likes predictible objects

        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }

        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };

        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ""; // empty string to avoid regexp issues

        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function(name) {
          return [];
        };

        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };

        process.cwd = function() {
          return "/";
        };

        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };

        process.umask = function() {
          return 0;
        };
      },
      {}
    ],
    "../node_modules/axios/lib/defaults.js": [
      function(require, module, exports) {
        var process = require("process");
        ("use strict");

        var utils = require("./utils");
        var normalizeHeaderName = require("./helpers/normalizeHeaderName");

        var DEFAULT_CONTENT_TYPE = {
          "Content-Type": "application/x-www-form-urlencoded"
        };

        function setContentTypeIfUnset(headers, value) {
          if (
            !utils.isUndefined(headers) &&
            utils.isUndefined(headers["Content-Type"])
          ) {
            headers["Content-Type"] = value;
          }
        }

        function getDefaultAdapter() {
          var adapter;
          if (typeof XMLHttpRequest !== "undefined") {
            // For browsers use XHR adapter
            adapter = require("./adapters/xhr");
          } else if (typeof process !== "undefined") {
            // For node use HTTP adapter
            adapter = require("./adapters/http");
          }
          return adapter;
        }

        var defaults = {
          adapter: getDefaultAdapter(),

          transformRequest: [
            function transformRequest(data, headers) {
              normalizeHeaderName(headers, "Content-Type");
              if (
                utils.isFormData(data) ||
                utils.isArrayBuffer(data) ||
                utils.isBuffer(data) ||
                utils.isStream(data) ||
                utils.isFile(data) ||
                utils.isBlob(data)
              ) {
                return data;
              }
              if (utils.isArrayBufferView(data)) {
                return data.buffer;
              }
              if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(
                  headers,
                  "application/x-www-form-urlencoded;charset=utf-8"
                );
                return data.toString();
              }
              if (utils.isObject(data)) {
                setContentTypeIfUnset(
                  headers,
                  "application/json;charset=utf-8"
                );
                return JSON.stringify(data);
              }
              return data;
            }
          ],

          transformResponse: [
            function transformResponse(data) {
              /*eslint no-param-reassign:0*/
              if (typeof data === "string") {
                try {
                  data = JSON.parse(data);
                } catch (e) {
                  /* Ignore */
                }
              }
              return data;
            }
          ],

          /**
           * A timeout in milliseconds to abort a request. If set to 0 (default) a
           * timeout is not created.
           */
          timeout: 0,

          xsrfCookieName: "XSRF-TOKEN",
          xsrfHeaderName: "X-XSRF-TOKEN",

          maxContentLength: -1,

          validateStatus: function validateStatus(status) {
            return status >= 200 && status < 300;
          }
        };

        defaults.headers = {
          common: {
            Accept: "application/json, text/plain, */*"
          }
        };

        utils.forEach(["delete", "get", "head"], function forEachMethodNoData(
          method
        ) {
          defaults.headers[method] = {};
        });

        utils.forEach(["post", "put", "patch"], function forEachMethodWithData(
          method
        ) {
          defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
        });

        module.exports = defaults;
      },
      {
        "./utils": "../node_modules/axios/lib/utils.js",
        "./helpers/normalizeHeaderName":
          "../node_modules/axios/lib/helpers/normalizeHeaderName.js",
        "./adapters/xhr": "../node_modules/axios/lib/adapters/xhr.js",
        "./adapters/http": "../node_modules/axios/lib/adapters/xhr.js",
        process: "../node_modules/process/browser.js"
      }
    ],
    "../node_modules/axios/lib/core/InterceptorManager.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        function InterceptorManager() {
          this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
          this.handlers.push({
            fulfilled: fulfilled,
            rejected: rejected
          });
          return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
          if (this.handlers[id]) {
            this.handlers[id] = null;
          }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
          utils.forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) {
              fn(h);
            }
          });
        };

        module.exports = InterceptorManager;
      },
      { "./../utils": "../node_modules/axios/lib/utils.js" }
    ],
    "../node_modules/axios/lib/core/transformData.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
          /*eslint no-param-reassign:0*/
          utils.forEach(fns, function transform(fn) {
            data = fn(data, headers);
          });

          return data;
        };
      },
      { "./../utils": "../node_modules/axios/lib/utils.js" }
    ],
    "../node_modules/axios/lib/cancel/isCancel.js": [
      function(require, module, exports) {
        "use strict";

        module.exports = function isCancel(value) {
          return !!(value && value.__CANCEL__);
        };
      },
      {}
    ],
    "../node_modules/axios/lib/helpers/isAbsoluteURL.js": [
      function(require, module, exports) {
        "use strict";

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
          // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
          // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
          // by any combination of letters, digits, plus, period, or hyphen.
          return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };
      },
      {}
    ],
    "../node_modules/axios/lib/helpers/combineURLs.js": [
      function(require, module, exports) {
        "use strict";

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
          return relativeURL
            ? baseURL.replace(/\/+$/, "") +
                "/" +
                relativeURL.replace(/^\/+/, "")
            : baseURL;
        };
      },
      {}
    ],
    "../node_modules/axios/lib/core/dispatchRequest.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./../utils");
        var transformData = require("./transformData");
        var isCancel = require("../cancel/isCancel");
        var defaults = require("../defaults");
        var isAbsoluteURL = require("./../helpers/isAbsoluteURL");
        var combineURLs = require("./../helpers/combineURLs");

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
          if (config.cancelToken) {
            config.cancelToken.throwIfRequested();
          }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
          throwIfCancellationRequested(config);

          // Support baseURL config
          if (config.baseURL && !isAbsoluteURL(config.url)) {
            config.url = combineURLs(config.baseURL, config.url);
          }

          // Ensure headers exist
          config.headers = config.headers || {};

          // Transform request data
          config.data = transformData(
            config.data,
            config.headers,
            config.transformRequest
          );

          // Flatten headers
          config.headers = utils.merge(
            config.headers.common || {},
            config.headers[config.method] || {},
            config.headers || {}
          );

          utils.forEach(
            ["delete", "get", "head", "post", "put", "patch", "common"],
            function cleanHeaderConfig(method) {
              delete config.headers[method];
            }
          );

          var adapter = config.adapter || defaults.adapter;

          return adapter(config).then(
            function onAdapterResolution(response) {
              throwIfCancellationRequested(config);

              // Transform response data
              response.data = transformData(
                response.data,
                response.headers,
                config.transformResponse
              );

              return response;
            },
            function onAdapterRejection(reason) {
              if (!isCancel(reason)) {
                throwIfCancellationRequested(config);

                // Transform response data
                if (reason && reason.response) {
                  reason.response.data = transformData(
                    reason.response.data,
                    reason.response.headers,
                    config.transformResponse
                  );
                }
              }

              return Promise.reject(reason);
            }
          );
        };
      },
      {
        "./../utils": "../node_modules/axios/lib/utils.js",
        "./transformData": "../node_modules/axios/lib/core/transformData.js",
        "../cancel/isCancel": "../node_modules/axios/lib/cancel/isCancel.js",
        "../defaults": "../node_modules/axios/lib/defaults.js",
        "./../helpers/isAbsoluteURL":
          "../node_modules/axios/lib/helpers/isAbsoluteURL.js",
        "./../helpers/combineURLs":
          "../node_modules/axios/lib/helpers/combineURLs.js"
      }
    ],
    "../node_modules/axios/lib/core/Axios.js": [
      function(require, module, exports) {
        "use strict";

        var defaults = require("./../defaults");
        var utils = require("./../utils");
        var InterceptorManager = require("./InterceptorManager");
        var dispatchRequest = require("./dispatchRequest");

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
          this.defaults = instanceConfig;
          this.interceptors = {
            request: new InterceptorManager(),
            response: new InterceptorManager()
          };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
          /*eslint no-param-reassign:0*/
          // Allow for axios('example/url'[, config]) a la fetch API
          if (typeof config === "string") {
            config = utils.merge(
              {
                url: arguments[0]
              },
              arguments[1]
            );
          }

          config = utils.merge(
            defaults,
            { method: "get" },
            this.defaults,
            config
          );
          config.method = config.method.toLowerCase();

          // Hook up interceptors middleware
          var chain = [dispatchRequest, undefined];
          var promise = Promise.resolve(config);

          this.interceptors.request.forEach(function unshiftRequestInterceptors(
            interceptor
          ) {
            chain.unshift(interceptor.fulfilled, interceptor.rejected);
          });

          this.interceptors.response.forEach(function pushResponseInterceptors(
            interceptor
          ) {
            chain.push(interceptor.fulfilled, interceptor.rejected);
          });

          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }

          return promise;
        };

        // Provide aliases for supported request methods
        utils.forEach(
          ["delete", "get", "head", "options"],
          function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function(url, config) {
              return this.request(
                utils.merge(config || {}, {
                  method: method,
                  url: url
                })
              );
            };
          }
        );

        utils.forEach(["post", "put", "patch"], function forEachMethodWithData(
          method
        ) {
          /*eslint func-names:0*/
          Axios.prototype[method] = function(url, data, config) {
            return this.request(
              utils.merge(config || {}, {
                method: method,
                url: url,
                data: data
              })
            );
          };
        });

        module.exports = Axios;
      },
      {
        "./../defaults": "../node_modules/axios/lib/defaults.js",
        "./../utils": "../node_modules/axios/lib/utils.js",
        "./InterceptorManager":
          "../node_modules/axios/lib/core/InterceptorManager.js",
        "./dispatchRequest": "../node_modules/axios/lib/core/dispatchRequest.js"
      }
    ],
    "../node_modules/axios/lib/cancel/Cancel.js": [
      function(require, module, exports) {
        "use strict";

        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
          this.message = message;
        }

        Cancel.prototype.toString = function toString() {
          return "Cancel" + (this.message ? ": " + this.message : "");
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;
      },
      {}
    ],
    "../node_modules/axios/lib/cancel/CancelToken.js": [
      function(require, module, exports) {
        "use strict";

        var Cancel = require("./Cancel");

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
          if (typeof executor !== "function") {
            throw new TypeError("executor must be a function.");
          }

          var resolvePromise;
          this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
          });

          var token = this;
          executor(function cancel(message) {
            if (token.reason) {
              // Cancellation has already been requested
              return;
            }

            token.reason = new Cancel(message);
            resolvePromise(token.reason);
          });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
          if (this.reason) {
            throw this.reason;
          }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
          var cancel;
          var token = new CancelToken(function executor(c) {
            cancel = c;
          });
          return {
            token: token,
            cancel: cancel
          };
        };

        module.exports = CancelToken;
      },
      { "./Cancel": "../node_modules/axios/lib/cancel/Cancel.js" }
    ],
    "../node_modules/axios/lib/helpers/spread.js": [
      function(require, module, exports) {
        "use strict";

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
          return function wrap(arr) {
            return callback.apply(null, arr);
          };
        };
      },
      {}
    ],
    "../node_modules/axios/lib/axios.js": [
      function(require, module, exports) {
        "use strict";

        var utils = require("./utils");
        var bind = require("./helpers/bind");
        var Axios = require("./core/Axios");
        var defaults = require("./defaults");

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
          var context = new Axios(defaultConfig);
          var instance = bind(Axios.prototype.request, context);

          // Copy axios.prototype to instance
          utils.extend(instance, Axios.prototype, context);

          // Copy context to instance
          utils.extend(instance, context);

          return instance;
        }

        // Create the default instance to be exported
        var axios = createInstance(defaults);

        // Expose Axios class to allow class inheritance
        axios.Axios = Axios;

        // Factory for creating new instances
        axios.create = function create(instanceConfig) {
          return createInstance(utils.merge(defaults, instanceConfig));
        };

        // Expose Cancel & CancelToken
        axios.Cancel = require("./cancel/Cancel");
        axios.CancelToken = require("./cancel/CancelToken");
        axios.isCancel = require("./cancel/isCancel");

        // Expose all/spread
        axios.all = function all(promises) {
          return Promise.all(promises);
        };
        axios.spread = require("./helpers/spread");

        module.exports = axios;

        // Allow use of default import syntax in TypeScript
        module.exports.default = axios;
      },
      {
        "./utils": "../node_modules/axios/lib/utils.js",
        "./helpers/bind": "../node_modules/axios/lib/helpers/bind.js",
        "./core/Axios": "../node_modules/axios/lib/core/Axios.js",
        "./defaults": "../node_modules/axios/lib/defaults.js",
        "./cancel/Cancel": "../node_modules/axios/lib/cancel/Cancel.js",
        "./cancel/CancelToken":
          "../node_modules/axios/lib/cancel/CancelToken.js",
        "./cancel/isCancel": "../node_modules/axios/lib/cancel/isCancel.js",
        "./helpers/spread": "../node_modules/axios/lib/helpers/spread.js"
      }
    ],
    "../node_modules/axios/index.js": [
      function(require, module, exports) {
        module.exports = require("./lib/axios");
      },
      { "./lib/axios": "../node_modules/axios/lib/axios.js" }
    ],
    "js/smtp.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.newRegistration = exports.newLead = void 0;

        var _axios = _interopRequireDefault(require("axios"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var SMTP_URL = "https://whites.ae/whites_sendmail.php";

        var newLead = function newLead(data) {
          return _axios.default
            .post(SMTP_URL, {
              name: data.name,
              email: data.email,
              tel: data.phone,
              subject: "Let Us Call You - ".concat(data.name)
            })
            .then(function(response) {
              return response;
            })
            .catch(function(error) {
              throw error;
            });
        };

        exports.newLead = newLead;

        var newRegistration = function newRegistration(data) {
          return _axios.default
            .post(SMTP_URL, {
              name: data.name,
              email: data.email,
              tel: data.phone,
              subject: "Register With Us - ".concat(data.name)
            })
            .then(function(response) {
              return response;
            })
            .catch(function(error) {
              throw error;
            });
        };

        exports.newRegistration = newRegistration;
      },
      { axios: "../node_modules/axios/index.js" }
    ],
    "images/call-icon.png": [
      function(require, module, exports) {
        module.exports = "/call-icon.72daa83c.png";
      },
      {}
    ],
    "images/login-image.png": [
      function(require, module, exports) {
        module.exports = "/login-image.b1bb479e.png";
      },
      {}
    ],
    "components/Contact.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _reactToastr = require("react-toastr");

        var _smtp = require("../js/smtp");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }
            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var toastContainer;

        var Contact =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Contact, _React$Component);

            function Contact() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, Contact);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(Contact)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args)
                )
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "state",
                {
                  leadName: "",
                  leadNameErr: "",
                  leadEmail: "",
                  leadEmailErr: "",
                  leadPhone: "",
                  leadPhoneErr: "",
                  customerName: "",
                  customerNameErr: "",
                  customerEmail: "",
                  customerEmailErr: "",
                  customerPhone: "",
                  customerPhoneErr: ""
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "onChange",
                function(event) {
                  _this.setState(
                    _defineProperty({}, event.target.id, event.target.value)
                  );
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "validateForm",
                function(type) {
                  var flag = true;

                  var newState = _objectSpread({}, _this.state, {
                    leadEmailErr: "",
                    leadNameErr: "",
                    leadPhoneErr: "",
                    customerNameErr: "",
                    customerEmailErr: "",
                    customerPhoneErr: ""
                  });

                  if (type === "newLead") {
                    if (newState.leadName.length < 3) {
                      newState.leadNameErr = "Name is too short";
                      flag = false;
                    }

                    if (
                      newState.leadEmail.length != 0 &&
                      (newState.leadEmail.length < 4 ||
                        newState.leadEmail.split("@").length !== 2 ||
                        newState.leadEmail.split("@")[1].split(".").length !==
                          2)
                    ) {
                      flag = false;
                      newState.leadEmailErr = "Please enter correct email";
                    }

                    if (newState.leadPhone.length < 9) {
                      flag = false;
                      newState.leadPhoneErr =
                        "Phone number seems to be incorrect";
                    }
                  } else {
                    if (newState.customerName.length < 3) {
                      flag = false;
                      newState.customerNameErr = "Name is too short";
                    }

                    if (
                      _this.state.customerEmail.length < 4 ||
                      _this.state.customerEmail.split("@").length !== 2 ||
                      _this.state.customerEmail.split("@")[1].split(".")
                        .length !== 2
                    ) {
                      flag = false;
                      newState.customerEmailErr = "Please enter correct email";
                    }

                    if (_this.state.customerPhone.length < 9) {
                      flag = false;
                      newState.customerPhoneErr =
                        "Phone number seems to be incorrect";
                    }
                  }

                  _this.setState(_objectSpread({}, newState));

                  return flag;
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "onSubmit",
                function(type) {
                  if (_this.validateForm(type)) {
                    if (type === "newLead") {
                      (0, _smtp.newLead)({
                        name: _this.state.leadName,
                        email: _this.state.leadEmail,
                        phone: _this.state.leadPhone
                      })
                        .then(function(response) {
                          toastContainer.success(
                            "Thank you - You’ll shortly receive a call from us.",
                            "Success",
                            {
                              closeButton: true
                            }
                          );

                          _this.setState({
                            leadEmail: "",
                            leadName: "",
                            leadPhone: ""
                          });
                        })
                        .catch(function(error) {
                          toastContainer.error(
                            "Problem sending Email. Please try again!",
                            "Error",
                            {
                              closeButton: true
                            }
                          );
                        });
                    } else if (type === "newRegistration") {
                      (0, _smtp.newRegistration)({
                        name: _this.state.customerName,
                        email: _this.state.customerEmail,
                        phone: _this.state.customerPhone
                      })
                        .then(function(response) {
                          toastContainer.success(
                            "Email sent successfully!",
                            "Success",
                            {
                              closeButton: true
                            }
                          );

                          _this.setState({
                            customerName: "",
                            customerEmail: "",
                            customerPhone: ""
                          });
                        })
                        .catch(function(error) {
                          toastContainer.error(
                            "Problem sending Email. Please try again!",
                            "Error",
                            {
                              closeButton: true
                            }
                          );
                        });
                    }
                  }
                }
              );

              return _this;
            }

            _createClass(Contact, [
              {
                key: "render",
                value: function render() {
                  var _this2 = this;

                  var _this$state = this.state,
                    leadEmailErr = _this$state.leadEmailErr,
                    leadNameErr = _this$state.leadNameErr,
                    leadPhoneErr = _this$state.leadPhoneErr,
                    customerEmailErr = _this$state.customerEmailErr,
                    customerNameErr = _this$state.customerNameErr,
                    customerPhoneErr = _this$state.customerPhoneErr;
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "toastContainer"
                      },
                      _react.default.createElement(
                        _reactToastr.ToastContainer,
                        {
                          ref: function ref(_ref) {
                            return (toastContainer = _ref);
                          },
                          className: "toast-top-right"
                        }
                      )
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "col-md-12 fadeIn animated contact-hero pb-5"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-8 mr-0 pr-0"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "row pl-4 mr-0 pr-0"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-12 text-center mr-4"
                              },
                              _react.default.createElement("img", {
                                src: require("../images/call-icon.png"),
                                className:
                                  "d-inline-block mt-5 mb-3 contactIcons"
                              })
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className:
                                  "col-md-5 text-center whites-round-section my-4 py-3 mr-4"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "mt-3 pt-1"
                                },
                                _react.default.createElement(
                                  "h4",
                                  {
                                    className:
                                      "text-uppercase white-contact-title"
                                  },
                                  "Call Us"
                                ),
                                _react.default.createElement(
                                  "h4",
                                  {
                                    className: "white-price-text text-uppercase"
                                  },
                                  "800 Whites"
                                ),
                                _react.default.createElement(
                                  "a",
                                  {
                                    href: "tel:800944837",
                                    className:
                                      "btn btn-primary my-3 px-4 whites-pill-button text-uppercase"
                                  },
                                  _react.default.createElement("img", {
                                    src: require("../images/call-button.png"),
                                    className: "mr-2 callButton"
                                  }),
                                  "Call Now"
                                )
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className:
                                  "col-md-6 text-center whites-border-section my-4 pl-3 mr-4"
                              },
                              _react.default.createElement(
                                "h4",
                                {
                                  className: "white-contact-title mt-3"
                                },
                                "LET US CALL YOU"
                              ),
                              _react.default.createElement(
                                "form",
                                {
                                  className: "my-4 whites-form-text"
                                },
                                _react.default.createElement(
                                  "div",
                                  {
                                    className:
                                      "form-group text-left text-uppercase"
                                  },
                                  _react.default.createElement(
                                    "label",
                                    {
                                      htmlFor: "leadName"
                                    },
                                    "Name"
                                  ),
                                  _react.default.createElement("input", {
                                    type: "text",
                                    className: "form-control whites-input",
                                    id: "leadName",
                                    value: this.state.leadName,
                                    onChange: function onChange(event) {
                                      return _this2.onChange(event);
                                    }
                                  }),
                                  leadNameErr
                                    ? _react.default.createElement(
                                        "span",
                                        {
                                          className: "error"
                                        },
                                        leadNameErr
                                      )
                                    : ""
                                ),
                                _react.default.createElement(
                                  "div",
                                  {
                                    className:
                                      "form-group text-left text-uppercase"
                                  },
                                  _react.default.createElement(
                                    "label",
                                    {
                                      htmlFor: "leadEmail"
                                    },
                                    "Email "
                                  ),
                                  _react.default.createElement("input", {
                                    type: "email",
                                    className: "form-control whites-input",
                                    id: "leadEmail",
                                    value: this.state.leadEmail,
                                    "aria-describedby": "emailHelp",
                                    onChange: function onChange(event) {
                                      return _this2.onChange(event);
                                    }
                                  }),
                                  leadEmailErr
                                    ? _react.default.createElement(
                                        "span",
                                        {
                                          className: "error"
                                        },
                                        leadEmailErr
                                      )
                                    : ""
                                ),
                                _react.default.createElement(
                                  "div",
                                  {
                                    className:
                                      "form-group text-left text-uppercase"
                                  },
                                  _react.default.createElement(
                                    "label",
                                    {
                                      htmlFor: "leadPhone"
                                    },
                                    "Mobile"
                                  ),
                                  _react.default.createElement("input", {
                                    type: "number",
                                    className: "form-control whites-input",
                                    id: "leadPhone",
                                    value: this.state.leadPhone,
                                    "aria-describedby": "emailHelp",
                                    onChange: function onChange(event) {
                                      return _this2.onChange(event);
                                    }
                                  }),
                                  leadPhoneErr
                                    ? _react.default.createElement(
                                        "span",
                                        {
                                          className: "error"
                                        },
                                        leadPhoneErr
                                      )
                                    : ""
                                ),
                                _react.default.createElement(
                                  "button",
                                  {
                                    className:
                                      "btn btn-primary mt-3 px-4 whites-pill-button text-uppercase",
                                    type: "button",
                                    onClick: function onClick(event) {
                                      return _this2.onSubmit("newLead");
                                    }
                                  },
                                  _react.default.createElement("img", {
                                    src: require("../images/call-button.png"),
                                    className: "mr-2 callButton"
                                  }),
                                  "Call Me"
                                )
                              )
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-4"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "row pr-4 ml-0 pl-0"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-12 text-center "
                              },
                              _react.default.createElement("img", {
                                src: require("../images/login-image.png"),
                                className:
                                  "d-inline-block mt-5 mb-3 contactIcons"
                              })
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className:
                                  "col-md-12 text-center ml-md-0 ml-2 px-0"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className:
                                    "whites-border-section my-4 py-2 ml-0 px-3 ml-lg"
                                },
                                _react.default.createElement(
                                  "h4",
                                  {
                                    className: "white-contact-title"
                                  },
                                  "REGISTER WITH US"
                                ),
                                _react.default.createElement(
                                  "form",
                                  {
                                    className: "my-4 whites-form-text"
                                  },
                                  _react.default.createElement(
                                    "div",
                                    {
                                      className:
                                        "form-group text-left text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "label",
                                      {
                                        htmlFor: "customerName"
                                      },
                                      "Name"
                                    ),
                                    _react.default.createElement("input", {
                                      type: "text",
                                      className: "form-control whites-input",
                                      id: "customerName",
                                      value: this.state.customerName,
                                      onChange: function onChange(event) {
                                        return _this2.onChange(event);
                                      }
                                    }),
                                    customerNameErr
                                      ? _react.default.createElement(
                                          "span",
                                          {
                                            className: "error"
                                          },
                                          customerNameErr
                                        )
                                      : ""
                                  ),
                                  _react.default.createElement(
                                    "div",
                                    {
                                      className:
                                        "form-group text-left text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "label",
                                      {
                                        htmlFor: "customerEmail"
                                      },
                                      "Email "
                                    ),
                                    _react.default.createElement("input", {
                                      type: "email",
                                      className: "form-control whites-input",
                                      id: "customerEmail",
                                      value: this.state.customerEmail,
                                      "aria-describedby": "emailHelp",
                                      onChange: function onChange(event) {
                                        return _this2.onChange(event);
                                      }
                                    }),
                                    customerEmailErr
                                      ? _react.default.createElement(
                                          "span",
                                          {
                                            className: "error"
                                          },
                                          customerEmailErr
                                        )
                                      : ""
                                  ),
                                  _react.default.createElement(
                                    "div",
                                    {
                                      className:
                                        "form-group text-left text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "label",
                                      {
                                        htmlFor: "customerPhone"
                                      },
                                      "Mobile"
                                    ),
                                    _react.default.createElement("input", {
                                      type: "number",
                                      className: "form-control whites-input",
                                      id: "customerPhone",
                                      value: this.state.customerPhone,
                                      "aria-describedby": "emailHelp",
                                      onChange: function onChange(event) {
                                        return _this2.onChange(event);
                                      }
                                    }),
                                    customerPhoneErr
                                      ? _react.default.createElement(
                                          "span",
                                          {
                                            className: "error"
                                          },
                                          customerPhoneErr
                                        )
                                      : ""
                                  ),
                                  _react.default.createElement(
                                    "button",
                                    {
                                      className:
                                        "btn btn-primary mt-3 px-4 whites-pill-button text-uppercase",
                                      type: "button",
                                      onClick: function onClick(event) {
                                        return _this2.onSubmit(
                                          "newRegistration"
                                        );
                                      }
                                    },
                                    "CREATE ACCOUNT"
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return Contact;
          })(_react.default.Component);

        var _default = Contact;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "react-toastr": "../node_modules/react-toastr/lib/index.js",
        "../js/smtp": "js/smtp.js",
        "../images/call-icon.png": "images/call-icon.png",
        "../images/call-button.png": "images/call-button.png",
        "../images/login-image.png": "images/login-image.png"
      }
    ],
    "images/marker.png": [
      function(require, module, exports) {
        module.exports = "/marker.59daef38.png";
      },
      {}
    ],
    "images/head-office.png": [
      function(require, module, exports) {
        module.exports = "/head-office.13bbfc25.png";
      },
      {}
    ],
    "components/HomeHero.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _slide = _interopRequireDefault(require("../images/slide-1.jpg"));

        var _slide2 = _interopRequireDefault(require("../images/slide-2.jpg"));

        var _slide3 = _interopRequireDefault(require("../images/slide-3.jpg"));

        var _slide4 = _interopRequireDefault(require("../images/slide-4.jpg"));

        var _slide5 = _interopRequireDefault(require("../images/slide-5.jpg"));

        var _MapContainer = _interopRequireDefault(require("./MapContainer"));

        var _Contact = _interopRequireDefault(require("./Contact"));

        var _router = require("@reach/router");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var HomeHero =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(HomeHero, _React$Component);

            function HomeHero() {
              _classCallCheck(this, HomeHero);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(HomeHero).apply(this, arguments)
              );
            }

            _createClass(HomeHero, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className:
                            "col-md-12 fadeIn animated offset-md-0 mt-0 mb-0"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "row white-home-hero"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              id: "carouselExampleControls",
                              className: "carousel slide w-100 mb-2",
                              "data-ride": "carousel",
                              "data-interval": "3000"
                            },
                            _react.default.createElement(
                              "ol",
                              {
                                className: "carousel-indicators d-lg-flex"
                              },
                              _react.default.createElement("li", {
                                "data-target": "#carouselExampleControls",
                                "data-slide-to": "0",
                                className: "active"
                              }),
                              _react.default.createElement("li", {
                                "data-target": "#carouselExampleControls",
                                "data-slide-to": "1"
                              }),
                              _react.default.createElement("li", {
                                "data-target": "#carouselExampleControls",
                                "data-slide-to": "2"
                              }),
                              _react.default.createElement("li", {
                                "data-target": "#carouselExampleControls",
                                "data-slide-to": "3"
                              }),
                              _react.default.createElement("li", {
                                "data-target": "#carouselExampleControls",
                                "data-slide-to": "4"
                              })
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "carousel-inner"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "carousel-item active"
                                },
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    to: "/about"
                                  },
                                  _react.default.createElement("img", {
                                    className: "d-block w-100",
                                    src: _slide.default,
                                    alt: "First slide"
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "carousel-item"
                                },
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    to: "/about"
                                  },
                                  _react.default.createElement("img", {
                                    className: "d-block w-100",
                                    src: _slide2.default,
                                    alt: "Second slide"
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "carousel-item"
                                },
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    to: "/bundles"
                                  },
                                  _react.default.createElement("img", {
                                    className: "d-block w-100",
                                    src: _slide3.default,
                                    alt: "Third slide"
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "carousel-item"
                                },
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    to: "/wash-fold"
                                  },
                                  _react.default.createElement("img", {
                                    className: "d-block w-100",
                                    src: _slide4.default,
                                    alt: "Third slide"
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "carousel-item"
                                },
                                _react.default.createElement(
                                  _router.Link,
                                  {
                                    to: "/couture"
                                  },
                                  _react.default.createElement("img", {
                                    className: "d-block w-100",
                                    src: _slide5.default,
                                    alt: "Third slide"
                                  })
                                )
                              )
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "carousel-control-prev",
                                href: "#carouselExampleControls",
                                role: "button",
                                "data-slide": "prev"
                              },
                              _react.default.createElement("span", {
                                className: "carousel-control-prev-icon",
                                "aria-hidden": "true"
                              }),
                              _react.default.createElement(
                                "span",
                                {
                                  className: "sr-only"
                                },
                                "Previous"
                              )
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "carousel-control-next",
                                href: "#carouselExampleControls",
                                role: "button",
                                "data-slide": "next"
                              },
                              _react.default.createElement("span", {
                                className: "carousel-control-next-icon",
                                "aria-hidden": "true"
                              }),
                              _react.default.createElement(
                                "span",
                                {
                                  className: "sr-only"
                                },
                                "Next"
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row d-md-none mt-1"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading text-uppercase mb-4 margin"
                            },
                            "Finest garment care"
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-4"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className: "white-for-text"
                            },
                            "Whites is a next generation premium dry-cleaning and laundry service. We offer the highest standards in garment care processing thanks to the use of state of the art technologies."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-8"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className: ""
                            },
                            "Our contemporary services have been well thought out to make every order a pleasant experience. You are at the heart of our business and your needs, wishes and requirements are what matters to us. With our particular expertise in high-end textile care we provide a unique couture and bridal service which handles your most precious gowns with great know-how."
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Why We Are Different"
                          ),
                          _react.default.createElement(
                            "ul",
                            null,
                            _react.default.createElement(
                              "li",
                              null,
                              "Outstanding quality and particular attention to your requirements"
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "Service points ideally located in selected",
                              _react.default.createElement(
                                _router.Link,
                                {
                                  to: "/locations"
                                },
                                " shopping malls"
                              ),
                              " "
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "Free laundry pick-up service from your doorsteps and delivery of your freshly cleaned garments the next day."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "Our exclusive dry-clean & laundry bundles are designed to take care of your specific daily needs and offer value for money at the same time."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              " ",
                              "Benefit from the advantages of our rewarding program."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "A unique couture and bridal service handles your most precious gowns with special expertise."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "We strive to always deliver the best service. Should there ever be a reason for you not to be satisfied, we will redo the service for free, no questions asked."
                            )
                          )
                        )
                      )
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "container  container-class mt-3 d-md-none"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-12"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className:
                                "white-page-blue-heading text-uppercase "
                            },
                            "Locations"
                          )
                        )
                      )
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "container-fluid d-md-none "
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className:
                              "col-12 fadeIn animated mb-1 mt-4 pl-0 locations-hero-mobile"
                          },
                          _react.default.createElement(
                            _MapContainer.default,
                            null
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12  text-center py-3"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-4 mb-3"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "row"
                                },
                                _react.default.createElement(
                                  "div",
                                  {
                                    className: "col-md-2 offset-md-1"
                                  },
                                  _react.default.createElement("img", {
                                    className: "locationicons",
                                    src: require("../images/marker.png")
                                  })
                                ),
                                _react.default.createElement(
                                  "div",
                                  {
                                    className: "col-md-9"
                                  },
                                  _react.default.createElement(
                                    "h5",
                                    {
                                      className:
                                        "white-couture-text text-uppercase"
                                    },
                                    "Dubai Marina Mall"
                                  ),
                                  _react.default.createElement(
                                    "p",
                                    null,
                                    "P Level",
                                    _react.default.createElement("br", null),
                                    _react.default.createElement(
                                      "a",
                                      {
                                        className: "phoneNumber",
                                        href: "tel:+971521090160"
                                      },
                                      "+971 52 109 0160"
                                    )
                                  )
                                )
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-4"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "row"
                                },
                                _react.default.createElement(
                                  "div",
                                  {
                                    className: "col-md-2 offset-md-1"
                                  },
                                  _react.default.createElement("img", {
                                    className: "locationicons",
                                    src: require("../images/marker.png")
                                  })
                                ),
                                _react.default.createElement(
                                  "div",
                                  {
                                    className: "col-md-9"
                                  },
                                  _react.default.createElement(
                                    "h5",
                                    {
                                      className:
                                        "white-couture-text text-uppercase "
                                    },
                                    "Emaar Marina Walk"
                                  ),
                                  _react.default.createElement(
                                    "p",
                                    null,
                                    "Ground Floor",
                                    _react.default.createElement("br", null),
                                    _react.default.createElement(
                                      "a",
                                      {
                                        className: "phoneNumber",
                                        href: "tel:+971552851905"
                                      },
                                      "+971 55 285 1905"
                                    )
                                  )
                                )
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-4 mb-3"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "row"
                                },
                                _react.default.createElement(
                                  "div",
                                  {
                                    className: "col-md-2 offset-md-1"
                                  },
                                  _react.default.createElement("img", {
                                    className: "locationicons ",
                                    src: require("../images/head-office.png")
                                  })
                                ),
                                _react.default.createElement(
                                  "div",
                                  {
                                    className: "col-md-9"
                                  },
                                  _react.default.createElement(
                                    "h5",
                                    {
                                      className:
                                        "white-couture-text text-uppercase"
                                    },
                                    "Head Office"
                                  ),
                                  _react.default.createElement(
                                    "p",
                                    null,
                                    "3002 Concord Tower",
                                    _react.default.createElement("br", null),
                                    "Media City, Dubai, UAE"
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class mt-3 d-md-none"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-12 mb-3"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className:
                                "white-page-blue-heading text-uppercase "
                            },
                            "Contact"
                          )
                        )
                      )
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "container-fluid d-md-none"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(_Contact.default, null)
                      )
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "col-12 d-none d-md-flex footer-height"
                      },
                      _react.default.createElement("p", null)
                    )
                  );
                }
              }
            ]);

            return HomeHero;
          })(_react.default.Component);

        var _default = HomeHero;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "../images/slide-1.jpg": "images/slide-1.jpg",
        "../images/slide-2.jpg": "images/slide-2.jpg",
        "../images/slide-3.jpg": "images/slide-3.jpg",
        "../images/slide-4.jpg": "images/slide-4.jpg",
        "../images/slide-5.jpg": "images/slide-5.jpg",
        "./MapContainer": "components/MapContainer.js",
        "./Contact": "components/Contact.js",
        "@reach/router": "../node_modules/@reach/router/es/index.js",
        "../images/marker.png": "images/marker.png",
        "../images/head-office.png": "images/head-office.png"
      }
    ],
    "components/Footer.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _router = require("@reach/router");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var Footer =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Footer, _React$Component);

            function Footer() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, Footer);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(Footer)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args)
                )
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "isActive",
                function(_ref) {
                  var isCurrent = _ref.isCurrent;
                  return isCurrent
                    ? {
                        className:
                          "nav-link ml-md-0  white-footer-links mr-md-3 text-uppercase white-footer-links-active"
                      }
                    : {
                        className:
                          "nav-link ml-md-0  white-footer-links mr-md-3 text-uppercase"
                      };
                }
              );

              return _this;
            }

            _createClass(Footer, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    "div",
                    {
                      className: "container container-class"
                    },
                    _react.default.createElement(
                      "div",
                      {
                        className: "row"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "col-md-6 d-none d-lg-block"
                        },
                        _react.default.createElement(
                          "ul",
                          {
                            className: "nav ml-md-0"
                          },
                          _react.default.createElement(
                            "li",
                            {
                              className: "nav-item ml-md-0"
                            },
                            _react.default.createElement(
                              _router.Link,
                              {
                                getProps: this.isActive,
                                className:
                                  "nav-link ml-md-0  white-footer-links mr-md-3 text-uppercase pl-0",
                                to: "/about"
                              },
                              "About Us"
                            )
                          ),
                          _react.default.createElement(
                            "li",
                            {
                              className: "nav-item ml-md-0"
                            },
                            _react.default.createElement(
                              _router.Link,
                              {
                                getProps: this.isActive,
                                className:
                                  "nav-link  ml-md-0 white-footer-links mr-md-3 text-uppercase",
                                to: "/locations"
                              },
                              "locations"
                            )
                          ),
                          _react.default.createElement(
                            "li",
                            {
                              className: "nav-item ml-md-0"
                            },
                            _react.default.createElement(
                              _router.Link,
                              {
                                getProps: this.isActive,
                                className:
                                  "nav-link ml-md-0 white-footer-links mr-md-3 text-uppercase",
                                to: "/contactUs"
                              },
                              "Contact"
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className:
                            "col-lg-6 col-md-12 d-none d-md-block text-right text-center-md"
                        },
                        _react.default.createElement("a", {
                          href: "https://www.facebook.com/whitesindubai",
                          target: "_blank",
                          className: "fa fa-facebook"
                        }),
                        _react.default.createElement("a", {
                          href: "https://www.instagram.com/whites_dubai/",
                          target: "_blank",
                          className: "fa fa-instagram ml-4"
                        }),
                        _react.default.createElement("a", {
                          href:
                            "https://www.youtube.com/channel/UCw0voTGlShqkBAatiBXr6Ng?view_as=subscriber",
                          target: "_blank",
                          className: "fa fa-youtube ml-4"
                        }),
                        _react.default.createElement("a", {
                          href: "https://twitter.com/whites_dubai",
                          target: "_blank",
                          className: "fa fa-twitter ml-4"
                        })
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "col-12 d-block d-md-none text-center"
                        },
                        _react.default.createElement("a", {
                          href: "https://www.facebook.com/whitesindubai",
                          target: "_blank",
                          className: "fa fa-facebook ml-4"
                        }),
                        _react.default.createElement("a", {
                          href: "https://www.instagram.com/whites_dubai/",
                          target: "_blank",
                          className: "fa fa-instagram ml-4"
                        }),
                        _react.default.createElement("a", {
                          href:
                            "https://www.youtube.com/channel/UCw0voTGlShqkBAatiBXr6Ng?view_as=subscriber",
                          target: "_blank",
                          className: "fa fa-youtube ml-4"
                        }),
                        _react.default.createElement("a", {
                          href: "https://twitter.com/whites_dubai",
                          target: "_blank",
                          className: "fa fa-twitter ml-4"
                        })
                      )
                    )
                  );
                }
              }
            ]);

            return Footer;
          })(_react.default.Component);

        var _default = Footer;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "@reach/router": "../node_modules/@reach/router/es/index.js"
      }
    ],
    "../node_modules/lodash.isfunction/index.js": [
      function(require, module, exports) {
        var global = arguments[3];
        /**
         * Lodash (Custom Build) <https://lodash.com/>
         * Build: `lodash modularize exports="npm" -o ./`
         * Copyright JS Foundation and other contributors <https://js.foundation/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */

        /** `Object#toString` result references. */
        var asyncTag = "[object AsyncFunction]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          nullTag = "[object Null]",
          proxyTag = "[object Proxy]",
          undefinedTag = "[object Undefined]";

        /** Detect free variable `global` from Node.js. */
        var freeGlobal =
          typeof global == "object" &&
          global &&
          global.Object === Object &&
          global;

        /** Detect free variable `self`. */
        var freeSelf =
          typeof self == "object" && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function("return this")();

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Built-in value references. */
        var Symbol = root.Symbol,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value)
            ? getRawTag(value)
            : objectToString(value);
        }

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return (
            tag == funcTag ||
            tag == genTag ||
            tag == asyncTag ||
            tag == proxyTag
          );
        }

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }

        module.exports = isFunction;
      },
      {}
    ],
    "../node_modules/lodash.isobject/index.js": [
      function(require, module, exports) {
        /**
         * lodash 3.0.2 (Custom Build) <https://lodash.com/>
         * Build: `lodash modern modularize exports="npm" -o ./`
         * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         * Available under MIT license <https://lodash.com/license>
         */

        /**
         * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
         * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(1);
         * // => false
         */
        function isObject(value) {
          // Avoid a V8 JIT bug in Chrome 19-20.
          // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
          var type = typeof value;
          return !!value && (type == "object" || type == "function");
        }

        module.exports = isObject;
      },
      {}
    ],
    "../node_modules/react-popper/lib/Manager.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = require("react");

        var _propTypes = _interopRequireDefault(require("prop-types"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _createClass = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        function _objectWithoutProperties(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return call &&
            (typeof call === "object" || typeof call === "function")
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                typeof superClass
            );
          }

          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var Manager = (function(_Component) {
          _inherits(Manager, _Component);

          function Manager() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, Manager);

            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            return (
              (_ret = ((_temp = ((_this = _possibleConstructorReturn(
                this,
                (_ref =
                  Manager.__proto__ ||
                  Object.getPrototypeOf(Manager)).call.apply(
                  _ref,
                  [this].concat(args)
                )
              )),
              _this)),
              (_this._setTargetNode = function(node) {
                _this._targetNode = node;
              }),
              (_this._getTargetNode = function() {
                return _this._targetNode;
              }),
              _temp)),
              _possibleConstructorReturn(_this, _ret)
            );
          }

          _createClass(Manager, [
            {
              key: "getChildContext",
              value: function getChildContext() {
                return {
                  popperManager: {
                    setTargetNode: this._setTargetNode,
                    getTargetNode: this._getTargetNode
                  }
                };
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  tag = _props.tag,
                  children = _props.children,
                  restProps = _objectWithoutProperties(_props, [
                    "tag",
                    "children"
                  ]);

                if (tag !== false) {
                  return (0, _react.createElement)(tag, restProps, children);
                } else {
                  return children;
                }
              }
            }
          ]);

          return Manager;
        })(_react.Component);

        Manager.childContextTypes = {
          popperManager: _propTypes.default.object.isRequired
        };
        Manager.propTypes = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.bool
          ]),
          children: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.func
          ])
        };
        Manager.defaultProps = {
          tag: "div"
        };
        var _default = Manager;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js"
      }
    ],
    "../node_modules/react-popper/lib/Target.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = require("react");

        var _propTypes = _interopRequireDefault(require("prop-types"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        function _objectWithoutProperties(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        }

        var Target = function Target(props, context) {
          var _props$component = props.component,
            component =
              _props$component === undefined ? "div" : _props$component,
            innerRef = props.innerRef,
            children = props.children,
            restProps = _objectWithoutProperties(props, [
              "component",
              "innerRef",
              "children"
            ]);

          var popperManager = context.popperManager;

          var targetRef = function targetRef(node) {
            popperManager.setTargetNode(node);

            if (typeof innerRef === "function") {
              innerRef(node);
            }
          };

          if (typeof children === "function") {
            var targetProps = {
              ref: targetRef
            };
            return children({
              targetProps: targetProps,
              restProps: restProps
            });
          }

          var componentProps = _extends({}, restProps);

          if (typeof component === "string") {
            componentProps.ref = targetRef;
          } else {
            componentProps.innerRef = targetRef;
          }

          return (0, _react.createElement)(component, componentProps, children);
        };

        Target.contextTypes = {
          popperManager: _propTypes.default.object.isRequired
        };
        Target.propTypes = {
          component: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.func
          ]),
          innerRef: _propTypes.default.func,
          children: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.func
          ])
        };
        var _default = Target;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js"
      }
    ],
    "../node_modules/popper.js/dist/esm/popper.js": [
      function(require, module, exports) {
        var global = arguments[3];
        ("use strict");

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        /**!
         * @fileOverview Kickass library to create and place poppers near their reference elements.
         * @version 1.14.6
         * @license
         * Copyright (c) 2016 Federico Zivolo and contributors
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy
         * of this software and associated documentation files (the "Software"), to deal
         * in the Software without restriction, including without limitation the rights
         * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the Software is
         * furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in all
         * copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
         * SOFTWARE.
         */
        var isBrowser =
          typeof window !== "undefined" && typeof document !== "undefined";
        var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
        var timeoutDuration = 0;

        for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
          if (
            isBrowser &&
            navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0
          ) {
            timeoutDuration = 1;
            break;
          }
        }

        function microtaskDebounce(fn) {
          var called = false;
          return function() {
            if (called) {
              return;
            }

            called = true;
            window.Promise.resolve().then(function() {
              called = false;
              fn();
            });
          };
        }

        function taskDebounce(fn) {
          var scheduled = false;
          return function() {
            if (!scheduled) {
              scheduled = true;
              setTimeout(function() {
                scheduled = false;
                fn();
              }, timeoutDuration);
            }
          };
        }

        var supportsMicroTasks = isBrowser && window.Promise;
        /**
         * Create a debounced version of a method, that's asynchronously deferred
         * but called in the minimum time possible.
         *
         * @method
         * @memberof Popper.Utils
         * @argument {Function} fn
         * @returns {Function}
         */

        var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
        /**
         * Check if the given variable is a function
         * @method
         * @memberof Popper.Utils
         * @argument {Any} functionToCheck - variable to check
         * @returns {Boolean} answer to: is a function?
         */

        function isFunction(functionToCheck) {
          var getType = {};
          return (
            functionToCheck &&
            getType.toString.call(functionToCheck) === "[object Function]"
          );
        }
        /**
         * Get CSS computed property of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Eement} element
         * @argument {String} property
         */

        function getStyleComputedProperty(element, property) {
          if (element.nodeType !== 1) {
            return [];
          } // NOTE: 1 DOM access here

          var window = element.ownerDocument.defaultView;
          var css = window.getComputedStyle(element, null);
          return property ? css[property] : css;
        }
        /**
         * Returns the parentNode or the host of the element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} parent
         */

        function getParentNode(element) {
          if (element.nodeName === "HTML") {
            return element;
          }

          return element.parentNode || element.host;
        }
        /**
         * Returns the scrolling parent of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} scroll parent
         */

        function getScrollParent(element) {
          // Return body, `getScroll` will take care to get the correct `scrollTop` from it
          if (!element) {
            return document.body;
          }

          switch (element.nodeName) {
            case "HTML":
            case "BODY":
              return element.ownerDocument.body;

            case "#document":
              return element.body;
          } // Firefox want us to check `-x` and `-y` variations as well

          var _getStyleComputedProp = getStyleComputedProperty(element),
            overflow = _getStyleComputedProp.overflow,
            overflowX = _getStyleComputedProp.overflowX,
            overflowY = _getStyleComputedProp.overflowY;

          if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element;
          }

          return getScrollParent(getParentNode(element));
        }

        var isIE11 =
          isBrowser && !!(window.MSInputMethodContext && document.documentMode);
        var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
        /**
         * Determines if the browser is Internet Explorer
         * @method
         * @memberof Popper.Utils
         * @param {Number} version to check
         * @returns {Boolean} isIE
         */

        function isIE(version) {
          if (version === 11) {
            return isIE11;
          }

          if (version === 10) {
            return isIE10;
          }

          return isIE11 || isIE10;
        }
        /**
         * Returns the offset parent of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} offset parent
         */

        function getOffsetParent(element) {
          if (!element) {
            return document.documentElement;
          }

          var noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here

          var offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent

          while (
            offsetParent === noOffsetParent &&
            element.nextElementSibling
          ) {
            offsetParent = (element = element.nextElementSibling).offsetParent;
          }

          var nodeName = offsetParent && offsetParent.nodeName;

          if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
            return element
              ? element.ownerDocument.documentElement
              : document.documentElement;
          } // .offsetParent will return the closest TH, TD or TABLE in case
          // no offsetParent is present, I hate this job...

          if (
            ["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 &&
            getStyleComputedProperty(offsetParent, "position") === "static"
          ) {
            return getOffsetParent(offsetParent);
          }

          return offsetParent;
        }

        function isOffsetContainer(element) {
          var nodeName = element.nodeName;

          if (nodeName === "BODY") {
            return false;
          }

          return (
            nodeName === "HTML" ||
            getOffsetParent(element.firstElementChild) === element
          );
        }
        /**
         * Finds the root node (document, shadowDOM root) of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} node
         * @returns {Element} root node
         */

        function getRoot(node) {
          if (node.parentNode !== null) {
            return getRoot(node.parentNode);
          }

          return node;
        }
        /**
         * Finds the offset parent common to the two provided nodes
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element1
         * @argument {Element} element2
         * @returns {Element} common offset parent
         */

        function findCommonOffsetParent(element1, element2) {
          // This check is needed to avoid errors in case one of the elements isn't defined for any reason
          if (
            !element1 ||
            !element1.nodeType ||
            !element2 ||
            !element2.nodeType
          ) {
            return document.documentElement;
          } // Here we make sure to give as "start" the element that comes first in the DOM

          var order =
            element1.compareDocumentPosition(element2) &
            Node.DOCUMENT_POSITION_FOLLOWING;
          var start = order ? element1 : element2;
          var end = order ? element2 : element1; // Get common ancestor container

          var range = document.createRange();
          range.setStart(start, 0);
          range.setEnd(end, 0);
          var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document

          if (
            (element1 !== commonAncestorContainer &&
              element2 !== commonAncestorContainer) ||
            start.contains(end)
          ) {
            if (isOffsetContainer(commonAncestorContainer)) {
              return commonAncestorContainer;
            }

            return getOffsetParent(commonAncestorContainer);
          } // one of the nodes is inside shadowDOM, find which one

          var element1root = getRoot(element1);

          if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2);
          } else {
            return findCommonOffsetParent(element1, getRoot(element2).host);
          }
        }
        /**
         * Gets the scroll value of the given element in the given side (top and left)
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @argument {String} side `top` or `left`
         * @returns {number} amount of scrolled pixels
         */

        function getScroll(element) {
          var side =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "top";
          var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
          var nodeName = element.nodeName;

          if (nodeName === "BODY" || nodeName === "HTML") {
            var html = element.ownerDocument.documentElement;
            var scrollingElement =
              element.ownerDocument.scrollingElement || html;
            return scrollingElement[upperSide];
          }

          return element[upperSide];
        }
        /*
         * Sum or subtract the element scroll values (left and top) from a given rect object
         * @method
         * @memberof Popper.Utils
         * @param {Object} rect - Rect object you want to change
         * @param {HTMLElement} element - The element from the function reads the scroll values
         * @param {Boolean} subtract - set to true if you want to subtract the scroll values
         * @return {Object} rect - The modifier rect object
         */

        function includeScroll(rect, element) {
          var subtract =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : false;
          var scrollTop = getScroll(element, "top");
          var scrollLeft = getScroll(element, "left");
          var modifier = subtract ? -1 : 1;
          rect.top += scrollTop * modifier;
          rect.bottom += scrollTop * modifier;
          rect.left += scrollLeft * modifier;
          rect.right += scrollLeft * modifier;
          return rect;
        }
        /*
         * Helper to detect borders of a given element
         * @method
         * @memberof Popper.Utils
         * @param {CSSStyleDeclaration} styles
         * Result of `getStyleComputedProperty` on the given element
         * @param {String} axis - `x` or `y`
         * @return {number} borders - The borders size of the given axis
         */

        function getBordersSize(styles, axis) {
          var sideA = axis === "x" ? "Left" : "Top";
          var sideB = sideA === "Left" ? "Right" : "Bottom";
          return (
            parseFloat(styles["border" + sideA + "Width"], 10) +
            parseFloat(styles["border" + sideB + "Width"], 10)
          );
        }

        function getSize(axis, body, html, computedStyle) {
          return Math.max(
            body["offset" + axis],
            body["scroll" + axis],
            html["client" + axis],
            html["offset" + axis],
            html["scroll" + axis],
            isIE(10)
              ? parseInt(html["offset" + axis]) +
                  parseInt(
                    computedStyle[
                      "margin" + (axis === "Height" ? "Top" : "Left")
                    ]
                  ) +
                  parseInt(
                    computedStyle[
                      "margin" + (axis === "Height" ? "Bottom" : "Right")
                    ]
                  )
              : 0
          );
        }

        function getWindowSizes(document) {
          var body = document.body;
          var html = document.documentElement;
          var computedStyle = isIE(10) && getComputedStyle(html);
          return {
            height: getSize("Height", body, html, computedStyle),
            width: getSize("Width", body, html, computedStyle)
          };
        }

        var classCallCheck = function(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };

        var createClass = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var defineProperty = function(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        };

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };
        /**
         * Given element offsets, generate an output similar to getBoundingClientRect
         * @method
         * @memberof Popper.Utils
         * @argument {Object} offsets
         * @returns {Object} ClientRect like output
         */

        function getClientRect(offsets) {
          return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height
          });
        }
        /**
         * Get bounding client rect of given element
         * @method
         * @memberof Popper.Utils
         * @param {HTMLElement} element
         * @return {Object} client rect
         */

        function getBoundingClientRect(element) {
          var rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't
          // considered in DOM in some circumstances...
          // This isn't reproducible in IE10 compatibility mode of IE11

          try {
            if (isIE(10)) {
              rect = element.getBoundingClientRect();
              var scrollTop = getScroll(element, "top");
              var scrollLeft = getScroll(element, "left");
              rect.top += scrollTop;
              rect.left += scrollLeft;
              rect.bottom += scrollTop;
              rect.right += scrollLeft;
            } else {
              rect = element.getBoundingClientRect();
            }
          } catch (e) {}

          var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top
          }; // subtract scrollbar size from sizes

          var sizes =
            element.nodeName === "HTML"
              ? getWindowSizes(element.ownerDocument)
              : {};
          var width =
            sizes.width || element.clientWidth || result.right - result.left;
          var height =
            sizes.height || element.clientHeight || result.bottom - result.top;
          var horizScrollbar = element.offsetWidth - width;
          var vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
          // we make this check conditional for performance reasons

          if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element);
            horizScrollbar -= getBordersSize(styles, "x");
            vertScrollbar -= getBordersSize(styles, "y");
            result.width -= horizScrollbar;
            result.height -= vertScrollbar;
          }

          return getClientRect(result);
        }

        function getOffsetRectRelativeToArbitraryNode(children, parent) {
          var fixedPosition =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : false;
          var isIE10 = isIE(10);
          var isHTML = parent.nodeName === "HTML";
          var childrenRect = getBoundingClientRect(children);
          var parentRect = getBoundingClientRect(parent);
          var scrollParent = getScrollParent(children);
          var styles = getStyleComputedProperty(parent);
          var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
          var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10); // In cases where the parent is fixed, we must ignore negative scroll in offset calc

          if (fixedPosition && isHTML) {
            parentRect.top = Math.max(parentRect.top, 0);
            parentRect.left = Math.max(parentRect.left, 0);
          }

          var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height
          });
          offsets.marginTop = 0;
          offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent
          // we do this only on HTML because it's the only element that behaves
          // differently when margins are applied to it. The margins are included in
          // the box of the documentElement, in the other cases not.

          if (!isIE10 && isHTML) {
            var marginTop = parseFloat(styles.marginTop, 10);
            var marginLeft = parseFloat(styles.marginLeft, 10);
            offsets.top -= borderTopWidth - marginTop;
            offsets.bottom -= borderTopWidth - marginTop;
            offsets.left -= borderLeftWidth - marginLeft;
            offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them

            offsets.marginTop = marginTop;
            offsets.marginLeft = marginLeft;
          }

          if (
            isIE10 && !fixedPosition
              ? parent.contains(scrollParent)
              : parent === scrollParent && scrollParent.nodeName !== "BODY"
          ) {
            offsets = includeScroll(offsets, parent);
          }

          return offsets;
        }

        function getViewportOffsetRectRelativeToArtbitraryNode(element) {
          var excludeScroll =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : false;
          var html = element.ownerDocument.documentElement;
          var relativeOffset = getOffsetRectRelativeToArbitraryNode(
            element,
            html
          );
          var width = Math.max(html.clientWidth, window.innerWidth || 0);
          var height = Math.max(html.clientHeight, window.innerHeight || 0);
          var scrollTop = !excludeScroll ? getScroll(html) : 0;
          var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;
          var offset = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width: width,
            height: height
          };
          return getClientRect(offset);
        }
        /**
         * Check if the given element is fixed or is inside a fixed parent
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @argument {Element} customContainer
         * @returns {Boolean} answer to "isFixed?"
         */

        function isFixed(element) {
          var nodeName = element.nodeName;

          if (nodeName === "BODY" || nodeName === "HTML") {
            return false;
          }

          if (getStyleComputedProperty(element, "position") === "fixed") {
            return true;
          }

          return isFixed(getParentNode(element));
        }
        /**
         * Finds the first parent of an element that has a transformed property defined
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} first transformed parent or documentElement
         */

        function getFixedPositionOffsetParent(element) {
          // This check is needed to avoid errors in case one of the elements isn't defined for any reason
          if (!element || !element.parentElement || isIE()) {
            return document.documentElement;
          }

          var el = element.parentElement;

          while (el && getStyleComputedProperty(el, "transform") === "none") {
            el = el.parentElement;
          }

          return el || document.documentElement;
        }
        /**
         * Computed the boundaries limits and return them
         * @method
         * @memberof Popper.Utils
         * @param {HTMLElement} popper
         * @param {HTMLElement} reference
         * @param {number} padding
         * @param {HTMLElement} boundariesElement - Element used to define the boundaries
         * @param {Boolean} fixedPosition - Is in fixed position mode
         * @returns {Object} Coordinates of the boundaries
         */

        function getBoundaries(popper, reference, padding, boundariesElement) {
          var fixedPosition =
            arguments.length > 4 && arguments[4] !== undefined
              ? arguments[4]
              : false; // NOTE: 1 DOM access here

          var boundaries = {
            top: 0,
            left: 0
          };
          var offsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, reference); // Handle viewport case

          if (boundariesElement === "viewport") {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(
              offsetParent,
              fixedPosition
            );
          } else {
            // Handle other cases based on DOM element used as boundaries
            var boundariesNode = void 0;

            if (boundariesElement === "scrollParent") {
              boundariesNode = getScrollParent(getParentNode(reference));

              if (boundariesNode.nodeName === "BODY") {
                boundariesNode = popper.ownerDocument.documentElement;
              }
            } else if (boundariesElement === "window") {
              boundariesNode = popper.ownerDocument.documentElement;
            } else {
              boundariesNode = boundariesElement;
            }

            var offsets = getOffsetRectRelativeToArbitraryNode(
              boundariesNode,
              offsetParent,
              fixedPosition
            ); // In case of HTML, we need a different computation

            if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
              var _getWindowSizes = getWindowSizes(popper.ownerDocument),
                height = _getWindowSizes.height,
                width = _getWindowSizes.width;

              boundaries.top += offsets.top - offsets.marginTop;
              boundaries.bottom = height + offsets.top;
              boundaries.left += offsets.left - offsets.marginLeft;
              boundaries.right = width + offsets.left;
            } else {
              // for all the other DOM elements, this one is good
              boundaries = offsets;
            }
          } // Add paddings

          padding = padding || 0;
          var isPaddingNumber = typeof padding === "number";
          boundaries.left += isPaddingNumber ? padding : padding.left || 0;
          boundaries.top += isPaddingNumber ? padding : padding.top || 0;
          boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
          boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
          return boundaries;
        }

        function getArea(_ref) {
          var width = _ref.width,
            height = _ref.height;
          return width * height;
        }
        /**
         * Utility used to transform the `auto` placement to the placement with more
         * available space.
         * @method
         * @memberof Popper.Utils
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function computeAutoPlacement(
          placement,
          refRect,
          popper,
          reference,
          boundariesElement
        ) {
          var padding =
            arguments.length > 5 && arguments[5] !== undefined
              ? arguments[5]
              : 0;

          if (placement.indexOf("auto") === -1) {
            return placement;
          }

          var boundaries = getBoundaries(
            popper,
            reference,
            padding,
            boundariesElement
          );
          var rects = {
            top: {
              width: boundaries.width,
              height: refRect.top - boundaries.top
            },
            right: {
              width: boundaries.right - refRect.right,
              height: boundaries.height
            },
            bottom: {
              width: boundaries.width,
              height: boundaries.bottom - refRect.bottom
            },
            left: {
              width: refRect.left - boundaries.left,
              height: boundaries.height
            }
          };
          var sortedAreas = Object.keys(rects)
            .map(function(key) {
              return _extends(
                {
                  key: key
                },
                rects[key],
                {
                  area: getArea(rects[key])
                }
              );
            })
            .sort(function(a, b) {
              return b.area - a.area;
            });
          var filteredAreas = sortedAreas.filter(function(_ref2) {
            var width = _ref2.width,
              height = _ref2.height;
            return width >= popper.clientWidth && height >= popper.clientHeight;
          });
          var computedPlacement =
            filteredAreas.length > 0
              ? filteredAreas[0].key
              : sortedAreas[0].key;
          var variation = placement.split("-")[1];
          return computedPlacement + (variation ? "-" + variation : "");
        }
        /**
         * Get offsets to the reference element
         * @method
         * @memberof Popper.Utils
         * @param {Object} state
         * @param {Element} popper - the popper element
         * @param {Element} reference - the reference element (the popper will be relative to this)
         * @param {Element} fixedPosition - is in fixed position mode
         * @returns {Object} An object containing the offsets which will be applied to the popper
         */

        function getReferenceOffsets(state, popper, reference) {
          var fixedPosition =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : null;
          var commonOffsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, reference);
          return getOffsetRectRelativeToArbitraryNode(
            reference,
            commonOffsetParent,
            fixedPosition
          );
        }
        /**
         * Get the outer sizes of the given element (offset size + margins)
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Object} object containing width and height properties
         */

        function getOuterSizes(element) {
          var window = element.ownerDocument.defaultView;
          var styles = window.getComputedStyle(element);
          var x =
            parseFloat(styles.marginTop || 0) +
            parseFloat(styles.marginBottom || 0);
          var y =
            parseFloat(styles.marginLeft || 0) +
            parseFloat(styles.marginRight || 0);
          var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x
          };
          return result;
        }
        /**
         * Get the opposite placement of the given one
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement
         * @returns {String} flipped placement
         */

        function getOppositePlacement(placement) {
          var hash = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom"
          };
          return placement.replace(/left|right|bottom|top/g, function(matched) {
            return hash[matched];
          });
        }
        /**
         * Get offsets to the popper
         * @method
         * @memberof Popper.Utils
         * @param {Object} position - CSS position the Popper will get applied
         * @param {HTMLElement} popper - the popper element
         * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
         * @param {String} placement - one of the valid placement options
         * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
         */

        function getPopperOffsets(popper, referenceOffsets, placement) {
          placement = placement.split("-")[0]; // Get popper node sizes

          var popperRect = getOuterSizes(popper); // Add position, width and height to our offsets object

          var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height
          }; // depending by the popper placement we have to compute its offsets slightly differently

          var isHoriz = ["right", "left"].indexOf(placement) !== -1;
          var mainSide = isHoriz ? "top" : "left";
          var secondarySide = isHoriz ? "left" : "top";
          var measurement = isHoriz ? "height" : "width";
          var secondaryMeasurement = !isHoriz ? "height" : "width";
          popperOffsets[mainSide] =
            referenceOffsets[mainSide] +
            referenceOffsets[measurement] / 2 -
            popperRect[measurement] / 2;

          if (placement === secondarySide) {
            popperOffsets[secondarySide] =
              referenceOffsets[secondarySide] -
              popperRect[secondaryMeasurement];
          } else {
            popperOffsets[secondarySide] =
              referenceOffsets[getOppositePlacement(secondarySide)];
          }

          return popperOffsets;
        }
        /**
         * Mimics the `find` method of Array
         * @method
         * @memberof Popper.Utils
         * @argument {Array} arr
         * @argument prop
         * @argument value
         * @returns index or -1
         */

        function find(arr, check) {
          // use native find if supported
          if (Array.prototype.find) {
            return arr.find(check);
          } // use `filter` to obtain the same behavior of `find`

          return arr.filter(check)[0];
        }
        /**
         * Return the index of the matching object
         * @method
         * @memberof Popper.Utils
         * @argument {Array} arr
         * @argument prop
         * @argument value
         * @returns index or -1
         */

        function findIndex(arr, prop, value) {
          // use native findIndex if supported
          if (Array.prototype.findIndex) {
            return arr.findIndex(function(cur) {
              return cur[prop] === value;
            });
          } // use `find` + `indexOf` if `findIndex` isn't supported

          var match = find(arr, function(obj) {
            return obj[prop] === value;
          });
          return arr.indexOf(match);
        }
        /**
         * Loop trough the list of modifiers and run them in order,
         * each of them will then edit the data object.
         * @method
         * @memberof Popper.Utils
         * @param {dataObject} data
         * @param {Array} modifiers
         * @param {String} ends - Optional modifier name used as stopper
         * @returns {dataObject}
         */

        function runModifiers(modifiers, data, ends) {
          var modifiersToRun =
            ends === undefined
              ? modifiers
              : modifiers.slice(0, findIndex(modifiers, "name", ends));
          modifiersToRun.forEach(function(modifier) {
            if (modifier["function"]) {
              // eslint-disable-line dot-notation
              console.warn(
                "`modifier.function` is deprecated, use `modifier.fn`!"
              );
            }

            var fn = modifier["function"] || modifier.fn; // eslint-disable-line dot-notation

            if (modifier.enabled && isFunction(fn)) {
              // Add properties to offsets to make them a complete clientRect object
              // we do this before each modifier to make sure the previous one doesn't
              // mess with these values
              data.offsets.popper = getClientRect(data.offsets.popper);
              data.offsets.reference = getClientRect(data.offsets.reference);
              data = fn(data, modifier);
            }
          });
          return data;
        }
        /**
         * Updates the position of the popper, computing the new offsets and applying
         * the new style.<br />
         * Prefer `scheduleUpdate` over `update` because of performance reasons.
         * @method
         * @memberof Popper
         */

        function update() {
          // if popper is destroyed, don't perform any further update
          if (this.state.isDestroyed) {
            return;
          }

          var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {}
          }; // compute reference element offsets

          data.offsets.reference = getReferenceOffsets(
            this.state,
            this.popper,
            this.reference,
            this.options.positionFixed
          ); // compute auto placement, store placement inside the data object,
          // modifiers will be able to edit `placement` if needed
          // and refer to originalPlacement to know the original value

          data.placement = computeAutoPlacement(
            this.options.placement,
            data.offsets.reference,
            this.popper,
            this.reference,
            this.options.modifiers.flip.boundariesElement,
            this.options.modifiers.flip.padding
          ); // store the computed placement inside `originalPlacement`

          data.originalPlacement = data.placement;
          data.positionFixed = this.options.positionFixed; // compute the popper offsets

          data.offsets.popper = getPopperOffsets(
            this.popper,
            data.offsets.reference,
            data.placement
          );
          data.offsets.popper.position = this.options.positionFixed
            ? "fixed"
            : "absolute"; // run the modifiers

          data = runModifiers(this.modifiers, data); // the first `update` will call `onCreate` callback
          // the other ones will call `onUpdate` callback

          if (!this.state.isCreated) {
            this.state.isCreated = true;
            this.options.onCreate(data);
          } else {
            this.options.onUpdate(data);
          }
        }
        /**
         * Helper used to know if the given modifier is enabled.
         * @method
         * @memberof Popper.Utils
         * @returns {Boolean}
         */

        function isModifierEnabled(modifiers, modifierName) {
          return modifiers.some(function(_ref) {
            var name = _ref.name,
              enabled = _ref.enabled;
            return enabled && name === modifierName;
          });
        }
        /**
         * Get the prefixed supported property name
         * @method
         * @memberof Popper.Utils
         * @argument {String} property (camelCase)
         * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
         */

        function getSupportedPropertyName(property) {
          var prefixes = [false, "ms", "Webkit", "Moz", "O"];
          var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

          for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i];
            var toCheck = prefix ? "" + prefix + upperProp : property;

            if (typeof document.body.style[toCheck] !== "undefined") {
              return toCheck;
            }
          }

          return null;
        }
        /**
         * Destroys the popper.
         * @method
         * @memberof Popper
         */

        function destroy() {
          this.state.isDestroyed = true; // touch DOM only if `applyStyle` modifier is enabled

          if (isModifierEnabled(this.modifiers, "applyStyle")) {
            this.popper.removeAttribute("x-placement");
            this.popper.style.position = "";
            this.popper.style.top = "";
            this.popper.style.left = "";
            this.popper.style.right = "";
            this.popper.style.bottom = "";
            this.popper.style.willChange = "";
            this.popper.style[getSupportedPropertyName("transform")] = "";
          }

          this.disableEventListeners(); // remove the popper if user explicity asked for the deletion on destroy
          // do not use `remove` because IE11 doesn't support it

          if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper);
          }

          return this;
        }
        /**
         * Get the window associated with the element
         * @argument {Element} element
         * @returns {Window}
         */

        function getWindow(element) {
          var ownerDocument = element.ownerDocument;
          return ownerDocument ? ownerDocument.defaultView : window;
        }

        function attachToScrollParents(
          scrollParent,
          event,
          callback,
          scrollParents
        ) {
          var isBody = scrollParent.nodeName === "BODY";
          var target = isBody
            ? scrollParent.ownerDocument.defaultView
            : scrollParent;
          target.addEventListener(event, callback, {
            passive: true
          });

          if (!isBody) {
            attachToScrollParents(
              getScrollParent(target.parentNode),
              event,
              callback,
              scrollParents
            );
          }

          scrollParents.push(target);
        }
        /**
         * Setup needed event listeners used to update the popper position
         * @method
         * @memberof Popper.Utils
         * @private
         */

        function setupEventListeners(reference, options, state, updateBound) {
          // Resize event listener on window
          state.updateBound = updateBound;
          getWindow(reference).addEventListener("resize", state.updateBound, {
            passive: true
          }); // Scroll event listener on scroll parents

          var scrollElement = getScrollParent(reference);
          attachToScrollParents(
            scrollElement,
            "scroll",
            state.updateBound,
            state.scrollParents
          );
          state.scrollElement = scrollElement;
          state.eventsEnabled = true;
          return state;
        }
        /**
         * It will add resize/scroll events and start recalculating
         * position of the popper element when they are triggered.
         * @method
         * @memberof Popper
         */

        function enableEventListeners() {
          if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(
              this.reference,
              this.options,
              this.state,
              this.scheduleUpdate
            );
          }
        }
        /**
         * Remove event listeners used to update the popper position
         * @method
         * @memberof Popper.Utils
         * @private
         */

        function removeEventListeners(reference, state) {
          // Remove resize event listener on window
          getWindow(reference).removeEventListener("resize", state.updateBound); // Remove scroll event listener on scroll parents

          state.scrollParents.forEach(function(target) {
            target.removeEventListener("scroll", state.updateBound);
          }); // Reset state

          state.updateBound = null;
          state.scrollParents = [];
          state.scrollElement = null;
          state.eventsEnabled = false;
          return state;
        }
        /**
         * It will remove resize/scroll events and won't recalculate popper position
         * when they are triggered. It also won't trigger `onUpdate` callback anymore,
         * unless you call `update` method manually.
         * @method
         * @memberof Popper
         */

        function disableEventListeners() {
          if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate);
            this.state = removeEventListeners(this.reference, this.state);
          }
        }
        /**
         * Tells if a given input is a number
         * @method
         * @memberof Popper.Utils
         * @param {*} input to check
         * @return {Boolean}
         */

        function isNumeric(n) {
          return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
        }
        /**
         * Set the style to the given popper
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element - Element to apply the style to
         * @argument {Object} styles
         * Object with a list of properties and values which will be applied to the element
         */

        function setStyles(element, styles) {
          Object.keys(styles).forEach(function(prop) {
            var unit = ""; // add unit if the value is numeric and is one of the following

            if (
              ["width", "height", "top", "right", "bottom", "left"].indexOf(
                prop
              ) !== -1 &&
              isNumeric(styles[prop])
            ) {
              unit = "px";
            }

            element.style[prop] = styles[prop] + unit;
          });
        }
        /**
         * Set the attributes to the given popper
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element - Element to apply the attributes to
         * @argument {Object} styles
         * Object with a list of properties and values which will be applied to the element
         */

        function setAttributes(element, attributes) {
          Object.keys(attributes).forEach(function(prop) {
            var value = attributes[prop];

            if (value !== false) {
              element.setAttribute(prop, attributes[prop]);
            } else {
              element.removeAttribute(prop);
            }
          });
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} data.styles - List of style properties - values to apply to popper element
         * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The same data object
         */

        function applyStyle(data) {
          // any property present in `data.styles` will be applied to the popper,
          // in this way we can make the 3rd party modifiers add custom styles to it
          // Be aware, modifiers could override the properties defined in the previous
          // lines of this modifier!
          setStyles(data.instance.popper, data.styles); // any property present in `data.attributes` will be applied to the popper,
          // they will be set as HTML attributes of the element

          setAttributes(data.instance.popper, data.attributes); // if arrowElement is defined and arrowStyles has some properties

          if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles);
          }

          return data;
        }
        /**
         * Set the x-placement attribute before everything else because it could be used
         * to add margins to the popper margins needs to be calculated to get the
         * correct popper offsets.
         * @method
         * @memberof Popper.modifiers
         * @param {HTMLElement} reference - The reference element used to position the popper
         * @param {HTMLElement} popper - The HTML element used as popper
         * @param {Object} options - Popper.js options
         */

        function applyStyleOnLoad(
          reference,
          popper,
          options,
          modifierOptions,
          state
        ) {
          // compute reference element offsets
          var referenceOffsets = getReferenceOffsets(
            state,
            popper,
            reference,
            options.positionFixed
          ); // compute auto placement, store placement inside the data object,
          // modifiers will be able to edit `placement` if needed
          // and refer to originalPlacement to know the original value

          var placement = computeAutoPlacement(
            options.placement,
            referenceOffsets,
            popper,
            reference,
            options.modifiers.flip.boundariesElement,
            options.modifiers.flip.padding
          );
          popper.setAttribute("x-placement", placement); // Apply `position` to popper before anything else because
          // without the position applied we can't guarantee correct computations

          setStyles(popper, {
            position: options.positionFixed ? "fixed" : "absolute"
          });
          return options;
        }
        /**
         * @function
         * @memberof Popper.Utils
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Boolean} shouldRound - If the offsets should be rounded at all
         * @returns {Object} The popper's position offsets rounded
         *
         * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
         * good as it can be within reason.
         * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
         *
         * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
         * as well on High DPI screens).
         *
         * Firefox prefers no rounding for positioning and does not have blurriness on
         * high DPI screens.
         *
         * Only horizontal placement and left/right values need to be considered.
         */

        function getRoundedOffsets(data, shouldRound) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;
          var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
          var isVariation = data.placement.indexOf("-") !== -1;
          var sameWidthOddness = reference.width % 2 === popper.width % 2;
          var bothOddWidth =
            reference.width % 2 === 1 && popper.width % 2 === 1;

          var noRound = function noRound(v) {
            return v;
          };

          var horizontalToInteger = !shouldRound
            ? noRound
            : isVertical || isVariation || sameWidthOddness
            ? Math.round
            : Math.floor;
          var verticalToInteger = !shouldRound ? noRound : Math.round;
          return {
            left: horizontalToInteger(
              bothOddWidth && !isVariation && shouldRound
                ? popper.left - 1
                : popper.left
            ),
            top: verticalToInteger(popper.top),
            bottom: verticalToInteger(popper.bottom),
            right: horizontalToInteger(popper.right)
          };
        }

        var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function computeStyle(data, options) {
          var x = options.x,
            y = options.y;
          var popper = data.offsets.popper; // Remove this legacy support in Popper.js v2

          var legacyGpuAccelerationOption = find(
            data.instance.modifiers,
            function(modifier) {
              return modifier.name === "applyStyle";
            }
          ).gpuAcceleration;

          if (legacyGpuAccelerationOption !== undefined) {
            console.warn(
              "WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!"
            );
          }

          var gpuAcceleration =
            legacyGpuAccelerationOption !== undefined
              ? legacyGpuAccelerationOption
              : options.gpuAcceleration;
          var offsetParent = getOffsetParent(data.instance.popper);
          var offsetParentRect = getBoundingClientRect(offsetParent); // Styles

          var styles = {
            position: popper.position
          };
          var offsets = getRoundedOffsets(
            data,
            window.devicePixelRatio < 2 || !isFirefox
          );
          var sideA = x === "bottom" ? "top" : "bottom";
          var sideB = y === "right" ? "left" : "right"; // if gpuAcceleration is set to `true` and transform is supported,
          //  we use `translate3d` to apply the position to the popper we
          // automatically use the supported prefixed version if needed

          var prefixedProperty = getSupportedPropertyName("transform"); // now, let's make a step back and look at this code closely (wtf?)
          // If the content of the popper grows once it's been positioned, it
          // may happen that the popper gets misplaced because of the new content
          // overflowing its reference element
          // To avoid this problem, we provide two options (x and y), which allow
          // the consumer to define the offset origin.
          // If we position a popper on top of a reference element, we can set
          // `x` to `top` to make the popper grow towards its top instead of
          // its bottom.

          var left = void 0,
            top = void 0;

          if (sideA === "bottom") {
            // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
            // and not the bottom of the html element
            if (offsetParent.nodeName === "HTML") {
              top = -offsetParent.clientHeight + offsets.bottom;
            } else {
              top = -offsetParentRect.height + offsets.bottom;
            }
          } else {
            top = offsets.top;
          }

          if (sideB === "right") {
            if (offsetParent.nodeName === "HTML") {
              left = -offsetParent.clientWidth + offsets.right;
            } else {
              left = -offsetParentRect.width + offsets.right;
            }
          } else {
            left = offsets.left;
          }

          if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] =
              "translate3d(" + left + "px, " + top + "px, 0)";
            styles[sideA] = 0;
            styles[sideB] = 0;
            styles.willChange = "transform";
          } else {
            // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
            var invertTop = sideA === "bottom" ? -1 : 1;
            var invertLeft = sideB === "right" ? -1 : 1;
            styles[sideA] = top * invertTop;
            styles[sideB] = left * invertLeft;
            styles.willChange = sideA + ", " + sideB;
          } // Attributes

          var attributes = {
            "x-placement": data.placement
          }; // Update `data` attributes, styles and arrowStyles

          data.attributes = _extends({}, attributes, data.attributes);
          data.styles = _extends({}, styles, data.styles);
          data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
          return data;
        }
        /**
         * Helper used to know if the given modifier depends from another one.<br />
         * It checks if the needed modifier is listed and enabled.
         * @method
         * @memberof Popper.Utils
         * @param {Array} modifiers - list of modifiers
         * @param {String} requestingName - name of requesting modifier
         * @param {String} requestedName - name of requested modifier
         * @returns {Boolean}
         */

        function isModifierRequired(modifiers, requestingName, requestedName) {
          var requesting = find(modifiers, function(_ref) {
            var name = _ref.name;
            return name === requestingName;
          });
          var isRequired =
            !!requesting &&
            modifiers.some(function(modifier) {
              return (
                modifier.name === requestedName &&
                modifier.enabled &&
                modifier.order < requesting.order
              );
            });

          if (!isRequired) {
            var _requesting = "`" + requestingName + "`";

            var requested = "`" + requestedName + "`";
            console.warn(
              requested +
                " modifier is required by " +
                _requesting +
                " modifier in order to work, be sure to include it before " +
                _requesting +
                "!"
            );
          }

          return isRequired;
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function arrow(data, options) {
          var _data$offsets$arrow; // arrow depends on keepTogether in order to work

          if (
            !isModifierRequired(
              data.instance.modifiers,
              "arrow",
              "keepTogether"
            )
          ) {
            return data;
          }

          var arrowElement = options.element; // if arrowElement is a string, suppose it's a CSS selector

          if (typeof arrowElement === "string") {
            arrowElement = data.instance.popper.querySelector(arrowElement); // if arrowElement is not found, don't run the modifier

            if (!arrowElement) {
              return data;
            }
          } else {
            // if the arrowElement isn't a query selector we must check that the
            // provided DOM node is child of its popper node
            if (!data.instance.popper.contains(arrowElement)) {
              console.warn(
                "WARNING: `arrow.element` must be child of its popper element!"
              );
              return data;
            }
          }

          var placement = data.placement.split("-")[0];
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;
          var isVertical = ["left", "right"].indexOf(placement) !== -1;
          var len = isVertical ? "height" : "width";
          var sideCapitalized = isVertical ? "Top" : "Left";
          var side = sideCapitalized.toLowerCase();
          var altSide = isVertical ? "left" : "top";
          var opSide = isVertical ? "bottom" : "right";
          var arrowElementSize = getOuterSizes(arrowElement)[len]; //
          // extends keepTogether behavior making sure the popper and its
          // reference have enough pixels in conjunction
          //
          // top/left side

          if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -=
              popper[side] - (reference[opSide] - arrowElementSize);
          } // bottom/right side

          if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] +=
              reference[side] + arrowElementSize - popper[opSide];
          }

          data.offsets.popper = getClientRect(data.offsets.popper); // compute center of the popper

          var center =
            reference[side] + reference[len] / 2 - arrowElementSize / 2; // Compute the sideValue using the updated popper offsets
          // take popper margin in account because we don't have this info available

          var css = getStyleComputedProperty(data.instance.popper);
          var popperMarginSide = parseFloat(
            css["margin" + sideCapitalized],
            10
          );
          var popperBorderSide = parseFloat(
            css["border" + sideCapitalized + "Width"],
            10
          );
          var sideValue =
            center -
            data.offsets.popper[side] -
            popperMarginSide -
            popperBorderSide; // prevent arrowElement from being placed not contiguously to its popper

          sideValue = Math.max(
            Math.min(popper[len] - arrowElementSize, sideValue),
            0
          );
          data.arrowElement = arrowElement;
          data.offsets.arrow = ((_data$offsets$arrow = {}),
          defineProperty(_data$offsets$arrow, side, Math.round(sideValue)),
          defineProperty(_data$offsets$arrow, altSide, ""),
          _data$offsets$arrow);
          return data;
        }
        /**
         * Get the opposite placement variation of the given one
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement variation
         * @returns {String} flipped placement variation
         */

        function getOppositeVariation(variation) {
          if (variation === "end") {
            return "start";
          } else if (variation === "start") {
            return "end";
          }

          return variation;
        }
        /**
         * List of accepted placements to use as values of the `placement` option.<br />
         * Valid placements are:
         * - `auto`
         * - `top`
         * - `right`
         * - `bottom`
         * - `left`
         *
         * Each placement can have a variation from this list:
         * - `-start`
         * - `-end`
         *
         * Variations are interpreted easily if you think of them as the left to right
         * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
         * is right.<br />
         * Vertically (`left` and `right`), `start` is top and `end` is bottom.
         *
         * Some valid examples are:
         * - `top-end` (on top of reference, right aligned)
         * - `right-start` (on right of reference, top aligned)
         * - `bottom` (on bottom, centered)
         * - `auto-end` (on the side with more space available, alignment depends by placement)
         *
         * @static
         * @type {Array}
         * @enum {String}
         * @readonly
         * @method placements
         * @memberof Popper
         */

        var placements = [
          "auto-start",
          "auto",
          "auto-end",
          "top-start",
          "top",
          "top-end",
          "right-start",
          "right",
          "right-end",
          "bottom-end",
          "bottom",
          "bottom-start",
          "left-end",
          "left",
          "left-start"
        ]; // Get rid of `auto` `auto-start` and `auto-end`

        var validPlacements = placements.slice(3);
        /**
         * Given an initial placement, returns all the subsequent placements
         * clockwise (or counter-clockwise).
         *
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement - A valid placement (it accepts variations)
         * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
         * @returns {Array} placements including their variations
         */

        function clockwise(placement) {
          var counter =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : false;
          var index = validPlacements.indexOf(placement);
          var arr = validPlacements
            .slice(index + 1)
            .concat(validPlacements.slice(0, index));
          return counter ? arr.reverse() : arr;
        }

        var BEHAVIORS = {
          FLIP: "flip",
          CLOCKWISE: "clockwise",
          COUNTERCLOCKWISE: "counterclockwise"
        };
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function flip(data, options) {
          // if `inner` modifier is enabled, we can't use the `flip` modifier
          if (isModifierEnabled(data.instance.modifiers, "inner")) {
            return data;
          }

          if (data.flipped && data.placement === data.originalPlacement) {
            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
            return data;
          }

          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            options.boundariesElement,
            data.positionFixed
          );
          var placement = data.placement.split("-")[0];
          var placementOpposite = getOppositePlacement(placement);
          var variation = data.placement.split("-")[1] || "";
          var flipOrder = [];

          switch (options.behavior) {
            case BEHAVIORS.FLIP:
              flipOrder = [placement, placementOpposite];
              break;

            case BEHAVIORS.CLOCKWISE:
              flipOrder = clockwise(placement);
              break;

            case BEHAVIORS.COUNTERCLOCKWISE:
              flipOrder = clockwise(placement, true);
              break;

            default:
              flipOrder = options.behavior;
          }

          flipOrder.forEach(function(step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
              return data;
            }

            placement = data.placement.split("-")[0];
            placementOpposite = getOppositePlacement(placement);
            var popperOffsets = data.offsets.popper;
            var refOffsets = data.offsets.reference; // using floor because the reference offsets may contain decimals we are not going to consider here

            var floor = Math.floor;
            var overlapsRef =
              (placement === "left" &&
                floor(popperOffsets.right) > floor(refOffsets.left)) ||
              (placement === "right" &&
                floor(popperOffsets.left) < floor(refOffsets.right)) ||
              (placement === "top" &&
                floor(popperOffsets.bottom) > floor(refOffsets.top)) ||
              (placement === "bottom" &&
                floor(popperOffsets.top) < floor(refOffsets.bottom));
            var overflowsLeft =
              floor(popperOffsets.left) < floor(boundaries.left);
            var overflowsRight =
              floor(popperOffsets.right) > floor(boundaries.right);
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
            var overflowsBottom =
              floor(popperOffsets.bottom) > floor(boundaries.bottom);
            var overflowsBoundaries =
              (placement === "left" && overflowsLeft) ||
              (placement === "right" && overflowsRight) ||
              (placement === "top" && overflowsTop) ||
              (placement === "bottom" && overflowsBottom); // flip the variation if required

            var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
            var flippedVariation =
              !!options.flipVariations &&
              ((isVertical && variation === "start" && overflowsLeft) ||
                (isVertical && variation === "end" && overflowsRight) ||
                (!isVertical && variation === "start" && overflowsTop) ||
                (!isVertical && variation === "end" && overflowsBottom));

            if (overlapsRef || overflowsBoundaries || flippedVariation) {
              // this boolean to detect any flip loop
              data.flipped = true;

              if (overlapsRef || overflowsBoundaries) {
                placement = flipOrder[index + 1];
              }

              if (flippedVariation) {
                variation = getOppositeVariation(variation);
              }

              data.placement = placement + (variation ? "-" + variation : ""); // this object contains `position`, we want to preserve it along with
              // any additional property we may add in the future

              data.offsets.popper = _extends(
                {},
                data.offsets.popper,
                getPopperOffsets(
                  data.instance.popper,
                  data.offsets.reference,
                  data.placement
                )
              );
              data = runModifiers(data.instance.modifiers, data, "flip");
            }
          });
          return data;
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function keepTogether(data) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;
          var placement = data.placement.split("-")[0];
          var floor = Math.floor;
          var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
          var side = isVertical ? "right" : "bottom";
          var opSide = isVertical ? "left" : "top";
          var measurement = isVertical ? "width" : "height";

          if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] =
              floor(reference[opSide]) - popper[measurement];
          }

          if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side]);
          }

          return data;
        }
        /**
         * Converts a string containing value + unit into a px value number
         * @function
         * @memberof {modifiers~offset}
         * @private
         * @argument {String} str - Value + unit string
         * @argument {String} measurement - `height` or `width`
         * @argument {Object} popperOffsets
         * @argument {Object} referenceOffsets
         * @returns {Number|String}
         * Value in pixels, or original string if no values were extracted
         */

        function toValue(str, measurement, popperOffsets, referenceOffsets) {
          // separate value from unit
          var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
          var value = +split[1];
          var unit = split[2]; // If it's not a number it's an operator, I guess

          if (!value) {
            return str;
          }

          if (unit.indexOf("%") === 0) {
            var element = void 0;

            switch (unit) {
              case "%p":
                element = popperOffsets;
                break;

              case "%":
              case "%r":
              default:
                element = referenceOffsets;
            }

            var rect = getClientRect(element);
            return (rect[measurement] / 100) * value;
          } else if (unit === "vh" || unit === "vw") {
            // if is a vh or vw, we calculate the size based on the viewport
            var size = void 0;

            if (unit === "vh") {
              size = Math.max(
                document.documentElement.clientHeight,
                window.innerHeight || 0
              );
            } else {
              size = Math.max(
                document.documentElement.clientWidth,
                window.innerWidth || 0
              );
            }

            return (size / 100) * value;
          } else {
            // if is an explicit pixel unit, we get rid of the unit and keep the value
            // if is an implicit unit, it's px, and we return just the value
            return value;
          }
        }
        /**
         * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
         * @function
         * @memberof {modifiers~offset}
         * @private
         * @argument {String} offset
         * @argument {Object} popperOffsets
         * @argument {Object} referenceOffsets
         * @argument {String} basePlacement
         * @returns {Array} a two cells array with x and y offsets in numbers
         */

        function parseOffset(
          offset,
          popperOffsets,
          referenceOffsets,
          basePlacement
        ) {
          var offsets = [0, 0]; // Use height if placement is left or right and index is 0 otherwise use width
          // in this way the first offset will use an axis and the second one
          // will use the other one

          var useHeight = ["right", "left"].indexOf(basePlacement) !== -1; // Split the offset string to obtain a list of values and operands
          // The regex addresses values with the plus or minus sign in front (+10, -20, etc)

          var fragments = offset.split(/(\+|\-)/).map(function(frag) {
            return frag.trim();
          }); // Detect if the offset string contains a pair of values or a single one
          // they could be separated by comma or space

          var divider = fragments.indexOf(
            find(fragments, function(frag) {
              return frag.search(/,|\s/) !== -1;
            })
          );

          if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
            console.warn(
              "Offsets separated by white space(s) are deprecated, use a comma (,) instead."
            );
          } // If divider is found, we divide the list of values and operands to divide
          // them by ofset X and Y.

          var splitRegex = /\s*,\s*|\s+/;
          var ops =
            divider !== -1
              ? [
                  fragments
                    .slice(0, divider)
                    .concat([fragments[divider].split(splitRegex)[0]]),
                  [fragments[divider].split(splitRegex)[1]].concat(
                    fragments.slice(divider + 1)
                  )
                ]
              : [fragments]; // Convert the values with units to absolute pixels to allow our computations

          ops = ops.map(function(op, index) {
            // Most of the units rely on the orientation of the popper
            var measurement = (index === 1
            ? !useHeight
            : useHeight)
              ? "height"
              : "width";
            var mergeWithPrevious = false;
            return (
              op // This aggregates any `+` or `-` sign that aren't considered operators
                // e.g.: 10 + +5 => [10, +, +5]
                .reduce(function(a, b) {
                  if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
                    a[a.length - 1] = b;
                    mergeWithPrevious = true;
                    return a;
                  } else if (mergeWithPrevious) {
                    a[a.length - 1] += b;
                    mergeWithPrevious = false;
                    return a;
                  } else {
                    return a.concat(b);
                  }
                }, []) // Here we convert the string values into number values (in px)
                .map(function(str) {
                  return toValue(
                    str,
                    measurement,
                    popperOffsets,
                    referenceOffsets
                  );
                })
            );
          }); // Loop trough the offsets arrays and execute the operations

          ops.forEach(function(op, index) {
            op.forEach(function(frag, index2) {
              if (isNumeric(frag)) {
                offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
              }
            });
          });
          return offsets;
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @argument {Number|String} options.offset=0
         * The offset value as described in the modifier description
         * @returns {Object} The data object, properly modified
         */

        function offset(data, _ref) {
          var offset = _ref.offset;
          var placement = data.placement,
            _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;
          var basePlacement = placement.split("-")[0];
          var offsets = void 0;

          if (isNumeric(+offset)) {
            offsets = [+offset, 0];
          } else {
            offsets = parseOffset(offset, popper, reference, basePlacement);
          }

          if (basePlacement === "left") {
            popper.top += offsets[0];
            popper.left -= offsets[1];
          } else if (basePlacement === "right") {
            popper.top += offsets[0];
            popper.left += offsets[1];
          } else if (basePlacement === "top") {
            popper.left += offsets[0];
            popper.top -= offsets[1];
          } else if (basePlacement === "bottom") {
            popper.left += offsets[0];
            popper.top += offsets[1];
          }

          data.popper = popper;
          return data;
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function preventOverflow(data, options) {
          var boundariesElement =
            options.boundariesElement || getOffsetParent(data.instance.popper); // If offsetParent is the reference element, we really want to
          // go one step up and use the next offsetParent as reference to
          // avoid to make this modifier completely useless and look like broken

          if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement);
          } // NOTE: DOM access here
          // resets the popper's position so that the document size can be calculated excluding
          // the size of the popper element itself

          var transformProp = getSupportedPropertyName("transform");
          var popperStyles = data.instance.popper.style; // assignment to help minification

          var top = popperStyles.top,
            left = popperStyles.left,
            transform = popperStyles[transformProp];
          popperStyles.top = "";
          popperStyles.left = "";
          popperStyles[transformProp] = "";
          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            boundariesElement,
            data.positionFixed
          ); // NOTE: DOM access here
          // restores the original style properties after the offsets have been computed

          popperStyles.top = top;
          popperStyles.left = left;
          popperStyles[transformProp] = transform;
          options.boundaries = boundaries;
          var order = options.priority;
          var popper = data.offsets.popper;
          var check = {
            primary: function primary(placement) {
              var value = popper[placement];

              if (
                popper[placement] < boundaries[placement] &&
                !options.escapeWithReference
              ) {
                value = Math.max(popper[placement], boundaries[placement]);
              }

              return defineProperty({}, placement, value);
            },
            secondary: function secondary(placement) {
              var mainSide = placement === "right" ? "left" : "top";
              var value = popper[mainSide];

              if (
                popper[placement] > boundaries[placement] &&
                !options.escapeWithReference
              ) {
                value = Math.min(
                  popper[mainSide],
                  boundaries[placement] -
                    (placement === "right" ? popper.width : popper.height)
                );
              }

              return defineProperty({}, mainSide, value);
            }
          };
          order.forEach(function(placement) {
            var side =
              ["left", "top"].indexOf(placement) !== -1
                ? "primary"
                : "secondary";
            popper = _extends({}, popper, check[side](placement));
          });
          data.offsets.popper = popper;
          return data;
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function shift(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var shiftvariation = placement.split("-")[1]; // if shift shiftvariation is specified, run the modifier

          if (shiftvariation) {
            var _data$offsets = data.offsets,
              reference = _data$offsets.reference,
              popper = _data$offsets.popper;
            var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
            var side = isVertical ? "left" : "top";
            var measurement = isVertical ? "width" : "height";
            var shiftOffsets = {
              start: defineProperty({}, side, reference[side]),
              end: defineProperty(
                {},
                side,
                reference[side] + reference[measurement] - popper[measurement]
              )
            };
            data.offsets.popper = _extends(
              {},
              popper,
              shiftOffsets[shiftvariation]
            );
          }

          return data;
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function hide(data) {
          if (
            !isModifierRequired(
              data.instance.modifiers,
              "hide",
              "preventOverflow"
            )
          ) {
            return data;
          }

          var refRect = data.offsets.reference;
          var bound = find(data.instance.modifiers, function(modifier) {
            return modifier.name === "preventOverflow";
          }).boundaries;

          if (
            refRect.bottom < bound.top ||
            refRect.left > bound.right ||
            refRect.top > bound.bottom ||
            refRect.right < bound.left
          ) {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === true) {
              return data;
            }

            data.hide = true;
            data.attributes["x-out-of-boundaries"] = "";
          } else {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === false) {
              return data;
            }

            data.hide = false;
            data.attributes["x-out-of-boundaries"] = false;
          }

          return data;
        }
        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */

        function inner(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;
          var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;
          var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;
          popper[isHoriz ? "left" : "top"] =
            reference[basePlacement] -
            (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);
          data.placement = getOppositePlacement(placement);
          data.offsets.popper = getClientRect(popper);
          return data;
        }
        /**
         * Modifier function, each modifier can have a function of this type assigned
         * to its `fn` property.<br />
         * These functions will be called on each update, this means that you must
         * make sure they are performant enough to avoid performance bottlenecks.
         *
         * @function ModifierFn
         * @argument {dataObject} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {dataObject} The data object, properly modified
         */

        /**
         * Modifiers are plugins used to alter the behavior of your poppers.<br />
         * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
         * needed by the library.
         *
         * Usually you don't want to override the `order`, `fn` and `onLoad` props.
         * All the other properties are configurations that could be tweaked.
         * @namespace modifiers
         */

        var modifiers = {
          /**
           * Modifier used to shift the popper on the start or end of its reference
           * element.<br />
           * It will read the variation of the `placement` property.<br />
           * It can be one either `-end` or `-start`.
           * @memberof modifiers
           * @inner
           */
          shift: {
            /** @prop {number} order=100 - Index used to define the order of execution */
            order: 100,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: shift
          },

          /**
           * The `offset` modifier can shift your popper on both its axis.
           *
           * It accepts the following units:
           * - `px` or unit-less, interpreted as pixels
           * - `%` or `%r`, percentage relative to the length of the reference element
           * - `%p`, percentage relative to the length of the popper element
           * - `vw`, CSS viewport width unit
           * - `vh`, CSS viewport height unit
           *
           * For length is intended the main axis relative to the placement of the popper.<br />
           * This means that if the placement is `top` or `bottom`, the length will be the
           * `width`. In case of `left` or `right`, it will be the `height`.
           *
           * You can provide a single value (as `Number` or `String`), or a pair of values
           * as `String` divided by a comma or one (or more) white spaces.<br />
           * The latter is a deprecated method because it leads to confusion and will be
           * removed in v2.<br />
           * Additionally, it accepts additions and subtractions between different units.
           * Note that multiplications and divisions aren't supported.
           *
           * Valid examples are:
           * ```
           * 10
           * '10%'
           * '10, 10'
           * '10%, 10'
           * '10 + 10%'
           * '10 - 5vh + 3%'
           * '-10px + 5vh, 5px - 6%'
           * ```
           * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
           * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
           * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
           *
           * @memberof modifiers
           * @inner
           */
          offset: {
            /** @prop {number} order=200 - Index used to define the order of execution */
            order: 200,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: offset,

            /** @prop {Number|String} offset=0
             * The offset value as described in the modifier description
             */
            offset: 0
          },

          /**
           * Modifier used to prevent the popper from being positioned outside the boundary.
           *
           * A scenario exists where the reference itself is not within the boundaries.<br />
           * We can say it has "escaped the boundaries" — or just "escaped".<br />
           * In this case we need to decide whether the popper should either:
           *
           * - detach from the reference and remain "trapped" in the boundaries, or
           * - if it should ignore the boundary and "escape with its reference"
           *
           * When `escapeWithReference` is set to`true` and reference is completely
           * outside its boundaries, the popper will overflow (or completely leave)
           * the boundaries in order to remain attached to the edge of the reference.
           *
           * @memberof modifiers
           * @inner
           */
          preventOverflow: {
            /** @prop {number} order=300 - Index used to define the order of execution */
            order: 300,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: preventOverflow,

            /**
             * @prop {Array} [priority=['left','right','top','bottom']]
             * Popper will try to prevent overflow following these priorities by default,
             * then, it could overflow on the left and on top of the `boundariesElement`
             */
            priority: ["left", "right", "top", "bottom"],

            /**
             * @prop {number} padding=5
             * Amount of pixel used to define a minimum distance between the boundaries
             * and the popper. This makes sure the popper always has a little padding
             * between the edges of its container
             */
            padding: 5,

            /**
             * @prop {String|HTMLElement} boundariesElement='scrollParent'
             * Boundaries used by the modifier. Can be `scrollParent`, `window`,
             * `viewport` or any DOM element.
             */
            boundariesElement: "scrollParent"
          },

          /**
           * Modifier used to make sure the reference and its popper stay near each other
           * without leaving any gap between the two. Especially useful when the arrow is
           * enabled and you want to ensure that it points to its reference element.
           * It cares only about the first axis. You can still have poppers with margin
           * between the popper and its reference element.
           * @memberof modifiers
           * @inner
           */
          keepTogether: {
            /** @prop {number} order=400 - Index used to define the order of execution */
            order: 400,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: keepTogether
          },

          /**
           * This modifier is used to move the `arrowElement` of the popper to make
           * sure it is positioned between the reference element and its popper element.
           * It will read the outer size of the `arrowElement` node to detect how many
           * pixels of conjunction are needed.
           *
           * It has no effect if no `arrowElement` is provided.
           * @memberof modifiers
           * @inner
           */
          arrow: {
            /** @prop {number} order=500 - Index used to define the order of execution */
            order: 500,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: arrow,

            /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
            element: "[x-arrow]"
          },

          /**
           * Modifier used to flip the popper's placement when it starts to overlap its
           * reference element.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           *
           * **NOTE:** this modifier will interrupt the current update cycle and will
           * restart it if it detects the need to flip the placement.
           * @memberof modifiers
           * @inner
           */
          flip: {
            /** @prop {number} order=600 - Index used to define the order of execution */
            order: 600,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: flip,

            /**
             * @prop {String|Array} behavior='flip'
             * The behavior used to change the popper's placement. It can be one of
             * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
             * placements (with optional variations)
             */
            behavior: "flip",

            /**
             * @prop {number} padding=5
             * The popper will flip if it hits the edges of the `boundariesElement`
             */
            padding: 5,

            /**
             * @prop {String|HTMLElement} boundariesElement='viewport'
             * The element which will define the boundaries of the popper position.
             * The popper will never be placed outside of the defined boundaries
             * (except if `keepTogether` is enabled)
             */
            boundariesElement: "viewport"
          },

          /**
           * Modifier used to make the popper flow toward the inner of the reference element.
           * By default, when this modifier is disabled, the popper will be placed outside
           * the reference element.
           * @memberof modifiers
           * @inner
           */
          inner: {
            /** @prop {number} order=700 - Index used to define the order of execution */
            order: 700,

            /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
            enabled: false,

            /** @prop {ModifierFn} */
            fn: inner
          },

          /**
           * Modifier used to hide the popper when its reference element is outside of the
           * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
           * be used to hide with a CSS selector the popper when its reference is
           * out of boundaries.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           * @memberof modifiers
           * @inner
           */
          hide: {
            /** @prop {number} order=800 - Index used to define the order of execution */
            order: 800,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: hide
          },

          /**
           * Computes the style that will be applied to the popper element to gets
           * properly positioned.
           *
           * Note that this modifier will not touch the DOM, it just prepares the styles
           * so that `applyStyle` modifier can apply it. This separation is useful
           * in case you need to replace `applyStyle` with a custom implementation.
           *
           * This modifier has `850` as `order` value to maintain backward compatibility
           * with previous versions of Popper.js. Expect the modifiers ordering method
           * to change in future major versions of the library.
           *
           * @memberof modifiers
           * @inner
           */
          computeStyle: {
            /** @prop {number} order=850 - Index used to define the order of execution */
            order: 850,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: computeStyle,

            /**
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: true,

            /**
             * @prop {string} [x='bottom']
             * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
             * Change this if your popper should grow in a direction different from `bottom`
             */
            x: "bottom",

            /**
             * @prop {string} [x='left']
             * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
             * Change this if your popper should grow in a direction different from `right`
             */
            y: "right"
          },

          /**
           * Applies the computed styles to the popper element.
           *
           * All the DOM manipulations are limited to this modifier. This is useful in case
           * you want to integrate Popper.js inside a framework or view library and you
           * want to delegate all the DOM manipulations to it.
           *
           * Note that if you disable this modifier, you must make sure the popper element
           * has its position set to `absolute` before Popper.js can do its work!
           *
           * Just disable this modifier and define your own to achieve the desired effect.
           *
           * @memberof modifiers
           * @inner
           */
          applyStyle: {
            /** @prop {number} order=900 - Index used to define the order of execution */
            order: 900,

            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,

            /** @prop {ModifierFn} */
            fn: applyStyle,

            /** @prop {Function} */
            onLoad: applyStyleOnLoad,

            /**
             * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: undefined
          }
        };
        /**
         * The `dataObject` is an object containing all the information used by Popper.js.
         * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
         * @name dataObject
         * @property {Object} data.instance The Popper.js instance
         * @property {String} data.placement Placement applied to popper
         * @property {String} data.originalPlacement Placement originally defined on init
         * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
         * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
         * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
         * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
         * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
         * @property {Object} data.boundaries Offsets of the popper boundaries
         * @property {Object} data.offsets The measurements of popper, reference and arrow elements
         * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
         * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
         * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
         */

        /**
         * Default options provided to Popper.js constructor.<br />
         * These can be overridden using the `options` argument of Popper.js.<br />
         * To override an option, simply pass an object with the same
         * structure of the `options` object, as the 3rd argument. For example:
         * ```
         * new Popper(ref, pop, {
         *   modifiers: {
         *     preventOverflow: { enabled: false }
         *   }
         * })
         * ```
         * @type {Object}
         * @static
         * @memberof Popper
         */

        var Defaults = {
          /**
           * Popper's placement.
           * @prop {Popper.placements} placement='bottom'
           */
          placement: "bottom",

          /**
           * Set this to true if you want popper to position it self in 'fixed' mode
           * @prop {Boolean} positionFixed=false
           */
          positionFixed: false,

          /**
           * Whether events (resize, scroll) are initially enabled.
           * @prop {Boolean} eventsEnabled=true
           */
          eventsEnabled: true,

          /**
           * Set to true if you want to automatically remove the popper when
           * you call the `destroy` method.
           * @prop {Boolean} removeOnDestroy=false
           */
          removeOnDestroy: false,

          /**
           * Callback called when the popper is created.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onCreate}
           */
          onCreate: function onCreate() {},

          /**
           * Callback called when the popper is updated. This callback is not called
           * on the initialization/creation of the popper, but only on subsequent
           * updates.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onUpdate}
           */
          onUpdate: function onUpdate() {},

          /**
           * List of modifiers used to modify the offsets before they are applied to the popper.
           * They provide most of the functionalities of Popper.js.
           * @prop {modifiers}
           */
          modifiers: modifiers
        };
        /**
         * @callback onCreate
         * @param {dataObject} data
         */

        /**
         * @callback onUpdate
         * @param {dataObject} data
         */
        // Utils
        // Methods

        var Popper = (function() {
          /**
           * Creates a new Popper.js instance.
           * @class Popper
           * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
           * @param {HTMLElement} popper - The HTML element used as the popper
           * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
           * @return {Object} instance - The generated Popper.js instance
           */
          function Popper(reference, popper) {
            var _this = this;

            var options =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : {};
            classCallCheck(this, Popper);

            this.scheduleUpdate = function() {
              return requestAnimationFrame(_this.update);
            }; // make update() debounced, so that it only runs at most once-per-tick

            this.update = debounce(this.update.bind(this)); // with {} we create a new object with the options inside it

            this.options = _extends({}, Popper.Defaults, options); // init state

            this.state = {
              isDestroyed: false,
              isCreated: false,
              scrollParents: []
            }; // get reference and popper elements (allow jQuery wrappers)

            this.reference =
              reference && reference.jquery ? reference[0] : reference;
            this.popper = popper && popper.jquery ? popper[0] : popper; // Deep merge modifiers options

            this.options.modifiers = {};
            Object.keys(
              _extends({}, Popper.Defaults.modifiers, options.modifiers)
            ).forEach(function(name) {
              _this.options.modifiers[name] = _extends(
                {},
                Popper.Defaults.modifiers[name] || {},
                options.modifiers ? options.modifiers[name] : {}
              );
            }); // Refactoring modifiers' list (Object => Array)

            this.modifiers = Object.keys(this.options.modifiers)
              .map(function(name) {
                return _extends(
                  {
                    name: name
                  },
                  _this.options.modifiers[name]
                );
              }) // sort the modifiers by order
              .sort(function(a, b) {
                return a.order - b.order;
              }); // modifiers have the ability to execute arbitrary code when Popper.js get inited
            // such code is executed in the same order of its modifier
            // they could add new properties to their options configuration
            // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

            this.modifiers.forEach(function(modifierOptions) {
              if (
                modifierOptions.enabled &&
                isFunction(modifierOptions.onLoad)
              ) {
                modifierOptions.onLoad(
                  _this.reference,
                  _this.popper,
                  _this.options,
                  modifierOptions,
                  _this.state
                );
              }
            }); // fire the first update to position the popper in the right place

            this.update();
            var eventsEnabled = this.options.eventsEnabled;

            if (eventsEnabled) {
              // setup event listeners, they will take care of update the position in specific situations
              this.enableEventListeners();
            }

            this.state.eventsEnabled = eventsEnabled;
          } // We can't use class properties because they don't get listed in the
          // class prototype and break stuff like Sinon stubs

          createClass(Popper, [
            {
              key: "update",
              value: function update$$1() {
                return update.call(this);
              }
            },
            {
              key: "destroy",
              value: function destroy$$1() {
                return destroy.call(this);
              }
            },
            {
              key: "enableEventListeners",
              value: function enableEventListeners$$1() {
                return enableEventListeners.call(this);
              }
            },
            {
              key: "disableEventListeners",
              value: function disableEventListeners$$1() {
                return disableEventListeners.call(this);
              }
              /**
               * Schedules an update. It will run on the next UI update available.
               * @method scheduleUpdate
               * @memberof Popper
               */

              /**
               * Collection of utilities useful when writing custom modifiers.
               * Starting from version 1.7, this method is available only if you
               * include `popper-utils.js` before `popper.js`.
               *
               * **DEPRECATION**: This way to access PopperUtils is deprecated
               * and will be removed in v2! Use the PopperUtils module directly instead.
               * Due to the high instability of the methods contained in Utils, we can't
               * guarantee them to follow semver. Use them at your own risk!
               * @static
               * @private
               * @type {Object}
               * @deprecated since version 1.8
               * @member Utils
               * @memberof Popper
               */
            }
          ]);
          return Popper;
        })();
        /**
         * The `referenceObject` is an object that provides an interface compatible with Popper.js
         * and lets you use it as replacement of a real DOM node.<br />
         * You can use this method to position a popper relatively to a set of coordinates
         * in case you don't have a DOM node to use as reference.
         *
         * ```
         * new Popper(referenceObject, popperNode);
         * ```
         *
         * NB: This feature isn't supported in Internet Explorer 10.
         * @name referenceObject
         * @property {Function} data.getBoundingClientRect
         * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
         * @property {number} data.clientWidth
         * An ES6 getter that will return the width of the virtual reference element.
         * @property {number} data.clientHeight
         * An ES6 getter that will return the height of the virtual reference element.
         */

        Popper.Utils = (typeof window !== "undefined"
          ? window
          : global
        ).PopperUtils;
        Popper.placements = placements;
        Popper.Defaults = Defaults;
        var _default = Popper;
        exports.default = _default;
      },
      {}
    ],
    "../node_modules/react-popper/lib/Popper.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.placements = void 0;

        var _react = require("react");

        var _propTypes = _interopRequireDefault(require("prop-types"));

        var _popper = _interopRequireDefault(require("popper.js"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        var _createClass = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        function _objectWithoutProperties(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return call &&
            (typeof call === "object" || typeof call === "function")
            ? call
            : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                typeof superClass
            );
          }

          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        }

        var placements = _popper.default.placements;
        exports.placements = placements;

        var Popper = (function(_Component) {
          _inherits(Popper, _Component);

          function Popper() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, Popper);

            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            return (
              (_ret = ((_temp = ((_this = _possibleConstructorReturn(
                this,
                (_ref =
                  Popper.__proto__ || Object.getPrototypeOf(Popper)).call.apply(
                  _ref,
                  [this].concat(args)
                )
              )),
              _this)),
              (_this.state = {}),
              (_this._setArrowNode = function(node) {
                _this._arrowNode = node;
              }),
              (_this._getTargetNode = function() {
                if (_this.props.target) {
                  return _this.props.target;
                } else if (
                  !_this.context.popperManager ||
                  !_this.context.popperManager.getTargetNode()
                ) {
                  throw new Error(
                    "Target missing. Popper must be given a target from the Popper Manager, or as a prop."
                  );
                }

                return _this.context.popperManager.getTargetNode();
              }),
              (_this._getOffsets = function(data) {
                return Object.keys(data.offsets).map(function(key) {
                  return data.offsets[key];
                });
              }),
              (_this._isDataDirty = function(data) {
                if (_this.state.data) {
                  return (
                    JSON.stringify(_this._getOffsets(_this.state.data)) !==
                    JSON.stringify(_this._getOffsets(data))
                  );
                } else {
                  return true;
                }
              }),
              (_this._updateStateModifier = {
                enabled: true,
                order: 900,
                fn: function fn(data) {
                  if (_this._isDataDirty(data)) {
                    _this.setState({
                      data: data
                    });
                  }

                  return data;
                }
              }),
              (_this._getPopperStyle = function() {
                var data = _this.state.data;

                if (!_this._popper || !data) {
                  return {
                    position: "absolute",
                    pointerEvents: "none",
                    opacity: 0
                  };
                }

                return _extends(
                  {
                    position: data.offsets.popper.position
                  },
                  data.styles
                );
              }),
              (_this._getPopperPlacement = function() {
                return _this.state.data
                  ? _this.state.data.placement
                  : undefined;
              }),
              (_this._getPopperHide = function() {
                return !!_this.state.data && _this.state.data.hide
                  ? ""
                  : undefined;
              }),
              (_this._getArrowStyle = function() {
                if (!_this.state.data || !_this.state.data.offsets.arrow) {
                  return {};
                } else {
                  var _this$state$data$offs = _this.state.data.offsets.arrow,
                    top = _this$state$data$offs.top,
                    left = _this$state$data$offs.left;
                  return {
                    top: top,
                    left: left
                  };
                }
              }),
              (_this._handlePopperRef = function(node) {
                _this._popperNode = node;

                if (node) {
                  _this._createPopper();
                } else {
                  _this._destroyPopper();
                }

                if (_this.props.innerRef) {
                  _this.props.innerRef(node);
                }
              }),
              (_this._scheduleUpdate = function() {
                _this._popper && _this._popper.scheduleUpdate();
              }),
              _temp)),
              _possibleConstructorReturn(_this, _ret)
            );
          }

          _createClass(Popper, [
            {
              key: "getChildContext",
              value: function getChildContext() {
                return {
                  popper: {
                    setArrowNode: this._setArrowNode,
                    getArrowStyle: this._getArrowStyle
                  }
                };
              }
            },
            {
              key: "componentDidUpdate",
              value: function componentDidUpdate(lastProps) {
                if (
                  lastProps.placement !== this.props.placement ||
                  lastProps.eventsEnabled !== this.props.eventsEnabled ||
                  lastProps.target !== this.props.target
                ) {
                  this._destroyPopper();

                  this._createPopper();
                }

                if (lastProps.children !== this.props.children) {
                  this._scheduleUpdate();
                }
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                this._destroyPopper();
              }
            },
            {
              key: "_createPopper",
              value: function _createPopper() {
                var _this2 = this;

                var _props = this.props,
                  placement = _props.placement,
                  eventsEnabled = _props.eventsEnabled,
                  positionFixed = _props.positionFixed;

                var modifiers = _extends({}, this.props.modifiers, {
                  applyStyle: {
                    enabled: false
                  },
                  updateState: this._updateStateModifier
                });

                if (this._arrowNode) {
                  modifiers.arrow = _extends(
                    {},
                    this.props.modifiers.arrow || {},
                    {
                      element: this._arrowNode
                    }
                  );
                }

                this._popper = new _popper.default(
                  this._getTargetNode(),
                  this._popperNode,
                  {
                    placement: placement,
                    positionFixed: positionFixed,
                    eventsEnabled: eventsEnabled,
                    modifiers: modifiers
                  }
                ); // TODO: look into setTimeout scheduleUpdate call, without it, the popper will not position properly on creation

                setTimeout(function() {
                  return _this2._scheduleUpdate();
                });
              }
            },
            {
              key: "_destroyPopper",
              value: function _destroyPopper() {
                if (this._popper) {
                  this._popper.destroy();
                }
              }
            },
            {
              key: "render",
              value: function render() {
                var _props2 = this.props,
                  component = _props2.component,
                  innerRef = _props2.innerRef,
                  placement = _props2.placement,
                  eventsEnabled = _props2.eventsEnabled,
                  positionFixed = _props2.positionFixed,
                  modifiers = _props2.modifiers,
                  children = _props2.children,
                  restProps = _objectWithoutProperties(_props2, [
                    "component",
                    "innerRef",
                    "placement",
                    "eventsEnabled",
                    "positionFixed",
                    "modifiers",
                    "children"
                  ]);

                var popperStyle = this._getPopperStyle();

                var popperPlacement = this._getPopperPlacement();

                var popperHide = this._getPopperHide();

                if (typeof children === "function") {
                  var popperProps = {
                    ref: this._handlePopperRef,
                    style: popperStyle,
                    "data-placement": popperPlacement,
                    "data-x-out-of-boundaries": popperHide
                  };
                  return children({
                    popperProps: popperProps,
                    restProps: restProps,
                    scheduleUpdate: this._scheduleUpdate
                  });
                }

                var componentProps = _extends({}, restProps, {
                  style: _extends({}, restProps.style, popperStyle),
                  "data-placement": popperPlacement,
                  "data-x-out-of-boundaries": popperHide
                });

                if (typeof component === "string") {
                  componentProps.ref = this._handlePopperRef;
                } else {
                  componentProps.innerRef = this._handlePopperRef;
                }

                return (0, _react.createElement)(
                  component,
                  componentProps,
                  children
                );
              }
            }
          ]);

          return Popper;
        })(_react.Component);

        Popper.contextTypes = {
          popperManager: _propTypes.default.object
        };
        Popper.childContextTypes = {
          popper: _propTypes.default.object.isRequired
        };
        Popper.propTypes = {
          component: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.func
          ]),
          innerRef: _propTypes.default.func,
          placement: _propTypes.default.oneOf(placements),
          eventsEnabled: _propTypes.default.bool,
          positionFixed: _propTypes.default.bool,
          modifiers: _propTypes.default.object,
          children: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.func
          ]),
          target: _propTypes.default.oneOfType([
            // the following check is needed for SSR
            _propTypes.default.instanceOf(
              typeof Element !== "undefined" ? Element : Object
            ),
            _propTypes.default.shape({
              getBoundingClientRect: _propTypes.default.func.isRequired,
              clientWidth: _propTypes.default.number.isRequired,
              clientHeight: _propTypes.default.number.isRequired
            })
          ])
        };
        Popper.defaultProps = {
          component: "div",
          placement: "bottom",
          eventsEnabled: true,
          positionFixed: false,
          modifiers: {}
        };
        var _default = Popper;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        "popper.js": "../node_modules/popper.js/dist/esm/popper.js"
      }
    ],
    "../node_modules/react-popper/lib/Arrow.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = require("react");

        var _propTypes = _interopRequireDefault(require("prop-types"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        function _objectWithoutProperties(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        }

        var Arrow = function Arrow(props, context) {
          var _props$component = props.component,
            component =
              _props$component === undefined ? "span" : _props$component,
            innerRef = props.innerRef,
            children = props.children,
            restProps = _objectWithoutProperties(props, [
              "component",
              "innerRef",
              "children"
            ]);

          var popper = context.popper;

          var arrowRef = function arrowRef(node) {
            popper.setArrowNode(node);

            if (typeof innerRef === "function") {
              innerRef(node);
            }
          };

          var arrowStyle = popper.getArrowStyle();

          if (typeof children === "function") {
            var arrowProps = {
              ref: arrowRef,
              style: arrowStyle
            };
            return children({
              arrowProps: arrowProps,
              restProps: restProps
            });
          }

          var componentProps = _extends({}, restProps, {
            style: _extends({}, arrowStyle, restProps.style)
          });

          if (typeof component === "string") {
            componentProps.ref = arrowRef;
          } else {
            componentProps.innerRef = arrowRef;
          }

          return (0, _react.createElement)(component, componentProps, children);
        };

        Arrow.contextTypes = {
          popper: _propTypes.default.object.isRequired
        };
        Arrow.propTypes = {
          component: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.func
          ]),
          innerRef: _propTypes.default.func,
          children: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.func
          ])
        };
        var _default = Arrow;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js"
      }
    ],
    "../node_modules/react-popper/lib/react-popper.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "Manager", {
          enumerable: true,
          get: function() {
            return _Manager.default;
          }
        });
        Object.defineProperty(exports, "Target", {
          enumerable: true,
          get: function() {
            return _Target.default;
          }
        });
        Object.defineProperty(exports, "Popper", {
          enumerable: true,
          get: function() {
            return _Popper.default;
          }
        });
        Object.defineProperty(exports, "placements", {
          enumerable: true,
          get: function() {
            return _Popper.placements;
          }
        });
        Object.defineProperty(exports, "Arrow", {
          enumerable: true,
          get: function() {
            return _Arrow.default;
          }
        });

        var _Manager = _interopRequireDefault(require("./Manager"));

        var _Target = _interopRequireDefault(require("./Target"));

        var _Popper = _interopRequireWildcard(require("./Popper"));

        var _Arrow = _interopRequireDefault(require("./Arrow"));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
      },
      {
        "./Manager": "../node_modules/react-popper/lib/Manager.js",
        "./Target": "../node_modules/react-popper/lib/Target.js",
        "./Popper": "../node_modules/react-popper/lib/Popper.js",
        "./Arrow": "../node_modules/react-popper/lib/Arrow.js"
      }
    ],
    "../node_modules/lodash.tonumber/index.js": [
      function(require, module, exports) {
        /**
         * lodash (Custom Build) <https://lodash.com/>
         * Build: `lodash modularize exports="npm" -o ./`
         * Copyright jQuery Foundation and other contributors <https://jquery.org/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */

        /** Used as references for various `Number` constants. */
        var NAN = 0 / 0;

        /** `Object#toString` result references. */
        var symbolTag = "[object Symbol]";

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Built-in method references without a dependency on `root`. */
        var freeParseInt = parseInt;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var objectToString = objectProto.toString;

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return !!value && (type == "object" || type == "function");
        }

        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return (
            typeof value == "symbol" ||
            (isObjectLike(value) && objectToString.call(value) == symbolTag)
          );
        }

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other =
              typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value)
            ? NAN
            : +value;
        }

        module.exports = toNumber;
      },
      {}
    ],
    "../node_modules/reactstrap/dist/reactstrap.es.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Alert = Alert;
        exports.NavDropdown = NavDropdown;
        exports.Fade = Fade;
        exports.CardBlock = CardBlock;
        exports.PopoverContent = PopoverContent;
        exports.PopoverTitle = PopoverTitle;
        exports.CustomInput = CustomInput;
        exports.TabPane = TabPane;
        exports.Util = exports.UncontrolledTooltip = exports.UncontrolledNavDropdown = exports.UncontrolledDropdown = exports.UncontrolledCollapse = exports.UncontrolledButtonDropdown = exports.UncontrolledAlert = exports.ListGroupItemHeading = exports.ListGroupItemText = exports.ListGroupItem = exports.Collapse = exports.Jumbotron = exports.TabContent = exports.PaginationLink = exports.PaginationItem = exports.Pagination = exports.Media = exports.Label = exports.InputGroupText = exports.InputGroupButtonDropdown = exports.InputGroupButton = exports.InputGroupAddon = exports.InputGroup = exports.Input = exports.FormText = exports.FormGroup = exports.FormFeedback = exports.Form = exports.ListGroup = exports.Table = exports.Tooltip = exports.PopperTargetHelper = exports.PopperContent = exports.ModalFooter = exports.ModalBody = exports.ModalHeader = exports.Modal = exports.Progress = exports.PopoverHeader = exports.PopoverBody = exports.Popover = exports.CardTitle = exports.CardText = exports.CardSubtitle = exports.CarouselCaption = exports.CarouselIndicators = exports.CarouselItem = exports.CarouselControl = exports.UncontrolledCarousel = exports.Carousel = exports.CardImgOverlay = exports.CardImg = exports.CardHeader = exports.CardFooter = exports.CardBody = exports.CardColumns = exports.CardDeck = exports.CardGroup = exports.CardLink = exports.Card = exports.Badge = exports.DropdownToggle = exports.DropdownMenu = exports.DropdownItem = exports.Dropdown = exports.ButtonToolbar = exports.ButtonGroup = exports.ButtonDropdown = exports.Button = exports.BreadcrumbItem = exports.Breadcrumb = exports.NavLink = exports.NavItem = exports.Nav = exports.NavbarToggler = exports.NavbarBrand = exports.Navbar = exports.Col = exports.Row = exports.Container = void 0;

        var _react = _interopRequireWildcard2(require("react"));

        var _propTypes = _interopRequireDefault2(require("prop-types"));

        var _classnames = _interopRequireDefault2(require("classnames"));

        var _lodash = _interopRequireDefault2(require("lodash.isfunction"));

        var _lodash2 = _interopRequireDefault2(require("lodash.isobject"));

        var _reactDom = _interopRequireDefault2(require("react-dom"));

        var _reactPopper = require("react-popper");

        var _lodash3 = _interopRequireDefault2(require("lodash.tonumber"));

        var _reactLifecyclesCompat = require("react-lifecycles-compat");

        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _interopRequireWildcard2(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }

        var _typeof =
          typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
            ? function(obj) {
                return typeof obj;
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === "function" &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? "symbol"
                  : typeof obj;
              };

        var classCallCheck = function(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };

        var createClass = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var defineProperty = function(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        };

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        var inherits = function(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                typeof superClass
            );
          }

          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass);
        };

        var objectWithoutProperties = function(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        };

        var possibleConstructorReturn = function(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }

          return call &&
            (typeof call === "object" || typeof call === "function")
            ? call
            : self;
        }; // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.4/js/src/modal.js#L436-L443

        function getScrollbarWidth() {
          var scrollDiv = document.createElement("div"); // .modal-scrollbar-measure styles // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.4/scss/_modal.scss#L106-L113

          scrollDiv.style.position = "absolute";
          scrollDiv.style.top = "-9999px";
          scrollDiv.style.width = "50px";
          scrollDiv.style.height = "50px";
          scrollDiv.style.overflow = "scroll";
          document.body.appendChild(scrollDiv);
          var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
          document.body.removeChild(scrollDiv);
          return scrollbarWidth;
        }

        function setScrollbarWidth(padding) {
          document.body.style.paddingRight =
            padding > 0 ? padding + "px" : null;
        }

        function isBodyOverflowing() {
          return document.body.clientWidth < window.innerWidth;
        }

        function getOriginalBodyPadding() {
          var style = window.getComputedStyle(document.body, null);
          return parseInt(
            (style && style.getPropertyValue("padding-right")) || 0,
            10
          );
        }

        function conditionallyUpdateScrollbar() {
          var scrollbarWidth = getScrollbarWidth(); // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.6/js/src/modal.js#L433

          var fixedContent = document.querySelectorAll(
            ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"
          )[0];
          var bodyPadding = fixedContent
            ? parseInt(fixedContent.style.paddingRight || 0, 10)
            : 0;

          if (isBodyOverflowing()) {
            setScrollbarWidth(bodyPadding + scrollbarWidth);
          }
        }

        var globalCssModule = void 0;

        function setGlobalCssModule(cssModule) {
          globalCssModule = cssModule;
        }

        function mapToCssModules() {
          var className =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : "";
          var cssModule =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : globalCssModule;
          if (!cssModule) return className;
          return className
            .split(" ")
            .map(function(c) {
              return cssModule[c] || c;
            })
            .join(" ");
        }
        /**
         * Returns a new object with the key/value pairs from `obj` that are not in the array `omitKeys`.
         */

        function omit(obj, omitKeys) {
          var result = {};
          Object.keys(obj).forEach(function(key) {
            if (omitKeys.indexOf(key) === -1) {
              result[key] = obj[key];
            }
          });
          return result;
        }
        /**
         * Returns a filtered copy of an object with only the specified keys.
         */

        function pick(obj, keys) {
          var pickKeys = Array.isArray(keys) ? keys : [keys];
          var length = pickKeys.length;
          var key = void 0;
          var result = {};

          while (length > 0) {
            length -= 1;
            key = pickKeys[length];
            result[key] = obj[key];
          }

          return result;
        }

        var warned = {};

        function warnOnce(message) {
          if (!warned[message]) {
            /* istanbul ignore else */
            if (typeof console !== "undefined") {
              console.error(message); // eslint-disable-line no-console
            }

            warned[message] = true;
          }
        }

        function deprecated(propType, explanation) {
          return function validate(props, propName, componentName) {
            if (
              props[propName] !== null &&
              typeof props[propName] !== "undefined"
            ) {
              warnOnce(
                '"' +
                  propName +
                  '" property of "' +
                  componentName +
                  '" has been deprecated.\n' +
                  explanation
              );
            }

            for (
              var _len = arguments.length,
                rest = Array(_len > 3 ? _len - 3 : 0),
                _key = 3;
              _key < _len;
              _key++
            ) {
              rest[_key - 3] = arguments[_key];
            }

            return propType.apply(
              undefined,
              [props, propName, componentName].concat(rest)
            );
          };
        }

        function DOMElement(props, propName, componentName) {
          if (!(props[propName] instanceof Element)) {
            return new Error(
              "Invalid prop `" +
                propName +
                "` supplied to `" +
                componentName +
                "`. Expected prop to be an instance of Element. Validation failed."
            );
          }
        }

        var targetPropType = _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.func,
          DOMElement,
          _propTypes.default.shape({
            current: _propTypes.default.any
          })
        ]);
        /* eslint key-spacing: ["error", { afterColon: true, align: "value" }] */
        // These are all setup to match what is in the bootstrap _variables.scss
        // https://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss

        var TransitionTimeouts = {
          Fade: 150,
          // $transition-fade
          Collapse: 350,
          // $transition-collapse
          Modal: 300,
          // $modal-transition
          Carousel: 600 // $carousel-transition
        }; // Duplicated Transition.propType keys to ensure that Reactstrap builds
        // for distribution properly exclude these keys for nested child HTML attributes
        // since `react-transition-group` removes propTypes in production builds.

        var TransitionPropTypeKeys = [
          "in",
          "mountOnEnter",
          "unmountOnExit",
          "appear",
          "enter",
          "exit",
          "timeout",
          "onEnter",
          "onEntering",
          "onEntered",
          "onExit",
          "onExiting",
          "onExited"
        ];
        var TransitionStatuses = {
          ENTERING: "entering",
          ENTERED: "entered",
          EXITING: "exiting",
          EXITED: "exited"
        };
        var keyCodes = {
          esc: 27,
          space: 32,
          enter: 13,
          tab: 9,
          up: 38,
          down: 40
        };
        var PopperPlacements = [
          "auto-start",
          "auto",
          "auto-end",
          "top-start",
          "top",
          "top-end",
          "right-start",
          "right",
          "right-end",
          "bottom-end",
          "bottom",
          "bottom-start",
          "left-end",
          "left",
          "left-start"
        ];
        var canUseDOM = !!(
          typeof window !== "undefined" &&
          window.document &&
          window.document.createElement
        );

        function isReactRefObj(target) {
          if (
            target &&
            (typeof target === "undefined" ? "undefined" : _typeof(target)) ===
              "object"
          ) {
            return "current" in target;
          }

          return false;
        }

        function findDOMElements(target) {
          if (isReactRefObj(target)) {
            return target.current;
          }

          if ((0, _lodash.default)(target)) {
            return target();
          }

          if (typeof target === "string" && canUseDOM) {
            var selection = document.querySelectorAll(target);

            if (!selection.length) {
              selection = document.querySelectorAll("#" + target);
            }

            if (!selection.length) {
              throw new Error(
                "The target '" +
                  target +
                  "' could not be identified in the dom, tip: check spelling"
              );
            }

            return selection;
          }

          return target;
        }

        function isArrayOrNodeList(els) {
          if (els === null) {
            return false;
          }

          return (
            Array.isArray(els) || (canUseDOM && typeof els.length === "number")
          );
        }

        function getTarget(target) {
          var els = findDOMElements(target);

          if (isArrayOrNodeList(els)) {
            return els[0];
          }

          return els;
        }

        var defaultToggleEvents = ["touchstart", "click"];

        function addMultipleEventListeners(_els, handler, _events) {
          var els = _els;

          if (!isArrayOrNodeList(els)) {
            els = [els];
          }

          var events = _events;

          if (typeof events === "string") {
            events = events.split(/\s+/);
          }

          if (
            !isArrayOrNodeList(els) ||
            typeof handler !== "function" ||
            !Array.isArray(events)
          ) {
            throw new Error(
              "\n      The first argument of this function must be DOM node or an array on DOM nodes or NodeList.\n      The second must be a function.\n      The third is a string or an array of strings that represents DOM events\n    "
            );
          }

          events.forEach(function(event) {
            els.forEach(function(el) {
              el.addEventListener(event, handler);
            });
          });
          return function removeEvents() {
            events.forEach(function(event) {
              els.forEach(function(el) {
                el.removeEventListener(event, handler);
              });
            });
          };
        }

        var focusableElements = [
          "a[href]",
          "area[href]",
          "input:not([disabled]):not([type=hidden])",
          "select:not([disabled])",
          "textarea:not([disabled])",
          "button:not([disabled])",
          "object",
          "embed",
          "[tabindex]:not(.modal)",
          "audio[controls]",
          "video[controls]",
          '[contenteditable]:not([contenteditable="false"])'
        ];
        var utils = Object.freeze({
          getScrollbarWidth: getScrollbarWidth,
          setScrollbarWidth: setScrollbarWidth,
          isBodyOverflowing: isBodyOverflowing,
          getOriginalBodyPadding: getOriginalBodyPadding,
          conditionallyUpdateScrollbar: conditionallyUpdateScrollbar,
          setGlobalCssModule: setGlobalCssModule,
          mapToCssModules: mapToCssModules,
          omit: omit,
          pick: pick,
          warnOnce: warnOnce,
          deprecated: deprecated,
          DOMElement: DOMElement,
          targetPropType: targetPropType,
          TransitionTimeouts: TransitionTimeouts,
          TransitionPropTypeKeys: TransitionPropTypeKeys,
          TransitionStatuses: TransitionStatuses,
          keyCodes: keyCodes,
          PopperPlacements: PopperPlacements,
          canUseDOM: canUseDOM,
          isReactRefObj: isReactRefObj,
          findDOMElements: findDOMElements,
          isArrayOrNodeList: isArrayOrNodeList,
          getTarget: getTarget,
          defaultToggleEvents: defaultToggleEvents,
          addMultipleEventListeners: addMultipleEventListeners,
          focusableElements: focusableElements
        });
        exports.Util = utils;
        var propTypes = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          fluid: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps = {
          tag: "div"
        };

        var Container = function Container(props) {
          var className = props.className,
            cssModule = props.cssModule,
            fluid = props.fluid,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "fluid",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              fluid ? "container-fluid" : "container"
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Container = Container;
        Container.propTypes = propTypes;
        Container.defaultProps = defaultProps;
        var propTypes$1 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          noGutters: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          form: _propTypes.default.bool
        };
        var defaultProps$1 = {
          tag: "div"
        };

        var Row = function Row(props) {
          var className = props.className,
            cssModule = props.cssModule,
            noGutters = props.noGutters,
            Tag = props.tag,
            form = props.form,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "noGutters",
              "tag",
              "form"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              noGutters ? "no-gutters" : null,
              form ? "form-row" : "row"
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Row = Row;
        Row.propTypes = propTypes$1;
        Row.defaultProps = defaultProps$1;
        var colWidths = ["xs", "sm", "md", "lg", "xl"];

        var stringOrNumberProp = _propTypes.default.oneOfType([
          _propTypes.default.number,
          _propTypes.default.string
        ]);

        var columnProps = _propTypes.default.oneOfType([
          _propTypes.default.bool,
          _propTypes.default.number,
          _propTypes.default.string,
          _propTypes.default.shape({
            size: _propTypes.default.oneOfType([
              _propTypes.default.bool,
              _propTypes.default.number,
              _propTypes.default.string
            ]),
            push: deprecated(stringOrNumberProp, 'Please use the prop "order"'),
            pull: deprecated(stringOrNumberProp, 'Please use the prop "order"'),
            order: stringOrNumberProp,
            offset: stringOrNumberProp
          })
        ]);

        var propTypes$2 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          xs: columnProps,
          sm: columnProps,
          md: columnProps,
          lg: columnProps,
          xl: columnProps,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          widths: _propTypes.default.array
        };
        var defaultProps$2 = {
          tag: "div",
          widths: colWidths
        };

        var getColumnSizeClass = function getColumnSizeClass(
          isXs,
          colWidth,
          colSize
        ) {
          if (colSize === true || colSize === "") {
            return isXs ? "col" : "col-" + colWidth;
          } else if (colSize === "auto") {
            return isXs ? "col-auto" : "col-" + colWidth + "-auto";
          }

          return isXs ? "col-" + colSize : "col-" + colWidth + "-" + colSize;
        };

        var Col = function Col(props) {
          var className = props.className,
            cssModule = props.cssModule,
            widths = props.widths,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "widths",
              "tag"
            ]);
          var colClasses = [];
          widths.forEach(function(colWidth, i) {
            var columnProp = props[colWidth];
            delete attributes[colWidth];

            if (!columnProp && columnProp !== "") {
              return;
            }

            var isXs = !i;

            if ((0, _lodash2.default)(columnProp)) {
              var _classNames;

              var colSizeInterfix = isXs ? "-" : "-" + colWidth + "-";
              var colClass = getColumnSizeClass(
                isXs,
                colWidth,
                columnProp.size
              );
              colClasses.push(
                mapToCssModules(
                  (0, _classnames.default)(
                    ((_classNames = {}),
                    defineProperty(
                      _classNames,
                      colClass,
                      columnProp.size || columnProp.size === ""
                    ),
                    defineProperty(
                      _classNames,
                      "order" + colSizeInterfix + columnProp.order,
                      columnProp.order || columnProp.order === 0
                    ),
                    defineProperty(
                      _classNames,
                      "offset" + colSizeInterfix + columnProp.offset,
                      columnProp.offset || columnProp.offset === 0
                    ),
                    _classNames)
                  ),
                  cssModule
                )
              );
            } else {
              var _colClass = getColumnSizeClass(isXs, colWidth, columnProp);

              colClasses.push(_colClass);
            }
          });

          if (!colClasses.length) {
            colClasses.push("col");
          }

          var classes = mapToCssModules(
            (0, _classnames.default)(className, colClasses),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Col = Col;
        Col.propTypes = propTypes$2;
        Col.defaultProps = defaultProps$2;
        var propTypes$3 = {
          light: _propTypes.default.bool,
          dark: _propTypes.default.bool,
          inverse: deprecated(
            _propTypes.default.bool,
            'Please use the prop "dark"'
          ),
          full: _propTypes.default.bool,
          fixed: _propTypes.default.string,
          sticky: _propTypes.default.string,
          color: _propTypes.default.string,
          role: _propTypes.default.string,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          toggleable: deprecated(
            _propTypes.default.oneOfType([
              _propTypes.default.bool,
              _propTypes.default.string
            ]),
            'Please use the prop "expand"'
          ),
          expand: _propTypes.default.oneOfType([
            _propTypes.default.bool,
            _propTypes.default.string
          ])
        };
        var defaultProps$3 = {
          tag: "nav",
          expand: false
        };

        var getExpandClass = function getExpandClass(expand) {
          if (expand === false) {
            return false;
          } else if (expand === true || expand === "xs") {
            return "navbar-expand";
          }

          return "navbar-expand-" + expand;
        }; // To better maintain backwards compatibility while toggleable is deprecated.
        // We must map breakpoints to the next breakpoint so that toggleable and expand do the same things at the same breakpoint.

        var toggleableToExpand = {
          xs: "sm",
          sm: "md",
          md: "lg",
          lg: "xl"
        };

        var getToggleableClass = function getToggleableClass(toggleable) {
          if (toggleable === undefined || toggleable === "xl") {
            return false;
          } else if (toggleable === false) {
            return "navbar-expand";
          }

          return (
            "navbar-expand-" +
            (toggleable === true
              ? "sm"
              : toggleableToExpand[toggleable] || toggleable)
          );
        };

        var Navbar = function Navbar(props) {
          var _classNames;

          var toggleable = props.toggleable,
            expand = props.expand,
            className = props.className,
            cssModule = props.cssModule,
            light = props.light,
            dark = props.dark,
            inverse = props.inverse,
            fixed = props.fixed,
            sticky = props.sticky,
            color = props.color,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "toggleable",
              "expand",
              "className",
              "cssModule",
              "light",
              "dark",
              "inverse",
              "fixed",
              "sticky",
              "color",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "navbar",
              getExpandClass(expand) || getToggleableClass(toggleable),
              ((_classNames = {
                "navbar-light": light,
                "navbar-dark": inverse || dark
              }),
              defineProperty(_classNames, "bg-" + color, color),
              defineProperty(_classNames, "fixed-" + fixed, fixed),
              defineProperty(_classNames, "sticky-" + sticky, sticky),
              _classNames)
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Navbar = Navbar;
        Navbar.propTypes = propTypes$3;
        Navbar.defaultProps = defaultProps$3;
        var propTypes$4 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$4 = {
          tag: "a"
        };

        var NavbarBrand = function NavbarBrand(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "navbar-brand"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.NavbarBrand = NavbarBrand;
        NavbarBrand.propTypes = propTypes$4;
        NavbarBrand.defaultProps = defaultProps$4;
        var propTypes$5 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          type: _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          children: _propTypes.default.node
        };
        var defaultProps$5 = {
          tag: "button",
          type: "button"
        };

        var NavbarToggler = function NavbarToggler(props) {
          var className = props.className,
            cssModule = props.cssModule,
            children = props.children,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "children",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "navbar-toggler"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            }),
            children ||
              _react.default.createElement("span", {
                className: mapToCssModules("navbar-toggler-icon", cssModule)
              })
          );
        };

        exports.NavbarToggler = NavbarToggler;
        NavbarToggler.propTypes = propTypes$5;
        NavbarToggler.defaultProps = defaultProps$5;
        var propTypes$6 = {
          tabs: _propTypes.default.bool,
          pills: _propTypes.default.bool,
          vertical: _propTypes.default.oneOfType([
            _propTypes.default.bool,
            _propTypes.default.string
          ]),
          horizontal: _propTypes.default.string,
          justified: _propTypes.default.bool,
          fill: _propTypes.default.bool,
          navbar: _propTypes.default.bool,
          card: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$6 = {
          tag: "ul",
          vertical: false
        };

        var getVerticalClass = function getVerticalClass(vertical) {
          if (vertical === false) {
            return false;
          } else if (vertical === true || vertical === "xs") {
            return "flex-column";
          }

          return "flex-" + vertical + "-column";
        };

        var Nav = function Nav(props) {
          var className = props.className,
            cssModule = props.cssModule,
            tabs = props.tabs,
            pills = props.pills,
            vertical = props.vertical,
            horizontal = props.horizontal,
            justified = props.justified,
            fill = props.fill,
            navbar = props.navbar,
            card = props.card,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tabs",
              "pills",
              "vertical",
              "horizontal",
              "justified",
              "fill",
              "navbar",
              "card",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              navbar ? "navbar-nav" : "nav",
              horizontal ? "justify-content-" + horizontal : false,
              getVerticalClass(vertical),
              {
                "nav-tabs": tabs,
                "card-header-tabs": card && tabs,
                "nav-pills": pills,
                "card-header-pills": card && pills,
                "nav-justified": justified,
                "nav-fill": fill
              }
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Nav = Nav;
        Nav.propTypes = propTypes$6;
        Nav.defaultProps = defaultProps$6;
        var propTypes$7 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          active: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$7 = {
          tag: "li"
        };

        var NavItem = function NavItem(props) {
          var className = props.className,
            cssModule = props.cssModule,
            active = props.active,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "active",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "nav-item",
              active ? "active" : false
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.NavItem = NavItem;
        NavItem.propTypes = propTypes$7;
        NavItem.defaultProps = defaultProps$7;
        /* eslint react/no-find-dom-node: 0 */
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md

        var propTypes$8 = {
          disabled: _propTypes.default.bool,
          dropup: deprecated(
            _propTypes.default.bool,
            'Please use the prop "direction" with the value "up".'
          ),
          direction: _propTypes.default.oneOf(["up", "down", "left", "right"]),
          group: _propTypes.default.bool,
          isOpen: _propTypes.default.bool,
          nav: _propTypes.default.bool,
          active: _propTypes.default.bool,
          addonType: _propTypes.default.oneOfType([
            _propTypes.default.bool,
            _propTypes.default.oneOf(["prepend", "append"])
          ]),
          size: _propTypes.default.string,
          tag: _propTypes.default.string,
          toggle: _propTypes.default.func,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          inNavbar: _propTypes.default.bool,
          setActiveFromChild: _propTypes.default.bool
        };
        var defaultProps$8 = {
          isOpen: false,
          direction: "down",
          nav: false,
          active: false,
          addonType: false,
          inNavbar: false,
          setActiveFromChild: false
        };
        var childContextTypes = {
          toggle: _propTypes.default.func.isRequired,
          isOpen: _propTypes.default.bool.isRequired,
          direction: _propTypes.default.oneOf(["up", "down", "left", "right"])
            .isRequired,
          inNavbar: _propTypes.default.bool.isRequired
        };

        var Dropdown = (function(_React$Component) {
          inherits(Dropdown, _React$Component);

          function Dropdown(props) {
            classCallCheck(this, Dropdown);

            var _this = possibleConstructorReturn(
              this,
              (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(
                this,
                props
              )
            );

            _this.addEvents = _this.addEvents.bind(_this);
            _this.handleDocumentClick = _this.handleDocumentClick.bind(_this);
            _this.handleKeyDown = _this.handleKeyDown.bind(_this);
            _this.removeEvents = _this.removeEvents.bind(_this);
            _this.toggle = _this.toggle.bind(_this);
            return _this;
          }

          createClass(Dropdown, [
            {
              key: "getChildContext",
              value: function getChildContext() {
                return {
                  toggle: this.props.toggle,
                  isOpen: this.props.isOpen,
                  direction:
                    this.props.direction === "down" && this.props.dropup
                      ? "up"
                      : this.props.direction,
                  inNavbar: this.props.inNavbar
                };
              }
            },
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                this.handleProps();
              }
            },
            {
              key: "componentDidUpdate",
              value: function componentDidUpdate(prevProps) {
                if (this.props.isOpen !== prevProps.isOpen) {
                  this.handleProps();
                }
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                this.removeEvents();
              }
            },
            {
              key: "getContainer",
              value: function getContainer() {
                return _reactDom.default.findDOMNode(this);
              }
            },
            {
              key: "addEvents",
              value: function addEvents() {
                var _this2 = this;

                ["click", "touchstart", "keyup"].forEach(function(event) {
                  return document.addEventListener(
                    event,
                    _this2.handleDocumentClick,
                    true
                  );
                });
              }
            },
            {
              key: "removeEvents",
              value: function removeEvents() {
                var _this3 = this;

                ["click", "touchstart", "keyup"].forEach(function(event) {
                  return document.removeEventListener(
                    event,
                    _this3.handleDocumentClick,
                    true
                  );
                });
              }
            },
            {
              key: "handleDocumentClick",
              value: function handleDocumentClick(e) {
                if (
                  e &&
                  (e.which === 3 ||
                    (e.type === "keyup" && e.which !== keyCodes.tab))
                )
                  return;
                var container = this.getContainer();

                if (
                  container.contains(e.target) &&
                  container !== e.target &&
                  (e.type !== "keyup" || e.which === keyCodes.tab)
                ) {
                  return;
                }

                this.toggle(e);
              }
            },
            {
              key: "handleKeyDown",
              value: function handleKeyDown(e) {
                if (
                  keyCodes.tab === e.which ||
                  (/button/i.test(e.target.tagName) &&
                    e.which === keyCodes.space) ||
                  /input|textarea/i.test(e.target.tagName)
                ) {
                  return;
                }

                e.preventDefault();
                if (this.props.disabled) return;
                var container = this.getContainer();

                if (
                  e.which === keyCodes.space &&
                  keyCodes.enter &&
                  this.props.isOpen &&
                  container !== e.target
                ) {
                  e.target.click();
                }

                if (e.which === keyCodes.esc || !this.props.isOpen) {
                  this.toggle(e);
                  container.querySelector("[aria-expanded]").focus();
                  return;
                }

                var menuClass = mapToCssModules(
                  "dropdown-menu",
                  this.props.cssModule
                );
                var itemClass = mapToCssModules(
                  "dropdown-item",
                  this.props.cssModule
                );
                var disabledClass = mapToCssModules(
                  "disabled",
                  this.props.cssModule
                );
                var items = container.querySelectorAll(
                  "." +
                    menuClass +
                    " ." +
                    itemClass +
                    ":not(." +
                    disabledClass +
                    ")"
                );
                if (!items.length) return;
                var index = -1;
                var charPressed = String.fromCharCode(e.which).toLowerCase();

                for (var i = 0; i < items.length; i += 1) {
                  var firstLetter =
                    items[i].textContent &&
                    items[i].textContent[0].toLowerCase();

                  if (firstLetter === charPressed || items[i] === e.target) {
                    index = i;
                    break;
                  }
                }

                if (e.which === keyCodes.up && index > 0) {
                  index -= 1;
                }

                if (e.which === keyCodes.down && index < items.length - 1) {
                  index += 1;
                }

                if (index < 0) {
                  index = 0;
                }

                items[index].focus();
              }
            },
            {
              key: "handleProps",
              value: function handleProps() {
                if (this.props.isOpen) {
                  this.addEvents();
                } else {
                  this.removeEvents();
                }
              }
            },
            {
              key: "toggle",
              value: function toggle(e) {
                if (this.props.disabled) {
                  return e && e.preventDefault();
                }

                return this.props.toggle(e);
              }
            },
            {
              key: "render",
              value: function render() {
                var _classNames;

                var _omit = omit(this.props, [
                    "toggle",
                    "disabled",
                    "inNavbar",
                    "direction"
                  ]),
                  className = _omit.className,
                  cssModule = _omit.cssModule,
                  dropup = _omit.dropup,
                  isOpen = _omit.isOpen,
                  group = _omit.group,
                  size = _omit.size,
                  nav = _omit.nav,
                  setActiveFromChild = _omit.setActiveFromChild,
                  active = _omit.active,
                  addonType = _omit.addonType,
                  attrs = objectWithoutProperties(_omit, [
                    "className",
                    "cssModule",
                    "dropup",
                    "isOpen",
                    "group",
                    "size",
                    "nav",
                    "setActiveFromChild",
                    "active",
                    "addonType"
                  ]);

                var direction =
                  this.props.direction === "down" && dropup
                    ? "up"
                    : this.props.direction;
                attrs.tag = attrs.tag || (nav ? "li" : "div");
                var subItemIsActive = false;

                if (setActiveFromChild) {
                  _react.default.Children.map(
                    this.props.children[1].props.children,
                    function(dropdownItem) {
                      if (dropdownItem.props.active) subItemIsActive = true;
                    }
                  );
                }

                var classes = mapToCssModules(
                  (0, _classnames.default)(
                    className,
                    direction !== "down" && "drop" + direction,
                    nav && active ? "active" : false,
                    setActiveFromChild && subItemIsActive ? "active" : false,
                    ((_classNames = {}),
                    defineProperty(
                      _classNames,
                      "input-group-" + addonType,
                      addonType
                    ),
                    defineProperty(_classNames, "btn-group", group),
                    defineProperty(_classNames, "btn-group-" + size, !!size),
                    defineProperty(
                      _classNames,
                      "dropdown",
                      !group && !addonType
                    ),
                    defineProperty(_classNames, "show", isOpen),
                    defineProperty(_classNames, "nav-item", nav),
                    _classNames)
                  ),
                  cssModule
                );
                return _react.default.createElement(
                  _reactPopper.Manager,
                  _extends({}, attrs, {
                    className: classes,
                    onKeyDown: this.handleKeyDown
                  })
                );
              }
            }
          ]);
          return Dropdown;
        })(_react.default.Component);

        exports.Dropdown = Dropdown;
        Dropdown.propTypes = propTypes$8;
        Dropdown.defaultProps = defaultProps$8;
        Dropdown.childContextTypes = childContextTypes;

        function NavDropdown(props) {
          warnOnce(
            'The "NavDropdown" component has been deprecated.\nPlease use component "Dropdown" with nav prop.'
          );
          return _react.default.createElement(
            Dropdown,
            _extends(
              {
                nav: true
              },
              props
            )
          );
        }

        var propTypes$9 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          disabled: _propTypes.default.bool,
          active: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          onClick: _propTypes.default.func,
          href: _propTypes.default.any
        };
        var defaultProps$9 = {
          tag: "a"
        };

        var NavLink = (function(_React$Component) {
          inherits(NavLink, _React$Component);

          function NavLink(props) {
            classCallCheck(this, NavLink);

            var _this = possibleConstructorReturn(
              this,
              (NavLink.__proto__ || Object.getPrototypeOf(NavLink)).call(
                this,
                props
              )
            );

            _this.onClick = _this.onClick.bind(_this);
            return _this;
          }

          createClass(NavLink, [
            {
              key: "onClick",
              value: function onClick(e) {
                if (this.props.disabled) {
                  e.preventDefault();
                  return;
                }

                if (this.props.href === "#") {
                  e.preventDefault();
                }

                if (this.props.onClick) {
                  this.props.onClick(e);
                }
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  className = _props.className,
                  cssModule = _props.cssModule,
                  active = _props.active,
                  Tag = _props.tag,
                  innerRef = _props.innerRef,
                  attributes = objectWithoutProperties(_props, [
                    "className",
                    "cssModule",
                    "active",
                    "tag",
                    "innerRef"
                  ]);
                var classes = mapToCssModules(
                  (0, _classnames.default)(className, "nav-link", {
                    disabled: attributes.disabled,
                    active: active
                  }),
                  cssModule
                );
                return _react.default.createElement(
                  Tag,
                  _extends({}, attributes, {
                    ref: innerRef,
                    onClick: this.onClick,
                    className: classes
                  })
                );
              }
            }
          ]);
          return NavLink;
        })(_react.default.Component);

        exports.NavLink = NavLink;
        NavLink.propTypes = propTypes$9;
        NavLink.defaultProps = defaultProps$9;
        var propTypes$10 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          listTag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          listClassName: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          children: _propTypes.default.node,
          "aria-label": _propTypes.default.string
        };
        var defaultProps$10 = {
          tag: "nav",
          listTag: "ol",
          "aria-label": "breadcrumb"
        };

        var Breadcrumb = function Breadcrumb(props) {
          var className = props.className,
            listClassName = props.listClassName,
            cssModule = props.cssModule,
            children = props.children,
            Tag = props.tag,
            ListTag = props.listTag,
            label = props["aria-label"],
            attributes = objectWithoutProperties(props, [
              "className",
              "listClassName",
              "cssModule",
              "children",
              "tag",
              "listTag",
              "aria-label"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className),
            cssModule
          );
          var listClasses = mapToCssModules(
            (0, _classnames.default)("breadcrumb", listClassName),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes,
              "aria-label": label
            }),
            _react.default.createElement(
              ListTag,
              {
                className: listClasses
              },
              children
            )
          );
        };

        exports.Breadcrumb = Breadcrumb;
        Breadcrumb.propTypes = propTypes$10;
        Breadcrumb.defaultProps = defaultProps$10;
        var propTypes$11 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          active: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$11 = {
          tag: "li"
        };

        var BreadcrumbItem = function BreadcrumbItem(props) {
          var className = props.className,
            cssModule = props.cssModule,
            active = props.active,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "active",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              active ? "active" : false,
              "breadcrumb-item"
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes,
              "aria-current": active ? "page" : undefined
            })
          );
        };

        exports.BreadcrumbItem = BreadcrumbItem;
        BreadcrumbItem.propTypes = propTypes$11;
        BreadcrumbItem.defaultProps = defaultProps$11;
        var propTypes$12 = {
          active: _propTypes.default.bool,
          "aria-label": _propTypes.default.string,
          block: _propTypes.default.bool,
          color: _propTypes.default.string,
          disabled: _propTypes.default.bool,
          outline: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          onClick: _propTypes.default.func,
          size: _propTypes.default.string,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          close: _propTypes.default.bool
        };
        var defaultProps$12 = {
          color: "secondary",
          tag: "button"
        };

        var Button = (function(_React$Component) {
          inherits(Button, _React$Component);

          function Button(props) {
            classCallCheck(this, Button);

            var _this = possibleConstructorReturn(
              this,
              (Button.__proto__ || Object.getPrototypeOf(Button)).call(
                this,
                props
              )
            );

            _this.onClick = _this.onClick.bind(_this);
            return _this;
          }

          createClass(Button, [
            {
              key: "onClick",
              value: function onClick(e) {
                if (this.props.disabled) {
                  e.preventDefault();
                  return;
                }

                if (this.props.onClick) {
                  this.props.onClick(e);
                }
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  active = _props.active,
                  ariaLabel = _props["aria-label"],
                  block = _props.block,
                  className = _props.className,
                  close = _props.close,
                  cssModule = _props.cssModule,
                  color = _props.color,
                  outline = _props.outline,
                  size = _props.size,
                  Tag = _props.tag,
                  innerRef = _props.innerRef,
                  attributes = objectWithoutProperties(_props, [
                    "active",
                    "aria-label",
                    "block",
                    "className",
                    "close",
                    "cssModule",
                    "color",
                    "outline",
                    "size",
                    "tag",
                    "innerRef"
                  ]);

                if (close && typeof attributes.children === "undefined") {
                  attributes.children = _react.default.createElement(
                    "span",
                    {
                      "aria-hidden": true
                    },
                    "\xD7"
                  );
                }

                var btnOutlineColor =
                  "btn" + (outline ? "-outline" : "") + "-" + color;
                var classes = mapToCssModules(
                  (0, _classnames.default)(
                    className,
                    {
                      close: close
                    },
                    close || "btn",
                    close || btnOutlineColor,
                    size ? "btn-" + size : false,
                    block ? "btn-block" : false,
                    {
                      active: active,
                      disabled: this.props.disabled
                    }
                  ),
                  cssModule
                );

                if (attributes.href && Tag === "button") {
                  Tag = "a";
                }

                var defaultAriaLabel = close ? "Close" : null;
                return _react.default.createElement(
                  Tag,
                  _extends(
                    {
                      type:
                        Tag === "button" && attributes.onClick
                          ? "button"
                          : undefined
                    },
                    attributes,
                    {
                      className: classes,
                      ref: innerRef,
                      onClick: this.onClick,
                      "aria-label": ariaLabel || defaultAriaLabel
                    }
                  )
                );
              }
            }
          ]);
          return Button;
        })(_react.default.Component);

        exports.Button = Button;
        Button.propTypes = propTypes$12;
        Button.defaultProps = defaultProps$12;
        var propTypes$13 = {
          children: _propTypes.default.node
        };

        var ButtonDropdown = function ButtonDropdown(props) {
          return _react.default.createElement(
            Dropdown,
            _extends(
              {
                group: true
              },
              props
            )
          );
        };

        exports.ButtonDropdown = ButtonDropdown;
        ButtonDropdown.propTypes = propTypes$13;
        var propTypes$14 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          "aria-label": _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          role: _propTypes.default.string,
          size: _propTypes.default.string,
          vertical: _propTypes.default.bool
        };
        var defaultProps$13 = {
          tag: "div",
          role: "group"
        };

        var ButtonGroup = function ButtonGroup(props) {
          var className = props.className,
            cssModule = props.cssModule,
            size = props.size,
            vertical = props.vertical,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "size",
              "vertical",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              size ? "btn-group-" + size : false,
              vertical ? "btn-group-vertical" : "btn-group"
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ButtonGroup = ButtonGroup;
        ButtonGroup.propTypes = propTypes$14;
        ButtonGroup.defaultProps = defaultProps$13;
        var propTypes$15 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          "aria-label": _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          role: _propTypes.default.string
        };
        var defaultProps$14 = {
          tag: "div",
          role: "toolbar"
        };

        var ButtonToolbar = function ButtonToolbar(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "btn-toolbar"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ButtonToolbar = ButtonToolbar;
        ButtonToolbar.propTypes = propTypes$15;
        ButtonToolbar.defaultProps = defaultProps$14;
        var propTypes$16 = {
          children: _propTypes.default.node,
          active: _propTypes.default.bool,
          disabled: _propTypes.default.bool,
          divider: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          header: _propTypes.default.bool,
          onClick: _propTypes.default.func,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          toggle: _propTypes.default.bool
        };
        var contextTypes = {
          toggle: _propTypes.default.func
        };
        var defaultProps$15 = {
          tag: "button",
          toggle: true
        };

        var DropdownItem = (function(_React$Component) {
          inherits(DropdownItem, _React$Component);

          function DropdownItem(props) {
            classCallCheck(this, DropdownItem);

            var _this = possibleConstructorReturn(
              this,
              (
                DropdownItem.__proto__ || Object.getPrototypeOf(DropdownItem)
              ).call(this, props)
            );

            _this.onClick = _this.onClick.bind(_this);
            _this.getTabIndex = _this.getTabIndex.bind(_this);
            return _this;
          }

          createClass(DropdownItem, [
            {
              key: "onClick",
              value: function onClick(e) {
                if (
                  this.props.disabled ||
                  this.props.header ||
                  this.props.divider
                ) {
                  e.preventDefault();
                  return;
                }

                if (this.props.onClick) {
                  this.props.onClick(e);
                }

                if (this.props.toggle) {
                  this.context.toggle(e);
                }
              }
            },
            {
              key: "getTabIndex",
              value: function getTabIndex() {
                if (
                  this.props.disabled ||
                  this.props.header ||
                  this.props.divider
                ) {
                  return "-1";
                }

                return "0";
              }
            },
            {
              key: "render",
              value: function render() {
                var tabIndex = this.getTabIndex();

                var _omit = omit(this.props, ["toggle"]),
                  className = _omit.className,
                  cssModule = _omit.cssModule,
                  divider = _omit.divider,
                  Tag = _omit.tag,
                  header = _omit.header,
                  active = _omit.active,
                  props = objectWithoutProperties(_omit, [
                    "className",
                    "cssModule",
                    "divider",
                    "tag",
                    "header",
                    "active"
                  ]);

                var classes = mapToCssModules(
                  (0, _classnames.default)(className, {
                    disabled: props.disabled,
                    "dropdown-item": !divider && !header,
                    active: active,
                    "dropdown-header": header,
                    "dropdown-divider": divider
                  }),
                  cssModule
                );

                if (Tag === "button") {
                  if (header) {
                    Tag = "h6";
                  } else if (divider) {
                    Tag = "div";
                  } else if (props.href) {
                    Tag = "a";
                  }
                }

                return _react.default.createElement(
                  Tag,
                  _extends(
                    {
                      type:
                        Tag === "button" && (props.onClick || this.props.toggle)
                          ? "button"
                          : undefined
                    },
                    props,
                    {
                      tabIndex: tabIndex,
                      className: classes,
                      onClick: this.onClick
                    }
                  )
                );
              }
            }
          ]);
          return DropdownItem;
        })(_react.default.Component);

        exports.DropdownItem = DropdownItem;
        DropdownItem.propTypes = propTypes$16;
        DropdownItem.defaultProps = defaultProps$15;
        DropdownItem.contextTypes = contextTypes;
        var propTypes$17 = {
          tag: _propTypes.default.string,
          children: _propTypes.default.node.isRequired,
          right: _propTypes.default.bool,
          flip: _propTypes.default.bool,
          modifiers: _propTypes.default.object,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          persist: _propTypes.default.bool
        };
        var defaultProps$16 = {
          tag: "div",
          flip: true
        };
        var contextTypes$1 = {
          isOpen: _propTypes.default.bool.isRequired,
          direction: _propTypes.default.oneOf(["up", "down", "left", "right"])
            .isRequired,
          inNavbar: _propTypes.default.bool.isRequired
        };
        var noFlipModifier = {
          flip: {
            enabled: false
          }
        };
        var directionPositionMap = {
          up: "top",
          left: "left",
          right: "right",
          down: "bottom"
        };

        var DropdownMenu = function DropdownMenu(props, context) {
          var className = props.className,
            cssModule = props.cssModule,
            right = props.right,
            tag = props.tag,
            flip = props.flip,
            modifiers = props.modifiers,
            persist = props.persist,
            attrs = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "right",
              "tag",
              "flip",
              "modifiers",
              "persist"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "dropdown-menu", {
              "dropdown-menu-right": right,
              show: context.isOpen
            }),
            cssModule
          );
          var Tag = tag;

          if (persist || (context.isOpen && !context.inNavbar)) {
            Tag = _reactPopper.Popper;
            var position1 = directionPositionMap[context.direction] || "bottom";
            var position2 = right ? "end" : "start";
            attrs.placement = position1 + "-" + position2;
            attrs.component = tag;
            attrs.modifiers = !flip
              ? _extends({}, modifiers, noFlipModifier)
              : modifiers;
          }

          return _react.default.createElement(
            Tag,
            _extends(
              {
                tabIndex: "-1",
                role: "menu"
              },
              attrs,
              {
                "aria-hidden": !context.isOpen,
                className: classes,
                "x-placement": attrs.placement
              }
            )
          );
        };

        exports.DropdownMenu = DropdownMenu;
        DropdownMenu.propTypes = propTypes$17;
        DropdownMenu.defaultProps = defaultProps$16;
        DropdownMenu.contextTypes = contextTypes$1;
        var propTypes$18 = {
          caret: _propTypes.default.bool,
          color: _propTypes.default.string,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          disabled: _propTypes.default.bool,
          onClick: _propTypes.default.func,
          "aria-haspopup": _propTypes.default.bool,
          split: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          nav: _propTypes.default.bool
        };
        var defaultProps$17 = {
          "aria-haspopup": true,
          color: "secondary"
        };
        var contextTypes$2 = {
          isOpen: _propTypes.default.bool.isRequired,
          toggle: _propTypes.default.func.isRequired,
          inNavbar: _propTypes.default.bool.isRequired
        };

        var DropdownToggle = (function(_React$Component) {
          inherits(DropdownToggle, _React$Component);

          function DropdownToggle(props) {
            classCallCheck(this, DropdownToggle);

            var _this = possibleConstructorReturn(
              this,
              (
                DropdownToggle.__proto__ ||
                Object.getPrototypeOf(DropdownToggle)
              ).call(this, props)
            );

            _this.onClick = _this.onClick.bind(_this);
            return _this;
          }

          createClass(DropdownToggle, [
            {
              key: "onClick",
              value: function onClick(e) {
                if (this.props.disabled) {
                  e.preventDefault();
                  return;
                }

                if (this.props.nav && !this.props.tag) {
                  e.preventDefault();
                }

                if (this.props.onClick) {
                  this.props.onClick(e);
                }

                this.context.toggle(e);
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  className = _props.className,
                  color = _props.color,
                  cssModule = _props.cssModule,
                  caret = _props.caret,
                  split = _props.split,
                  nav = _props.nav,
                  tag = _props.tag,
                  props = objectWithoutProperties(_props, [
                    "className",
                    "color",
                    "cssModule",
                    "caret",
                    "split",
                    "nav",
                    "tag"
                  ]);
                var ariaLabel = props["aria-label"] || "Toggle Dropdown";
                var classes = mapToCssModules(
                  (0, _classnames.default)(className, {
                    "dropdown-toggle": caret || split,
                    "dropdown-toggle-split": split,
                    "nav-link": nav
                  }),
                  cssModule
                );

                var children =
                  props.children ||
                  _react.default.createElement(
                    "span",
                    {
                      className: "sr-only"
                    },
                    ariaLabel
                  );

                var Tag = void 0;

                if (nav && !tag) {
                  Tag = "a";
                  props.href = "#";
                } else if (!tag) {
                  Tag = Button;
                  props.color = color;
                  props.cssModule = cssModule;
                } else {
                  Tag = tag;
                }

                if (this.context.inNavbar) {
                  return _react.default.createElement(
                    Tag,
                    _extends({}, props, {
                      className: classes,
                      onClick: this.onClick,
                      "aria-expanded": this.context.isOpen,
                      children: children
                    })
                  );
                }

                return _react.default.createElement(
                  _reactPopper.Target,
                  _extends({}, props, {
                    className: classes,
                    component: Tag,
                    onClick: this.onClick,
                    "aria-expanded": this.context.isOpen,
                    children: children
                  })
                );
              }
            }
          ]);
          return DropdownToggle;
        })(_react.default.Component);

        exports.DropdownToggle = DropdownToggle;
        DropdownToggle.propTypes = propTypes$18;
        DropdownToggle.defaultProps = defaultProps$17;
        DropdownToggle.contextTypes = contextTypes$2;

        function unwrapExports(x) {
          return x &&
            x.__esModule &&
            Object.prototype.hasOwnProperty.call(x, "default")
            ? x["default"]
            : x;
        }

        function createCommonjsModule(fn, module) {
          return (
            (module = {
              exports: {}
            }),
            fn(module, module.exports),
            module.exports
          );
        }

        var PropTypes$1 = createCommonjsModule(function(module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.classNamesShape = exports.timeoutsShape = undefined;
          exports.transitionTimeout = transitionTimeout;

          var _propTypes2 = _interopRequireDefault(_propTypes.default);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          function transitionTimeout(transitionType) {
            var timeoutPropName = "transition" + transitionType + "Timeout";
            var enabledPropName = "transition" + transitionType;
            return function(props) {
              // If the transition is enabled
              if (props[enabledPropName]) {
                // If no timeout duration is provided
                if (props[timeoutPropName] == null) {
                  return new Error(
                    timeoutPropName +
                      " wasn't supplied to CSSTransitionGroup: " +
                      "this can cause unreliable animations and won't be supported in " +
                      "a future version of React. See " +
                      "https://fb.me/react-animation-transition-group-timeout for more " +
                      "information."
                  ); // If the duration isn't a number
                } else if (typeof props[timeoutPropName] !== "number") {
                  return new Error(
                    timeoutPropName + " must be a number (in milliseconds)"
                  );
                }
              }

              return null;
            };
          }

          var timeoutsShape = (exports.timeoutsShape = _propTypes2.default.oneOfType(
            [
              _propTypes2.default.number,
              _propTypes2.default.shape({
                enter: _propTypes2.default.number,
                exit: _propTypes2.default.number
              }).isRequired
            ]
          ));

          var classNamesShape = (exports.classNamesShape = _propTypes2.default.oneOfType(
            [
              _propTypes2.default.string,
              _propTypes2.default.shape({
                enter: _propTypes2.default.string,
                exit: _propTypes2.default.string,
                active: _propTypes2.default.string
              }),
              _propTypes2.default.shape({
                enter: _propTypes2.default.string,
                enterDone: _propTypes2.default.string,
                enterActive: _propTypes2.default.string,
                exit: _propTypes2.default.string,
                exitDone: _propTypes2.default.string,
                exitActive: _propTypes2.default.string
              })
            ]
          ));
        });
        unwrapExports(PropTypes$1);
        var Transition_1 = createCommonjsModule(function(module, exports) {
          "use strict";

          exports.__esModule = true;
          exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;

          var PropTypes$$1 = _interopRequireWildcard(_propTypes.default);

          var _react2 = _interopRequireDefault(_react.default);

          var _reactDom2 = _interopRequireDefault(_reactDom.default);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          function _objectWithoutProperties(obj, keys) {
            var target = {};

            for (var i in obj) {
              if (keys.indexOf(i) >= 0) continue;
              if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
              target[i] = obj[i];
            }

            return target;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return call &&
              ((typeof call === "undefined" ? "undefined" : _typeof(call)) ===
                "object" ||
                typeof call === "function")
              ? call
              : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function, not " +
                  (typeof superClass === "undefined"
                    ? "undefined"
                    : _typeof(superClass))
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              }
            );
            if (superClass)
              Object.setPrototypeOf
                ? Object.setPrototypeOf(subClass, superClass)
                : (subClass.__proto__ = superClass);
          }

          var UNMOUNTED = (exports.UNMOUNTED = "unmounted");
          var EXITED = (exports.EXITED = "exited");
          var ENTERING = (exports.ENTERING = "entering");
          var ENTERED = (exports.ENTERED = "entered");
          var EXITING = (exports.EXITING = "exiting");
          /**
           * The Transition component lets you describe a transition from one component
           * state to another _over time_ with a simple declarative API. Most commonly
           * it's used to animate the mounting and unmounting of a component, but can also
           * be used to describe in-place transition states as well.
           *
           * By default the `Transition` component does not alter the behavior of the
           * component it renders, it only tracks "enter" and "exit" states for the components.
           * It's up to you to give meaning and effect to those states. For example we can
           * add styles to a component when it enters or exits:
           *
           * ```jsx
           * import Transition from 'react-transition-group/Transition';
           *
           * const duration = 300;
           *
           * const defaultStyle = {
           *   transition: `opacity ${duration}ms ease-in-out`,
           *   opacity: 0,
           * }
           *
           * const transitionStyles = {
           *   entering: { opacity: 0 },
           *   entered:  { opacity: 1 },
           * };
           *
           * const Fade = ({ in: inProp }) => (
           *   <Transition in={inProp} timeout={duration}>
           *     {(state) => (
           *       <div style={{
           *         ...defaultStyle,
           *         ...transitionStyles[state]
           *       }}>
           *         I'm a fade Transition!
           *       </div>
           *     )}
           *   </Transition>
           * );
           * ```
           *
           * As noted the `Transition` component doesn't _do_ anything by itself to its child component.
           * What it does do is track transition states over time so you can update the
           * component (such as by adding styles or classes) when it changes states.
           *
           * There are 4 main states a Transition can be in:
           *  - `'entering'`
           *  - `'entered'`
           *  - `'exiting'`
           *  - `'exited'`
           *
           * Transition state is toggled via the `in` prop. When `true` the component begins the
           * "Enter" stage. During this stage, the component will shift from its current transition state,
           * to `'entering'` for the duration of the transition and then to the `'entered'` stage once
           * it's complete. Let's take the following example:
           *
           * ```jsx
           * state = { in: false };
           *
           * toggleEnterState = () => {
           *   this.setState({ in: true });
           * }
           *
           * render() {
           *   return (
           *     <div>
           *       <Transition in={this.state.in} timeout={500} />
           *       <button onClick={this.toggleEnterState}>Click to Enter</button>
           *     </div>
           *   );
           * }
           * ```
           *
           * When the button is clicked the component will shift to the `'entering'` state and
           * stay there for 500ms (the value of `timeout`) before it finally switches to `'entered'`.
           *
           * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.
           *
           * ## Timing
           *
           * Timing is often the trickiest part of animation, mistakes can result in slight delays
           * that are hard to pin down. A common example is when you want to add an exit transition,
           * you should set the desired final styles when the state is `'exiting'`. That's when the
           * transition to those styles will start and, if you matched the `timeout` prop with the
           * CSS Transition duration, it will end exactly when the state changes to `'exited'`.
           *
           * > **Note**: For simpler transitions the `Transition` component might be enough, but
           * > take into account that it's platform-agnostic, while the `CSSTransition` component
           * > [forces reflows](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
           * > in order to make more complex transitions more predictable. For example, even though
           * > classes `example-enter` and `example-enter-active` are applied immediately one after
           * > another, you can still transition from one to the other because of the forced reflow
           * > (read [this issue](https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171)
           * > for more info). Take this into account when choosing between `Transition` and
           * > `CSSTransition`.
           *
           * ## Example
           *
           * <iframe src="https://codesandbox.io/embed/741op4mmj0?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
           *
           */

          var Transition = (function(_React$Component) {
            _inherits(Transition, _React$Component);

            function Transition(props, context) {
              _classCallCheck(this, Transition);

              var _this = _possibleConstructorReturn(
                this,
                _React$Component.call(this, props, context)
              );

              var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

              var appear =
                parentGroup && !parentGroup.isMounting
                  ? props.enter
                  : props.appear;
              var initialStatus = void 0;
              _this.nextStatus = null;

              if (props.in) {
                if (appear) {
                  initialStatus = EXITED;
                  _this.nextStatus = ENTERING;
                } else {
                  initialStatus = ENTERED;
                }
              } else {
                if (props.unmountOnExit || props.mountOnEnter) {
                  initialStatus = UNMOUNTED;
                } else {
                  initialStatus = EXITED;
                }
              }

              _this.state = {
                status: initialStatus
              };
              _this.nextCallback = null;
              return _this;
            }

            Transition.prototype.getChildContext = function getChildContext() {
              return {
                transitionGroup: null
              }; // allows for nested Transitions
            };

            Transition.prototype.componentDidMount = function componentDidMount() {
              this.updateStatus(true);
            };

            Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(
              nextProps
            ) {
              var _ref = this.pendingState || this.state,
                status = _ref.status;

              if (nextProps.in) {
                if (status === UNMOUNTED) {
                  this.setState({
                    status: EXITED
                  });
                }

                if (status !== ENTERING && status !== ENTERED) {
                  this.nextStatus = ENTERING;
                }
              } else {
                if (status === ENTERING || status === ENTERED) {
                  this.nextStatus = EXITING;
                }
              }
            };

            Transition.prototype.componentDidUpdate = function componentDidUpdate() {
              this.updateStatus();
            };

            Transition.prototype.componentWillUnmount = function componentWillUnmount() {
              this.cancelNextCallback();
            };

            Transition.prototype.getTimeouts = function getTimeouts() {
              var timeout = this.props.timeout;
              var exit = void 0,
                enter = void 0,
                appear = void 0;
              exit = enter = appear = timeout;

              if (timeout != null && typeof timeout !== "number") {
                exit = timeout.exit;
                enter = timeout.enter;
                appear = timeout.appear;
              }

              return {
                exit: exit,
                enter: enter,
                appear: appear
              };
            };

            Transition.prototype.updateStatus = function updateStatus() {
              var mounting =
                arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : false;
              var nextStatus = this.nextStatus;

              if (nextStatus !== null) {
                this.nextStatus = null; // nextStatus will always be ENTERING or EXITING.

                this.cancelNextCallback();

                var node = _reactDom2.default.findDOMNode(this);

                if (nextStatus === ENTERING) {
                  this.performEnter(node, mounting);
                } else {
                  this.performExit(node);
                }
              } else if (
                this.props.unmountOnExit &&
                this.state.status === EXITED
              ) {
                this.setState({
                  status: UNMOUNTED
                });
              }
            };

            Transition.prototype.performEnter = function performEnter(
              node,
              mounting
            ) {
              var _this2 = this;

              var enter = this.props.enter;
              var appearing = this.context.transitionGroup
                ? this.context.transitionGroup.isMounting
                : mounting;
              var timeouts = this.getTimeouts(); // no enter animation skip right to ENTERED
              // if we are mounting and running this it means appear _must_ be set

              if (!mounting && !enter) {
                this.safeSetState(
                  {
                    status: ENTERED
                  },
                  function() {
                    _this2.props.onEntered(node);
                  }
                );
                return;
              }

              this.props.onEnter(node, appearing);
              this.safeSetState(
                {
                  status: ENTERING
                },
                function() {
                  _this2.props.onEntering(node, appearing); // FIXME: appear timeout?

                  _this2.onTransitionEnd(node, timeouts.enter, function() {
                    _this2.safeSetState(
                      {
                        status: ENTERED
                      },
                      function() {
                        _this2.props.onEntered(node, appearing);
                      }
                    );
                  });
                }
              );
            };

            Transition.prototype.performExit = function performExit(node) {
              var _this3 = this;

              var exit = this.props.exit;
              var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

              if (!exit) {
                this.safeSetState(
                  {
                    status: EXITED
                  },
                  function() {
                    _this3.props.onExited(node);
                  }
                );
                return;
              }

              this.props.onExit(node);
              this.safeSetState(
                {
                  status: EXITING
                },
                function() {
                  _this3.props.onExiting(node);

                  _this3.onTransitionEnd(node, timeouts.exit, function() {
                    _this3.safeSetState(
                      {
                        status: EXITED
                      },
                      function() {
                        _this3.props.onExited(node);
                      }
                    );
                  });
                }
              );
            };

            Transition.prototype.cancelNextCallback = function cancelNextCallback() {
              if (this.nextCallback !== null) {
                this.nextCallback.cancel();
                this.nextCallback = null;
              }
            };

            Transition.prototype.safeSetState = function safeSetState(
              nextState,
              callback
            ) {
              var _this4 = this; // We need to track pending updates for instances where a cWRP fires quickly
              // after cDM and before the state flushes, which would double trigger a
              // transition

              this.pendingState = nextState; // This shouldn't be necessary, but there are weird race conditions with
              // setState callbacks and unmounting in testing, so always make sure that
              // we can cancel any pending setState callbacks after we unmount.

              callback = this.setNextCallback(callback);
              this.setState(nextState, function() {
                _this4.pendingState = null;
                callback();
              });
            };

            Transition.prototype.setNextCallback = function setNextCallback(
              callback
            ) {
              var _this5 = this;

              var active = true;

              this.nextCallback = function(event) {
                if (active) {
                  active = false;
                  _this5.nextCallback = null;
                  callback(event);
                }
              };

              this.nextCallback.cancel = function() {
                active = false;
              };

              return this.nextCallback;
            };

            Transition.prototype.onTransitionEnd = function onTransitionEnd(
              node,
              timeout,
              handler
            ) {
              this.setNextCallback(handler);

              if (node) {
                if (this.props.addEndListener) {
                  this.props.addEndListener(node, this.nextCallback);
                }

                if (timeout != null) {
                  setTimeout(this.nextCallback, timeout);
                }
              } else {
                setTimeout(this.nextCallback, 0);
              }
            };

            Transition.prototype.render = function render() {
              var status = this.state.status;

              if (status === UNMOUNTED) {
                return null;
              }

              var _props = this.props,
                children = _props.children,
                childProps = _objectWithoutProperties(_props, ["children"]); // filter props for Transtition

              delete childProps.in;
              delete childProps.mountOnEnter;
              delete childProps.unmountOnExit;
              delete childProps.appear;
              delete childProps.enter;
              delete childProps.exit;
              delete childProps.timeout;
              delete childProps.addEndListener;
              delete childProps.onEnter;
              delete childProps.onEntering;
              delete childProps.onEntered;
              delete childProps.onExit;
              delete childProps.onExiting;
              delete childProps.onExited;

              if (typeof children === "function") {
                return children(status, childProps);
              }

              var child = _react2.default.Children.only(children);

              return _react2.default.cloneElement(child, childProps);
            };

            return Transition;
          })(_react2.default.Component);

          Transition.contextTypes = {
            transitionGroup: PropTypes$$1.object
          };
          Transition.childContextTypes = {
            transitionGroup: function transitionGroup() {}
          };
          Transition.propTypes =
            "development" !== "production"
              ? {
                  /**
                   * A `function` child can be used instead of a React element.
                   * This function is called with the current transition status
                   * ('entering', 'entered', 'exiting', 'exited', 'unmounted'), which can be used
                   * to apply context specific props to a component.
                   *
                   * ```jsx
                   * <Transition timeout={150}>
                   *   {(status) => (
                   *     <MyComponent className={`fade fade-${status}`} />
                   *   )}
                   * </Transition>
                   * ```
                   */
                  children: PropTypes$$1.oneOfType([
                    PropTypes$$1.func.isRequired,
                    PropTypes$$1.element.isRequired
                  ]).isRequired,

                  /**
                   * Show the component; triggers the enter or exit states
                   */
                  in: PropTypes$$1.bool,

                  /**
                   * By default the child component is mounted immediately along with
                   * the parent `Transition` component. If you want to "lazy mount" the component on the
                   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
                   * mounted, even on "exited", unless you also specify `unmountOnExit`.
                   */
                  mountOnEnter: PropTypes$$1.bool,

                  /**
                   * By default the child component stays mounted after it reaches the `'exited'` state.
                   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
                   */
                  unmountOnExit: PropTypes$$1.bool,

                  /**
                   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
                   * If you want to transition on the first mount set `appear` to `true`, and the
                   * component will transition in as soon as the `<Transition>` mounts.
                   *
                   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
                   */
                  appear: PropTypes$$1.bool,

                  /**
                   * Enable or disable enter transitions.
                   */
                  enter: PropTypes$$1.bool,

                  /**
                   * Enable or disable exit transitions.
                   */
                  exit: PropTypes$$1.bool,

                  /**
                   * The duration of the transition, in milliseconds.
                   * Required unless `addEndListener` is provided
                   *
                   * You may specify a single timeout for all transitions like: `timeout={500}`,
                   * or individually like:
                   *
                   * ```jsx
                   * timeout={{
                   *  enter: 300,
                   *  exit: 500,
                   * }}
                   * ```
                   *
                   * @type {number | { enter?: number, exit?: number }}
                   */
                  timeout: function timeout(props) {
                    for (
                      var _len = arguments.length,
                        args = Array(_len > 1 ? _len - 1 : 0),
                        _key = 1;
                      _key < _len;
                      _key++
                    ) {
                      args[_key - 1] = arguments[_key];
                    }

                    var pt = PropTypes$1.timeoutsShape;
                    if (!props.addEndListener) pt = pt.isRequired;
                    return pt.apply(undefined, [props].concat(args));
                  },

                  /**
                   * Add a custom transition end trigger. Called with the transitioning
                   * DOM node and a `done` callback. Allows for more fine grained transition end
                   * logic. **Note:** Timeouts are still used as a fallback if provided.
                   *
                   * ```jsx
                   * addEndListener={(node, done) => {
                   *   // use the css transitionend event to mark the finish of a transition
                   *   node.addEventListener('transitionend', done, false);
                   * }}
                   * ```
                   */
                  addEndListener: PropTypes$$1.func,

                  /**
                   * Callback fired before the "entering" status is applied. An extra parameter
                   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
                   *
                   * @type Function(node: HtmlElement, isAppearing: bool) -> void
                   */
                  onEnter: PropTypes$$1.func,

                  /**
                   * Callback fired after the "entering" status is applied. An extra parameter
                   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
                   *
                   * @type Function(node: HtmlElement, isAppearing: bool)
                   */
                  onEntering: PropTypes$$1.func,

                  /**
                   * Callback fired after the "entered" status is applied. An extra parameter
                   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
                   *
                   * @type Function(node: HtmlElement, isAppearing: bool) -> void
                   */
                  onEntered: PropTypes$$1.func,

                  /**
                   * Callback fired before the "exiting" status is applied.
                   *
                   * @type Function(node: HtmlElement) -> void
                   */
                  onExit: PropTypes$$1.func,

                  /**
                   * Callback fired after the "exiting" status is applied.
                   *
                   * @type Function(node: HtmlElement) -> void
                   */
                  onExiting: PropTypes$$1.func,

                  /**
                   * Callback fired after the "exited" status is applied.
                   *
                   * @type Function(node: HtmlElement) -> void
                   */
                  onExited: PropTypes$$1.func
                }
              : {}; // Name the function so it is clearer in the documentation

          function noop() {}

          Transition.defaultProps = {
            in: false,
            mountOnEnter: false,
            unmountOnExit: false,
            appear: false,
            enter: true,
            exit: true,
            onEnter: noop,
            onEntering: noop,
            onEntered: noop,
            onExit: noop,
            onExiting: noop,
            onExited: noop
          };
          Transition.UNMOUNTED = 0;
          Transition.EXITED = 1;
          Transition.ENTERING = 2;
          Transition.ENTERED = 3;
          Transition.EXITING = 4;
          exports.default = Transition;
        });
        var Transition = unwrapExports(Transition_1);

        var propTypes$19 = _extends({}, Transition.propTypes, {
          children: _propTypes.default.oneOfType([
            _propTypes.default.arrayOf(_propTypes.default.node),
            _propTypes.default.node
          ]),
          tag: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.func
          ]),
          baseClass: _propTypes.default.string,
          baseClassActive: _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.string,
            _propTypes.default.func
          ])
        });

        var defaultProps$18 = _extends({}, Transition.defaultProps, {
          tag: "div",
          baseClass: "fade",
          baseClassActive: "show",
          timeout: TransitionTimeouts.Fade,
          appear: true,
          enter: true,
          exit: true,
          in: true
        });

        function Fade(props) {
          var Tag = props.tag,
            baseClass = props.baseClass,
            baseClassActive = props.baseClassActive,
            className = props.className,
            cssModule = props.cssModule,
            children = props.children,
            innerRef = props.innerRef,
            otherProps = objectWithoutProperties(props, [
              "tag",
              "baseClass",
              "baseClassActive",
              "className",
              "cssModule",
              "children",
              "innerRef"
            ]); // In NODE_ENV=production the Transition.propTypes are wrapped which results in an
          // empty object "{}". This is the result of the `react-transition-group` babel
          // configuration settings. Therefore, to ensure that production builds work without
          // error, we can either explicitly define keys or use the Transition.defaultProps.
          // Using the Transition.defaultProps excludes any required props. Thus, the best
          // solution is to explicitly define required props in our utilities and reference these.
          // This also gives us more flexibility in the future to remove the prop-types
          // dependency in distribution builds (Similar to how `react-transition-group` does).
          // Note: Without omitting the `react-transition-group` props, the resulting child
          // Tag component would inherit the Transition properties as attributes for the HTML
          // element which results in errors/warnings for non-valid attributes.

          var transitionProps = pick(otherProps, TransitionPropTypeKeys);
          var childProps = omit(otherProps, TransitionPropTypeKeys);
          return _react.default.createElement(
            Transition,
            transitionProps,
            function(status) {
              var isActive = status === "entered";
              var classes = mapToCssModules(
                (0, _classnames.default)(
                  className,
                  baseClass,
                  isActive && baseClassActive
                ),
                cssModule
              );
              return _react.default.createElement(
                Tag,
                _extends(
                  {
                    className: classes
                  },
                  childProps,
                  {
                    ref: innerRef
                  }
                ),
                children
              );
            }
          );
        }

        Fade.propTypes = propTypes$19;
        Fade.defaultProps = defaultProps$18;
        var propTypes$20 = {
          color: _propTypes.default.string,
          pill: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$19 = {
          color: "secondary",
          pill: false,
          tag: "span"
        };

        var Badge = function Badge(props) {
          var className = props.className,
            cssModule = props.cssModule,
            color = props.color,
            pill = props.pill,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "color",
              "pill",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "badge",
              "badge-" + color,
              pill ? "badge-pill" : false
            ),
            cssModule
          );

          if (attributes.href && Tag === "span") {
            Tag = "a";
          }

          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Badge = Badge;
        Badge.propTypes = propTypes$20;
        Badge.defaultProps = defaultProps$19;
        var propTypes$21 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          inverse: _propTypes.default.bool,
          color: _propTypes.default.string,
          block: deprecated(
            _propTypes.default.bool,
            'Please use the props "body"'
          ),
          body: _propTypes.default.bool,
          outline: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.string,
            _propTypes.default.func
          ])
        };
        var defaultProps$20 = {
          tag: "div"
        };

        var Card = function Card(props) {
          var className = props.className,
            cssModule = props.cssModule,
            color = props.color,
            block = props.block,
            body = props.body,
            inverse = props.inverse,
            outline = props.outline,
            Tag = props.tag,
            innerRef = props.innerRef,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "color",
              "block",
              "body",
              "inverse",
              "outline",
              "tag",
              "innerRef"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "card",
              inverse ? "text-white" : false,
              block || body ? "card-body" : false,
              color ? (outline ? "border" : "bg") + "-" + color : false
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes,
              ref: innerRef
            })
          );
        };

        exports.Card = Card;
        Card.propTypes = propTypes$21;
        Card.defaultProps = defaultProps$20;
        var propTypes$22 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$21 = {
          tag: "div"
        };

        var CardGroup = function CardGroup(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-group"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardGroup = CardGroup;
        CardGroup.propTypes = propTypes$22;
        CardGroup.defaultProps = defaultProps$21;
        var propTypes$23 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$22 = {
          tag: "div"
        };

        var CardDeck = function CardDeck(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-deck"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardDeck = CardDeck;
        CardDeck.propTypes = propTypes$23;
        CardDeck.defaultProps = defaultProps$22;
        var propTypes$24 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$23 = {
          tag: "div"
        };

        var CardColumns = function CardColumns(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-columns"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardColumns = CardColumns;
        CardColumns.propTypes = propTypes$24;
        CardColumns.defaultProps = defaultProps$23;
        var propTypes$25 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$24 = {
          tag: "div"
        };

        var CardBody = function CardBody(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-body"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardBody = CardBody;
        CardBody.propTypes = propTypes$25;
        CardBody.defaultProps = defaultProps$24;

        function CardBlock(props) {
          warnOnce(
            'The "CardBlock" component has been deprecated.\nPlease use component "CardBody".'
          );
          return _react.default.createElement(CardBody, props);
        }

        var propTypes$26 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$25 = {
          tag: "a"
        };

        var CardLink = function CardLink(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            innerRef = props.innerRef,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag",
              "innerRef"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-link"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              ref: innerRef,
              className: classes
            })
          );
        };

        exports.CardLink = CardLink;
        CardLink.propTypes = propTypes$26;
        CardLink.defaultProps = defaultProps$25;
        var propTypes$27 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$26 = {
          tag: "div"
        };

        var CardFooter = function CardFooter(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-footer"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardFooter = CardFooter;
        CardFooter.propTypes = propTypes$27;
        CardFooter.defaultProps = defaultProps$26;
        var propTypes$28 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$27 = {
          tag: "div"
        };

        var CardHeader = function CardHeader(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-header"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardHeader = CardHeader;
        CardHeader.propTypes = propTypes$28;
        CardHeader.defaultProps = defaultProps$27;
        var propTypes$29 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          top: _propTypes.default.bool,
          bottom: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$28 = {
          tag: "img"
        };

        var CardImg = function CardImg(props) {
          var className = props.className,
            cssModule = props.cssModule,
            top = props.top,
            bottom = props.bottom,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "top",
              "bottom",
              "tag"
            ]);
          var cardImgClassName = "card-img";

          if (top) {
            cardImgClassName = "card-img-top";
          }

          if (bottom) {
            cardImgClassName = "card-img-bottom";
          }

          var classes = mapToCssModules(
            (0, _classnames.default)(className, cardImgClassName),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardImg = CardImg;
        CardImg.propTypes = propTypes$29;
        CardImg.defaultProps = defaultProps$28;
        var propTypes$30 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$29 = {
          tag: "div"
        };

        var CardImgOverlay = function CardImgOverlay(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-img-overlay"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardImgOverlay = CardImgOverlay;
        CardImgOverlay.propTypes = propTypes$30;
        CardImgOverlay.defaultProps = defaultProps$29;

        var CarouselItem = (function(_React$Component) {
          inherits(CarouselItem, _React$Component);

          function CarouselItem(props) {
            classCallCheck(this, CarouselItem);

            var _this = possibleConstructorReturn(
              this,
              (
                CarouselItem.__proto__ || Object.getPrototypeOf(CarouselItem)
              ).call(this, props)
            );

            _this.state = {
              startAnimation: false
            };
            _this.onEnter = _this.onEnter.bind(_this);
            _this.onEntering = _this.onEntering.bind(_this);
            _this.onExit = _this.onExit.bind(_this);
            _this.onExiting = _this.onExiting.bind(_this);
            _this.onExited = _this.onExited.bind(_this);
            return _this;
          }

          createClass(CarouselItem, [
            {
              key: "onEnter",
              value: function onEnter(node, isAppearing) {
                this.setState({
                  startAnimation: false
                });
                this.props.onEnter(node, isAppearing);
              }
            },
            {
              key: "onEntering",
              value: function onEntering(node, isAppearing) {
                // getting this variable triggers a reflow
                var offsetHeight = node.offsetHeight;
                this.setState({
                  startAnimation: true
                });
                this.props.onEntering(node, isAppearing);
                return offsetHeight;
              }
            },
            {
              key: "onExit",
              value: function onExit(node) {
                this.setState({
                  startAnimation: false
                });
                this.props.onExit(node);
              }
            },
            {
              key: "onExiting",
              value: function onExiting(node) {
                this.setState({
                  startAnimation: true
                });
                node.dispatchEvent(new CustomEvent("slide.bs.carousel"));
                this.props.onExiting(node);
              }
            },
            {
              key: "onExited",
              value: function onExited(node) {
                node.dispatchEvent(new CustomEvent("slid.bs.carousel"));
                this.props.onExited(node);
              }
            },
            {
              key: "render",
              value: function render() {
                var _this2 = this;

                var _props = this.props,
                  isIn = _props.in,
                  children = _props.children,
                  cssModule = _props.cssModule,
                  slide = _props.slide,
                  Tag = _props.tag,
                  className = _props.className,
                  transitionProps = objectWithoutProperties(_props, [
                    "in",
                    "children",
                    "cssModule",
                    "slide",
                    "tag",
                    "className"
                  ]);
                return _react.default.createElement(
                  Transition,
                  _extends({}, transitionProps, {
                    enter: slide,
                    exit: slide,
                    in: isIn,
                    onEnter: this.onEnter,
                    onEntering: this.onEntering,
                    onExit: this.onExit,
                    onExiting: this.onExiting,
                    onExited: this.onExited
                  }),
                  function(status) {
                    var direction = _this2.context.direction;
                    var isActive =
                      status === TransitionStatuses.ENTERED ||
                      status === TransitionStatuses.EXITING;
                    var directionClassName =
                      (status === TransitionStatuses.ENTERING ||
                        status === TransitionStatuses.EXITING) &&
                      _this2.state.startAnimation &&
                      (direction === "right"
                        ? "carousel-item-left"
                        : "carousel-item-right");
                    var orderClassName =
                      status === TransitionStatuses.ENTERING &&
                      (direction === "right"
                        ? "carousel-item-next"
                        : "carousel-item-prev");
                    var itemClasses = mapToCssModules(
                      (0, _classnames.default)(
                        className,
                        "carousel-item",
                        isActive && "active",
                        directionClassName,
                        orderClassName
                      ),
                      cssModule
                    );
                    return _react.default.createElement(
                      Tag,
                      {
                        className: itemClasses
                      },
                      children
                    );
                  }
                );
              }
            }
          ]);
          return CarouselItem;
        })(_react.default.Component);

        exports.CarouselItem = CarouselItem;
        CarouselItem.propTypes = _extends({}, Transition.propTypes, {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          in: _propTypes.default.bool,
          cssModule: _propTypes.default.object,
          children: _propTypes.default.node,
          slide: _propTypes.default.bool,
          className: _propTypes.default.string
        });
        CarouselItem.defaultProps = _extends({}, Transition.defaultProps, {
          tag: "div",
          timeout: TransitionTimeouts.Carousel,
          slide: true
        });
        CarouselItem.contextTypes = {
          direction: _propTypes.default.string
        };

        var Carousel = (function(_React$Component) {
          inherits(Carousel, _React$Component);

          function Carousel(props) {
            classCallCheck(this, Carousel);

            var _this = possibleConstructorReturn(
              this,
              (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(
                this,
                props
              )
            );

            _this.handleKeyPress = _this.handleKeyPress.bind(_this);
            _this.renderItems = _this.renderItems.bind(_this);
            _this.hoverStart = _this.hoverStart.bind(_this);
            _this.hoverEnd = _this.hoverEnd.bind(_this);
            _this.state = {
              direction: "right",
              indicatorClicked: false
            };
            return _this;
          }

          createClass(Carousel, [
            {
              key: "getChildContext",
              value: function getChildContext() {
                return {
                  direction: this.state.direction
                };
              }
            },
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                // Set up the cycle
                if (this.props.ride === "carousel") {
                  this.setInterval();
                } // TODO: move this to the specific carousel like bootstrap. Currently it will trigger ALL carousels on the page.

                document.addEventListener("keyup", this.handleKeyPress);
              }
            },
            {
              key: "componentWillReceiveProps",
              value: function componentWillReceiveProps(nextProps) {
                this.setInterval(nextProps); // Calculate the direction to turn

                if (this.props.activeIndex + 1 === nextProps.activeIndex) {
                  this.setState({
                    direction: "right"
                  });
                } else if (
                  this.props.activeIndex - 1 ===
                  nextProps.activeIndex
                ) {
                  this.setState({
                    direction: "left"
                  });
                } else if (this.props.activeIndex > nextProps.activeIndex) {
                  this.setState({
                    direction: this.state.indicatorClicked ? "left" : "right"
                  });
                } else if (this.props.activeIndex !== nextProps.activeIndex) {
                  this.setState({
                    direction: this.state.indicatorClicked ? "right" : "left"
                  });
                }

                this.setState({
                  indicatorClicked: false
                });
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                this.clearInterval();
                document.removeEventListener("keyup", this.handleKeyPress);
              }
            },
            {
              key: "setInterval",
              value: (function(_setInterval) {
                function setInterval() {
                  return _setInterval.apply(this, arguments);
                }

                setInterval.toString = function() {
                  return _setInterval.toString();
                };

                return setInterval;
              })(function() {
                var props =
                  arguments.length > 0 && arguments[0] !== undefined
                    ? arguments[0]
                    : this.props; // make sure not to have multiple intervals going...

                this.clearInterval();

                if (props.interval) {
                  this.cycleInterval = setInterval(function() {
                    props.next();
                  }, parseInt(props.interval, 10));
                }
              })
            },
            {
              key: "clearInterval",
              value: (function(_clearInterval) {
                function clearInterval() {
                  return _clearInterval.apply(this, arguments);
                }

                clearInterval.toString = function() {
                  return _clearInterval.toString();
                };

                return clearInterval;
              })(function() {
                clearInterval(this.cycleInterval);
              })
            },
            {
              key: "hoverStart",
              value: function hoverStart() {
                if (this.props.pause === "hover") {
                  this.clearInterval();
                }

                if (this.props.mouseEnter) {
                  var _props;

                  (_props = this.props).mouseEnter.apply(_props, arguments);
                }
              }
            },
            {
              key: "hoverEnd",
              value: function hoverEnd() {
                if (this.props.pause === "hover") {
                  this.setInterval();
                }

                if (this.props.mouseLeave) {
                  var _props2;

                  (_props2 = this.props).mouseLeave.apply(_props2, arguments);
                }
              }
            },
            {
              key: "handleKeyPress",
              value: function handleKeyPress(evt) {
                if (this.props.keyboard) {
                  if (evt.keyCode === 37) {
                    this.props.previous();
                  } else if (evt.keyCode === 39) {
                    this.props.next();
                  }
                }
              }
            },
            {
              key: "renderItems",
              value: function renderItems(carouselItems, className) {
                var _this2 = this;

                var slide = this.props.slide;
                return _react.default.createElement(
                  "div",
                  {
                    role: "listbox",
                    className: className
                  },
                  carouselItems.map(function(item, index) {
                    var isIn = index === _this2.props.activeIndex;
                    return _react.default.cloneElement(item, {
                      in: isIn,
                      slide: slide
                    });
                  })
                );
              }
            },
            {
              key: "render",
              value: function render() {
                var _this3 = this;

                var _props3 = this.props,
                  cssModule = _props3.cssModule,
                  slide = _props3.slide,
                  className = _props3.className;
                var outerClasses = mapToCssModules(
                  (0, _classnames.default)(
                    className,
                    "carousel",
                    slide && "slide"
                  ),
                  cssModule
                );
                var innerClasses = mapToCssModules(
                  (0, _classnames.default)("carousel-inner"),
                  cssModule
                ); // filter out booleans, null, or undefined

                var children = this.props.children.filter(function(child) {
                  return (
                    child !== null &&
                    child !== undefined &&
                    typeof child !== "boolean"
                  );
                });
                var slidesOnly = children.every(function(child) {
                  return child.type === CarouselItem;
                }); // Rendering only slides

                if (slidesOnly) {
                  return _react.default.createElement(
                    "div",
                    {
                      className: outerClasses,
                      onMouseEnter: this.hoverStart,
                      onMouseLeave: this.hoverEnd
                    },
                    this.renderItems(children, innerClasses)
                  );
                } // Rendering slides and controls

                if (children[0] instanceof Array) {
                  var _carouselItems = children[0];
                  var _controlLeft = children[1];
                  var _controlRight = children[2];
                  return _react.default.createElement(
                    "div",
                    {
                      className: outerClasses,
                      onMouseEnter: this.hoverStart,
                      onMouseLeave: this.hoverEnd
                    },
                    this.renderItems(_carouselItems, innerClasses),
                    _controlLeft,
                    _controlRight
                  );
                } // Rendering indicators, slides and controls

                var indicators = children[0];

                var wrappedOnClick = function wrappedOnClick(e) {
                  if (typeof indicators.props.onClickHandler === "function") {
                    _this3.setState(
                      {
                        indicatorClicked: true
                      },
                      function() {
                        return indicators.props.onClickHandler(e);
                      }
                    );
                  }
                };

                var wrappedIndicators = _react.default.cloneElement(
                  indicators,
                  {
                    onClickHandler: wrappedOnClick
                  }
                );

                var carouselItems = children[1];
                var controlLeft = children[2];
                var controlRight = children[3];
                return _react.default.createElement(
                  "div",
                  {
                    className: outerClasses,
                    onMouseEnter: this.hoverStart,
                    onMouseLeave: this.hoverEnd
                  },
                  wrappedIndicators,
                  this.renderItems(carouselItems, innerClasses),
                  controlLeft,
                  controlRight
                );
              }
            }
          ]);
          return Carousel;
        })(_react.default.Component);

        exports.Carousel = Carousel;
        Carousel.propTypes = {
          // the current active slide of the carousel
          activeIndex: _propTypes.default.number,
          // a function which should advance the carousel to the next slide (via activeIndex)
          next: _propTypes.default.func.isRequired,
          // a function which should advance the carousel to the previous slide (via activeIndex)
          previous: _propTypes.default.func.isRequired,
          // controls if the left and right arrow keys should control the carousel
          keyboard: _propTypes.default.bool,

          /* If set to "hover", pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on
           * mouseleave. If set to false, hovering over the carousel won't pause it. (default: "hover")
           */
          pause: _propTypes.default.oneOf(["hover", false]),
          // Autoplays the carousel after the user manually cycles the first item. If "carousel", autoplays the carousel on load.
          // This is how bootstrap defines it... I would prefer a bool named autoplay or something...
          ride: _propTypes.default.oneOf(["carousel"]),
          // the interval at which the carousel automatically cycles (default: 5000)
          // eslint-disable-next-line react/no-unused-prop-types
          interval: _propTypes.default.oneOfType([
            _propTypes.default.number,
            _propTypes.default.string,
            _propTypes.default.bool
          ]),
          children: _propTypes.default.array,
          // called when the mouse enters the Carousel
          mouseEnter: _propTypes.default.func,
          // called when the mouse exits the Carousel
          mouseLeave: _propTypes.default.func,
          // controls whether the slide animation on the Carousel works or not
          slide: _propTypes.default.bool,
          cssModule: _propTypes.default.object,
          className: _propTypes.default.string
        };
        Carousel.defaultProps = {
          interval: 5000,
          pause: "hover",
          keyboard: true,
          slide: true
        };
        Carousel.childContextTypes = {
          direction: _propTypes.default.string
        };

        var CarouselControl = function CarouselControl(props) {
          var direction = props.direction,
            onClickHandler = props.onClickHandler,
            cssModule = props.cssModule,
            directionText = props.directionText,
            className = props.className;
          var anchorClasses = mapToCssModules(
            (0, _classnames.default)(
              className,
              "carousel-control-" + direction
            ),
            cssModule
          );
          var iconClasses = mapToCssModules(
            (0, _classnames.default)("carousel-control-" + direction + "-icon"),
            cssModule
          );
          var screenReaderClasses = mapToCssModules(
            (0, _classnames.default)("sr-only"),
            cssModule
          );
          return _react.default.createElement(
            "a",
            {
              className: anchorClasses,
              role: "button",
              tabIndex: "0",
              onClick: function onClick(e) {
                e.preventDefault();
                onClickHandler();
              }
            },
            _react.default.createElement("span", {
              className: iconClasses,
              "aria-hidden": "true"
            }),
            _react.default.createElement(
              "span",
              {
                className: screenReaderClasses
              },
              directionText || direction
            )
          );
        };

        exports.CarouselControl = CarouselControl;
        CarouselControl.propTypes = {
          direction: _propTypes.default.oneOf(["prev", "next"]).isRequired,
          onClickHandler: _propTypes.default.func.isRequired,
          cssModule: _propTypes.default.object,
          directionText: _propTypes.default.string,
          className: _propTypes.default.string
        };

        var CarouselIndicators = function CarouselIndicators(props) {
          var items = props.items,
            activeIndex = props.activeIndex,
            cssModule = props.cssModule,
            onClickHandler = props.onClickHandler,
            className = props.className;
          var listClasses = mapToCssModules(
            (0, _classnames.default)(className, "carousel-indicators"),
            cssModule
          );
          var indicators = items.map(function(item, idx) {
            var indicatorClasses = mapToCssModules(
              (0, _classnames.default)({
                active: activeIndex === idx
              }),
              cssModule
            );
            return _react.default.createElement("li", {
              key: "" + (item.key || item.src) + item.caption + item.altText,
              onClick: function onClick(e) {
                e.preventDefault();
                onClickHandler(idx);
              },
              className: indicatorClasses
            });
          });
          return _react.default.createElement(
            "ol",
            {
              className: listClasses
            },
            indicators
          );
        };

        exports.CarouselIndicators = CarouselIndicators;
        CarouselIndicators.propTypes = {
          items: _propTypes.default.array.isRequired,
          activeIndex: _propTypes.default.number.isRequired,
          cssModule: _propTypes.default.object,
          onClickHandler: _propTypes.default.func.isRequired,
          className: _propTypes.default.string
        };

        var CarouselCaption = function CarouselCaption(props) {
          var captionHeader = props.captionHeader,
            captionText = props.captionText,
            cssModule = props.cssModule,
            className = props.className;
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "carousel-caption",
              "d-none",
              "d-md-block"
            ),
            cssModule
          );
          return _react.default.createElement(
            "div",
            {
              className: classes
            },
            _react.default.createElement("h3", null, captionHeader),
            _react.default.createElement("p", null, captionText)
          );
        };

        exports.CarouselCaption = CarouselCaption;
        CarouselCaption.propTypes = {
          captionHeader: _propTypes.default.string,
          captionText: _propTypes.default.string.isRequired,
          cssModule: _propTypes.default.object,
          className: _propTypes.default.string
        };
        var propTypes$31 = {
          items: _propTypes.default.array.isRequired,
          indicators: _propTypes.default.bool,
          controls: _propTypes.default.bool,
          autoPlay: _propTypes.default.bool,
          activeIndex: _propTypes.default.number,
          next: _propTypes.default.func,
          previous: _propTypes.default.func,
          goToIndex: _propTypes.default.func
        };

        var UncontrolledCarousel = (function(_Component) {
          inherits(UncontrolledCarousel, _Component);

          function UncontrolledCarousel(props) {
            classCallCheck(this, UncontrolledCarousel);

            var _this = possibleConstructorReturn(
              this,
              (
                UncontrolledCarousel.__proto__ ||
                Object.getPrototypeOf(UncontrolledCarousel)
              ).call(this, props)
            );

            _this.animating = false;
            _this.state = {
              activeIndex: 0
            };
            _this.next = _this.next.bind(_this);
            _this.previous = _this.previous.bind(_this);
            _this.goToIndex = _this.goToIndex.bind(_this);
            _this.onExiting = _this.onExiting.bind(_this);
            _this.onExited = _this.onExited.bind(_this);
            return _this;
          }

          createClass(UncontrolledCarousel, [
            {
              key: "onExiting",
              value: function onExiting() {
                this.animating = true;
              }
            },
            {
              key: "onExited",
              value: function onExited() {
                this.animating = false;
              }
            },
            {
              key: "next",
              value: function next() {
                if (this.animating) return;
                var nextIndex =
                  this.state.activeIndex === this.props.items.length - 1
                    ? 0
                    : this.state.activeIndex + 1;
                this.setState({
                  activeIndex: nextIndex
                });
              }
            },
            {
              key: "previous",
              value: function previous() {
                if (this.animating) return;
                var nextIndex =
                  this.state.activeIndex === 0
                    ? this.props.items.length - 1
                    : this.state.activeIndex - 1;
                this.setState({
                  activeIndex: nextIndex
                });
              }
            },
            {
              key: "goToIndex",
              value: function goToIndex(newIndex) {
                if (this.animating) return;
                this.setState({
                  activeIndex: newIndex
                });
              }
            },
            {
              key: "render",
              value: function render() {
                var _this2 = this;

                var _props = this.props,
                  autoPlay = _props.autoPlay,
                  indicators = _props.indicators,
                  controls = _props.controls,
                  items = _props.items,
                  goToIndex = _props.goToIndex,
                  props = objectWithoutProperties(_props, [
                    "autoPlay",
                    "indicators",
                    "controls",
                    "items",
                    "goToIndex"
                  ]);
                var activeIndex = this.state.activeIndex;
                var slides = items.map(function(item) {
                  return _react.default.createElement(
                    CarouselItem,
                    {
                      onExiting: _this2.onExiting,
                      onExited: _this2.onExited,
                      key: item.src
                    },
                    _react.default.createElement("img", {
                      className: "d-block w-100",
                      src: item.src,
                      alt: item.altText
                    }),
                    _react.default.createElement(CarouselCaption, {
                      captionText: item.caption,
                      captionHeader: item.header || item.caption
                    })
                  );
                });
                return _react.default.createElement(
                  Carousel,
                  _extends(
                    {
                      activeIndex: activeIndex,
                      next: this.next,
                      previous: this.previous,
                      ride: autoPlay ? "carousel" : undefined
                    },
                    props
                  ),
                  indicators &&
                    _react.default.createElement(CarouselIndicators, {
                      items: items,
                      activeIndex: props.activeIndex || activeIndex,
                      onClickHandler: goToIndex || this.goToIndex
                    }),
                  slides,
                  controls &&
                    _react.default.createElement(CarouselControl, {
                      direction: "prev",
                      directionText: "Previous",
                      onClickHandler: props.previous || this.previous
                    }),
                  controls &&
                    _react.default.createElement(CarouselControl, {
                      direction: "next",
                      directionText: "Next",
                      onClickHandler: props.next || this.next
                    })
                );
              }
            }
          ]);
          return UncontrolledCarousel;
        })(_react.Component);

        exports.UncontrolledCarousel = UncontrolledCarousel;
        UncontrolledCarousel.propTypes = propTypes$31;
        UncontrolledCarousel.defaultProps = {
          controls: true,
          indicators: true,
          autoPlay: true
        };
        var propTypes$32 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$30 = {
          tag: "h6"
        };

        var CardSubtitle = function CardSubtitle(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-subtitle"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardSubtitle = CardSubtitle;
        CardSubtitle.propTypes = propTypes$32;
        CardSubtitle.defaultProps = defaultProps$30;
        var propTypes$33 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$31 = {
          tag: "p"
        };

        var CardText = function CardText(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-text"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardText = CardText;
        CardText.propTypes = propTypes$33;
        CardText.defaultProps = defaultProps$31;
        var propTypes$34 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$32 = {
          tag: "h5"
        };

        var CardTitle = function CardTitle(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "card-title"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.CardTitle = CardTitle;
        CardTitle.propTypes = propTypes$34;
        CardTitle.defaultProps = defaultProps$32;
        var propTypes$35 = {
          className: _propTypes.default.string,
          id: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.number
          ]).isRequired,
          type: _propTypes.default.string.isRequired,
          label: _propTypes.default.node,
          inline: _propTypes.default.bool,
          valid: _propTypes.default.bool,
          invalid: _propTypes.default.bool,
          bsSize: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          children: _propTypes.default.oneOfType([
            _propTypes.default.node,
            _propTypes.default.array,
            _propTypes.default.func
          ]),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.string,
            _propTypes.default.func
          ])
        };

        function CustomInput(props) {
          var className = props.className,
            label = props.label,
            inline = props.inline,
            valid = props.valid,
            invalid = props.invalid,
            cssModule = props.cssModule,
            children = props.children,
            bsSize = props.bsSize,
            innerRef = props.innerRef,
            attributes = objectWithoutProperties(props, [
              "className",
              "label",
              "inline",
              "valid",
              "invalid",
              "cssModule",
              "children",
              "bsSize",
              "innerRef"
            ]);
          var type = attributes.type;
          var customClass = mapToCssModules(
            (0, _classnames.default)(
              className,
              "custom-" + type,
              bsSize ? "custom-" + type + "-" + bsSize : false
            ),
            cssModule
          );
          var validationClassNames = mapToCssModules(
            (0, _classnames.default)(
              invalid && "is-invalid",
              valid && "is-valid"
            ),
            cssModule
          );

          if (type === "select") {
            return _react.default.createElement(
              "select",
              _extends({}, attributes, {
                ref: innerRef,
                className: (0, _classnames.default)(
                  validationClassNames,
                  customClass
                )
              }),
              children
            );
          }

          if (type === "file") {
            return _react.default.createElement(
              "div",
              {
                className: customClass
              },
              _react.default.createElement(
                "input",
                _extends({}, attributes, {
                  ref: innerRef,
                  className: (0, _classnames.default)(
                    validationClassNames,
                    mapToCssModules("custom-file-input", cssModule)
                  )
                })
              ),
              _react.default.createElement(
                "label",
                {
                  className: mapToCssModules("custom-file-label", cssModule),
                  htmlFor: attributes.id
                },
                label || "Choose file"
              )
            );
          }

          if (type !== "checkbox" && type !== "radio") {
            return _react.default.createElement(
              "input",
              _extends({}, attributes, {
                ref: innerRef,
                className: (0, _classnames.default)(
                  validationClassNames,
                  customClass
                )
              })
            );
          }

          var wrapperClasses = (0, _classnames.default)(
            customClass,
            mapToCssModules(
              (0, _classnames.default)("custom-control", {
                "custom-control-inline": inline
              }),
              cssModule
            )
          );
          return _react.default.createElement(
            "div",
            {
              className: wrapperClasses
            },
            _react.default.createElement(
              "input",
              _extends({}, attributes, {
                ref: innerRef,
                className: (0, _classnames.default)(
                  validationClassNames,
                  mapToCssModules("custom-control-input", cssModule)
                )
              })
            ),
            _react.default.createElement(
              "label",
              {
                className: mapToCssModules("custom-control-label", cssModule),
                htmlFor: attributes.id
              },
              label
            ),
            children
          );
        }

        CustomInput.propTypes = propTypes$35;
        var propTypes$36 = {
          children: _propTypes.default.node.isRequired,
          className: _propTypes.default.string,
          placement: _propTypes.default.string,
          placementPrefix: _propTypes.default.string,
          arrowClassName: _propTypes.default.string,
          hideArrow: _propTypes.default.bool,
          tag: _propTypes.default.string,
          isOpen: _propTypes.default.bool.isRequired,
          cssModule: _propTypes.default.object,
          offset: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.number
          ]),
          fallbackPlacement: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.array
          ]),
          flip: _propTypes.default.bool,
          container: targetPropType,
          target: targetPropType.isRequired,
          modifiers: _propTypes.default.object,
          boundariesElement: _propTypes.default.oneOfType([
            _propTypes.default.string,
            DOMElement
          ])
        };
        var defaultProps$33 = {
          boundariesElement: "scrollParent",
          placement: "auto",
          hideArrow: false,
          isOpen: false,
          offset: 0,
          fallbackPlacement: "flip",
          flip: true,
          container: "body",
          modifiers: {}
        };
        var childContextTypes$1 = {
          popperManager: _propTypes.default.object.isRequired
        };

        var PopperContent = (function(_React$Component) {
          inherits(PopperContent, _React$Component);

          function PopperContent(props) {
            classCallCheck(this, PopperContent);

            var _this = possibleConstructorReturn(
              this,
              (
                PopperContent.__proto__ || Object.getPrototypeOf(PopperContent)
              ).call(this, props)
            );

            _this.handlePlacementChange = _this.handlePlacementChange.bind(
              _this
            );
            _this.setTargetNode = _this.setTargetNode.bind(_this);
            _this.getTargetNode = _this.getTargetNode.bind(_this);
            _this.state = {};
            return _this;
          }

          createClass(PopperContent, [
            {
              key: "getChildContext",
              value: function getChildContext() {
                return {
                  popperManager: {
                    setTargetNode: this.setTargetNode,
                    getTargetNode: this.getTargetNode
                  }
                };
              }
            },
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                this.handleProps();
              }
            },
            {
              key: "componentDidUpdate",
              value: function componentDidUpdate(prevProps) {
                if (this.props.isOpen !== prevProps.isOpen) {
                  this.handleProps();
                } else if (this._element) {
                  // rerender
                  this.renderIntoSubtree();
                }
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                this.hide();
              }
            },
            {
              key: "setTargetNode",
              value: function setTargetNode(node) {
                this.targetNode = node;
              }
            },
            {
              key: "getTargetNode",
              value: function getTargetNode() {
                return this.targetNode;
              }
            },
            {
              key: "getContainerNode",
              value: function getContainerNode() {
                return getTarget(this.props.container);
              }
            },
            {
              key: "handlePlacementChange",
              value: function handlePlacementChange(data) {
                if (this.state.placement !== data.placement) {
                  this.setState({
                    placement: data.placement
                  });
                }

                return data;
              }
            },
            {
              key: "handleProps",
              value: function handleProps() {
                if (this.props.container !== "inline") {
                  if (this.props.isOpen) {
                    this.show();
                  } else {
                    this.hide();
                  }
                }
              }
            },
            {
              key: "hide",
              value: function hide() {
                if (this._element) {
                  this.getContainerNode().removeChild(this._element);

                  _reactDom.default.unmountComponentAtNode(this._element);

                  this._element = null;
                }
              }
            },
            {
              key: "show",
              value: function show() {
                this._element = document.createElement("div");
                this.getContainerNode().appendChild(this._element);
                this.renderIntoSubtree();

                if (
                  this._element.childNodes &&
                  this._element.childNodes[0] &&
                  this._element.childNodes[0].focus
                ) {
                  this._element.childNodes[0].focus();
                }
              }
            },
            {
              key: "renderIntoSubtree",
              value: function renderIntoSubtree() {
                _reactDom.default.unstable_renderSubtreeIntoContainer(
                  this,
                  this.renderChildren(),
                  this._element
                );
              }
            },
            {
              key: "renderChildren",
              value: function renderChildren() {
                var _props = this.props,
                  cssModule = _props.cssModule,
                  children = _props.children,
                  isOpen = _props.isOpen,
                  flip = _props.flip,
                  target = _props.target,
                  offset = _props.offset,
                  fallbackPlacement = _props.fallbackPlacement,
                  placementPrefix = _props.placementPrefix,
                  _arrowClassName = _props.arrowClassName,
                  hideArrow = _props.hideArrow,
                  className = _props.className,
                  tag = _props.tag,
                  container = _props.container,
                  modifiers = _props.modifiers,
                  boundariesElement = _props.boundariesElement,
                  attrs = objectWithoutProperties(_props, [
                    "cssModule",
                    "children",
                    "isOpen",
                    "flip",
                    "target",
                    "offset",
                    "fallbackPlacement",
                    "placementPrefix",
                    "arrowClassName",
                    "hideArrow",
                    "className",
                    "tag",
                    "container",
                    "modifiers",
                    "boundariesElement"
                  ]);
                var arrowClassName = mapToCssModules(
                  (0, _classnames.default)("arrow", _arrowClassName),
                  cssModule
                );
                var placement = (this.state.placement || attrs.placement).split(
                  "-"
                )[0];
                var popperClassName = mapToCssModules(
                  (0, _classnames.default)(
                    className,
                    placementPrefix
                      ? placementPrefix + "-" + placement
                      : placement
                  ),
                  this.props.cssModule
                );

                var extendedModifiers = _extends(
                  {
                    offset: {
                      offset: offset
                    },
                    flip: {
                      enabled: flip,
                      behavior: fallbackPlacement
                    },
                    preventOverflow: {
                      boundariesElement: boundariesElement
                    },
                    update: {
                      enabled: true,
                      order: 950,
                      fn: this.handlePlacementChange
                    }
                  },
                  modifiers
                );

                return _react.default.createElement(
                  _reactPopper.Popper,
                  _extends(
                    {
                      modifiers: extendedModifiers
                    },
                    attrs,
                    {
                      component: tag,
                      className: popperClassName,
                      "x-placement": this.state.placement || attrs.placement
                    }
                  ),
                  children,
                  !hideArrow &&
                    _react.default.createElement(_reactPopper.Arrow, {
                      className: arrowClassName
                    })
                );
              }
            },
            {
              key: "render",
              value: function render() {
                this.setTargetNode(getTarget(this.props.target));

                if (this.props.container === "inline") {
                  return this.props.isOpen ? this.renderChildren() : null;
                }

                return null;
              }
            }
          ]);
          return PopperContent;
        })(_react.default.Component);

        exports.PopperContent = PopperContent;
        PopperContent.propTypes = propTypes$36;
        PopperContent.defaultProps = defaultProps$33;
        PopperContent.childContextTypes = childContextTypes$1;

        var PopperTargetHelper = function PopperTargetHelper(props, context) {
          context.popperManager.setTargetNode(getTarget(props.target));
          return null;
        };

        exports.PopperTargetHelper = PopperTargetHelper;
        PopperTargetHelper.contextTypes = {
          popperManager: _propTypes.default.object.isRequired
        };
        PopperTargetHelper.propTypes = {
          target: targetPropType.isRequired
        };
        var propTypes$37 = {
          placement: _propTypes.default.oneOf(PopperPlacements),
          target: targetPropType.isRequired,
          container: targetPropType,
          boundariesElement: _propTypes.default.oneOfType([
            _propTypes.default.string,
            DOMElement
          ]),
          isOpen: _propTypes.default.bool,
          disabled: _propTypes.default.bool,
          hideArrow: _propTypes.default.bool,
          className: _propTypes.default.string,
          innerClassName: _propTypes.default.string,
          placementPrefix: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          toggle: _propTypes.default.func,
          delay: _propTypes.default.oneOfType([
            _propTypes.default.shape({
              show: _propTypes.default.number,
              hide: _propTypes.default.number
            }),
            _propTypes.default.number
          ]),
          modifiers: _propTypes.default.object,
          offset: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.number
          ])
        };
        var DEFAULT_DELAYS = {
          show: 0,
          hide: 0
        };
        var defaultProps$34 = {
          isOpen: false,
          hideArrow: false,
          placement: "right",
          placementPrefix: "bs-popover",
          delay: DEFAULT_DELAYS,
          toggle: function toggle() {}
        };

        var Popover = (function(_React$Component) {
          inherits(Popover, _React$Component);

          function Popover(props) {
            classCallCheck(this, Popover);

            var _this = possibleConstructorReturn(
              this,
              (Popover.__proto__ || Object.getPrototypeOf(Popover)).call(
                this,
                props
              )
            );

            _this.addTargetEvents = _this.addTargetEvents.bind(_this);
            _this.handleDocumentClick = _this.handleDocumentClick.bind(_this);
            _this.removeTargetEvents = _this.removeTargetEvents.bind(_this);
            _this.getRef = _this.getRef.bind(_this);
            _this.toggle = _this.toggle.bind(_this);
            _this.show = _this.show.bind(_this);
            _this.hide = _this.hide.bind(_this);
            _this._target = null;
            return _this;
          }

          createClass(Popover, [
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                this._target = getTarget(this.props.target);
                this.handleProps();
              }
            },
            {
              key: "componentDidUpdate",
              value: function componentDidUpdate() {
                this.handleProps();
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                this.clearShowTimeout();
                this.clearHideTimeout();
                this.removeTargetEvents();
              }
            },
            {
              key: "getRef",
              value: function getRef(ref) {
                this._popover = ref;
              }
            },
            {
              key: "getDelay",
              value: function getDelay(key) {
                var delay = this.props.delay;

                if (
                  (typeof delay === "undefined"
                    ? "undefined"
                    : _typeof(delay)) === "object"
                ) {
                  return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];
                }

                return delay;
              }
            },
            {
              key: "handleProps",
              value: function handleProps() {
                if (this.props.isOpen) {
                  this.show();
                } else {
                  this.hide();
                }
              }
            },
            {
              key: "show",
              value: function show() {
                this.clearHideTimeout();
                this.addTargetEvents();

                if (!this.props.isOpen) {
                  this.clearShowTimeout();
                  this._showTimeout = setTimeout(
                    this.toggle,
                    this.getDelay("show")
                  );
                }
              }
            },
            {
              key: "hide",
              value: function hide() {
                this.clearShowTimeout();
                this.removeTargetEvents();

                if (this.props.isOpen) {
                  this.clearHideTimeout();
                  this._hideTimeout = setTimeout(
                    this.toggle,
                    this.getDelay("hide")
                  );
                }
              }
            },
            {
              key: "clearShowTimeout",
              value: function clearShowTimeout() {
                clearTimeout(this._showTimeout);
                this._showTimeout = undefined;
              }
            },
            {
              key: "clearHideTimeout",
              value: function clearHideTimeout() {
                clearTimeout(this._hideTimeout);
                this._hideTimeout = undefined;
              }
            },
            {
              key: "handleDocumentClick",
              value: function handleDocumentClick(e) {
                if (this._target) {
                  if (
                    e.target !== this._target &&
                    !this._target.contains(e.target) &&
                    e.target !== this._popover &&
                    !(this._popover && this._popover.contains(e.target))
                  ) {
                    if (this._hideTimeout) {
                      this.clearHideTimeout();
                    }

                    if (this.props.isOpen) {
                      this.toggle(e);
                    }
                  }
                }
              }
            },
            {
              key: "addTargetEvents",
              value: function addTargetEvents() {
                var _this2 = this;

                ["click", "touchstart"].forEach(function(event) {
                  return document.addEventListener(
                    event,
                    _this2.handleDocumentClick,
                    true
                  );
                });
              }
            },
            {
              key: "removeTargetEvents",
              value: function removeTargetEvents() {
                var _this3 = this;

                ["click", "touchstart"].forEach(function(event) {
                  return document.removeEventListener(
                    event,
                    _this3.handleDocumentClick,
                    true
                  );
                });
              }
            },
            {
              key: "toggle",
              value: function toggle(e) {
                if (this.props.disabled) {
                  return e && e.preventDefault();
                }

                return this.props.toggle(e);
              }
            },
            {
              key: "render",
              value: function render() {
                if (!this.props.isOpen) {
                  return null;
                }

                var attributes = omit(this.props, Object.keys(propTypes$37));
                var classes = mapToCssModules(
                  (0, _classnames.default)(
                    "popover-inner",
                    this.props.innerClassName
                  ),
                  this.props.cssModule
                );
                var popperClasses = mapToCssModules(
                  (0, _classnames.default)(
                    "popover",
                    "show",
                    this.props.className
                  ),
                  this.props.cssModule
                );
                return _react.default.createElement(
                  PopperContent,
                  {
                    className: popperClasses,
                    target: this.props.target,
                    isOpen: this.props.isOpen,
                    hideArrow: this.props.hideArrow,
                    placement: this.props.placement,
                    placementPrefix: this.props.placementPrefix,
                    container: this.props.container,
                    modifiers: this.props.modifiers,
                    offset: this.props.offset,
                    boundariesElement: this.props.boundariesElement
                  },
                  _react.default.createElement(
                    "div",
                    _extends({}, attributes, {
                      className: classes,
                      ref: this.getRef
                    })
                  )
                );
              }
            }
          ]);
          return Popover;
        })(_react.default.Component);

        exports.Popover = Popover;
        Popover.propTypes = propTypes$37;
        Popover.defaultProps = defaultProps$34;
        var propTypes$38 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$35 = {
          tag: "h3"
        };

        var PopoverHeader = function PopoverHeader(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "popover-header"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.PopoverHeader = PopoverHeader;
        PopoverHeader.propTypes = propTypes$38;
        PopoverHeader.defaultProps = defaultProps$35;

        function PopoverTitle(props) {
          warnOnce(
            'The "PopoverTitle" component has been deprecated.\nPlease use component "PopoverHeader".'
          );
          return _react.default.createElement(PopoverHeader, props);
        }

        var propTypes$39 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$36 = {
          tag: "div"
        };

        var PopoverBody = function PopoverBody(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "popover-body"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.PopoverBody = PopoverBody;
        PopoverBody.propTypes = propTypes$39;
        PopoverBody.defaultProps = defaultProps$36;

        function PopoverContent(props) {
          warnOnce(
            'The "PopoverContent" component has been deprecated.\nPlease use component "PopoverBody".'
          );
          return _react.default.createElement(PopoverBody, props);
        }

        var propTypes$40 = {
          children: _propTypes.default.node,
          bar: _propTypes.default.bool,
          multi: _propTypes.default.bool,
          tag: _propTypes.default.string,
          value: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.number
          ]),
          max: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.number
          ]),
          animated: _propTypes.default.bool,
          striped: _propTypes.default.bool,
          color: _propTypes.default.string,
          className: _propTypes.default.string,
          barClassName: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$37 = {
          tag: "div",
          value: 0,
          max: 100
        };

        var Progress = function Progress(props) {
          var children = props.children,
            className = props.className,
            barClassName = props.barClassName,
            cssModule = props.cssModule,
            value = props.value,
            max = props.max,
            animated = props.animated,
            striped = props.striped,
            color = props.color,
            bar = props.bar,
            multi = props.multi,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "children",
              "className",
              "barClassName",
              "cssModule",
              "value",
              "max",
              "animated",
              "striped",
              "color",
              "bar",
              "multi",
              "tag"
            ]);
          var percent =
            ((0, _lodash3.default)(value) / (0, _lodash3.default)(max)) * 100;
          var progressClasses = mapToCssModules(
            (0, _classnames.default)(className, "progress"),
            cssModule
          );
          var progressBarClasses = mapToCssModules(
            (0, _classnames.default)(
              "progress-bar",
              bar ? className || barClassName : barClassName,
              animated ? "progress-bar-animated" : null,
              color ? "bg-" + color : null,
              striped || animated ? "progress-bar-striped" : null
            ),
            cssModule
          );
          var ProgressBar = multi
            ? children
            : _react.default.createElement("div", {
                className: progressBarClasses,
                style: {
                  width: percent + "%"
                },
                role: "progressbar",
                "aria-valuenow": value,
                "aria-valuemin": "0",
                "aria-valuemax": max,
                children: children
              });

          if (bar) {
            return ProgressBar;
          }

          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: progressClasses,
              children: ProgressBar
            })
          );
        };

        exports.Progress = Progress;
        Progress.propTypes = propTypes$40;
        Progress.defaultProps = defaultProps$37;
        var propTypes$42 = {
          children: _propTypes.default.node.isRequired,
          node: _propTypes.default.any
        };

        var Portal = (function(_React$Component) {
          inherits(Portal, _React$Component);

          function Portal() {
            classCallCheck(this, Portal);
            return possibleConstructorReturn(
              this,
              (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(
                this,
                arguments
              )
            );
          }

          createClass(Portal, [
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                if (this.defaultNode) {
                  document.body.removeChild(this.defaultNode);
                }

                this.defaultNode = null;
              }
            },
            {
              key: "render",
              value: function render() {
                if (!canUseDOM) {
                  return null;
                }

                if (!this.props.node && !this.defaultNode) {
                  this.defaultNode = document.createElement("div");
                  document.body.appendChild(this.defaultNode);
                }

                return _reactDom.default.createPortal(
                  this.props.children,
                  this.props.node || this.defaultNode
                );
              }
            }
          ]);
          return Portal;
        })(_react.default.Component);

        Portal.propTypes = propTypes$42;

        function noop() {}

        var FadePropTypes = _propTypes.default.shape(Fade.propTypes);

        var propTypes$41 = {
          isOpen: _propTypes.default.bool,
          autoFocus: _propTypes.default.bool,
          centered: _propTypes.default.bool,
          size: _propTypes.default.string,
          toggle: _propTypes.default.func,
          keyboard: _propTypes.default.bool,
          role: _propTypes.default.string,
          labelledBy: _propTypes.default.string,
          backdrop: _propTypes.default.oneOfType([
            _propTypes.default.bool,
            _propTypes.default.oneOf(["static"])
          ]),
          onEnter: _propTypes.default.func,
          onExit: _propTypes.default.func,
          onOpened: _propTypes.default.func,
          onClosed: _propTypes.default.func,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          wrapClassName: _propTypes.default.string,
          modalClassName: _propTypes.default.string,
          backdropClassName: _propTypes.default.string,
          contentClassName: _propTypes.default.string,
          external: _propTypes.default.node,
          fade: _propTypes.default.bool,
          cssModule: _propTypes.default.object,
          zIndex: _propTypes.default.oneOfType([
            _propTypes.default.number,
            _propTypes.default.string
          ]),
          backdropTransition: FadePropTypes,
          modalTransition: FadePropTypes,
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.string,
            _propTypes.default.func
          ])
        };
        var propsToOmit = Object.keys(propTypes$41);
        var defaultProps$38 = {
          isOpen: false,
          autoFocus: true,
          centered: false,
          role: "dialog",
          backdrop: true,
          keyboard: true,
          zIndex: 1050,
          fade: true,
          onOpened: noop,
          onClosed: noop,
          modalTransition: {
            timeout: TransitionTimeouts.Modal
          },
          backdropTransition: {
            mountOnEnter: true,
            timeout: TransitionTimeouts.Fade // uses standard fade transition
          }
        };

        var Modal = (function(_React$Component) {
          inherits(Modal, _React$Component);

          function Modal(props) {
            classCallCheck(this, Modal);

            var _this = possibleConstructorReturn(
              this,
              (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(
                this,
                props
              )
            );

            _this._element = null;
            _this._originalBodyPadding = null;
            _this.getFocusableChildren = _this.getFocusableChildren.bind(_this);
            _this.handleBackdropClick = _this.handleBackdropClick.bind(_this);
            _this.handleBackdropMouseDown = _this.handleBackdropMouseDown.bind(
              _this
            );
            _this.handleEscape = _this.handleEscape.bind(_this);
            _this.handleTab = _this.handleTab.bind(_this);
            _this.onOpened = _this.onOpened.bind(_this);
            _this.onClosed = _this.onClosed.bind(_this);
            _this.state = {
              isOpen: props.isOpen
            };

            if (props.isOpen) {
              _this.init();
            }

            return _this;
          }

          createClass(Modal, [
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                if (this.props.onEnter) {
                  this.props.onEnter();
                }

                if (this.state.isOpen && this.props.autoFocus) {
                  this.setFocus();
                }

                this._isMounted = true;
              }
            },
            {
              key: "componentWillReceiveProps",
              value: function componentWillReceiveProps(nextProps) {
                if (nextProps.isOpen && !this.props.isOpen) {
                  this.setState({
                    isOpen: nextProps.isOpen
                  });
                }
              }
            },
            {
              key: "componentWillUpdate",
              value: function componentWillUpdate(nextProps, nextState) {
                if (nextState.isOpen && !this.state.isOpen) {
                  this.init();
                }
              }
            },
            {
              key: "componentDidUpdate",
              value: function componentDidUpdate(prevProps, prevState) {
                if (
                  this.props.autoFocus &&
                  this.state.isOpen &&
                  !prevState.isOpen
                ) {
                  this.setFocus();
                }

                if (this._element && prevProps.zIndex !== this.props.zIndex) {
                  this._element.style.zIndex = this.props.zIndex;
                }
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                if (this.props.onExit) {
                  this.props.onExit();
                }

                if (this.state.isOpen) {
                  this.destroy();
                }

                this._isMounted = false;
              }
            },
            {
              key: "onOpened",
              value: function onOpened(node, isAppearing) {
                this.props.onOpened();
                (this.props.modalTransition.onEntered || noop)(
                  node,
                  isAppearing
                );
              }
            },
            {
              key: "onClosed",
              value: function onClosed(node) {
                // so all methods get called before it is unmounted
                this.props.onClosed();
                (this.props.modalTransition.onExited || noop)(node);
                this.destroy();

                if (this._isMounted) {
                  this.setState({
                    isOpen: false
                  });
                }
              }
            },
            {
              key: "setFocus",
              value: function setFocus() {
                if (
                  this._dialog &&
                  this._dialog.parentNode &&
                  typeof this._dialog.parentNode.focus === "function"
                ) {
                  this._dialog.parentNode.focus();
                }
              }
            },
            {
              key: "getFocusableChildren",
              value: function getFocusableChildren() {
                return this._element.querySelectorAll(
                  focusableElements.join(", ")
                );
              }
            },
            {
              key: "getFocusedChild",
              value: function getFocusedChild() {
                var currentFocus = void 0;
                var focusableChildren = this.getFocusableChildren();

                try {
                  currentFocus = document.activeElement;
                } catch (err) {
                  currentFocus = focusableChildren[0];
                }

                return currentFocus;
              } // not mouseUp because scrollbar fires it, shouldn't close when user scrolls
            },
            {
              key: "handleBackdropClick",
              value: function handleBackdropClick(e) {
                if (e.target === this._mouseDownElement) {
                  e.stopPropagation();
                  if (!this.props.isOpen || this.props.backdrop !== true)
                    return;
                  var container = this._dialog;

                  if (
                    e.target &&
                    !container.contains(e.target) &&
                    this.props.toggle
                  ) {
                    this.props.toggle(e);
                  }
                }
              }
            },
            {
              key: "handleTab",
              value: function handleTab(e) {
                if (e.which !== 9) return;
                var focusableChildren = this.getFocusableChildren();
                var totalFocusable = focusableChildren.length;
                var currentFocus = this.getFocusedChild();
                var focusedIndex = 0;

                for (var i = 0; i < totalFocusable; i += 1) {
                  if (focusableChildren[i] === currentFocus) {
                    focusedIndex = i;
                    break;
                  }
                }

                if (e.shiftKey && focusedIndex === 0) {
                  e.preventDefault();
                  focusableChildren[totalFocusable - 1].focus();
                } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {
                  e.preventDefault();
                  focusableChildren[0].focus();
                }
              }
            },
            {
              key: "handleBackdropMouseDown",
              value: function handleBackdropMouseDown(e) {
                this._mouseDownElement = e.target;
              }
            },
            {
              key: "handleEscape",
              value: function handleEscape(e) {
                if (
                  this.props.isOpen &&
                  this.props.keyboard &&
                  e.keyCode === 27 &&
                  this.props.toggle
                ) {
                  this.props.toggle(e);
                }
              }
            },
            {
              key: "init",
              value: function init() {
                try {
                  this._triggeringElement = document.activeElement;
                } catch (err) {
                  this._triggeringElement = null;
                }

                this._element = document.createElement("div");

                this._element.setAttribute("tabindex", "-1");

                this._element.style.position = "relative";
                this._element.style.zIndex = this.props.zIndex;
                this._originalBodyPadding = getOriginalBodyPadding();
                conditionallyUpdateScrollbar();
                document.body.appendChild(this._element);

                if (Modal.openCount === 0) {
                  document.body.className = (0, _classnames.default)(
                    document.body.className,
                    mapToCssModules("modal-open", this.props.cssModule)
                  );
                }

                Modal.openCount += 1;
              }
            },
            {
              key: "destroy",
              value: function destroy() {
                if (this._element) {
                  document.body.removeChild(this._element);
                  this._element = null;
                }

                if (this._triggeringElement) {
                  if (this._triggeringElement.focus)
                    this._triggeringElement.focus();
                  this._triggeringElement = null;
                }

                if (Modal.openCount <= 1) {
                  var modalOpenClassName = mapToCssModules(
                    "modal-open",
                    this.props.cssModule
                  ); // Use regex to prevent matching `modal-open` as part of a different class, e.g. `my-modal-opened`

                  var modalOpenClassNameRegex = new RegExp(
                    "(^| )" + modalOpenClassName + "( |$)"
                  );
                  document.body.className = document.body.className
                    .replace(modalOpenClassNameRegex, " ")
                    .trim();
                }

                Modal.openCount -= 1;
                setScrollbarWidth(this._originalBodyPadding);
              }
            },
            {
              key: "renderModalDialog",
              value: function renderModalDialog() {
                var _classNames,
                  _this2 = this;

                var attributes = omit(this.props, propsToOmit);
                var dialogBaseClass = "modal-dialog";
                return _react.default.createElement(
                  "div",
                  _extends({}, attributes, {
                    className: mapToCssModules(
                      (0, _classnames.default)(
                        dialogBaseClass,
                        this.props.className,
                        ((_classNames = {}),
                        defineProperty(
                          _classNames,
                          "modal-" + this.props.size,
                          this.props.size
                        ),
                        defineProperty(
                          _classNames,
                          dialogBaseClass + "-centered",
                          this.props.centered
                        ),
                        _classNames)
                      ),
                      this.props.cssModule
                    ),
                    role: "document",
                    ref: function ref(c) {
                      _this2._dialog = c;
                    }
                  }),
                  _react.default.createElement(
                    "div",
                    {
                      className: mapToCssModules(
                        (0, _classnames.default)(
                          "modal-content",
                          this.props.contentClassName
                        ),
                        this.props.cssModule
                      )
                    },
                    this.props.children
                  )
                );
              }
            },
            {
              key: "render",
              value: function render() {
                if (this.state.isOpen) {
                  var _props = this.props,
                    wrapClassName = _props.wrapClassName,
                    modalClassName = _props.modalClassName,
                    backdropClassName = _props.backdropClassName,
                    cssModule = _props.cssModule,
                    isOpen = _props.isOpen,
                    backdrop = _props.backdrop,
                    role = _props.role,
                    labelledBy = _props.labelledBy,
                    external = _props.external,
                    innerRef = _props.innerRef;
                  var modalAttributes = {
                    onClick: this.handleBackdropClick,
                    onMouseDown: this.handleBackdropMouseDown,
                    onKeyUp: this.handleEscape,
                    onKeyDown: this.handleTab,
                    style: {
                      display: "block"
                    },
                    "aria-labelledby": labelledBy,
                    role: role,
                    tabIndex: "-1"
                  };
                  var hasTransition = this.props.fade;

                  var modalTransition = _extends(
                    {},
                    Fade.defaultProps,
                    this.props.modalTransition,
                    {
                      baseClass: hasTransition
                        ? this.props.modalTransition.baseClass
                        : "",
                      timeout: hasTransition
                        ? this.props.modalTransition.timeout
                        : 0
                    }
                  );

                  var backdropTransition = _extends(
                    {},
                    Fade.defaultProps,
                    this.props.backdropTransition,
                    {
                      baseClass: hasTransition
                        ? this.props.backdropTransition.baseClass
                        : "",
                      timeout: hasTransition
                        ? this.props.backdropTransition.timeout
                        : 0
                    }
                  );

                  var Backdrop = hasTransition
                    ? _react.default.createElement(
                        Fade,
                        _extends({}, backdropTransition, {
                          in: isOpen && !!backdrop,
                          cssModule: cssModule,
                          className: mapToCssModules(
                            (0, _classnames.default)(
                              "modal-backdrop",
                              backdropClassName
                            ),
                            cssModule
                          )
                        })
                      )
                    : _react.default.createElement("div", {
                        className: mapToCssModules(
                          (0, _classnames.default)(
                            "modal-backdrop",
                            "show",
                            backdropClassName
                          ),
                          cssModule
                        )
                      });
                  return _react.default.createElement(
                    Portal,
                    {
                      node: this._element
                    },
                    _react.default.createElement(
                      "div",
                      {
                        className: mapToCssModules(wrapClassName)
                      },
                      _react.default.createElement(
                        Fade,
                        _extends({}, modalAttributes, modalTransition, {
                          in: isOpen,
                          onEntered: this.onOpened,
                          onExited: this.onClosed,
                          cssModule: cssModule,
                          className: mapToCssModules(
                            (0, _classnames.default)("modal", modalClassName),
                            cssModule
                          ),
                          innerRef: innerRef
                        }),
                        external,
                        this.renderModalDialog()
                      ),
                      Backdrop
                    )
                  );
                }

                return null;
              }
            }
          ]);
          return Modal;
        })(_react.default.Component);

        exports.Modal = Modal;
        Modal.propTypes = propTypes$41;
        Modal.defaultProps = defaultProps$38;
        Modal.openCount = 0;
        var propTypes$43 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          wrapTag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          toggle: _propTypes.default.func,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          children: _propTypes.default.node,
          closeAriaLabel: _propTypes.default.string,
          charCode: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.number
          ]),
          close: _propTypes.default.object
        };
        var defaultProps$39 = {
          tag: "h5",
          wrapTag: "div",
          closeAriaLabel: "Close",
          charCode: 215
        };

        var ModalHeader = function ModalHeader(props) {
          var closeButton = void 0;
          var className = props.className,
            cssModule = props.cssModule,
            children = props.children,
            toggle = props.toggle,
            Tag = props.tag,
            WrapTag = props.wrapTag,
            closeAriaLabel = props.closeAriaLabel,
            charCode = props.charCode,
            close = props.close,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "children",
              "toggle",
              "tag",
              "wrapTag",
              "closeAriaLabel",
              "charCode",
              "close"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "modal-header"),
            cssModule
          );

          if (!close && toggle) {
            var closeIcon =
              typeof charCode === "number"
                ? String.fromCharCode(charCode)
                : charCode;
            closeButton = _react.default.createElement(
              "button",
              {
                type: "button",
                onClick: toggle,
                className: mapToCssModules("close", cssModule),
                "aria-label": closeAriaLabel
              },
              _react.default.createElement(
                "span",
                {
                  "aria-hidden": "true"
                },
                closeIcon
              )
            );
          }

          return _react.default.createElement(
            WrapTag,
            _extends({}, attributes, {
              className: classes
            }),
            _react.default.createElement(
              Tag,
              {
                className: mapToCssModules("modal-title", cssModule)
              },
              children
            ),
            close || closeButton
          );
        };

        exports.ModalHeader = ModalHeader;
        ModalHeader.propTypes = propTypes$43;
        ModalHeader.defaultProps = defaultProps$39;
        var propTypes$44 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$40 = {
          tag: "div"
        };

        var ModalBody = function ModalBody(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "modal-body"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ModalBody = ModalBody;
        ModalBody.propTypes = propTypes$44;
        ModalBody.defaultProps = defaultProps$40;
        var propTypes$45 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$41 = {
          tag: "div"
        };

        var ModalFooter = function ModalFooter(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "modal-footer"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ModalFooter = ModalFooter;
        ModalFooter.propTypes = propTypes$45;
        ModalFooter.defaultProps = defaultProps$41;
        var propTypes$46 = {
          placement: _propTypes.default.oneOf(PopperPlacements),
          target: targetPropType.isRequired,
          container: targetPropType,
          isOpen: _propTypes.default.bool,
          disabled: _propTypes.default.bool,
          hideArrow: _propTypes.default.bool,
          boundariesElement: _propTypes.default.oneOfType([
            _propTypes.default.string,
            DOMElement
          ]),
          className: _propTypes.default.string,
          innerClassName: _propTypes.default.string,
          arrowClassName: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          toggle: _propTypes.default.func,
          autohide: _propTypes.default.bool,
          placementPrefix: _propTypes.default.string,
          delay: _propTypes.default.oneOfType([
            _propTypes.default.shape({
              show: _propTypes.default.number,
              hide: _propTypes.default.number
            }),
            _propTypes.default.number
          ]),
          modifiers: _propTypes.default.object,
          offset: _propTypes.default.oneOfType([
            _propTypes.default.string,
            _propTypes.default.number
          ]),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string,
            _propTypes.default.object
          ]),
          trigger: _propTypes.default.string
        };
        var DEFAULT_DELAYS$1 = {
          show: 0,
          hide: 250
        };
        var defaultProps$42 = {
          isOpen: false,
          hideArrow: false,
          placement: "top",
          placementPrefix: "bs-tooltip",
          delay: DEFAULT_DELAYS$1,
          autohide: true,
          toggle: function toggle() {}
        };

        var Tooltip = (function(_React$Component) {
          inherits(Tooltip, _React$Component);

          function Tooltip(props) {
            classCallCheck(this, Tooltip);

            var _this = possibleConstructorReturn(
              this,
              (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(
                this,
                props
              )
            );

            _this._target = null;
            _this.addTargetEvents = _this.addTargetEvents.bind(_this);
            _this.handleDocumentClick = _this.handleDocumentClick.bind(_this);
            _this.removeTargetEvents = _this.removeTargetEvents.bind(_this);
            _this.toggle = _this.toggle.bind(_this);
            _this.onMouseOverTooltip = _this.onMouseOverTooltip.bind(_this);
            _this.onMouseLeaveTooltip = _this.onMouseLeaveTooltip.bind(_this);
            _this.onMouseOverTooltipContent = _this.onMouseOverTooltipContent.bind(
              _this
            );
            _this.onMouseLeaveTooltipContent = _this.onMouseLeaveTooltipContent.bind(
              _this
            );
            _this.show = _this.show.bind(_this);
            _this.hide = _this.hide.bind(_this);
            _this.onEscKeyDown = _this.onEscKeyDown.bind(_this);
            return _this;
          }

          createClass(Tooltip, [
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                this._target = getTarget(this.props.target);
                this.addTargetEvents();
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                this.clearHideTimeout();
                this.clearShowTimeout();
                this.removeTargetEvents();
              }
            },
            {
              key: "onMouseOverTooltip",
              value: function onMouseOverTooltip(e) {
                if (this._hideTimeout) {
                  this.clearHideTimeout();
                }

                this._showTimeout = setTimeout(
                  this.show.bind(this, e),
                  this.getDelay("show")
                );
              }
            },
            {
              key: "onMouseLeaveTooltip",
              value: function onMouseLeaveTooltip(e) {
                if (this._showTimeout) {
                  this.clearShowTimeout();
                }

                this._hideTimeout = setTimeout(
                  this.hide.bind(this, e),
                  this.getDelay("hide")
                );
              }
            },
            {
              key: "onMouseOverTooltipContent",
              value: function onMouseOverTooltipContent() {
                if (this.props.autohide) {
                  return;
                }

                if (this._hideTimeout) {
                  this.clearHideTimeout();
                }
              }
            },
            {
              key: "onMouseLeaveTooltipContent",
              value: function onMouseLeaveTooltipContent(e) {
                if (this.props.autohide) {
                  return;
                }

                if (this._showTimeout) {
                  this.clearShowTimeout();
                }

                e.persist();
                this._hideTimeout = setTimeout(
                  this.hide.bind(this, e),
                  this.getDelay("hide")
                );
              }
            },
            {
              key: "onEscKeyDown",
              value: function onEscKeyDown(e) {
                if (e.key === "Escape") {
                  this.hide(e);
                }
              }
            },
            {
              key: "getDelay",
              value: function getDelay(key) {
                var delay = this.props.delay;

                if (
                  (typeof delay === "undefined"
                    ? "undefined"
                    : _typeof(delay)) === "object"
                ) {
                  return isNaN(delay[key]) ? DEFAULT_DELAYS$1[key] : delay[key];
                }

                return delay;
              }
            },
            {
              key: "show",
              value: function show(e) {
                if (!this.props.isOpen) {
                  this.clearShowTimeout();
                  this.toggle(e);
                }
              }
            },
            {
              key: "hide",
              value: function hide(e) {
                if (this.props.isOpen) {
                  this.clearHideTimeout();
                  this.toggle(e);
                }
              }
            },
            {
              key: "clearShowTimeout",
              value: function clearShowTimeout() {
                clearTimeout(this._showTimeout);
                this._showTimeout = undefined;
              }
            },
            {
              key: "clearHideTimeout",
              value: function clearHideTimeout() {
                clearTimeout(this._hideTimeout);
                this._hideTimeout = undefined;
              }
            },
            {
              key: "handleDocumentClick",
              value: function handleDocumentClick(e) {
                if (
                  this._target !== null &&
                  (e.target === this._target || this._target.contains(e.target))
                ) {
                  if (this._hideTimeout) {
                    this.clearHideTimeout();
                  }

                  if (!this.props.isOpen) {
                    this.toggle(e);
                  }
                } else if (
                  this.props.isOpen &&
                  e.target.getAttribute("role") !== "tooltip"
                ) {
                  if (this._showTimeout) {
                    this.clearShowTimeout();
                  }

                  this._hideTimeout = setTimeout(
                    this.hide.bind(this, e),
                    this.getDelay("hide")
                  );
                }
              }
            },
            {
              key: "addTargetEvents",
              value: function addTargetEvents() {
                var _this2 = this;

                if (this.props.trigger) {
                  var triggers = this.props.trigger.split(" ");

                  if (triggers.indexOf("manual") === -1) {
                    if (triggers.indexOf("click") > -1) {
                      ["click", "touchstart"].forEach(function(event) {
                        return document.addEventListener(
                          event,
                          _this2.handleDocumentClick,
                          true
                        );
                      });
                    }

                    if (this._target !== null) {
                      if (triggers.indexOf("hover") > -1) {
                        this._target.addEventListener(
                          "mouseover",
                          this.onMouseOverTooltip,
                          true
                        );

                        this._target.addEventListener(
                          "mouseout",
                          this.onMouseLeaveTooltip,
                          true
                        );
                      }

                      if (triggers.indexOf("focus") > -1) {
                        this._target.addEventListener(
                          "focusin",
                          this.show,
                          true
                        );

                        this._target.addEventListener(
                          "focusout",
                          this.hide,
                          true
                        );
                      }

                      this._target.addEventListener(
                        "keydown",
                        this.onEscKeyDown,
                        true
                      );
                    }
                  }
                } else {
                  if (this._target !== null) {
                    this._target.addEventListener(
                      "mouseover",
                      this.onMouseOverTooltip,
                      true
                    );

                    this._target.addEventListener(
                      "mouseout",
                      this.onMouseLeaveTooltip,
                      true
                    );

                    this._target.addEventListener(
                      "keydown",
                      this.onEscKeyDown,
                      true
                    );

                    this._target.addEventListener("focusin", this.show, true);

                    this._target.addEventListener("focusout", this.hide, true);
                  }

                  ["click", "touchstart"].forEach(function(event) {
                    return document.addEventListener(
                      event,
                      _this2.handleDocumentClick,
                      true
                    );
                  });
                }
              }
            },
            {
              key: "removeTargetEvents",
              value: function removeTargetEvents() {
                var _this3 = this;

                if (this._target !== null) {
                  this._target.removeEventListener(
                    "mouseover",
                    this.onMouseOverTooltip,
                    true
                  );

                  this._target.removeEventListener(
                    "mouseout",
                    this.onMouseLeaveTooltip,
                    true
                  );

                  this._target.addEventListener(
                    "keydown",
                    this.onEscKeyDown,
                    true
                  );

                  this._target.addEventListener("focusin", this.show, true);

                  this._target.addEventListener("focusout", this.hide, true);
                }

                ["click", "touchstart"].forEach(function(event) {
                  return document.removeEventListener(
                    event,
                    _this3.handleDocumentClick,
                    true
                  );
                });
              }
            },
            {
              key: "toggle",
              value: function toggle(e) {
                if (this.props.disabled) {
                  return e && e.preventDefault();
                }

                return this.props.toggle(e);
              }
            },
            {
              key: "render",
              value: function render() {
                if (!this.props.isOpen) {
                  return null;
                }

                var attributes = omit(this.props, Object.keys(propTypes$46));
                var classes = mapToCssModules(
                  (0, _classnames.default)(
                    "tooltip-inner",
                    this.props.innerClassName
                  ),
                  this.props.cssModule
                );
                var popperClasses = mapToCssModules(
                  (0, _classnames.default)(
                    "tooltip",
                    "show",
                    this.props.className
                  ),
                  this.props.cssModule
                );
                return _react.default.createElement(
                  PopperContent,
                  {
                    className: popperClasses,
                    target: this.props.target,
                    isOpen: this.props.isOpen,
                    hideArrow: this.props.hideArrow,
                    boundariesElement: this.props.boundariesElement,
                    placement: this.props.placement,
                    placementPrefix: this.props.placementPrefix,
                    arrowClassName: this.props.arrowClassName,
                    container: this.props.container,
                    modifiers: this.props.modifiers,
                    offset: this.props.offset,
                    cssModule: this.props.cssModule
                  },
                  _react.default.createElement(
                    "div",
                    _extends({}, attributes, {
                      ref: this.props.innerRef,
                      className: classes,
                      role: "tooltip",
                      "aria-hidden": this.props.isOpen,
                      onMouseOver: this.onMouseOverTooltipContent,
                      onMouseLeave: this.onMouseLeaveTooltipContent,
                      onKeyDown: this.onEscKeyDown
                    })
                  )
                );
              }
            }
          ]);
          return Tooltip;
        })(_react.default.Component);

        exports.Tooltip = Tooltip;
        Tooltip.propTypes = propTypes$46;
        Tooltip.defaultProps = defaultProps$42;
        var propTypes$47 = {
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          size: _propTypes.default.string,
          bordered: _propTypes.default.bool,
          borderless: _propTypes.default.bool,
          striped: _propTypes.default.bool,
          inverse: deprecated(
            _propTypes.default.bool,
            'Please use the prop "dark"'
          ),
          dark: _propTypes.default.bool,
          hover: _propTypes.default.bool,
          responsive: _propTypes.default.oneOfType([
            _propTypes.default.bool,
            _propTypes.default.string
          ]),
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          responsiveTag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ])
        };
        var defaultProps$43 = {
          tag: "table",
          responsiveTag: "div"
        };

        var Table = function Table(props) {
          var className = props.className,
            cssModule = props.cssModule,
            size = props.size,
            bordered = props.bordered,
            borderless = props.borderless,
            striped = props.striped,
            inverse = props.inverse,
            dark = props.dark,
            hover = props.hover,
            responsive = props.responsive,
            Tag = props.tag,
            ResponsiveTag = props.responsiveTag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "size",
              "bordered",
              "borderless",
              "striped",
              "inverse",
              "dark",
              "hover",
              "responsive",
              "tag",
              "responsiveTag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "table",
              size ? "table-" + size : false,
              bordered ? "table-bordered" : false,
              borderless ? "table-borderless" : false,
              striped ? "table-striped" : false,
              dark || inverse ? "table-dark" : false,
              hover ? "table-hover" : false
            ),
            cssModule
          );

          var table = _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );

          if (responsive) {
            var responsiveClassName =
              responsive === true
                ? "table-responsive"
                : "table-responsive-" + responsive;
            return _react.default.createElement(
              ResponsiveTag,
              {
                className: responsiveClassName
              },
              table
            );
          }

          return table;
        };

        exports.Table = Table;
        Table.propTypes = propTypes$47;
        Table.defaultProps = defaultProps$43;
        var propTypes$48 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          flush: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$44 = {
          tag: "ul"
        };

        var ListGroup = function ListGroup(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            flush = props.flush,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag",
              "flush"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "list-group",
              flush ? "list-group-flush" : false
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ListGroup = ListGroup;
        ListGroup.propTypes = propTypes$48;
        ListGroup.defaultProps = defaultProps$44;
        var propTypes$49 = {
          children: _propTypes.default.node,
          inline: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$45 = {
          tag: "form"
        };

        var Form = (function(_Component) {
          inherits(Form, _Component);

          function Form(props) {
            classCallCheck(this, Form);

            var _this = possibleConstructorReturn(
              this,
              (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props)
            );

            _this.getRef = _this.getRef.bind(_this);
            _this.submit = _this.submit.bind(_this);
            return _this;
          }

          createClass(Form, [
            {
              key: "getRef",
              value: function getRef(ref) {
                if (this.props.innerRef) {
                  this.props.innerRef(ref);
                }

                this.ref = ref;
              }
            },
            {
              key: "submit",
              value: function submit() {
                if (this.ref) {
                  this.ref.submit();
                }
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  className = _props.className,
                  cssModule = _props.cssModule,
                  inline = _props.inline,
                  Tag = _props.tag,
                  innerRef = _props.innerRef,
                  attributes = objectWithoutProperties(_props, [
                    "className",
                    "cssModule",
                    "inline",
                    "tag",
                    "innerRef"
                  ]);
                var classes = mapToCssModules(
                  (0, _classnames.default)(
                    className,
                    inline ? "form-inline" : false
                  ),
                  cssModule
                );
                return _react.default.createElement(
                  Tag,
                  _extends({}, attributes, {
                    ref: innerRef,
                    className: classes
                  })
                );
              }
            }
          ]);
          return Form;
        })(_react.Component);

        exports.Form = Form;
        Form.propTypes = propTypes$49;
        Form.defaultProps = defaultProps$45;
        var propTypes$50 = {
          children: _propTypes.default.node,
          tag: _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          valid: _propTypes.default.bool,
          tooltip: _propTypes.default.bool
        };
        var defaultProps$46 = {
          tag: "div",
          valid: undefined
        };

        var FormFeedback = function FormFeedback(props) {
          var className = props.className,
            cssModule = props.cssModule,
            valid = props.valid,
            tooltip = props.tooltip,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "valid",
              "tooltip",
              "tag"
            ]);
          var validMode = tooltip ? "tooltip" : "feedback";
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              valid ? "valid-" + validMode : "invalid-" + validMode
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.FormFeedback = FormFeedback;
        FormFeedback.propTypes = propTypes$50;
        FormFeedback.defaultProps = defaultProps$46;
        var propTypes$51 = {
          children: _propTypes.default.node,
          row: _propTypes.default.bool,
          check: _propTypes.default.bool,
          inline: _propTypes.default.bool,
          disabled: _propTypes.default.bool,
          tag: _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$47 = {
          tag: "div"
        };

        var FormGroup = function FormGroup(props) {
          var className = props.className,
            cssModule = props.cssModule,
            row = props.row,
            disabled = props.disabled,
            check = props.check,
            inline = props.inline,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "row",
              "disabled",
              "check",
              "inline",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "position-relative",
              row ? "row" : false,
              check ? "form-check" : "form-group",
              check && inline ? "form-check-inline" : false,
              check && disabled ? "disabled" : false
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.FormGroup = FormGroup;
        FormGroup.propTypes = propTypes$51;
        FormGroup.defaultProps = defaultProps$47;
        var propTypes$52 = {
          children: _propTypes.default.node,
          inline: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          color: _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$48 = {
          tag: "small",
          color: "muted"
        };

        var FormText = function FormText(props) {
          var className = props.className,
            cssModule = props.cssModule,
            inline = props.inline,
            color = props.color,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "inline",
              "color",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              !inline ? "form-text" : false,
              color ? "text-" + color : false
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.FormText = FormText;
        FormText.propTypes = propTypes$52;
        FormText.defaultProps = defaultProps$48;
        /* eslint react/prefer-stateless-function: 0 */

        var propTypes$53 = {
          children: _propTypes.default.node,
          type: _propTypes.default.string,
          size: _propTypes.default.string,
          bsSize: _propTypes.default.string,
          state: deprecated(
            _propTypes.default.string,
            'Please use the props "valid" and "invalid" to indicate the state.'
          ),
          valid: _propTypes.default.bool,
          invalid: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          static: deprecated(
            _propTypes.default.bool,
            'Please use the prop "plaintext"'
          ),
          plaintext: _propTypes.default.bool,
          addon: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$49 = {
          type: "text"
        };

        var Input = (function(_React$Component) {
          inherits(Input, _React$Component);

          function Input(props) {
            classCallCheck(this, Input);

            var _this = possibleConstructorReturn(
              this,
              (Input.__proto__ || Object.getPrototypeOf(Input)).call(
                this,
                props
              )
            );

            _this.getRef = _this.getRef.bind(_this);
            _this.focus = _this.focus.bind(_this);
            return _this;
          }

          createClass(Input, [
            {
              key: "getRef",
              value: function getRef(ref) {
                if (this.props.innerRef) {
                  this.props.innerRef(ref);
                }

                this.ref = ref;
              }
            },
            {
              key: "focus",
              value: function focus() {
                if (this.ref) {
                  this.ref.focus();
                }
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  className = _props.className,
                  cssModule = _props.cssModule,
                  type = _props.type,
                  bsSize = _props.bsSize,
                  state = _props.state,
                  valid = _props.valid,
                  invalid = _props.invalid,
                  tag = _props.tag,
                  addon = _props.addon,
                  staticInput = _props.static,
                  plaintext = _props.plaintext,
                  innerRef = _props.innerRef,
                  attributes = objectWithoutProperties(_props, [
                    "className",
                    "cssModule",
                    "type",
                    "bsSize",
                    "state",
                    "valid",
                    "invalid",
                    "tag",
                    "addon",
                    "static",
                    "plaintext",
                    "innerRef"
                  ]);
                var checkInput = ["radio", "checkbox"].indexOf(type) > -1;
                var isNotaNumber = new RegExp("\\D", "g");
                var fileInput = type === "file";
                var textareaInput = type === "textarea";
                var selectInput = type === "select";
                var Tag =
                  tag || (selectInput || textareaInput ? type : "input");
                var formControlClass = "form-control";

                if (plaintext || staticInput) {
                  formControlClass = formControlClass + "-plaintext";
                  Tag = tag || "p";
                } else if (fileInput) {
                  formControlClass = formControlClass + "-file";
                } else if (checkInput) {
                  if (addon) {
                    formControlClass = null;
                  } else {
                    formControlClass = "form-check-input";
                  }
                }

                if (
                  state &&
                  typeof valid === "undefined" &&
                  typeof invalid === "undefined"
                ) {
                  if (state === "danger") {
                    invalid = true;
                  } else if (state === "success") {
                    valid = true;
                  }
                }

                if (attributes.size && isNotaNumber.test(attributes.size)) {
                  warnOnce(
                    'Please use the prop "bsSize" instead of the "size" to bootstrap\'s input sizing.'
                  );
                  bsSize = attributes.size;
                  delete attributes.size;
                }

                var classes = mapToCssModules(
                  (0, _classnames.default)(
                    className,
                    invalid && "is-invalid",
                    valid && "is-valid",
                    bsSize ? "form-control-" + bsSize : false,
                    formControlClass
                  ),
                  cssModule
                );

                if (Tag === "input" || (tag && typeof tag === "function")) {
                  attributes.type = type;
                }

                if (
                  attributes.children &&
                  !(
                    plaintext ||
                    staticInput ||
                    type === "select" ||
                    typeof Tag !== "string" ||
                    Tag === "select"
                  )
                ) {
                  warnOnce(
                    'Input with a type of "' +
                      type +
                      '" cannot have children. Please use "value"/"defaultValue" instead.'
                  );
                  delete attributes.children;
                }

                return _react.default.createElement(
                  Tag,
                  _extends({}, attributes, {
                    ref: innerRef,
                    className: classes
                  })
                );
              }
            }
          ]);
          return Input;
        })(_react.default.Component);

        exports.Input = Input;
        Input.propTypes = propTypes$53;
        Input.defaultProps = defaultProps$49;
        var propTypes$54 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          size: _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$50 = {
          tag: "div"
        };

        var InputGroup = function InputGroup(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            size = props.size,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag",
              "size"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "input-group",
              size ? "input-group-" + size : null
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.InputGroup = InputGroup;
        InputGroup.propTypes = propTypes$54;
        InputGroup.defaultProps = defaultProps$50;
        var propTypes$56 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$52 = {
          tag: "span"
        };

        var InputGroupText = function InputGroupText(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "input-group-text"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.InputGroupText = InputGroupText;
        InputGroupText.propTypes = propTypes$56;
        InputGroupText.defaultProps = defaultProps$52;
        var propTypes$55 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          addonType: _propTypes.default.oneOf(["prepend", "append"]).isRequired,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$51 = {
          tag: "div"
        };

        var InputGroupAddon = function InputGroupAddon(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            addonType = props.addonType,
            children = props.children,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag",
              "addonType",
              "children"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "input-group-" + addonType),
            cssModule
          ); // Convenience to assist with transition

          if (typeof children === "string") {
            return _react.default.createElement(
              Tag,
              _extends({}, attributes, {
                className: classes
              }),
              _react.default.createElement(InputGroupText, {
                children: children
              })
            );
          }

          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes,
              children: children
            })
          );
        };

        exports.InputGroupAddon = InputGroupAddon;
        InputGroupAddon.propTypes = propTypes$55;
        InputGroupAddon.defaultProps = defaultProps$51;
        var propTypes$57 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          addonType: _propTypes.default.oneOf(["prepend", "append"]).isRequired,
          children: _propTypes.default.node,
          groupClassName: _propTypes.default.string,
          groupAttributes: _propTypes.default.object,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };

        var InputGroupButton = function InputGroupButton(props) {
          warnOnce(
            'The "InputGroupButton" component has been deprecated.\nPlease use component "InputGroupAddon".'
          );
          var children = props.children,
            groupClassName = props.groupClassName,
            groupAttributes = props.groupAttributes,
            propsWithoutGroup = objectWithoutProperties(props, [
              "children",
              "groupClassName",
              "groupAttributes"
            ]);

          if (typeof children === "string") {
            var cssModule = propsWithoutGroup.cssModule,
              tag = propsWithoutGroup.tag,
              addonType = propsWithoutGroup.addonType,
              attributes = objectWithoutProperties(propsWithoutGroup, [
                "cssModule",
                "tag",
                "addonType"
              ]);

            var allGroupAttributes = _extends({}, groupAttributes, {
              cssModule: cssModule,
              tag: tag,
              addonType: addonType
            });

            return _react.default.createElement(
              InputGroupAddon,
              _extends({}, allGroupAttributes, {
                className: groupClassName
              }),
              _react.default.createElement(
                Button,
                _extends({}, attributes, {
                  children: children
                })
              )
            );
          }

          return _react.default.createElement(
            InputGroupAddon,
            _extends({}, props, {
              children: children
            })
          );
        };

        exports.InputGroupButton = InputGroupButton;
        InputGroupButton.propTypes = propTypes$57;
        var propTypes$58 = {
          addonType: _propTypes.default.oneOf(["prepend", "append"]).isRequired,
          children: _propTypes.default.node
        };

        var InputGroupButtonDropdown = function InputGroupButtonDropdown(
          props
        ) {
          return _react.default.createElement(Dropdown, props);
        };

        exports.InputGroupButtonDropdown = InputGroupButtonDropdown;
        InputGroupButtonDropdown.propTypes = propTypes$58;
        var colWidths$1 = ["xs", "sm", "md", "lg", "xl"];

        var stringOrNumberProp$1 = _propTypes.default.oneOfType([
          _propTypes.default.number,
          _propTypes.default.string
        ]);

        var columnProps$1 = _propTypes.default.oneOfType([
          _propTypes.default.string,
          _propTypes.default.number,
          _propTypes.default.shape({
            size: stringOrNumberProp$1,
            push: deprecated(
              stringOrNumberProp$1,
              'Please use the prop "order"'
            ),
            pull: deprecated(
              stringOrNumberProp$1,
              'Please use the prop "order"'
            ),
            order: stringOrNumberProp$1,
            offset: stringOrNumberProp$1
          })
        ]);

        var propTypes$59 = {
          children: _propTypes.default.node,
          hidden: _propTypes.default.bool,
          check: _propTypes.default.bool,
          size: _propTypes.default.string,
          for: _propTypes.default.string,
          tag: _propTypes.default.string,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          xs: columnProps$1,
          sm: columnProps$1,
          md: columnProps$1,
          lg: columnProps$1,
          xl: columnProps$1,
          widths: _propTypes.default.array
        };
        var defaultProps$53 = {
          tag: "label",
          widths: colWidths$1
        };

        var getColumnSizeClass$1 = function getColumnSizeClass(
          isXs,
          colWidth,
          colSize
        ) {
          if (colSize === true || colSize === "") {
            return isXs ? "col" : "col-" + colWidth;
          } else if (colSize === "auto") {
            return isXs ? "col-auto" : "col-" + colWidth + "-auto";
          }

          return isXs ? "col-" + colSize : "col-" + colWidth + "-" + colSize;
        };

        var Label = function Label(props) {
          var className = props.className,
            cssModule = props.cssModule,
            hidden = props.hidden,
            widths = props.widths,
            Tag = props.tag,
            check = props.check,
            size = props.size,
            htmlFor = props.for,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "hidden",
              "widths",
              "tag",
              "check",
              "size",
              "for"
            ]);
          var colClasses = [];
          widths.forEach(function(colWidth, i) {
            var columnProp = props[colWidth];
            delete attributes[colWidth];

            if (!columnProp && columnProp !== "") {
              return;
            }

            var isXs = !i;
            var colClass = void 0;

            if ((0, _lodash2.default)(columnProp)) {
              var _classNames;

              var colSizeInterfix = isXs ? "-" : "-" + colWidth + "-";
              colClass = getColumnSizeClass$1(isXs, colWidth, columnProp.size);
              colClasses.push(
                mapToCssModules(
                  (0, _classnames.default)(
                    ((_classNames = {}),
                    defineProperty(
                      _classNames,
                      colClass,
                      columnProp.size || columnProp.size === ""
                    ),
                    defineProperty(
                      _classNames,
                      "order" + colSizeInterfix + columnProp.order,
                      columnProp.order || columnProp.order === 0
                    ),
                    defineProperty(
                      _classNames,
                      "offset" + colSizeInterfix + columnProp.offset,
                      columnProp.offset || columnProp.offset === 0
                    ),
                    _classNames)
                  )
                ),
                cssModule
              );
            } else {
              colClass = getColumnSizeClass$1(isXs, colWidth, columnProp);
              colClasses.push(colClass);
            }
          });
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              hidden ? "sr-only" : false,
              check ? "form-check-label" : false,
              size ? "col-form-label-" + size : false,
              colClasses,
              colClasses.length ? "col-form-label" : false
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends(
              {
                htmlFor: htmlFor
              },
              attributes,
              {
                className: classes
              }
            )
          );
        };

        exports.Label = Label;
        Label.propTypes = propTypes$59;
        Label.defaultProps = defaultProps$53;
        var propTypes$60 = {
          body: _propTypes.default.bool,
          bottom: _propTypes.default.bool,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          heading: _propTypes.default.bool,
          left: _propTypes.default.bool,
          list: _propTypes.default.bool,
          middle: _propTypes.default.bool,
          object: _propTypes.default.bool,
          right: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          top: _propTypes.default.bool
        };

        var Media = function Media(props) {
          var body = props.body,
            bottom = props.bottom,
            className = props.className,
            cssModule = props.cssModule,
            heading = props.heading,
            left = props.left,
            list = props.list,
            middle = props.middle,
            object = props.object,
            right = props.right,
            tag = props.tag,
            top = props.top,
            attributes = objectWithoutProperties(props, [
              "body",
              "bottom",
              "className",
              "cssModule",
              "heading",
              "left",
              "list",
              "middle",
              "object",
              "right",
              "tag",
              "top"
            ]);
          var defaultTag = void 0;

          if (heading) {
            defaultTag = "h4";
          } else if (attributes.href) {
            defaultTag = "a";
          } else if (attributes.src || object) {
            defaultTag = "img";
          } else if (list) {
            defaultTag = "ul";
          } else {
            defaultTag = "div";
          }

          var Tag = tag || defaultTag;
          var classes = mapToCssModules(
            (0, _classnames.default)(className, {
              "media-body": body,
              "media-heading": heading,
              "media-left": left,
              "media-right": right,
              "media-top": top,
              "media-bottom": bottom,
              "media-middle": middle,
              "media-object": object,
              "media-list": list,
              media:
                !body &&
                !heading &&
                !left &&
                !right &&
                !top &&
                !bottom &&
                !middle &&
                !object &&
                !list
            }),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Media = Media;
        Media.propTypes = propTypes$60;
        var propTypes$61 = {
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          listClassName: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          size: _propTypes.default.string,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          listTag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          "aria-label": _propTypes.default.string
        };
        var defaultProps$54 = {
          tag: "nav",
          listTag: "ul",
          "aria-label": "pagination"
        };

        var Pagination = function Pagination(props) {
          var className = props.className,
            listClassName = props.listClassName,
            cssModule = props.cssModule,
            size = props.size,
            Tag = props.tag,
            ListTag = props.listTag,
            label = props["aria-label"],
            attributes = objectWithoutProperties(props, [
              "className",
              "listClassName",
              "cssModule",
              "size",
              "tag",
              "listTag",
              "aria-label"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className),
            cssModule
          );
          var listClasses = mapToCssModules(
            (0, _classnames.default)(
              listClassName,
              "pagination",
              defineProperty({}, "pagination-" + size, !!size)
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            {
              className: classes,
              "aria-label": label
            },
            _react.default.createElement(
              ListTag,
              _extends({}, attributes, {
                className: listClasses
              })
            )
          );
        };

        exports.Pagination = Pagination;
        Pagination.propTypes = propTypes$61;
        Pagination.defaultProps = defaultProps$54;
        var propTypes$62 = {
          active: _propTypes.default.bool,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          disabled: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ])
        };
        var defaultProps$55 = {
          tag: "li"
        };

        var PaginationItem = function PaginationItem(props) {
          var active = props.active,
            className = props.className,
            cssModule = props.cssModule,
            disabled = props.disabled,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "active",
              "className",
              "cssModule",
              "disabled",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "page-item", {
              active: active,
              disabled: disabled
            }),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.PaginationItem = PaginationItem;
        PaginationItem.propTypes = propTypes$62;
        PaginationItem.defaultProps = defaultProps$55;
        var propTypes$63 = {
          "aria-label": _propTypes.default.string,
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          next: _propTypes.default.bool,
          previous: _propTypes.default.bool,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ])
        };
        var defaultProps$56 = {
          tag: "a"
        };

        var PaginationLink = function PaginationLink(props) {
          var className = props.className,
            cssModule = props.cssModule,
            next = props.next,
            previous = props.previous,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "next",
              "previous",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "page-link"),
            cssModule
          );
          var defaultAriaLabel = void 0;

          if (previous) {
            defaultAriaLabel = "Previous";
          } else if (next) {
            defaultAriaLabel = "Next";
          }

          var ariaLabel = props["aria-label"] || defaultAriaLabel;
          var defaultCaret = void 0;

          if (previous) {
            defaultCaret = "\xAB";
          } else if (next) {
            defaultCaret = "\xBB";
          }

          var children = props.children;

          if (children && Array.isArray(children) && children.length === 0) {
            children = null;
          }

          if (!attributes.href && Tag === "a") {
            Tag = "button";
          }

          if (previous || next) {
            children = [
              _react.default.createElement(
                "span",
                {
                  "aria-hidden": "true",
                  key: "caret"
                },
                children || defaultCaret
              ),
              _react.default.createElement(
                "span",
                {
                  className: "sr-only",
                  key: "sr"
                },
                ariaLabel
              )
            ];
          }

          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes,
              "aria-label": ariaLabel
            }),
            children
          );
        };

        exports.PaginationLink = PaginationLink;
        PaginationLink.propTypes = propTypes$63;
        PaginationLink.defaultProps = defaultProps$56;
        var propTypes$64 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          activeTab: _propTypes.default.any,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$57 = {
          tag: "div"
        };
        var childContextTypes$2 = {
          activeTabId: _propTypes.default.any
        };

        var TabContent = (function(_Component) {
          inherits(TabContent, _Component);
          createClass(TabContent, null, [
            {
              key: "getDerivedStateFromProps",
              value: function getDerivedStateFromProps(nextProps, prevState) {
                if (prevState.activeTab !== nextProps.activeTab) {
                  return {
                    activeTab: nextProps.activeTab
                  };
                }

                return null;
              }
            }
          ]);

          function TabContent(props) {
            classCallCheck(this, TabContent);

            var _this = possibleConstructorReturn(
              this,
              (TabContent.__proto__ || Object.getPrototypeOf(TabContent)).call(
                this,
                props
              )
            );

            _this.state = {
              activeTab: _this.props.activeTab
            };
            return _this;
          }

          createClass(TabContent, [
            {
              key: "getChildContext",
              value: function getChildContext() {
                return {
                  activeTabId: this.state.activeTab
                };
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  className = _props.className,
                  cssModule = _props.cssModule,
                  Tag = _props.tag;
                var attributes = omit(this.props, Object.keys(propTypes$64));
                var classes = mapToCssModules(
                  (0, _classnames.default)("tab-content", className),
                  cssModule
                );
                return _react.default.createElement(
                  Tag,
                  _extends({}, attributes, {
                    className: classes
                  })
                );
              }
            }
          ]);
          return TabContent;
        })(_react.Component);

        exports.TabContent = TabContent;
        (0, _reactLifecyclesCompat.polyfill)(TabContent);
        TabContent.propTypes = propTypes$64;
        TabContent.defaultProps = defaultProps$57;
        TabContent.childContextTypes = childContextTypes$2;
        var propTypes$65 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          tabId: _propTypes.default.any
        };
        var defaultProps$58 = {
          tag: "div"
        };
        var contextTypes$3 = {
          activeTabId: _propTypes.default.any
        };

        function TabPane(props, context) {
          var className = props.className,
            cssModule = props.cssModule,
            tabId = props.tabId,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tabId",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)("tab-pane", className, {
              active: tabId === context.activeTabId
            }),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        }

        TabPane.propTypes = propTypes$65;
        TabPane.defaultProps = defaultProps$58;
        TabPane.contextTypes = contextTypes$3;
        var propTypes$66 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          fluid: _propTypes.default.bool,
          className: _propTypes.default.string,
          cssModule: _propTypes.default.object
        };
        var defaultProps$59 = {
          tag: "div"
        };

        var Jumbotron = function Jumbotron(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            fluid = props.fluid,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag",
              "fluid"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              "jumbotron",
              fluid ? "jumbotron-fluid" : false
            ),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.Jumbotron = Jumbotron;
        Jumbotron.propTypes = propTypes$66;
        Jumbotron.defaultProps = defaultProps$59;
        var propTypes$67 = {
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          closeClassName: _propTypes.default.string,
          closeAriaLabel: _propTypes.default.string,
          cssModule: _propTypes.default.object,
          color: _propTypes.default.string,
          fade: _propTypes.default.bool,
          isOpen: _propTypes.default.bool,
          toggle: _propTypes.default.func,
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          transition: _propTypes.default.shape(Fade.propTypes),
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.object,
            _propTypes.default.string,
            _propTypes.default.func
          ])
        };
        var defaultProps$60 = {
          color: "success",
          isOpen: true,
          tag: "div",
          closeAriaLabel: "Close",
          fade: true,
          transition: _extends({}, Fade.defaultProps, {
            unmountOnExit: true
          })
        };

        function Alert(props) {
          var className = props.className,
            closeClassName = props.closeClassName,
            closeAriaLabel = props.closeAriaLabel,
            cssModule = props.cssModule,
            Tag = props.tag,
            color = props.color,
            isOpen = props.isOpen,
            toggle = props.toggle,
            children = props.children,
            transition = props.transition,
            fade = props.fade,
            innerRef = props.innerRef,
            attributes = objectWithoutProperties(props, [
              "className",
              "closeClassName",
              "closeAriaLabel",
              "cssModule",
              "tag",
              "color",
              "isOpen",
              "toggle",
              "children",
              "transition",
              "fade",
              "innerRef"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "alert", "alert-" + color, {
              "alert-dismissible": toggle
            }),
            cssModule
          );
          var closeClasses = mapToCssModules(
            (0, _classnames.default)("close", closeClassName),
            cssModule
          );

          var alertTransition = _extends({}, Fade.defaultProps, transition, {
            baseClass: fade ? transition.baseClass : "",
            timeout: fade ? transition.timeout : 0
          });

          return _react.default.createElement(
            Fade,
            _extends({}, attributes, alertTransition, {
              tag: Tag,
              className: classes,
              in: isOpen,
              role: "alert",
              innerRef: innerRef
            }),
            toggle
              ? _react.default.createElement(
                  "button",
                  {
                    type: "button",
                    className: closeClasses,
                    "aria-label": closeAriaLabel,
                    onClick: toggle
                  },
                  _react.default.createElement(
                    "span",
                    {
                      "aria-hidden": "true"
                    },
                    "\xD7"
                  )
                )
              : null,
            children
          );
        }

        Alert.propTypes = propTypes$67;
        Alert.defaultProps = defaultProps$60;

        var _transitionStatusToCl;

        var propTypes$68 = _extends({}, Transition.propTypes, {
          isOpen: _propTypes.default.bool,
          children: _propTypes.default.oneOfType([
            _propTypes.default.arrayOf(_propTypes.default.node),
            _propTypes.default.node
          ]),
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.node,
          navbar: _propTypes.default.bool,
          cssModule: _propTypes.default.object,
          innerRef: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string,
            _propTypes.default.object
          ])
        });

        var defaultProps$61 = _extends({}, Transition.defaultProps, {
          isOpen: false,
          appear: false,
          enter: true,
          exit: true,
          tag: "div",
          timeout: TransitionTimeouts.Collapse
        });

        var transitionStatusToClassHash = ((_transitionStatusToCl = {}),
        defineProperty(
          _transitionStatusToCl,
          TransitionStatuses.ENTERING,
          "collapsing"
        ),
        defineProperty(
          _transitionStatusToCl,
          TransitionStatuses.ENTERED,
          "collapse show"
        ),
        defineProperty(
          _transitionStatusToCl,
          TransitionStatuses.EXITING,
          "collapsing"
        ),
        defineProperty(
          _transitionStatusToCl,
          TransitionStatuses.EXITED,
          "collapse"
        ),
        _transitionStatusToCl);

        function getTransitionClass(status) {
          return transitionStatusToClassHash[status] || "collapse";
        }

        function getHeight(node) {
          return node.scrollHeight;
        }

        var Collapse = (function(_Component) {
          inherits(Collapse, _Component);

          function Collapse(props) {
            classCallCheck(this, Collapse);

            var _this = possibleConstructorReturn(
              this,
              (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(
                this,
                props
              )
            );

            _this.state = {
              height: null
            };
            [
              "onEntering",
              "onEntered",
              "onExit",
              "onExiting",
              "onExited"
            ].forEach(function(name) {
              _this[name] = _this[name].bind(_this);
            });
            return _this;
          }

          createClass(Collapse, [
            {
              key: "onEntering",
              value: function onEntering(node, isAppearing) {
                this.setState({
                  height: getHeight(node)
                });
                this.props.onEntering(node, isAppearing);
              }
            },
            {
              key: "onEntered",
              value: function onEntered(node, isAppearing) {
                this.setState({
                  height: null
                });
                this.props.onEntered(node, isAppearing);
              }
            },
            {
              key: "onExit",
              value: function onExit(node) {
                this.setState({
                  height: getHeight(node)
                });
                this.props.onExit(node);
              }
            },
            {
              key: "onExiting",
              value: function onExiting(node) {
                // getting this variable triggers a reflow
                var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars

                this.setState({
                  height: 0
                });
                this.props.onExiting(node);
              }
            },
            {
              key: "onExited",
              value: function onExited(node) {
                this.setState({
                  height: null
                });
                this.props.onExited(node);
              }
            },
            {
              key: "render",
              value: function render() {
                var _this2 = this;

                var _props = this.props,
                  Tag = _props.tag,
                  isOpen = _props.isOpen,
                  className = _props.className,
                  navbar = _props.navbar,
                  cssModule = _props.cssModule,
                  children = _props.children,
                  innerRef = _props.innerRef,
                  otherProps = objectWithoutProperties(_props, [
                    "tag",
                    "isOpen",
                    "className",
                    "navbar",
                    "cssModule",
                    "children",
                    "innerRef"
                  ]);
                var height = this.state.height; // In NODE_ENV=production the Transition.propTypes are wrapped which results in an
                // empty object "{}". This is the result of the `react-transition-group` babel
                // configuration settings. Therefore, to ensure that production builds work without
                // error, we can either explicitly define keys or use the Transition.defaultProps.
                // Using the Transition.defaultProps excludes any required props. Thus, the best
                // solution is to explicitly define required props in our utilities and reference these.
                // This also gives us more flexibility in the future to remove the prop-types
                // dependency in distribution builds (Similar to how `react-transition-group` does).
                // Note: Without omitting the `react-transition-group` props, the resulting child
                // Tag component would inherit the Transition properties as attributes for the HTML
                // element which results in errors/warnings for non-valid attributes.

                var transitionProps = pick(otherProps, TransitionPropTypeKeys);
                var childProps = omit(otherProps, TransitionPropTypeKeys);
                return _react.default.createElement(
                  Transition,
                  _extends({}, transitionProps, {
                    in: isOpen,
                    onEntering: this.onEntering,
                    onEntered: this.onEntered,
                    onExit: this.onExit,
                    onExiting: this.onExiting,
                    onExited: this.onExited
                  }),
                  function(status) {
                    var collapseClass = getTransitionClass(status);
                    var classes = mapToCssModules(
                      (0, _classnames.default)(
                        className,
                        collapseClass,
                        navbar && "navbar-collapse"
                      ),
                      cssModule
                    );
                    var style =
                      height === null
                        ? null
                        : {
                            height: height
                          };
                    return _react.default.createElement(
                      Tag,
                      _extends({}, childProps, {
                        style: _extends({}, childProps.style, style),
                        className: classes,
                        ref: _this2.props.innerRef
                      }),
                      children
                    );
                  }
                );
              }
            }
          ]);
          return Collapse;
        })(_react.Component);

        exports.Collapse = Collapse;
        Collapse.propTypes = propTypes$68;
        Collapse.defaultProps = defaultProps$61;
        var propTypes$69 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          active: _propTypes.default.bool,
          disabled: _propTypes.default.bool,
          color: _propTypes.default.string,
          action: _propTypes.default.bool,
          className: _propTypes.default.any,
          cssModule: _propTypes.default.object
        };
        var defaultProps$62 = {
          tag: "li"
        };

        var handleDisabledOnClick = function handleDisabledOnClick(e) {
          e.preventDefault();
        };

        var ListGroupItem = function ListGroupItem(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            active = props.active,
            disabled = props.disabled,
            action = props.action,
            color = props.color,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag",
              "active",
              "disabled",
              "action",
              "color"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(
              className,
              active ? "active" : false,
              disabled ? "disabled" : false,
              action ? "list-group-item-action" : false,
              color ? "list-group-item-" + color : false,
              "list-group-item"
            ),
            cssModule
          ); // Prevent click event when disabled.

          if (disabled) {
            attributes.onClick = handleDisabledOnClick;
          }

          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ListGroupItem = ListGroupItem;
        ListGroupItem.propTypes = propTypes$69;
        ListGroupItem.defaultProps = defaultProps$62;
        var propTypes$70 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.any,
          cssModule: _propTypes.default.object
        };
        var defaultProps$63 = {
          tag: "h5"
        };

        var ListGroupItemHeading = function ListGroupItemHeading(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "list-group-item-heading"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ListGroupItemHeading = ListGroupItemHeading;
        ListGroupItemHeading.propTypes = propTypes$70;
        ListGroupItemHeading.defaultProps = defaultProps$63;
        var propTypes$71 = {
          tag: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.string
          ]),
          className: _propTypes.default.any,
          cssModule: _propTypes.default.object
        };
        var defaultProps$64 = {
          tag: "p"
        };

        var ListGroupItemText = function ListGroupItemText(props) {
          var className = props.className,
            cssModule = props.cssModule,
            Tag = props.tag,
            attributes = objectWithoutProperties(props, [
              "className",
              "cssModule",
              "tag"
            ]);
          var classes = mapToCssModules(
            (0, _classnames.default)(className, "list-group-item-text"),
            cssModule
          );
          return _react.default.createElement(
            Tag,
            _extends({}, attributes, {
              className: classes
            })
          );
        };

        exports.ListGroupItemText = ListGroupItemText;
        ListGroupItemText.propTypes = propTypes$71;
        ListGroupItemText.defaultProps = defaultProps$64;

        var UncontrolledAlert = (function(_Component) {
          inherits(UncontrolledAlert, _Component);

          function UncontrolledAlert(props) {
            classCallCheck(this, UncontrolledAlert);

            var _this = possibleConstructorReturn(
              this,
              (
                UncontrolledAlert.__proto__ ||
                Object.getPrototypeOf(UncontrolledAlert)
              ).call(this, props)
            );

            _this.state = {
              isOpen: true
            };
            _this.toggle = _this.toggle.bind(_this);
            return _this;
          }

          createClass(UncontrolledAlert, [
            {
              key: "toggle",
              value: function toggle() {
                this.setState({
                  isOpen: !this.state.isOpen
                });
              }
            },
            {
              key: "render",
              value: function render() {
                return _react.default.createElement(
                  Alert,
                  _extends(
                    {
                      isOpen: this.state.isOpen,
                      toggle: this.toggle
                    },
                    this.props
                  )
                );
              }
            }
          ]);
          return UncontrolledAlert;
        })(_react.Component);

        exports.UncontrolledAlert = UncontrolledAlert;

        var UncontrolledButtonDropdown = (function(_Component) {
          inherits(UncontrolledButtonDropdown, _Component);

          function UncontrolledButtonDropdown(props) {
            classCallCheck(this, UncontrolledButtonDropdown);

            var _this = possibleConstructorReturn(
              this,
              (
                UncontrolledButtonDropdown.__proto__ ||
                Object.getPrototypeOf(UncontrolledButtonDropdown)
              ).call(this, props)
            );

            _this.state = {
              isOpen: false
            };
            _this.toggle = _this.toggle.bind(_this);
            return _this;
          }

          createClass(UncontrolledButtonDropdown, [
            {
              key: "toggle",
              value: function toggle() {
                this.setState({
                  isOpen: !this.state.isOpen
                });
              }
            },
            {
              key: "render",
              value: function render() {
                return _react.default.createElement(
                  ButtonDropdown,
                  _extends(
                    {
                      isOpen: this.state.isOpen,
                      toggle: this.toggle
                    },
                    this.props
                  )
                );
              }
            }
          ]);
          return UncontrolledButtonDropdown;
        })(_react.Component);

        exports.UncontrolledButtonDropdown = UncontrolledButtonDropdown;
        var propTypes$72 = {
          toggler: _propTypes.default.string.isRequired,
          toggleEvents: _propTypes.default.arrayOf(_propTypes.default.string)
        };
        var defaultProps$65 = {
          toggleEvents: defaultToggleEvents
        };

        var UncontrolledCollapse = (function(_Component) {
          inherits(UncontrolledCollapse, _Component);

          function UncontrolledCollapse(props) {
            classCallCheck(this, UncontrolledCollapse);

            var _this = possibleConstructorReturn(
              this,
              (
                UncontrolledCollapse.__proto__ ||
                Object.getPrototypeOf(UncontrolledCollapse)
              ).call(this, props)
            );

            _this.togglers = null;
            _this.removeEventListeners = null;
            _this.toggle = _this.toggle.bind(_this);
            _this.state = {
              isOpen: false
            };
            return _this;
          }

          createClass(UncontrolledCollapse, [
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                this.togglers = findDOMElements(this.props.toggler);

                if (this.togglers.length) {
                  this.removeEventListeners = addMultipleEventListeners(
                    this.togglers,
                    this.toggle,
                    this.props.toggleEvents
                  );
                }
              }
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                if (this.togglers.length && this.removeEventListeners) {
                  this.removeEventListeners();
                }
              }
            },
            {
              key: "toggle",
              value: function toggle(e) {
                this.setState(function(_ref) {
                  var isOpen = _ref.isOpen;
                  return {
                    isOpen: !isOpen
                  };
                });
                e.preventDefault();
              }
            },
            {
              key: "render",
              value: function render() {
                var _props = this.props,
                  toggleEvents = _props.toggleEvents,
                  rest = objectWithoutProperties(_props, ["toggleEvents"]);
                return _react.default.createElement(
                  Collapse,
                  _extends(
                    {
                      isOpen: this.state.isOpen
                    },
                    rest
                  )
                );
              }
            }
          ]);
          return UncontrolledCollapse;
        })(_react.Component);

        exports.UncontrolledCollapse = UncontrolledCollapse;
        UncontrolledCollapse.propTypes = propTypes$72;
        UncontrolledCollapse.defaultProps = defaultProps$65;

        var UncontrolledDropdown = (function(_Component) {
          inherits(UncontrolledDropdown, _Component);

          function UncontrolledDropdown(props) {
            classCallCheck(this, UncontrolledDropdown);

            var _this = possibleConstructorReturn(
              this,
              (
                UncontrolledDropdown.__proto__ ||
                Object.getPrototypeOf(UncontrolledDropdown)
              ).call(this, props)
            );

            _this.state = {
              isOpen: false
            };
            _this.toggle = _this.toggle.bind(_this);
            return _this;
          }

          createClass(UncontrolledDropdown, [
            {
              key: "toggle",
              value: function toggle() {
                this.setState({
                  isOpen: !this.state.isOpen
                });
              }
            },
            {
              key: "render",
              value: function render() {
                return _react.default.createElement(
                  Dropdown,
                  _extends(
                    {
                      isOpen: this.state.isOpen,
                      toggle: this.toggle
                    },
                    this.props
                  )
                );
              }
            }
          ]);
          return UncontrolledDropdown;
        })(_react.Component);

        exports.UncontrolledDropdown = UncontrolledDropdown;

        var UncontrolledNavDropdown = function UncontrolledNavDropdown(props) {
          warnOnce(
            'The "UncontrolledNavDropdown" component has been deprecated.\nPlease use component "UncontrolledDropdown" with nav prop.'
          );
          return _react.default.createElement(
            UncontrolledDropdown,
            _extends(
              {
                nav: true
              },
              props
            )
          );
        };

        exports.UncontrolledNavDropdown = UncontrolledNavDropdown;

        var UncontrolledTooltip = (function(_Component) {
          inherits(UncontrolledTooltip, _Component);

          function UncontrolledTooltip(props) {
            classCallCheck(this, UncontrolledTooltip);

            var _this = possibleConstructorReturn(
              this,
              (
                UncontrolledTooltip.__proto__ ||
                Object.getPrototypeOf(UncontrolledTooltip)
              ).call(this, props)
            );

            _this.state = {
              isOpen: false
            };
            _this.toggle = _this.toggle.bind(_this);
            return _this;
          }

          createClass(UncontrolledTooltip, [
            {
              key: "toggle",
              value: function toggle() {
                this.setState({
                  isOpen: !this.state.isOpen
                });
              }
            },
            {
              key: "render",
              value: function render() {
                return _react.default.createElement(
                  Tooltip,
                  _extends(
                    {
                      isOpen: this.state.isOpen,
                      toggle: this.toggle
                    },
                    this.props
                  )
                );
              }
            }
          ]);
          return UncontrolledTooltip;
        })(_react.Component);

        exports.UncontrolledTooltip = UncontrolledTooltip;
      },
      {
        react: "../node_modules/react/index.js",
        "prop-types": "../node_modules/prop-types/index.js",
        classnames: "../node_modules/classnames/index.js",
        "lodash.isfunction": "../node_modules/lodash.isfunction/index.js",
        "lodash.isobject": "../node_modules/lodash.isobject/index.js",
        "react-dom": "../node_modules/react-dom/index.js",
        "react-popper": "../node_modules/react-popper/lib/react-popper.js",
        "lodash.tonumber": "../node_modules/lodash.tonumber/index.js",
        "react-lifecycles-compat":
          "../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"
      }
    ],
    "images/caret-down.png": [
      function(require, module, exports) {
        module.exports = "/caret-down.6e64904b.png";
      },
      {}
    ],
    "images/caret-up.png": [
      function(require, module, exports) {
        module.exports = "/caret-up.3352069e.png";
      },
      {}
    ],
    "images/tops.png": [
      function(require, module, exports) {
        module.exports = "/tops.388395a8.png";
      },
      {}
    ],
    "images/shopping-bag.png": [
      function(require, module, exports) {
        module.exports = "/shopping-bag.0f94753a.png";
      },
      {}
    ],
    "images/formal.png": [
      function(require, module, exports) {
        module.exports = "/formal.6600449e.png";
      },
      {}
    ],
    "images/traditional.png": [
      function(require, module, exports) {
        module.exports = "/traditional.399f12be.png";
      },
      {}
    ],
    "images/home.png": [
      function(require, module, exports) {
        module.exports = "/home.cea49ce4.png";
      },
      {}
    ],
    "components/Bundles.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireWildcard(require("react"));

        var _reactstrap = require("reactstrap");

        var _router = require("@reach/router");

        var _caretDown = _interopRequireDefault(
          require("../images/caret-down.png")
        );

        var _caretUp = _interopRequireDefault(
          require("../images/caret-up.png")
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var Bundles =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Bundles, _React$Component);

            function Bundles(props) {
              var _this;

              _classCallCheck(this, Bundles);

              _this = _possibleConstructorReturn(
                this,
                _getPrototypeOf(Bundles).call(this, props)
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "renderTop",
                function() {
                  var anyBundleOpen = _this.state.anyBundleOpen;
                  return _react.default.createElement(
                    "div",
                    {
                      className:
                        "card rounded-0 white-card-border-color animated fadeIn mt-3"
                    },
                    _react.default.createElement(
                      "div",
                      {
                        className: "card-body"
                      },
                      _react.default.createElement("img", {
                        className: "mx-auto d-block mb-3 bundlesIcons",
                        src: require("../images/tops.png")
                      }),
                      _react.default.createElement(
                        "h5",
                        {
                          className:
                            "card-title text-center text-uppercase white-bundle-title"
                        },
                        "Tops & Bottoms"
                      ),
                      _react.default.createElement(
                        _reactstrap.Collapse,
                        {
                          isOpen:
                            anyBundleOpen === "collapseTops" ? true : false,
                          className: "my-4"
                        },
                        _react.default.createElement(
                          "p",
                          {
                            className: "text-center white-card-text"
                          },
                          "Premium clean* & press treatment for your choice of shirts, blouses, skirts or trousers."
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "row mb-3"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-6 white-card-inner-rborder"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row mb-2 mt-2"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6 border-right "
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "white-card-big-number d-block text-center"
                                  },
                                  "2"
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6"
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-for-text"
                                  },
                                  "FOR"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-price-text"
                                  },
                                  "32"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-curr-text"
                                  },
                                  "AED"
                                )
                              )
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "text-center my-3 white-card-bottom-text"
                              },
                              "16% OFF, 6 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-6 "
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row mb-2 mt-2"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6 border-right "
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "white-card-big-number d-block text-center"
                                  },
                                  "3"
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6"
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-for-text"
                                  },
                                  "FOR"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-price-text"
                                  },
                                  "44"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-curr-text"
                                  },
                                  "AED"
                                )
                              )
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "text-center my-3 white-card-bottom-text"
                              },
                              "23% OFF, 13 AED SAVING"
                            )
                          )
                        ),
                        _react.default.createElement("h5", {
                          className: "white-bundle-hr"
                        }),
                        _react.default.createElement(
                          "div",
                          {
                            className: "row mb-4"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-6 white-card-inner-rborder"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row mb-2 mt-2"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6 border-right "
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "white-card-big-number d-block text-center"
                                  },
                                  "5"
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6"
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-for-text"
                                  },
                                  "FOR"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-price-text"
                                  },
                                  "64"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-curr-text"
                                  },
                                  "AED"
                                )
                              )
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "text-center my-3 white-card-bottom-text"
                              },
                              "33% OFF, 31 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-6 "
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row mb-2 mt-2"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6 border-right "
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "white-card-big-number d-block text-center"
                                  },
                                  "9"
                                )
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-6"
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-for-text"
                                  },
                                  "FOR"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-price-text"
                                  },
                                  "99"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "d-block text-center my-1 py-0 white-curr-text"
                                  },
                                  "AED"
                                )
                              )
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "text-center my-3 white-card-bottom-text"
                              },
                              "42% OFF, 72 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-md-12 text-center"
                            },
                            _react.default.createElement(
                              _router.Link,
                              {
                                to: "/contactUs"
                              },
                              _react.default.createElement(
                                "button",
                                {
                                  type: "button",
                                  className:
                                    "btn text-uppercase btn-primary px-3 btn-sm d-inline-block mx-auto mt-4 white-change-button-color text-center"
                                },
                                _react.default.createElement("img", {
                                  className: "mr-2 white-bag-style",
                                  src: require("../images/shopping-bag.png")
                                }),
                                "order now"
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "a",
                        {
                          "data-toggle": "collapse",
                          role: "button",
                          "aria-expanded": "false",
                          "aria-controls": "collapseExample",
                          onClick: function onClick() {
                            return _this.resizeDiv("collapseTops");
                          }
                        },
                        _react.default.createElement("img", {
                          className: "mx-auto d-block",
                          src:
                            anyBundleOpen === "collapseTops"
                              ? _caretUp.default
                              : _caretDown.default
                        })
                      )
                    )
                  );
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "renderFormal",
                function() {
                  var anyBundleOpen = _this.state.anyBundleOpen;
                  return _react.default.createElement(
                    "div",
                    {
                      className:
                        "card rounded-0 white-card-border-color animated fadeIn mt-3"
                    },
                    _react.default.createElement(
                      "div",
                      {
                        className: "card-body"
                      },
                      _react.default.createElement("img", {
                        className: "mx-auto d-block mb-3 bundlesIcons",
                        src: require("../images/formal.png")
                      }),
                      _react.default.createElement(
                        "h5",
                        {
                          className:
                            "card-title text-center text-uppercase white-bundle-title"
                        },
                        "Formal"
                      ),
                      _react.default.createElement(
                        _reactstrap.Collapse,
                        {
                          isOpen:
                            anyBundleOpen === "collapseFormal" ? true : false,
                          className: "my-4"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "row mb-4"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-9"
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-formal-text"
                              },
                              "SUIT/SKIRT SUIT ",
                              _react.default.createElement(
                                "span",
                                null,
                                "(2PCS)"
                              ),
                              _react.default.createElement("br", null),
                              " + SHIRT/BLOUSE",
                              " "
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "text-uppercase white-formal-blue-text"
                              },
                              "+5 AED To Add Single Tie/Scarf"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className: " my-3 white-card-bottom-text"
                              },
                              "21% OFF, 14 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-3 "
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-1 py-0 align-text-top white-price-text"
                              },
                              "54"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-1 py-0 white-curr-text"
                              },
                              "AED"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-md-12 text-center"
                            },
                            _react.default.createElement(
                              _router.Link,
                              {
                                to: "/contactUs"
                              },
                              _react.default.createElement(
                                "button",
                                {
                                  type: "button",
                                  className:
                                    "btn text-uppercase btn-primary px-3 btn-sm d-inline-block mx-auto mt-4 white-change-button-color text-center"
                                },
                                _react.default.createElement("img", {
                                  className: "mr-2 white-bag-style",
                                  src: require("../images/shopping-bag.png")
                                }),
                                "order now"
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "a",
                        {
                          "data-toggle": "collapse",
                          role: "button",
                          "aria-expanded": "false",
                          "aria-controls": "collapseExample",
                          onClick: function onClick() {
                            return _this.resizeDiv("collapseFormal");
                          }
                        },
                        _react.default.createElement("img", {
                          className: "mx-auto d-block",
                          src:
                            anyBundleOpen === "collapseFormal"
                              ? _caretUp.default
                              : _caretDown.default
                        })
                      )
                    )
                  );
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "renderTraditional",
                function() {
                  var anyBundleOpen = _this.state.anyBundleOpen;
                  return _react.default.createElement(
                    "div",
                    {
                      className:
                        "card rounded-0 white-card-border-color animated fadeIn mt-3"
                    },
                    _react.default.createElement(
                      "div",
                      {
                        className: "card-body"
                      },
                      _react.default.createElement("img", {
                        className: "mx-auto d-block mb-3 bundlesIcons",
                        src: require("../images/traditional.png")
                      }),
                      _react.default.createElement(
                        "h5",
                        {
                          className:
                            "card-title text-center text-uppercase white-bundle-title"
                        },
                        "Traditional"
                      ),
                      _react.default.createElement(
                        _reactstrap.Collapse,
                        {
                          isOpen:
                            anyBundleOpen === "collapseTraditional"
                              ? true
                              : false,
                          className: "my-4"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "row mb-4"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-9"
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-formal-text mb-0"
                              },
                              "ABAYA + SHEILA"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-card-bottom-text"
                              },
                              "24% OFF, 9 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-3 "
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0  py-0 white-price-text"
                              },
                              "29"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0 py-0 white-curr-text"
                              },
                              "AED"
                            )
                          ),
                          _react.default.createElement("div", {
                            className: "col-12 mt-2 mb-3 white-border-dotted"
                          }),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-9 "
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-formal-text mb-0"
                              },
                              "KANDURA + GHUTRA"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className: " white-card-bottom-text"
                              },
                              "15% OFF, 4 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-3 "
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0  py-0 white-price-text"
                              },
                              "24"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0 py-0 white-curr-text"
                              },
                              "AED"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-md-12 text-center"
                            },
                            _react.default.createElement(
                              _router.Link,
                              {
                                to: "/contactUs"
                              },
                              _react.default.createElement(
                                "button",
                                {
                                  type: "button",
                                  className:
                                    "btn text-uppercase btn-primary px-3 btn-sm d-inline-block mx-auto mt-4 white-change-button-color text-center"
                                },
                                _react.default.createElement("img", {
                                  className: "mr-2 white-bag-style",
                                  src: require("../images/shopping-bag.png")
                                }),
                                "order now"
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "a",
                        {
                          "data-toggle": "collapse",
                          role: "button",
                          "aria-expanded": "false",
                          "aria-controls": "collapseExample",
                          onClick: function onClick() {
                            return _this.resizeDiv("collapseTraditional");
                          }
                        },
                        _react.default.createElement("img", {
                          className: "mx-auto d-block",
                          src:
                            anyBundleOpen === "collapseTraditional"
                              ? _caretUp.default
                              : _caretDown.default
                        })
                      )
                    )
                  );
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "renderHome",
                function() {
                  var anyBundleOpen = _this.state.anyBundleOpen;
                  return _react.default.createElement(
                    "div",
                    {
                      className:
                        "card rounded-0 white-card-border-color animated fadeIn mt-3"
                    },
                    _react.default.createElement(
                      "div",
                      {
                        className: "card-body"
                      },
                      _react.default.createElement("img", {
                        className: "mx-auto d-block mb-3 bundlesIcons",
                        src: require("../images/home.png")
                      }),
                      _react.default.createElement(
                        "h5",
                        {
                          className:
                            "card-title text-center text-uppercase white-bundle-title"
                        },
                        "Home"
                      ),
                      _react.default.createElement(
                        _reactstrap.Collapse,
                        {
                          isOpen:
                            anyBundleOpen === "collapseHome" ? true : false,
                          className: "my-4"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "row mb-4"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-9"
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-formal-text mb-0"
                              },
                              "SINGLE BED"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className: " mt-2 mb-1 white-p-blue-text"
                              },
                              "Single size bed sheet + one pillow case ",
                              _react.default.createElement("br", null),
                              "+ single size blanket or duvet cover"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "text-uppercase mt-3 mb-1 white-formal-blue-text"
                              },
                              "+14 AED To Add Single Size Duvet"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-card-bottom-text"
                              },
                              "UP TO 23% OFF, UP TO 10 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-3 "
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0  py-0 white-price-text"
                              },
                              "29"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0 py-0 white-curr-text"
                              },
                              "AED"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-9"
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-formal-text mb-0"
                              },
                              "DOUBLE BED"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className: " mt-2 mb-1 white-p-blue-text"
                              },
                              "Double size bed sheet + two pillow cases ",
                              _react.default.createElement("br", null),
                              "+ double size blanket or duvet cover"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "text-uppercase mt-3 mb-1 white-formal-blue-text"
                              },
                              "+24 AED To Add Double Size Duvet"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className: "white-card-bottom-text"
                              },
                              "UP TO 25% OFF, UP TO 16 AED SAVING"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-3 "
                            },
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0  py-0 white-price-text"
                              },
                              "49"
                            ),
                            _react.default.createElement(
                              "p",
                              {
                                className:
                                  "d-block text-center my-0 py-0 white-curr-text"
                              },
                              "AED"
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-md-12 text-center"
                            },
                            _react.default.createElement(
                              _router.Link,
                              {
                                to: "/contactUs"
                              },
                              _react.default.createElement(
                                "button",
                                {
                                  type: "button",
                                  className:
                                    "btn text-uppercase btn-primary px-3 btn-sm d-inline-block mx-auto mt-4 white-change-button-color text-center"
                                },
                                _react.default.createElement("img", {
                                  className: "mr-2 white-bag-style",
                                  src: require("../images/shopping-bag.png")
                                }),
                                "order now"
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "a",
                        {
                          "data-toggle": "collapse",
                          role: "button",
                          "aria-expanded": "false",
                          "aria-controls": "collapseExample",
                          onClick: function onClick() {
                            return _this.resizeDiv("collapseHome");
                          }
                        },
                        _react.default.createElement("img", {
                          className: "mx-auto d-block",
                          src:
                            anyBundleOpen === "collapseHome"
                              ? _caretUp.default
                              : _caretDown.default
                        })
                      )
                    )
                  );
                }
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "renderBunndles",
                function() {
                  var anyBundleOpen = _this.state.anyBundleOpen;

                  switch (anyBundleOpen) {
                    case "collapseTops":
                      return _react.default.createElement(
                        _react.Fragment,
                        null,
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-6"
                          },
                          _this.renderTop()
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-6"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-6"
                              },
                              _this.renderFormal()
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-6"
                              },
                              _this.renderTraditional()
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-6"
                              },
                              _this.renderHome()
                            )
                          )
                        )
                      );

                    case "collapseFormal":
                      return _react.default.createElement(
                        _react.Fragment,
                        null,
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _this.renderTop()
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-6"
                          },
                          _this.renderFormal()
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-12"
                              },
                              _this.renderTraditional()
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-12 mt-3"
                              },
                              _this.renderHome()
                            )
                          )
                        )
                      );

                    case "collapseTraditional":
                      return _react.default.createElement(
                        _react.Fragment,
                        null,
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-12"
                              },
                              _this.renderTop()
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-12 mt-3"
                              },
                              _this.renderFormal()
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-6"
                          },
                          _this.renderTraditional()
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _this.renderHome()
                        )
                      );

                    case "collapseHome":
                      return _react.default.createElement(
                        _react.Fragment,
                        null,
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-6"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-6"
                              },
                              _this.renderTop()
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-6"
                              },
                              _this.renderFormal()
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-md-6 mt-3"
                              },
                              _this.renderTraditional()
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-6"
                          },
                          _this.renderHome()
                        )
                      );

                    default:
                      return _react.default.createElement(
                        _react.Fragment,
                        null,
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _this.renderTop()
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _this.renderFormal()
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _this.renderTraditional()
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _this.renderHome()
                        )
                      );
                  }
                }
              );

              _this.state = {
                anyBundleOpen: ""
              };
              return _this;
            }

            _createClass(Bundles, [
              {
                key: "resizeDiv",
                value: function resizeDiv(type) {
                  if (this.state.anyBundleOpen !== type) {
                    this.setState({
                      anyBundleOpen: type
                    });
                  } else {
                    this.setState({
                      anyBundleOpen: ""
                    });
                  }
                }
              },
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement("div", {
                        className:
                          "col-md-12 offset-md-0 mt-0 fadeIn animated mb-5 white-bundles-hero"
                      }),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row d-none d-lg-flex sm-row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading text-uppercase mb-5"
                            },
                            "Bundles"
                          )
                        ),
                        this.renderBunndles()
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row d d-lg-none sm-row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-12"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading text-uppercase mb-5"
                            },
                            "Bundles"
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "col-12 footer-height"
                        },
                        _react.default.createElement("p", null)
                      )
                    )
                  );
                }
              }
            ]);

            return Bundles;
          })(_react.default.Component);

        var _default = Bundles;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        reactstrap: "../node_modules/reactstrap/dist/reactstrap.es.js",
        "@reach/router": "../node_modules/@reach/router/es/index.js",
        "../images/caret-down.png": "images/caret-down.png",
        "../images/caret-up.png": "images/caret-up.png",
        "../images/tops.png": "images/tops.png",
        "../images/shopping-bag.png": "images/shopping-bag.png",
        "../images/formal.png": "images/formal.png",
        "../images/traditional.png": "images/traditional.png",
        "../images/home.png": "images/home.png"
      }
    ],
    "components/WashFold.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _router = require("@reach/router");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var WashFold =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(WashFold, _React$Component);

            function WashFold() {
              _classCallCheck(this, WashFold);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(WashFold).apply(this, arguments)
              );
            }

            _createClass(WashFold, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className:
                            "col-md-12 offset-md-0 fadeIn animated mb-5 white-wash-hero"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "row mt-md-5 mt-2"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-lg-7 col-12"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-12"
                                },
                                _react.default.createElement(
                                  "h1",
                                  {
                                    className:
                                      "white-washpage-heading d-none d-lg-flex text-uppercase"
                                  },
                                  "Wash+Fold BAG*"
                                ),
                                _react.default.createElement(
                                  "h1",
                                  {
                                    className:
                                      "white-washpage-heading  d-lg-none  text-center text-uppercase"
                                  },
                                  "Wash+Fold BAG*"
                                )
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "col-12 "
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "row "
                                },
                                _react.default.createElement(
                                  "div",
                                  {
                                    className: "col-12 white-wash-section"
                                  },
                                  _react.default.createElement(
                                    "div",
                                    {
                                      className: "row"
                                    },
                                    _react.default.createElement(
                                      "div",
                                      {
                                        className: "col-8 col-md-9 "
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className: "white-wash-text my-0"
                                        },
                                        "Full load of Whites Wash + Fold Bag, perfect for t-shirts, shorts, gym clothes, undergarments, towels, etc."
                                      )
                                    ),
                                    _react.default.createElement(
                                      "div",
                                      {
                                        className: "col-2 col-md-2"
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "white-wash-value text-center my-0"
                                        },
                                        "99"
                                      ),
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "white-wash-currency text-center my-0"
                                        },
                                        "AED"
                                      )
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "div",
                                  {
                                    className:
                                      "col-12 order-now-section text-center"
                                  },
                                  _react.default.createElement(
                                    _router.Link,
                                    {
                                      to: "/contactUs"
                                    },
                                    _react.default.createElement(
                                      "button",
                                      {
                                        type: "button",
                                        className:
                                          "btn text-uppercase btn-primary px-3 btn-sm d-inline-block mr-6 mt-4 white-change-button-color text-center"
                                      },
                                      _react.default.createElement("img", {
                                        className: "mr-2 white-bag-style",
                                        src: require("../images/shopping-bag.png")
                                      }),
                                      "order now"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "col-12 footer-height"
                        },
                        _react.default.createElement("p", null)
                      )
                    )
                  );
                }
              }
            ]);

            return WashFold;
          })(_react.default.Component);

        var _default = WashFold;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "@reach/router": "../node_modules/@reach/router/es/index.js",
        "../images/shopping-bag.png": "images/shopping-bag.png"
      }
    ],
    "components/Bridal.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var Bridal =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Bridal, _React$Component);

            function Bridal() {
              _classCallCheck(this, Bridal);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(Bridal).apply(this, arguments)
              );
            }

            _createClass(Bridal, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement("div", {
                        className:
                          "col-md-12 offset-md-0 mt-0 fadeIn animated mb-4 white-bridal-hero"
                      }),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading text-uppercase mb-5"
                            },
                            "Preserve your most beautiful memories"
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-4"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className: "white-for-text"
                            },
                            "Your wedding dress is the most important dress of your life, closely connected to wonderful memories and feelings. That's why it needs to be treated and cared for in a special way."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-8"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className: ""
                            },
                            "No matter how delicate your wedding dress is, we will clean and hand finish it for you to the highest possible standards. All gowns receive individual attention. We take extra care to protect delicate beads, embroidery and lace in the cleaning process. We delicately wrap your dress and return it to your specified location. This process will ensure that your dress is beautifully kept and preserved for generations to come."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-12 footer-height"
                          },
                          _react.default.createElement("p", null)
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return Bridal;
          })(_react.default.Component);

        var _default = Bridal;
        exports.default = _default;
      },
      { react: "../node_modules/react/index.js" }
    ],
    "components/Couture.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var Couture =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Couture, _React$Component);

            function Couture() {
              _classCallCheck(this, Couture);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(Couture).apply(this, arguments)
              );
            }

            _createClass(Couture, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement("div", {
                        className:
                          "col-md-12 offset-md-0 mt-0 fadeIn animated mb-4 white-couture-hero"
                      }),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading text-uppercase mb-3"
                            },
                            "Wellness for your designer pieces"
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className: "white-for-text"
                            },
                            "Your couture gown is unique, and so is the way we will care for it. We combine craftsmanship and state of the art technology to achieve splendid results."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _react.default.createElement("h5", {
                            className: "text-uppercase white-couture-text"
                          }),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "Greatest care and highest attention to detail are our top priorities. Here are the different stages of Whites\u2019 care process."
                          ),
                          _react.default.createElement(
                            "h5",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Inspection"
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "Our expert team will inspect meticulously the fabric and composition of your couture gown before recommending the most appropriate treatment."
                          ),
                          _react.default.createElement(
                            "h5",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Detailing"
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "To prepare your delicate garments for the cleaning process, we identify stains for treatment, protect or remove buttons or ornaments, inspect for damage and loose seams, and more."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _react.default.createElement(
                            "h5",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Stain Removal"
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "Our team will use both soaking and expert individual adapted stain removal techniques. Intermediate inspections occur throughout the process to insure, for instance, that stains have been removed and will not be set with the heat of finishing."
                          ),
                          _react.default.createElement(
                            "h5",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Hand Finishing"
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "Whites\u2019 hand finishing experts are highly trained. Each work station is configured to achieve the best possible results. Every crease, cuff and collar are exactly like you want them to be, the lining of each garment is hand-pressed to give a superior crisp finish."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-3"
                          },
                          _react.default.createElement(
                            "h5",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Minor Repairs"
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "We take care of minor repairs such as loose hems, open seams and buttons."
                          ),
                          _react.default.createElement(
                            "h5",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Finishing"
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "Once the process is completed your garment will be thoroughly\xA0reviewed to assure that we have provided the finest service in craftsmanship and attended to your preferences."
                          ),
                          _react.default.createElement(
                            "h5",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Packaging"
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "mb-4"
                            },
                            "Your clean, ironed hung garment will be carefully wrapped. It will look like it did the first day you bought it."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-12 footer-height"
                          },
                          _react.default.createElement("p", null)
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return Couture;
          })(_react.default.Component);

        var _default = Couture;
        exports.default = _default;
      },
      { react: "../node_modules/react/index.js" }
    ],
    "components/Pricelist.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireWildcard(require("react"));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var Pricelist =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Pricelist, _React$Component);

            function Pricelist() {
              _classCallCheck(this, Pricelist);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(Pricelist).apply(this, arguments)
              );
            }

            _createClass(Pricelist, [
              {
                key: "render",
                value: function render() {
                  var garment = [
                    ["Polo / T-Shirt", 9, 12],
                    ["Shirts", 14, 19],
                    ["Blouse", 14, 19],
                    ["Shorts", 9, 12],
                    ["Skirt", 14, 19],
                    ["Trousers / Jeans", 14, 19],
                    ["Dress - Casual", 29, 44],
                    ["Dress - Formal / Evening", 44, 59],
                    ["Suit / Skirt Suit - 2 pcs", 34, 49],
                    ["Suit - 3 pcs", 39, 59],
                    ["Overalls / Jumpsuit", 19, 29],
                    ["Jacket / Blazer", 24, 34],
                    ["Coat", 29, 39],
                    ["Overcoat", 34, 44],
                    ["Sweater / Jumper", 14, 19],
                    ["Leather Jacket", "-", 89],
                    ["Vest", 9, 14],
                    ["Tie / Kerchief", 6, 9],
                    ["Sheila - Shawl / Cape", 9, 14],
                    ["Scarf", 4, 9],
                    ["Pajama - 2 pcs", 14, 19],
                    ["Pajama Pants", 9, 14],
                    ["Robe", 14, 19],
                    ["Nightgown", 14, 19],
                    ["Bra", "-", "7*"],
                    ["Undershirt", "-", "5*"],
                    ["Underwear", "-", "4*"],
                    ["Socks", "-", "4*"],
                    ["Cap", "-", "14*"],
                    ["Backpack", "-", "19*"]
                  ];
                  var traditional = [
                    ["Abaya", 19, 24],
                    ["Kandura / Thoub", 14, 19],
                    ["Ghutra", 6, 9],
                    ["Bisht", 19, 24],
                    ["Salwar Kameez / Sari", 24, 29],
                    ["Kurta Top", 14, 19],
                    ["Sirwal", 9, 14]
                  ];
                  var juniors = [
                    ["Tops or Bottoms", 6, 9],
                    ["Dress", 14, 19],
                    ["Jacket", 9, 14],
                    ["Jacket", 9, 14],
                    ["Under Clothing", "-", "4*"]
                  ];
                  var home = [
                    ["Bed Sheet - Single", 9, 14],
                    ["Bed Sheet - Double", 14, 19],
                    ["Bed Spread - Single", 19, 24],
                    ["Bed Spread - Double", 29, 39],
                    ["Blanket - Single", "-", "24*"],
                    ["Blanket - Double", "-", "34*"],
                    ["Duvet / Comforter - Single", "-", "29*"],
                    ["Duvet / Comforter - Double", "-", "39*"],
                    ["Duvet Cover - Single", 14, 19],
                    ["Duvet Cover - Double", 19, 24],
                    ["Pillow Case", 4, 6],
                    ["Pillow - Polyester", "-", "14*"],
                    ["Pillow - Feather", "-", "24*"],
                    ["Napkin / Hanky", 3, 3],
                    ["Table Cloth - S or M size", 14, 19],
                    ["Table Cloth - Large size", 19, 24],
                    ["Towel - Small", "-", "4*"],
                    ["Towel - Medium", "-", "6*"],
                    ["Towel - Large", "-", "8*"],
                    ["Bath Robe", "-", "9*"],
                    ["Bath Mat / Kitchen Mat", "-", "14*"],
                    ["Curtain Normal - M2", 9, "14"],
                    ["Carpet - M2", "-", "39*"]
                  ];
                  var couture = [
                    ["Couture Jacket / Coat", "99"],
                    ["Haute Couture Dress", "129-249"],
                    ["Designers Tuxedo Suit", "129"],
                    ["Occasion hats / Fascinators", "49-129"]
                  ];
                  var bridal = [["Wedding Dress", "390"]];
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class-price "
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement("div", {
                          className:
                            "col-md-12  offset-md-0 mt-0 fadeIn mb-4 animated white-pricelist-hero"
                        })
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row "
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12 px-0"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading pricelist-styling text-uppercase blue-b-btm"
                            },
                            "Price List"
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-4 pl-0"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className:
                                "nav flex-column nav-pills text-uppercase",
                              id: "v-pills-tab",
                              role: "tablist",
                              "aria-orientation": "vertical"
                            },
                            _react.default.createElement(
                              "a",
                              {
                                className:
                                  "price-type-button active nav-link show",
                                id: "v-pills-garments-tab",
                                "data-toggle": "tab",
                                href: "#v-pills-garments",
                                role: "tab",
                                "aria-controls": "v-pills-garments",
                                "aria-selected": "true"
                              },
                              "Garments & Accessories"
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: " nav-link price-type-button",
                                id: "v-pills-traditional-tab",
                                "data-toggle": "tab",
                                href: "#v-pills-traditional",
                                role: "tab",
                                "aria-controls": "v-pills-traditional",
                                "aria-selected": "false"
                              },
                              "Traditional"
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: " nav-link price-type-button",
                                id: "v-pills-juniors-tab",
                                "data-toggle": "tab",
                                href: "#v-pills-juniors",
                                role: "tab",
                                "aria-controls": "v-pills-juniors",
                                "aria-selected": "false"
                              },
                              "Juniors"
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "nav-link price-type-button",
                                id: "v-pills-home-tab",
                                "data-toggle": "tab",
                                href: "#v-pills-home",
                                role: "tab",
                                "aria-controls": "v-pills-home",
                                "aria-selected": "false"
                              },
                              "Home"
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: " nav-link price-type-button",
                                id: "v-pills-couture-tab",
                                "data-toggle": "tab",
                                href: "#v-pills-couture",
                                role: "tab",
                                "aria-controls": "v-pills-couture",
                                "aria-selected": "false"
                              },
                              "Couture"
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "nav-link price-type-button",
                                id: "v-pills-bridal-tab",
                                "data-toggle": "tab",
                                href: "#v-pills-bridal",
                                role: "tab",
                                "aria-controls": "v-pills-bridal",
                                "aria-selected": "false"
                              },
                              "Bridal"
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className:
                              "col-md-8 mb-0 mt-5 mt-md-0 mt-lg-0 py-0 px-0 tab-content"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "tab-content",
                              id: "v-pills-tabContent"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade show active",
                                id: "v-pills-garments",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-garments-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className:
                                    "table pricelist-table table-borderless mt-0 pt-0"
                                },
                                _react.default.createElement(
                                  "thead",
                                  null,
                                  _react.default.createElement(
                                    "tr",
                                    {
                                      className: "text-center text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Item"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Press"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "CLEAN+PRESS*"
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  {
                                    className: "text-center"
                                  },
                                  garment.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr  notice"
                                },
                                _react.default.createElement(
                                  "span",
                                  {
                                    className: "footnote-teal"
                                  },
                                  "*"
                                ),
                                " Wet or Dry Clean"
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr2  notice"
                                },
                                _react.default.createElement(
                                  "span",
                                  {
                                    className: "footnote-grey"
                                  },
                                  "*"
                                ),
                                " Item will be pressed incase needed"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade",
                                id: "v-pills-traditional",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-traditional-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className:
                                    "table pricelist-table table-borderless mt-0 pt-0"
                                },
                                _react.default.createElement(
                                  "thead",
                                  null,
                                  _react.default.createElement(
                                    "tr",
                                    {
                                      className: "text-center text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Item"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Press"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "CLEAN+PRESS*"
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  {
                                    className: "text-center"
                                  },
                                  traditional.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr notice"
                                },
                                "* Item will be pressed incase needed"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade",
                                id: "v-pills-juniors",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-juniors-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className:
                                    "table pricelist-table table-borderless mt-0 pt-0"
                                },
                                _react.default.createElement(
                                  "thead",
                                  null,
                                  _react.default.createElement(
                                    "tr",
                                    {
                                      className: "text-center text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Item"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Press"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "CLEAN+PRESS*"
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  {
                                    className: "text-center"
                                  },
                                  juniors.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr  notice"
                                },
                                _react.default.createElement(
                                  "span",
                                  {
                                    className: "footnote-teal"
                                  },
                                  "*"
                                ),
                                " Wet or Dry Clean"
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr2  notice"
                                },
                                _react.default.createElement(
                                  "span",
                                  {
                                    className: "footnote-grey"
                                  },
                                  "*"
                                ),
                                " Item will be pressed incase needed"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade",
                                id: "v-pills-home",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-home-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className:
                                    "table pricelist-table table-borderless mt-0 pt-0"
                                },
                                _react.default.createElement(
                                  "thead",
                                  null,
                                  _react.default.createElement(
                                    "tr",
                                    {
                                      className: "text-center text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Item"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Press"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "CLEAN+PRESS*"
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  {
                                    className: "text-center"
                                  },
                                  home.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr  notice"
                                },
                                _react.default.createElement(
                                  "span",
                                  {
                                    className: "footnote-teal"
                                  },
                                  "*"
                                ),
                                " Wet or Dry Clean"
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr2  notice"
                                },
                                _react.default.createElement(
                                  "span",
                                  {
                                    className: "footnote-grey"
                                  },
                                  "*"
                                ),
                                " Item will be pressed incase needed"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade",
                                id: "v-pills-couture",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-couture-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className:
                                    "table pricelist-table table-borderless mt-0 pt-0"
                                },
                                _react.default.createElement(
                                  "thead",
                                  null,
                                  _react.default.createElement(
                                    "tr",
                                    {
                                      className: "text-center text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Item"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "CLEAN+PRESS"
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  {
                                    className: "text-center"
                                  },
                                  couture.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[1]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr  notice"
                                },
                                "Bridal & Couture items order turnaround time is 4 working days"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade",
                                id: "v-pills-bridal",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-bridal-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className:
                                    "table pricelist-table table-borderless mt-0 pt-0"
                                },
                                _react.default.createElement(
                                  "thead",
                                  null,
                                  _react.default.createElement(
                                    "tr",
                                    {
                                      className: "text-center text-uppercase"
                                    },
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "Item"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        scope: "col"
                                      },
                                      "CLEAN+PRESS"
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  {
                                    className: "text-center"
                                  },
                                  bridal.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        null,
                                        value[1]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr notice"
                                },
                                "Bridal & Couture items order turnaround time is 4 working days"
                              )
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-12 footer-height"
                          },
                          _react.default.createElement("p", null)
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return Pricelist;
          })(_react.default.Component);

        var _default = Pricelist;
        exports.default = _default;
      },
      { react: "../node_modules/react/index.js" }
    ],
    "components/Locations.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _MapContainer = _interopRequireDefault(require("./MapContainer"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var toastContainer;

        var Locations =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(Locations, _React$Component);

            function Locations() {
              _classCallCheck(this, Locations);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(Locations).apply(this, arguments)
              );
            }

            _createClass(Locations, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className:
                            "col-md-12 fadeIn animated mb-1 pl-0 locations-hero"
                        },
                        _react.default.createElement(
                          _MapContainer.default,
                          null
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "col-md-12 whites-loc-grey py-5"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "row text-center"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-lg-4 col-md-6 md-row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-md-2 offset-md-1"
                                },
                                _react.default.createElement("img", {
                                  className: "locationicons",
                                  src: require("../images/marker.png")
                                })
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-md-9 text-left-lg"
                                },
                                _react.default.createElement(
                                  "h5",
                                  {
                                    className:
                                      "white-couture-text text-uppercase"
                                  },
                                  "Dubai Marina Mall"
                                ),
                                _react.default.createElement(
                                  "p",
                                  null,
                                  "P Level",
                                  _react.default.createElement("br", null),
                                  _react.default.createElement(
                                    "a",
                                    {
                                      className: "phoneNumber",
                                      href: "tel:+971521090160"
                                    },
                                    "+971 52 109 0160"
                                  )
                                )
                              )
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-lg-4 col-md-6 md-row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-md-2 offset-md-1"
                                },
                                _react.default.createElement("img", {
                                  className: "locationicons",
                                  src: require("../images/marker.png")
                                })
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-md-9 text-left-lg"
                                },
                                _react.default.createElement(
                                  "h5",
                                  {
                                    className:
                                      "white-couture-text text-uppercase "
                                  },
                                  "Emaar Marina Walk"
                                ),
                                _react.default.createElement(
                                  "p",
                                  null,
                                  "Ground Floor",
                                  _react.default.createElement("br", null),
                                  _react.default.createElement(
                                    "a",
                                    {
                                      className: "phoneNumber",
                                      href: "tel:+971552851905"
                                    },
                                    "+971 55 285 1905"
                                  )
                                )
                              )
                            )
                          ),
                          _react.default.createElement(
                            "div",
                            {
                              className: "col-lg-4 col-md-6 md-row"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className: "row"
                              },
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-md-2 offset-md-1"
                                },
                                _react.default.createElement("img", {
                                  className: "locationicons",
                                  src: require("../images/head-office.png")
                                })
                              ),
                              _react.default.createElement(
                                "div",
                                {
                                  className: "col-md-9 text-left-lg"
                                },
                                _react.default.createElement(
                                  "h5",
                                  {
                                    className:
                                      "white-couture-text text-uppercase"
                                  },
                                  "Head Office"
                                ),
                                _react.default.createElement(
                                  "p",
                                  null,
                                  "3002 Concord Tower",
                                  _react.default.createElement("br", null),
                                  "Media City, Dubai, UAE"
                                )
                              )
                            )
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "col-12 footer-height"
                        },
                        _react.default.createElement("p", null)
                      )
                    )
                  );
                }
              }
            ]);

            return Locations;
          })(_react.default.Component);

        var _default = Locations;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "./MapContainer": "components/MapContainer.js",
        "../images/marker.png": "images/marker.png",
        "../images/head-office.png": "images/head-office.png"
      }
    ],
    "components/About.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _router = require("@reach/router");

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var About =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(About, _React$Component);

            function About() {
              _classCallCheck(this, About);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(About).apply(this, arguments)
              );
            }

            _createClass(About, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class "
                      },
                      _react.default.createElement("div", {
                        className:
                          "col-md-12 offset-md-0 fadeIn animated mb-4 white-about-hero mt-0"
                      }),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading text-uppercase mb-5"
                            },
                            "Finest garment care"
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-4"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className: "white-for-text"
                            },
                            "Whites is a next generation premium dry-cleaning and laundry service. We offer the highest standards in garment care processing thanks to the use of state of the art technologies."
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-8"
                          },
                          _react.default.createElement(
                            "p",
                            {
                              className: ""
                            },
                            "Our contemporary services have been well thought out to make every order a pleasant experience. You are at the heart of our business and your needs, wishes and requirements are what matters to us. With our particular expertise in high-end textile care we provide a unique couture and bridal service which handles your most precious gowns with great know-how."
                          ),
                          _react.default.createElement(
                            "p",
                            {
                              className: "text-uppercase white-couture-text"
                            },
                            "Why we are different"
                          ),
                          _react.default.createElement(
                            "ul",
                            null,
                            _react.default.createElement(
                              "li",
                              null,
                              "Outstanding quality and particular attention to your requirements"
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "Service points ideally located in selected",
                              _react.default.createElement(
                                _router.Link,
                                {
                                  to: "/locations"
                                },
                                " shopping malls"
                              ),
                              " "
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "Free laundry pick-up service from your doorsteps and delivery of your freshly cleaned garments the next day."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "Our exclusive dry-clean & laundry bundles are designed to take care of your specific daily needs and offer value for money at the same time."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              " Benefit from the advantages of our rewarding program."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "A unique couture and bridal service handles your most precious gowns with special expertise."
                            ),
                            _react.default.createElement(
                              "li",
                              null,
                              "We strive to always deliver the best service. Should there ever be a reason for you not to be satisfied, we will redo the service for free, no questions asked."
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-12 footer-height"
                          },
                          _react.default.createElement("p", null)
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return About;
          })(_react.default.Component);

        var _default = About;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "@reach/router": "../node_modules/@reach/router/es/index.js"
      }
    ],
    "components/ContactUs.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireDefault(require("react"));

        var _Contact = _interopRequireDefault(require("./Contact"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var ContactUs =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(ContactUs, _React$Component);

            function ContactUs() {
              _classCallCheck(this, ContactUs);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(ContactUs).apply(this, arguments)
              );
            }

            _createClass(ContactUs, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement(_Contact.default, null)
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "col-12 footer-height"
                      },
                      _react.default.createElement("p", null)
                    )
                  );
                }
              }
            ]);

            return ContactUs;
          })(_react.default.Component);

        var _default = ContactUs;
        exports.default = _default;
      },
      {
        react: "../node_modules/react/index.js",
        "./Contact": "components/Contact.js"
      }
    ],
    "components/PricelistOld.js": [
      function(require, module, exports) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _react = _interopRequireWildcard(require("react"));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var PricelistOld =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(PricelistOld, _React$Component);

            function PricelistOld() {
              var _getPrototypeOf2;

              var _this;

              _classCallCheck(this, PricelistOld);

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              _this = _possibleConstructorReturn(
                this,
                (_getPrototypeOf2 = _getPrototypeOf(PricelistOld)).call.apply(
                  _getPrototypeOf2,
                  [this].concat(args)
                )
              );

              _defineProperty(
                _assertThisInitialized(_assertThisInitialized(_this)),
                "heading",
                function(type) {
                  return _react.default.createElement(
                    "table",
                    {
                      className:
                        "table table-borderless title-table inline-display "
                    },
                    _react.default.createElement(
                      "thead",
                      {
                        className: "text-center"
                      },
                      _react.default.createElement(
                        "tr",
                        null,
                        _react.default.createElement("th", {
                          scope: "col",
                          className: "display-hidden title-gap"
                        }),
                        type === "bridal" || type === "couture"
                          ? _react.default.createElement(
                              "th",
                              {
                                className:
                                  "text-uppercase my-auto white-clean-press ",
                                scope: "col"
                              },
                              "Clean+Press"
                            )
                          : _react.default.createElement(
                              _react.Fragment,
                              null,
                              _react.default.createElement(
                                "th",
                                {
                                  className:
                                    "text-uppercase my-auto white-clean-press ",
                                  scope: "col"
                                },
                                "Press",
                                _react.default.createElement("br", null),
                                "\xA0"
                              ),
                              _react.default.createElement(
                                "th",
                                {
                                  className: "text-uppercase clean-press-head",
                                  scope: "col"
                                },
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "text-uppercase my-0 py-0 text-center white-clean-press "
                                  },
                                  "Clean+Press"
                                ),
                                _react.default.createElement(
                                  "p",
                                  {
                                    className:
                                      "text-uppercase my-0 py-0 text-center white-dry-wet"
                                  },
                                  "Dry or Wet"
                                )
                              )
                            )
                      )
                    )
                  );
                }
              );

              return _this;
            }

            _createClass(PricelistOld, [
              {
                key: "render",
                value: function render() {
                  var garment = [
                    ["Polo / T-Shirt", 9, 12],
                    ["Shirts", 14, 19],
                    ["Blouse", 14, 19],
                    ["Shorts", 9, 12],
                    ["Skirt", 14, 19],
                    ["Trousers / Jeans", 14, 19],
                    ["Dress - Casual", 29, 44],
                    ["Dress - Formal/Evening", 44, 59],
                    ["Suit / Skirt Suit - 2 pcs", 34, 49],
                    ["Suit - 3 pcs", 39, 59],
                    ["Overalls / Jumpsuit", 19, 29],
                    ["Jacket / Blazer", 24, 34],
                    ["Coat", 29, 39],
                    ["Overcoat", 34, 44],
                    ["Sweater / Jumper", 14, 19],
                    ["Leather Jacket", "-", 89],
                    ["Vest", 9, 14],
                    ["Tie / Kerchief", 6, 9],
                    ["Sheila - Shawl / Cape", 9, 14],
                    ["Scarf", 4, 9],
                    ["Pajama - 2 pcs", 14, 19],
                    ["Pajama Pants", 9, 14],
                    ["Robe", 14, 19],
                    ["Nightgown", 14, 19],
                    ["Bra", "-", "7*"],
                    ["Undershirt", "-", "5*"],
                    ["Underwear", "-", "4*"],
                    ["Socks", "-", "4*"],
                    ["Cap", "-", "14*"],
                    ["Backpack", "-", "19*"]
                  ];
                  var traditional = [
                    ["Abaya", 19, 24],
                    ["Kandura / Thoub", 14, 19],
                    ["Ghutra", 6, 9],
                    ["Bisht", 19, 24],
                    ["Salwar Kameez / Sari", 24, 29],
                    ["Kurta Top", 14, 19],
                    ["Sirwal", 9, 14]
                  ];
                  var juniors = [
                    ["Tops or Bottoms", 6, 9],
                    ["Dress", 14, 19],
                    ["Jacket", 9, 14],
                    ["Jacket", 9, 14],
                    ["Under Clothing", "-", "4*"]
                  ];
                  var home = [
                    ["Bed Sheet - Single", 9, 14],
                    ["Bed Sheet - Double", 14, 19],
                    ["Bed Spread - Single", 19, 24],
                    ["Bed Spread - Double", 29, 39],
                    ["Blanket - Single", "-", "24*"],
                    ["Blanket - Double", "-", "34*"],
                    ["Duvet / Comforter - Single", "-", "29*"],
                    ["Duvet / Comforter - Double", "-", "39*"],
                    ["Duvet Cover - Single", 14, 19],
                    ["Duvet Cover - Double", 19, 24],
                    ["Pillow Case", 4, 6],
                    ["Pillow - Polyester", "-", "14*"],
                    ["Pillow - Feather", "-", "24*"],
                    ["Napkin / Hanky", 3, 3],
                    ["Table Cloth - S or M size", 14, 19],
                    ["Table Cloth - Large size", 19, 24],
                    ["Towel - Small", "-", "4*"],
                    ["Towel - Medium", "-", "6*"],
                    ["Towel - Large", "-", "8*"],
                    ["Bath Robe", "-", "9*"],
                    ["Bath Mat / Kitchen Mat", "-", "14*"],
                    ["Curtain Normal - M2", 9, "14"],
                    ["Carpet - M2", "-", "39*"]
                  ];
                  var couture = [
                    ["Couture Jacket / Coat", "99"],
                    ["Haute Couture Dress", "129-249"],
                    ["Designers Tuxedo Suit", "129"],
                    ["Occasion hats / Fascinators", "49-129"]
                  ];
                  var bridal = [["Wedding Dress", "390"]];
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(
                      "div",
                      {
                        className: "container container-class"
                      },
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement("div", {
                          className:
                            "col-md-12 offset-md-0 mt-0 fadeIn animated white-pricelist-hero"
                        })
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-12"
                          },
                          _react.default.createElement(
                            "h1",
                            {
                              className:
                                "white-page-blue-heading text-uppercase mt-35px pb-20px blue-b-btm mb-15px"
                            },
                            "Price List"
                          )
                        )
                      ),
                      _react.default.createElement(
                        "div",
                        {
                          className: "row"
                        },
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-5 white-tabs"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "nav flex-column",
                              id: "v-pills-tab",
                              role: "tablist",
                              "aria-orientation": "vertical"
                            },
                            _react.default.createElement(
                              "a",
                              {
                                className:
                                  "nav-link active show v-pills-garment-title ",
                                id: "v-pills-garment-tab",
                                "data-toggle": "pill",
                                href: "#v-pills-garment",
                                role: "tab",
                                "aria-controls": "v-pills-garment",
                                "aria-selected": "true"
                              },
                              _react.default.createElement(
                                "span",
                                null,
                                "GARMENTS & ACCESSORIES"
                              ),
                              this.heading("garment")
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "nav-link v-pills-traditional-title",
                                id: "v-pills-traditional-tab",
                                "data-toggle": "pill",
                                href: "#v-pills-traditional",
                                role: "tab",
                                "aria-controls": "v-pills-traditional",
                                "aria-selected": "true"
                              },
                              "TRADITIONAL",
                              this.heading("traditional")
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "nav-link v-pills-juniors-title",
                                id: "v-pills-juniors-tab",
                                "data-toggle": "pill",
                                href: "#v-pills-juniors",
                                role: "tab",
                                "aria-controls": "v-pills-juniors",
                                "aria-selected": "false"
                              },
                              "JUNIORS",
                              this.heading("juniors")
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "nav-link v-pills-home-title",
                                id: "v-pills-home-tab",
                                "data-toggle": "pill",
                                href: "#v-pills-home",
                                role: "tab",
                                "aria-controls": "v-pills-home",
                                "aria-selected": "false"
                              },
                              "HOME",
                              this.heading("home")
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "nav-link v-pills-couture-title",
                                id: "v-pills-couture-tab",
                                "data-toggle": "pill",
                                href: "#v-pills-couture",
                                role: "tab",
                                "aria-controls": "v-pills-couture",
                                "aria-selected": "false"
                              },
                              "COUTURE",
                              this.heading("couture")
                            ),
                            _react.default.createElement(
                              "a",
                              {
                                className: "nav-link v-pills-bridal-title",
                                id: "v-pills-bridal-tab",
                                "data-toggle": "pill",
                                href: "#v-pills-bridal",
                                role: "tab",
                                "aria-controls": "v-pills-bridal",
                                "aria-selected": "false"
                              },
                              "BRIDAL",
                              this.heading("bridal")
                            )
                          )
                        ),
                        _react.default.createElement(
                          "div",
                          {
                            className: "col-md-7"
                          },
                          _react.default.createElement(
                            "div",
                            {
                              className: "tab-content price-div",
                              id: "v-pills-tabContent"
                            },
                            _react.default.createElement(
                              "div",
                              {
                                className:
                                  "tab-pane fade show active v-pills-garment",
                                id: "v-pills-garment",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-garment-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className: "table table-borderless"
                                },
                                _react.default.createElement(
                                  "thead",
                                  {
                                    className: "text-center price-head"
                                  },
                                  _react.default.createElement(
                                    "tr",
                                    null,
                                    _react.default.createElement("th", {
                                      className: "text-uppercase my-auto",
                                      scope: "col"
                                    }),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className:
                                          "text-uppercase my-auto white-clean-press ",
                                        scope: "col"
                                      },
                                      "Press",
                                      _react.default.createElement("br", null),
                                      "\xA0"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className: "text-uppercase",
                                        scope: "col"
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-clean-press "
                                        },
                                        "Clean+Press"
                                      ),
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-dry-wet"
                                        },
                                        "Dry or Wet"
                                      )
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  null,
                                  garment.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        {
                                          scope: "row",
                                          style: {
                                            width: "44%"
                                          }
                                        },
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr white-note-border notice"
                                },
                                "* Item will be pressed incase needed"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade v-pills-traditional",
                                id: "v-pills-traditional",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-home-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className: "table table-borderless"
                                },
                                _react.default.createElement(
                                  "thead",
                                  {
                                    className: "text-center price-head"
                                  },
                                  _react.default.createElement(
                                    "tr",
                                    null,
                                    _react.default.createElement("th", {
                                      className: "text-uppercase my-auto",
                                      scope: "col"
                                    }),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className:
                                          "text-uppercase my-auto white-clean-press ",
                                        scope: "col"
                                      },
                                      "Press",
                                      _react.default.createElement("br", null),
                                      "\xA0"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className: "text-uppercase",
                                        scope: "col"
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-clean-press "
                                        },
                                        "Clean+Press"
                                      ),
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-dry-wet"
                                        },
                                        "Dry or Wet"
                                      )
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  null,
                                  traditional.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        {
                                          scope: "row",
                                          style: {
                                            width: "44%"
                                          }
                                        },
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade v-pills-juniors",
                                id: "v-pills-juniors",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-profile-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className: "table table-borderless"
                                },
                                _react.default.createElement(
                                  "thead",
                                  {
                                    className: "text-center price-head"
                                  },
                                  _react.default.createElement(
                                    "tr",
                                    null,
                                    _react.default.createElement("th", {
                                      className: "text-uppercase my-auto",
                                      scope: "col"
                                    }),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className:
                                          "text-uppercase my-auto white-clean-press ",
                                        scope: "col"
                                      },
                                      "Press",
                                      _react.default.createElement("br", null),
                                      "\xA0"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className: "text-uppercase",
                                        scope: "col"
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-clean-press "
                                        },
                                        "Clean+Press"
                                      ),
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-dry-wet"
                                        },
                                        "Dry or Wet"
                                      )
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  null,
                                  juniors.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        {
                                          scope: "row",
                                          style: {
                                            width: "44%"
                                          }
                                        },
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr white-note-border notice"
                                },
                                "* Item will be pressed incase needed"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade v-pills-home",
                                id: "v-pills-home",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-messages-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className: "table table-borderless"
                                },
                                _react.default.createElement(
                                  "thead",
                                  {
                                    className: "text-center price-head"
                                  },
                                  _react.default.createElement(
                                    "tr",
                                    null,
                                    _react.default.createElement("th", {
                                      className: "text-uppercase my-auto",
                                      scope: "col"
                                    }),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className:
                                          "text-uppercase my-auto white-clean-press ",
                                        scope: "col"
                                      },
                                      "Press",
                                      _react.default.createElement("br", null),
                                      "\xA0"
                                    ),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className: "text-uppercase",
                                        scope: "col"
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-clean-press "
                                        },
                                        "Clean+Press"
                                      ),
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-dry-wet"
                                        },
                                        "Dry or Wet"
                                      )
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  null,
                                  home.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        {
                                          scope: "row",
                                          style: {
                                            width: "44%"
                                          }
                                        },
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[1]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center",
                                          style: {
                                            width: "28%"
                                          }
                                        },
                                        value[2]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr white-note-border notice"
                                },
                                "* Item will be pressed incase needed"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade v-pills-couture",
                                id: "v-pills-couture",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-settings-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className: "table table-borderless"
                                },
                                _react.default.createElement(
                                  "thead",
                                  {
                                    className: "text-center price-head"
                                  },
                                  _react.default.createElement(
                                    "tr",
                                    null,
                                    _react.default.createElement("th", {
                                      className: "text-uppercase my-auto",
                                      scope: "col"
                                    }),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className: "text-uppercase",
                                        scope: "col"
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-clean-press "
                                        },
                                        "Clean+Press"
                                      )
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  null,
                                  couture.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        {
                                          scope: "row"
                                        },
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center"
                                        },
                                        value[1]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr white-note-border notice"
                                },
                                "Bridale & Couture items order turnaround time is 4 working days"
                              )
                            ),
                            _react.default.createElement(
                              "div",
                              {
                                className: "tab-pane fade v-pills-bridal",
                                id: "v-pills-bridal",
                                role: "tabpanel",
                                "aria-labelledby": "v-pills-settings-tab"
                              },
                              _react.default.createElement(
                                "table",
                                {
                                  className: "table table-borderless"
                                },
                                _react.default.createElement(
                                  "thead",
                                  {
                                    className: "text-center price-head"
                                  },
                                  _react.default.createElement(
                                    "tr",
                                    null,
                                    _react.default.createElement("th", {
                                      className: "text-uppercase my-auto",
                                      scope: "col"
                                    }),
                                    _react.default.createElement(
                                      "th",
                                      {
                                        className: "text-uppercase",
                                        scope: "col"
                                      },
                                      _react.default.createElement(
                                        "p",
                                        {
                                          className:
                                            "text-uppercase my-0 py-0 text-center white-clean-press "
                                        },
                                        "Price"
                                      )
                                    )
                                  )
                                ),
                                _react.default.createElement(
                                  "tbody",
                                  null,
                                  bridal.map(function(value, index) {
                                    return _react.default.createElement(
                                      "tr",
                                      {
                                        key: "garment-".concat(index)
                                      },
                                      _react.default.createElement(
                                        "td",
                                        {
                                          scope: "row"
                                        },
                                        value[0]
                                      ),
                                      _react.default.createElement(
                                        "td",
                                        {
                                          className: "text-center"
                                        },
                                        value[1]
                                      )
                                    );
                                  })
                                )
                              ),
                              _react.default.createElement(
                                "p",
                                {
                                  className: "tag-clr white-note-border notice"
                                },
                                "Bridal & Couture items order turnaround time is 4 working days"
                              )
                            )
                          )
                        )
                      )
                    )
                  );
                }
              }
            ]);

            return PricelistOld;
          })(_react.default.Component);

        var _default = PricelistOld;
        exports.default = _default;
      },
      { react: "../node_modules/react/index.js" }
    ],
    "images/favicon.ico": [
      function(require, module, exports) {
        module.exports = "/favicon.21b6e204.ico";
      },
      {}
    ],
    "components/App.js": [
      function(require, module, exports) {
        "use strict";

        var _react = _interopRequireDefault(require("react"));

        var _reactFavicon = _interopRequireDefault(require("react-favicon"));

        var _reactDom = require("react-dom");

        var _reactGa = _interopRequireDefault(require("react-ga"));

        require("../scss/style.scss");

        var _Navigation = _interopRequireDefault(require("./Navigation"));

        var _HomeHero = _interopRequireDefault(require("./HomeHero"));

        var _Footer = _interopRequireDefault(require("./Footer"));

        var _router = require("@reach/router");

        var _Bundles = _interopRequireDefault(require("./Bundles"));

        var _WashFold = _interopRequireDefault(require("./WashFold"));

        var _Bridal = _interopRequireDefault(require("./Bridal"));

        var _Couture = _interopRequireDefault(require("./Couture"));

        var _Pricelist = _interopRequireDefault(require("./Pricelist"));

        var _Locations = _interopRequireDefault(require("./Locations"));

        var _About = _interopRequireDefault(require("./About"));

        var _ContactUs = _interopRequireDefault(require("./ContactUs"));

        var _PricelistOld = _interopRequireDefault(require("./PricelistOld"));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }

        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _possibleConstructorReturn(self, call) {
          if (
            call &&
            (_typeof(call) === "object" || typeof call === "function")
          ) {
            return call;
          }
          return _assertThisInitialized(self);
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          }
          return self;
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            }
          );
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }

        var App =
          /*#__PURE__*/
          (function(_React$Component) {
            _inherits(App, _React$Component);

            function App() {
              _classCallCheck(this, App);

              return _possibleConstructorReturn(
                this,
                _getPrototypeOf(App).apply(this, arguments)
              );
            }

            _createClass(App, [
              {
                key: "render",
                value: function render() {
                  return _react.default.createElement(
                    _react.default.Fragment,
                    null,
                    _react.default.createElement(_reactFavicon.default, {
                      url: require("../images/favicon.ico")
                    }),
                    _react.default.createElement(_Navigation.default, null),
                    _react.default.createElement(
                      _router.Router,
                      {
                        primary: false
                      },
                      _react.default.createElement(_HomeHero.default, {
                        path: "/"
                      }),
                      _react.default.createElement(_Bundles.default, {
                        path: "/bundles"
                      }),
                      _react.default.createElement(_WashFold.default, {
                        path: "/wash-fold"
                      }),
                      _react.default.createElement(_Bridal.default, {
                        path: "/bridal"
                      }),
                      _react.default.createElement(_Couture.default, {
                        path: "/couture"
                      }),
                      _react.default.createElement(_Pricelist.default, {
                        path: "/pricelist"
                      }),
                      _react.default.createElement(_PricelistOld.default, {
                        path: "/pricelistold"
                      }),
                      _react.default.createElement(_Locations.default, {
                        path: "/locations"
                      }),
                      _react.default.createElement(_ContactUs.default, {
                        path: "/contactUs"
                      }),
                      _react.default.createElement(_About.default, {
                        path: "/about"
                      })
                    ),
                    _react.default.createElement(
                      "div",
                      {
                        className: "white-footer"
                      },
                      _react.default.createElement(_Footer.default, null)
                    )
                  );
                }
              }
            ]);

            return App;
          })(_react.default.Component); // Global site tag (gtag.js) - Google Analytics

        _reactGa.default.initialize("UA-130682447-1");

        _reactGa.default.pageview(
          window.location.pathname + window.location.search
        );

        (0, _reactDom.render)(
          _react.default.createElement(App, null),
          document.getElementById("root")
        );
      },
      {
        react: "../node_modules/react/index.js",
        "react-favicon": "../node_modules/react-favicon/dist/react-favicon.js",
        "react-dom": "../node_modules/react-dom/index.js",
        "react-ga": "../node_modules/react-ga/dist/esm/index.js",
        "../scss/style.scss": "scss/style.scss",
        "./Navigation": "components/Navigation.js",
        "./HomeHero": "components/HomeHero.js",
        "./Footer": "components/Footer.js",
        "@reach/router": "../node_modules/@reach/router/es/index.js",
        "./Bundles": "components/Bundles.js",
        "./WashFold": "components/WashFold.js",
        "./Bridal": "components/Bridal.js",
        "./Couture": "components/Couture.js",
        "./Pricelist": "components/Pricelist.js",
        "./Locations": "components/Locations.js",
        "./About": "components/About.js",
        "./ContactUs": "components/ContactUs.js",
        "./PricelistOld": "components/PricelistOld.js",
        "../images/favicon.ico": "images/favicon.ico"
      }
    ],
    "../node_modules/parcel-bundler/src/builtins/hmr-runtime.js": [
      function(require, module, exports) {
        var global = arguments[3];
        var OVERLAY_ID = "__parcel__error__overlay__";
        var OldModule = module.bundle.Module;

        function Module(moduleName) {
          OldModule.call(this, moduleName);
          this.hot = {
            data: module.bundle.hotData,
            _acceptCallbacks: [],
            _disposeCallbacks: [],
            accept: function(fn) {
              this._acceptCallbacks.push(fn || function() {});
            },
            dispose: function(fn) {
              this._disposeCallbacks.push(fn);
            }
          };
          module.bundle.hotData = null;
        }

        module.bundle.Module = Module;
        var parent = module.bundle.parent;

        if (
          (!parent || !parent.isParcelRequire) &&
          typeof WebSocket !== "undefined"
        ) {
          var hostname = "" || location.hostname;
          var protocol = location.protocol === "https:" ? "wss" : "ws";
          var ws = new WebSocket(
            protocol + "://" + hostname + ":" + "58380" + "/"
          );

          ws.onmessage = function(event) {
            var data = JSON.parse(event.data);

            if (data.type === "update") {
              console.clear();
              data.assets.forEach(function(asset) {
                hmrApply(global.parcelRequire, asset);
              });
              data.assets.forEach(function(asset) {
                if (!asset.isNew) {
                  hmrAccept(global.parcelRequire, asset.id);
                }
              });
            }

            if (data.type === "reload") {
              ws.close();

              ws.onclose = function() {
                location.reload();
              };
            }

            if (data.type === "error-resolved") {
              console.log("[parcel] ✨ Error resolved");
              removeErrorOverlay();
            }

            if (data.type === "error") {
              console.error(
                "[parcel] 🚨  " + data.error.message + "\n" + data.error.stack
              );
              removeErrorOverlay();
              var overlay = createErrorOverlay(data);
              document.body.appendChild(overlay);
            }
          };
        }

        function removeErrorOverlay() {
          var overlay = document.getElementById(OVERLAY_ID);

          if (overlay) {
            overlay.remove();
          }
        }

        function createErrorOverlay(data) {
          var overlay = document.createElement("div");
          overlay.id = OVERLAY_ID; // html encode message and stack trace

          var message = document.createElement("div");
          var stackTrace = document.createElement("pre");
          message.innerText = data.error.message;
          stackTrace.innerText = data.error.stack;
          overlay.innerHTML =
            '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' +
            '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' +
            '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' +
            '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' +
            message.innerHTML +
            "</div>" +
            "<pre>" +
            stackTrace.innerHTML +
            "</pre>" +
            "</div>";
          return overlay;
        }

        function getParents(bundle, id) {
          var modules = bundle.modules;

          if (!modules) {
            return [];
          }

          var parents = [];
          var k, d, dep;

          for (k in modules) {
            for (d in modules[k][1]) {
              dep = modules[k][1][d];

              if (
                dep === id ||
                (Array.isArray(dep) && dep[dep.length - 1] === id)
              ) {
                parents.push(k);
              }
            }
          }

          if (bundle.parent) {
            parents = parents.concat(getParents(bundle.parent, id));
          }

          return parents;
        }

        function hmrApply(bundle, asset) {
          var modules = bundle.modules;

          if (!modules) {
            return;
          }

          if (modules[asset.id] || !bundle.parent) {
            var fn = new Function(
              "require",
              "module",
              "exports",
              asset.generated.js
            );
            asset.isNew = !modules[asset.id];
            modules[asset.id] = [fn, asset.deps];
          } else if (bundle.parent) {
            hmrApply(bundle.parent, asset);
          }
        }

        function hmrAccept(bundle, id) {
          var modules = bundle.modules;

          if (!modules) {
            return;
          }

          if (!modules[id] && bundle.parent) {
            return hmrAccept(bundle.parent, id);
          }

          var cached = bundle.cache[id];
          bundle.hotData = {};

          if (cached) {
            cached.hot.data = bundle.hotData;
          }

          if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
            cached.hot._disposeCallbacks.forEach(function(cb) {
              cb(bundle.hotData);
            });
          }

          delete bundle.cache[id];
          bundle(id);
          cached = bundle.cache[id];

          if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
            cached.hot._acceptCallbacks.forEach(function(cb) {
              cb();
            });

            return true;
          }

          return getParents(global.parcelRequire, id).some(function(id) {
            return hmrAccept(global.parcelRequire, id);
          });
        }
      },
      {}
    ]
  },
  {},
  [
    "../node_modules/parcel-bundler/src/builtins/hmr-runtime.js",
    "components/App.js"
  ],
  null
);
//# sourceMappingURL=/App.98f4d852.map
